;;; -*- Base: 10; Lowercase: Yes; Mode: Lisp; Package: tv; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
(defvar *keypad-color-setups* (make-hash-table))
(defvar *keypad-setups* (make-hash-table))
(defvar *keypad-layouts* (make-hash-table))

(puthash nil nil *keypad-color-setups*)
(puthash :default
	 `((:char-aluf 1.0 1.0 1.0)
	   (:erase-aluf 0.1 0.1 0.1)
	   (:digit 0.15 0.15 0.15)
	   (:period 0 0 0.3)
	   (:enter 0.0 0.4 0.0)
	   (:negate 0 0 0.3)
	   (:rubout 0.3 0 0)
	   (:clear 0.3 0 0)
	   (:abort 0.4 0 0)
	   (:unavailable 0.15 0.15 0.15)
	   (:button 0.3 0.3 0.3)
	   (:field1 0 .3 .7)
	   (:field2 0 .3 .7)
	   )
	 *keypad-color-setups*)

(puthash :frame-field-number			;calculator style keypad
	 `(((:digit "7" 7)
	    (:digit "8" 8)
	    (:digit "9" 9)
	    (:abort "Abort"))
	   ((:digit "4" 4)
	    (:digit "5" 5)
	    (:digit "6" 6)
	    (:clear "clear"))
	   ((:digit "1" 1)
	    (:digit "2" 2)
	    (:digit "3" 3)
	    (:rubout "del"))
	   ((:field1 "f1" )
	    (:digit "0" 0)
	    (:field2 "f2")
	    (:enter "enter")))
	 *keypad-layouts*)

(puthash nil nil *keypad-setups*)
(puthash :default
	 `(:layout :calculator
	   :max-value nil
	   :min-value nil
	   :base 10.
	   :allow-floatp t
	   :allow-negative t
	   :allow-typein t
	   :percent nil
	   :label nil
	   :char-aluf ,alu-ior
	   :erase-aluf ,alu-andca
	   :colors :default
	   :key-array-fraction 0.8
	   )
	 *keypad-setups*)

(puthash :phone   ;telephone style keypad
	 `(((:digit "1" 1)
	    (:digit "2" 2)
	    (:digit "3" 3)
	    (:abort "Abort"))
	   ((:digit "4" 4)
	    (:digit "5" 5)
	    (:digit "6" 6)
	    (:clear "clear"))
	   ((:digit "7" 7)
	    (:digit "8" 8)
	    (:digit "9" 9)
	    (:rubout "del"))
	   ((:negate "-" )
	    (:digit "0" 0)
	    (:period "." #\D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB").0 )
	    (:enter "enter")))
	 *keypad-layouts*)
(puthash :calculator			;calculator style keypad
	 `(((:digit "7" 7)
	    (:digit "8" 8)
	    (:digit "9" 9)
	    (:abort "Abort"))
	   ((:digit "4" 4)
	    (:digit "5" 5)
	    (:digit "6" 6)
	    (:clear "clear"))
	   ((:digit "1" 1)
	    (:digit "2" 2)
	    (:digit "3" 3)
	    (:rubout "del"))
	   ((:negate "-" )
	    (:digit "0" 0)
	    (:period "." #\. )
	    (:enter "enter")))
	 *keypad-layouts*)
(puthash :hex-calculator			;keypad with hex keys
	 `(((:digit "A" 10)
	    (:digit "B" 11)
	    (:digit "C" 12)
	    (:digit "D" 13)
	    (:digit "E" 14)
	    (:digit "F" 15)
	    )
	   ((:digit "5" 5)
	    (:digit "6" 6)
	    (:digit "7" 7)
	    (:digit "8" 8)
	    (:digit "9" 9)
	    (:abort "Abort")
	    )
	   ((:digit "0" 0)
	    (:digit "1" 1)
	    (:digit "2" 2)
	    (:digit "3" 3)
	    (:digit "4" 4)
	    (:clear "clear"))
	   ((:negate "-" )
	    (:period "." #\. )
	    (:rubout "del")
	    (:enter "enter")))
	 *keypad-layouts*
	 )
;;
;; These parameters are used by default by CHOOSE-NUMBER, so the state
;; of a pop-up keypad is unaffected by any previous use of the same 
;; window resource.  This list includes all the significant settable state.  
;;



(defun list-of-hash-keys (ht &optional sort)
  (let (keys)
    (maphash #'(lambda (key ignore) (push key keys)) ht)
    (when sort (sort keys (if (eq sort t) #'string-lessp sort)))
    keys))

(defmacro instantiate-default (default-list hash-source)
  `(if (symbolp ,default-list)
       (multiple-value-bind (val found)
	   (gethash ,default-list ,hash-source)
	 (if found
	     val
	     (ferror "~&~S isn't a known setup in ~S, try one of ~% ~L~%"
		     ,default-list ',hash-source (list-of-hash-keys ,hash-source))))
       ,default-list))

(defflavor keypad-mixin
	((current-value nil)			;The current value displayed.

	 (layout :calculator)
	 (layout-list)

	  n-rows				;  in the key array.
	  row-height				;Height of each row, in pixels.
	  first-row				;Position of top of first row, in pixels.
	  (key-array-fraction 0.8)

	  column-widths				;column-width per row

	  (max-value nil)
	  (min-value nil)
	  (base 10.)

	  (video-field :field1)
	  (sign 1)
	  (allow-floatp t)
	  (allow-negative t)
	  (percent)
	  (current-value-end )
	  (allow-typein t)
	  (colors :default)
	  )
	(basic-mouse-sensitive-items)
  (:required-flavors sheet)
  (:conc-name keypad)
  :readable-instance-variables
  :initable-instance-variables
  (:default-init-plist
    :item-type-alist '((:digit (t t t) "Enter this digit into the current value")
		       (:period (t t t) "Enter a Decimal Point")
		       (:typein (t t t) "Enter a number from the keyboard")
		       (:clear (0 :nil :initial-value)
			"L: set value to 0  M: set value to NIL  R: reset value to initial value")
		       (:enter (t t t) "Return the current value")
		       (:negate (t t t) "Negate the entry value")
		       (:rubout (t t t) "Remove the most recent digit")
		       (:abort (t t t) "Abort - return the initial value")
		       (:field1 (t t t) "Select Video Field 1")
		       (:field2 (t t t) "Select Video Field 2")
		       )
    :label nil
    :save-bits t
    :border-margin-width 1
    :borders 2
    ))



;;
;; Window system nonsense - random messages to make this integrate better
;;
(defmethod (:init keypad-mixin :after) (ignore)
  (set-parameters self :refresh nil))

(defmethod (:change-of-size-or-margins keypad-mixin :after) (&rest ignore)
  (set-parameters self :refresh nil))

(defmethod (:refresh keypad-mixin :after) (&optional type)
  (when (or (not restored-bits-p) (eq type ':size-changed))
    (if restored-bits-p (send self ':clear-window))
    (draw-all self)))

(defmethod (:name-for-selection keypad-mixin) ()
  (send self :name))

(defwhopper (:handle-mouse keypad-mixin) ()
  (let ((Mouse-double-click-time nil))
    (continue-whopper)))

(defmethod (:mouse-click keypad-mixin) (button x y &aux item)
  ;; this is a slight extension to basic-mouse-sensitive-items,
  ;; which permits the "default action" to be a list of
  ;; left, right, middle actions.
  (cond ((setq item (send self ':mouse-sensitive-item x y))
	 (let ((item-type (typeout-item-type item)))
	   (cond ((setq item-type (assq item-type item-type-alist))
		  (let* ((item-choices (cadr item-type))
			 (chosen-item (when (listp item-choices) 
					(selector button si:char-mouse-equal
					  (#\mouse-l (first item-choices))
					  (#\mouse-m (second item-choices))
					  (#\mouse-r (third item-choices))))))
		    (when chosen-item
		      (send self ':force-kbd-input
			    (list ':typeout-execute chosen-item
				  (typeout-item-item item))))
		    )))))))

;;
;; Given the new parameters, reset all the derived values
;;
;; This accepts all the init keywords of the flavor, and will
;; complain about any others.
;;
(defmethod (set-parameters keypad-mixin)
	   (&rest parameters &key default-parameters &allow-other-keys)

  (let ((refresh t)
	(label :unspec)
	(reverse-video :unspec)
	initial-value)
    (ignore initial-value)
    (setq default-parameters (instantiate-default default-parameters *keypad-setups*))

    (keyword-extract (append default-parameters parameters) thiskey
		     (base layout max-value min-value percent default-parameters
			   allow-floatp allow-negative allow-typein video-field
			   refresh initial-value colors label
			   char-aluf erase-aluf reverse-video
			   key-array-fraction
			   )
		     ()
      (t (unless (member (first thiskey)
			 (flavor:flavor-allowed-init-keywords (typep self)))
	   (ferror "~S isn't an init keyword for ~S"
		   (first thiskey) self))
	 (pop thiskey)))

    (setq colors (instantiate-default colors *keypad-color-setups*))

    (unless (eq label :unspec)
      (send self :set-label label))
    
    (when (neq reverse-video :unspec)
      (send self :set-reverse-video-p reverse-video))
    
    (when ( base 10.)
      (setq allow-floatp nil))
    
    (unless allow-negative
      (setq min-value (max (or min-value 0) 0)))
    
    (when (and min-value ( min-value 0))
      (setq allow-negative nil))
    
    (when (and colors
	       (> (send screen :bits-per-pixel) 2)
	       (send screen :operation-handled-p :compute-color-alu)
	       )
      (let* ((char (cdr (assoc :char-aluf colors)))
	     (erase (cdr (assoc :erase-aluf colors))))
	(when char (lexpr-send screen :compute-color-alu char-aluf char))
	(when erase (lexpr-send screen :compute-color-alu erase-aluf erase))))

    (let ((new-layout (instantiate-default layout *keypad-layouts*))
	  (limit-string (when (or min-value max-value)
			  (with-output-to-string (str)
			    (when min-value (format str "Min ~A " min-value))
			    (when max-value (format str "Max ~A" max-value))))))
      
      (when new-layout
	
	(when (> base 10.)
	  ;if the base is too big, assure the basic hex digits are available
	  (unless (loop for line in new-layout
			thereis
			  (loop for (type nil val) in line
				thereis (and (eq type :digit)
					     (>= val 10))))
	    (push `((:digit "A" 10)
		    (:digit "B" 11)
		    (:digit "C" 12)
		    (:digit "D" 13)
		    (:digit "E" 14)
		    (:digit "F" 15)
		    )
		  new-layout)))
	
	(when limit-string
	  (setq new-layout (append new-layout `(((:blank ,limit-string))))))
	
	(setq layout-list new-layout
	      column-widths (loop with iw = (sheet-inside-width)
				  for row in layout-list
				  collect (// iw (length row)))
	      n-rows (length layout-list)
	      first-row (max 20. (fix (* (sheet-inside-height)
					 (- 1.0 key-array-fraction))))
	      row-height (// (- (sheet-inside-height) first-row) n-rows)
	      )
	
	(when (or (eq refresh :forced)
		  (and refresh (or exposed-p (send self :save-bits))))
	  (sheet-force-access (self)
	    (send self :refresh)))
	))))

;;
;; Redraw the display
;;
(defmethod (draw-all keypad-mixin) ()
  
  (send self ':clear-window)
  (setq item-list nil)
  
  ;;thick line between the value and the keypad
  (send self :draw-rectangle (send self :inside-width) 3 0 (- first-row 3))
  (when allow-typein
    (send self :primitive-item :typein '(:typein)
	  2 2 (- (sheet-inside-width) 2) (- first-row 5)))
  
  ;; Draw the buttons themselves, and make them mouse-sensitive.
  (let ((base base)
	(color-screen (and (> (send screen :bits-per-pixel) 2)
			   (send screen :operation-handled-p :compute-color-alu)))
	(hack-alu (color:sc-fill-alu -1 -1))
	color)

    (loop with ellipse-height = (fix (// row-height 2.2))
	  and button-y-offset = (// row-height 2)
	  for sublist in layout-list
	  for column-width in column-widths
	  as ellipse-width = (fix (// column-width 2.5))
	  as button-x-offset = (// column-width 2)
	  for y-pos from first-row by row-height
	  do
      (loop for item in sublist
	    as (type key-value key-digit) = item
	    for x-pos from 0 by column-width
	    as item-left = (- (+ x-pos button-x-offset) ellipse-width)
	    as item-top = (- (+ y-pos button-y-offset) ellipse-height)
	    as item-right = (+ x-pos button-x-offset ellipse-width 2)
	    as item-bottom = (+ y-pos button-y-offset ellipse-height 2)
	    as short-string = ( (string-length key-value) 1)
	    do
	(selectq type
	  (:blank
	   (when key-value
	     (send self :display-x-y-centered-string key-value
		   x-pos y-pos (+ x-pos column-width) (+ y-pos row-height)))
	   )
	  (t 
	   (if  (or (and (eq type :digit)
			 ( key-digit base))
		    (and (eq type :period) (null allow-floatp))
		    (and (eq type :negate) (null allow-negative)))
		
		(progn 
		  (setq type :blank)
		  (send self :draw-1-bit-raster
			column-width row-height
			5.5%-gray 0 0
			x-pos y-pos color:alu-ior
			(if (and color-screen
				 (setq color (cdr (assoc :unavailable colors))))
			    (lexpr-send screen :compute-color-alu hack-alu color)
			    color:alu-noop)))

		(when (and color-screen (setq color (cdr (assoc type colors))))
		  (send self :draw-rectangle
			column-width row-height
			x-pos y-pos
			(lexpr-send screen :compute-color-alu hack-alu color)))
		
		(if short-string

		    (progn
		      (if (and color-screen (setq color (cdr (assoc :button colors))))
			  
			  (progn
			    (send self :draw-filled-in-simple-ellipse
				  (+ x-pos button-x-offset) (+ y-pos button-y-offset)
				  ellipse-width ellipse-height
				  (lexpr-send screen :compute-color-alu hack-alu color))
			    (send self :draw-simple-ellipse
				  (+ x-pos button-x-offset) (+ y-pos button-y-offset)
				  ellipse-width ellipse-height erase-aluf))
			  
			  (send self :draw-simple-ellipse
				(+ 1 x-pos button-x-offset) (+ 1 y-pos button-y-offset)
				ellipse-width ellipse-height)
			  
			  (send self :draw-simple-ellipse
				(+ x-pos button-x-offset) (+ y-pos button-y-offset)
				ellipse-width ellipse-height))
		
		      (send self :primitive-item type item
			    item-left item-top item-right item-bottom))
		    (send self :primitive-item type item
			  x-pos y-pos (+ x-pos column-width) (+ y-pos row-height)))
		)
	   
	   (if short-string
	       (si:with-character-style ('(nil :bold nil) self )
		 (send self ':display-x-y-centered-string
		       (format nil "~A" key-value)
		       x-pos y-pos (+ x-pos column-width) (+ y-pos row-height)))
	       (si:with-character-style ('(nil nil :smaller) self )
		 (send self ':display-x-y-centered-string
		       (format nil "~A" key-value)
		       x-pos y-pos (+ x-pos column-width) (+ y-pos row-height))))
	   )))))
  (mouse-wakeup)
  (draw-current-value self)
  
  )

;;
;; Convert the current value to a string. If zero-suppress, we are
;; about to enter the input editor, so suppress leading zero and
;; trailing %
;;
(defmethod (current-value-to-string keypad-mixin) (&optional zero-suppress)
  (with-output-to-string (out)
    (when (> base 10.)
      (format out "#X"))
    (when (minusp sign)
      (format out "-"))
    (IF (null current-value)
	(if zero-suppress "" "NIL")
	
	(unless (and zero-suppress
		     (or (equal '(#\0) current-value)
			 (equal '(0) current-value)))
	  (loop for i in (reverse current-value)
		do
	    (when (fixp i)
	      (setq i (character
			(if (> i 9)
			    (+ (char-code #\A)
			       (- i 10))
			    (+ (char-code #\0)
			       i)))))
	    (send out :tyo i))))

    (setq current-value-end (send out :read-cursorpos))

    (when (and (not zero-suppress)
	       (eq layout :frame-field-number)
	       (eq video-field :field2))
      (format out " +"))
    (when (and percent (not zero-suppress))
      (format out (cond ((eq percent t) " %")
			((stringp percent) percent)
			)))
	))

(defmethod (string-to-current-value keypad-mixin) (val)
  (with-input-from-string (in val)
    (setq current-value nil sign 1)
    (when val
      (loop as chr = (send in :tyi)
	    while chr
	    if (char-equal chr #\-)
	      do (progn (setq sign (- sign))
			(unless current-value (push `#\0 current-value)))
	    else do (push chr current-value)))
    (let ((real-val (current-value-to-value self)))
      (cond ((numberp real-val)
	     (setq sign (if (minusp real-val) -1 1)))
	    (t (setq current-value nil))))
    ))

;;
;; Convert the current value to a number.
;;
(defmethod (current-value-to-value keypad-mixin) (&optional any-number (zero-suppress nil))
  (let* ((ibase base)
	 (val (catch-error
		(read-from-string (current-value-to-string self zero-suppress)
				  nil 0 current-value-end)
			   nil)))
    (cond ((or (null val)
	       (and (symbolp val)(string-equal (string val) "-.")))
	   nil)
	  ((not (numberp val))
	   (beep)
	   nil)
	  (any-number val)
	  ((and max-value (> val max-value)) max-value)
	  ((and min-value (< val min-value)) min-value)
	  (t val))))

;;
;; Draw the current value onto the window in the appropriate place.
;;
(defmethod (draw-current-value keypad-mixin) ()
  (send self :set-cursorpos 0 0)
  (send self :draw-rectangle
	(sheet-inside-width) (- first-row 3) 0 0 erase-aluf)
  (with-character-style ('(nil :bold :larger) self)
    (send self :display-x-y-centered-string (current-value-to-string self)
	  0 0 (sheet-inside-right) (- first-row 3)
    )))

;;; Interactive command handler.
(defmethod (choose-value keypad-mixin) (&key (initial-value )
					     (expose-p t)
					     (select-p t)
					     (warp-mouse t)
					     (zoom t)
					     (final-action nil)
					     (loop nil)
					     (exit-function nil)
					     (label)
					     (keystroke-function nil))
  (when label
    (send self :set-label (if (eq label :none) nil label)))
  (let (string-initial-value sign-initial-value locative (chars-in initial-value))

    (labels ((push-value (item)
						; push a new character onto the current value
						; if the new value is out of bounds, pop it and beep
	       (let ((zero-item (or (equal current-value '(#\0))
				    (equal current-value '(0)))))
		 (when (and (not (minusp sign))
			    zero-item)
		   (setq current-value nil))
		 (setq chars-in t)
		 (unless (and zero-item (or (eql item #\0) (eql item 0)))
		   (push item current-value)))
	       (unless (test-value)
		 (pop-value)
		 (beep))
	       (draw-current-value self)
	       )
	     
	     (test-value ()
						; test if the new current value still falls into bounds
	       (not (let ((val (current-value-to-value self t (not chars-in))))
		      (when keystroke-function
			(setq val
			      (if (listp keystroke-function)
				  (cl:apply (car keystroke-function)
					    val
					    (cdr keystroke-function))
				  (funcall keystroke-function val))))
		      (and (numberp val)
			   max-value
			   (> val max-value))
						; we can't enforce min-value!
		      )))
	     
	     (pop-value ()
						; delete the last character from the current value
	       (pop current-value)
	       (when (null current-value)
		 (setq current-value `(0)))
	       (draw-current-value self)
	       )
	     (set-current-value ()
	       (when (locativep initial-value)
		 (setq locative initial-value
		       initial-value (location-contents initial-value)))
	       (if (and (numberp initial-value) (minusp initial-value))
		   (setq sign -1)
		   (setq sign 1))
	       (setq chars-in initial-value)
	       (string-to-current-value
		 self
		 (if initial-value
		     (format nil "~A" (abs initial-value))
		     nil))
	       (setq string-initial-value current-value
		     sign-initial-value sign)
	       (send self :clear-input)
	       (draw-current-value self))
	     (accept-typein ()
	       ;;
	       ;; this gets a bit hairy - conver the current value into a string
	       ;; and feed it to the input editor.  Take the result and push it back
	       ;; into the current value
	       ;;
	       ;; We play tricks with the bottom margin to prevent the main calculator
	       ;; from getting trashed.  We also hack the selected window to outselves
	       ;; and back where it came from - otherwise we get no input.
	       ;;
	       ;; If the input edit is preempted by a click, preserve the blip
	       ;; and feed it back in as the next command.
	       ;;
	       (let (val blip next-command term
		     (old-selected-window selected-window))
		 (unwind-protect
		     (letf ((bottom-margin-size
			      (- height (+ -3 first-row top-margin-size)))
			    (item-list nil))
		       (send self :clear-window)
		       (send self :set-cursorpos 0 (// (- first-row line-height 3) 2))
		       
		       (with-character-style ('(nil :bold :larger) self
					      :bind-line-height t)
			 (send self :select)
			 (multiple-value (val blip term)
			   (let ((*input-editor-options*
				   `((:initial-input ,(current-value-to-string self t))
				     (:suppress-notifications t)
				     (:preemptable :blip)
				     (:prompt "> ")
				     ,@*input-editor-options*)))
			     (with-input-editing (self :line)
			       (readline self))
			     )))
		       (cond ((eq blip :blip)
			      (setq next-command val
				    val (string-append
					  (symeval-in-instance
					    self 'si:input-editor-buffer)))
			      (send self :clear-input))
			     ((char-equal term #\abort)
			      (setq next-command `(:typeout-execute nil (:abort))))
			     ((char-equal term #\end)
			      (setq next-command `(:typeout-execute nil (:enter)))))

		       (when val
			 (setq chars-in t)
			 (string-to-current-value self val))
		       next-command)
		   (when (and (eq self selected-window)
			      (neq self old-selected-window))
		     (send old-selected-window :select nil)))
		 )))	     
      
      (using-window (self :expose-p expose-p :select-p select-p
			  :zoom zoom :warp-mouse warp-mouse :final-action final-action)
	
	(loop initially
		(set-current-value)
	      as command = (or next-command (send self :any-tyi))
	      as next-command = nil		;can come from preempt exit of typein
	      do

	  (when (nlistp command)

	    (if (char-equal command #\abort)
		(setq command `(:typeout-execute nil (:abort)))
		(when allow-typein
		  ;a regular character - add it to the value, then enter typein
		  (send self :untyi command))
		(setq command `(:typeout-execute nil (:typein)))))

	  (selectq (first command)
	    (:new-initial-value
	     ;;
	     ;; (:NEW-INITIAL-VALUE <<initial-value>> <<:abort or nil>> <<label>>)
	     ;;
	     (when (and locative (neq (third command) :abort))
	       (setf (location-contents locative)
		     (current-value-to-value self nil t)))
	     (setq initial-value (second command)
		   label (fourth command)
		   locative nil)
	     (when label
	       (send self :set-label (if (eq label :none) nil label)))
	     (set-current-value)
	     )
	    (:set-parameters
	     ;;
	     ;; (:SET-PARAMETERS &rest keywords)
	     ;;
	     (cl:apply #'set-parameters self (cdr command)))
	    (:typeout-execute 
						;these blips come from the mouse items
	     (destructuring-bind (type nil item) (third command)
	       (selectq type
		 (:digit
		  (push-value item))
		 (:period
		  (let ((old-current-value current-value))
		    (setq current-value (remove item current-value ))
		    (setq chars-in t)
		    (if (test-value)
			(push-value item)
			(setq current-value old-current-value)
			(beep)
			(draw-current-value self)))
		  )
		 (:clear
		  (setq sign 1)
		  (setq chars-in t)
		  (setq current-value
			(selector (second command) eql
			  (0 `(0))
			  (:nil nil)
			  (:initial-value
			    (setq sign sign-initial-value)
			    string-initial-value)))
		  (draw-current-value self))
		 (:enter
		  (setq command :exit)
		  )
		 (:negate
		  (setq sign (- sign))
		  (when (null current-value)
		    (setq chars-in t)
		    (setq current-value '(0)))
		  (if (test-value)
		      (draw-current-value self)
		      (setq sign (- sign))
		      (beep))
		  )
		 (:field1 (when current-value
			    (setq video-field :field1)
			    (draw-current-value self)))
		 (:field2 (when current-value
			    (setq video-field :field2)
			    (draw-current-value self)))
		 (:rubout
		  (pop-value)
		  (setq chars-in current-value)
		  )
		 (:abort
		  (setq command :abort))
		 (:typein
		  (if (null allow-typein)
		      (beep)
		      (setq next-command (accept-typein))
		      (draw-current-value self)))
		 (t (ferror "unexpected item ~A" (third command)))
		 )
	       )
	     )
	    (:mouse-button
	     (selectq (second command)
	       (#\mouse-r
		(tv:menu-choose
		  `(("Configure" :value :config)
		    ("" :no-select :no-select)
		    ("Simple Slider" :value :simple-slider)
		    ("Fancy Slider" :value :fancy-slider))))
	       (t (beep))
	       ))
	    (t (beep))
	    )
	      when (member command '(:exit :abort))
		do
		  (let* ((old-current-value current-value)
			 (old-sign sign)
			 (val (current-value-to-value self nil (not chars-in ))))
		    (if (eq command :abort)
			
			(progn (setq current-value nil
				     sign 1)
			       (return (values initial-value :abort)))
			
			(when locative
			  (setf (location-contents locative) val))
			
			(when exit-function
			  (setq val
				(if (listp exit-function)
				    (cl:apply (car exit-function)
					      val
					      (cdr exit-function))
				    (funcall exit-function val))))
			
			(if loop
			    (setq current-value old-current-value
				  string-initial-value old-current-value
				  sign old-sign
				  initial-value val)
			    
			    (setq current-value nil
				  sign 1)
			    (draw-current-value self)
			    (if (eq layout :frame-field-number)
				(return (values val video-field))
				(return (values val)))))
		    )
		  ))
      )))


(defflavor keypad-window () (keypad-mixin top-box-label-mixin window)
  (:default-init-plist :save-bits :delayed))

(defflavor temporary-keypad-window ()
	   (temporary-window-mixin drop-shadow-borders-mixin keypad-window))


(defmethod (:deexpose temporary-keypad-window :after) (&rest ignore)
  (send self :force-kbd-input #\abort))

(compile-flavor-methods keypad-window temporary-keypad-window)

(defwindow-resource temporary-keypad-resource ()
  :make-window (temporary-keypad-window)
  )

;;
;; This is like menu-choose, but accepts a number
;; It is also unlike menu-choose in that it fully
;; initializes the window it uses
;;
(defun choose-number (&rest args)
  (let (window superior initial-value
	(default-parameters :default)
	(expose-p :unspecified)
	(warp-mouse :unspecified)
	(zoom :unspecified)
	(select-p :unspecified)
	(keystroke-function :unspecified)
	(exit-function :unspecified)
	(loop :unspecified)
	(final-action :unspecified)
	(width 150)
	(height 150)
	other-keys)
    (labels ((choose-number-internal (window)
	       (lexpr-funcall #'set-parameters window other-keys)
			    (lexpr-funcall
			      #'choose-value window
			      :initial-value initial-value
			      `(,@(when (neq expose-p :unspecified)
				    `(:expose-p ,expose-p))
				,@(when (neq select-p :unspecified)
				    `(:select-p ,select-p))
				,@(when (neq zoom :unspecified)
				    `(:zoom ,zoom))
				,@(when (neq warp-mouse :unspecified)
				    `(:warp-mouse ,warp-mouse))
				,@(when (neq loop :unspecified)
				    `(:loop ,loop))
				,@(when (neq keystroke-function :unspecified)
				    `(:keystroke-function ,keystroke-function))
				,@(when (neq exit-function :unspecified)
				    `(:exit-function ,exit-function))
				))
	       ))

      (keyword-extract args this-key
		       (default-parameters
			 window select-p expose-p warp-mouse zoom
			 loop exit-function keystroke-function
			 superior initial-value 
			 width height) ()
	(t (push (pop this-key) other-keys)
	   (push (first this-key) other-keys)))

      (setq other-keys (nreverse other-keys))
      (if window

	  (progn (when (neq final-action :unspecified)
		   (setq other-keys `(:final-action ,final-action @other-keys)))
		 (choose-number-internal window))

	  (unless superior (setq superior mouse-sheet))
	  (using-resource (win temporary-keypad-resource superior)
	    (unwind-protect
		(progn (setq other-keys `(:default-parameters ,default-parameters
					  ,@other-keys))

		       (multiple-value-bind (s-width s-height)
			   (send superior :inside-size)
			 (when (floatp width)
			   (setq width (round (* width s-width))))
			 (when (floatp height)
			   (setq height (round (* height s-height))))

			 (send win :set-size
			       (min s-width width)
			       (min s-height height)
			       ))

		       (choose-number-internal win))
	      (send win :deactivate))))
      )))

(defprop :CHOOSE-NUMBER
	 (princ
	   (choose-number-for-cvv)
	   nil nil nil "a number")
	 tv:choose-variable-values-keyword)

(defun choose-number-for-cvv (window)
  (let* ((stack (send window :stack-group))
	 (item (send window :item-value
		     (+ (send window :top-item)
			(multiple-value-bind (nil y)
			    (send window :read-cursorpos :character)
			  y))))
	 (str (if (eq (second item) :choose-number)
		  (first item)
		  (second item)))
	 (var (first item))
	 (val (IF (SYMBOLP VAR) (SYMEVAL-IN-STACK-GROUP VAR STACK) (CAR VAR))))

    ;; the above set up is a complete kludge, cribbed from CVV.
    ;; this stuff should be easily accessable!

    (lexpr-funcall #'choose-number
		   :label (format nil "Value for ~A" str)
		   :initial-value val
		   (cdr (member :choose-number item))
		 )))
