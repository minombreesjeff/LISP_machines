;;; -*- Syntax: Common-Lisp; Package: USER; Base: 10; Mode: LISP -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
;;; ------------------------------------------------------------------------------------------
;;;
;;;
;;; The basic idea here is to provide a simple way to ask a yes/no question using a menu.
;;; This differs from tv:mouse-y-or-n-p in that it is intended to work just as well for
;;; verbose questions that might span multiple lines of text, primarily by virtue of the
;;; fact that the text is put into the "label" of the menu.  The yes/no choices are the
;;; menu items, arrayed horizontally across the bottom of the menu.  EG:
;;;
;;;                +-------------------------------------------------+
;;;                | Warning: frobbing 285 widgets with bogosity 37% |
;;;                | which exceeds prescribed widget/bogosity ratio. |
;;;                |                                                 |
;;;                | OK to proceed?                                  |
;;;                |-------------------------------------------------|
;;;                |              yes                no              |
;;;                +-------------------------------------------------+
;;;
;;; However within this model, the functions and their keyword arguments allow the standard
;;; "more flexibility than you can shake a stick at".  It is anticipated that the keyword
;;; arguments will almost never be needed.  Hence typical calls would be like one of these:
;;;
;;;     (tv:confirmation-menu D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")string0)
;;;
;;;     (tv:with-confirmation-menu-stream (1s0)
;;;       1...forms which do output to stream "s"...0)
;;;
;;; For example:
;;;
;;;     (tv:confirmation-menu "OK to start second pass?")
;;;
;;;     (tv:with-confirmation-menu-stream (confirmation-stream)
;;;       (with-character-style ('(nil :bold nil) confirmation-stream)
;;;         (format confirmation-stream "~%WARNING!~%"))
;;;       (format confirmation-stream "~%  ~d foos and ~d bars" foo bar)
;;;       (format confirmation-stream "~%  Continue?"))
;;;
;;;
;;; Calling sequences:
;;;
;;;     (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")tv:confirmation-menu1 query-string 0&key 1...options...
0;;;
;;; Where 1query-string0 is the text of the query to be presented to the user.
;;;
;;;     2tv:with-confirmation-menu-stream0 (1query-stream0 &key 1...options...0) &body1 body
0;;;
;;; Where 1query-stream0 is a variable to be bound to a stream (as in with-output-to-string).
;;; the text of the query presented to the user is created by forms in 1body0 which do output
;;; to 1query-stream0.
;;;
;;; And in both cases, the 1options0 are any of these keyword arguments:
;;;
;;;     2:initial-response0  The "suggested respeonse", same idea as the default-item argument
;;;                        to tv:menu-choose, mouse is initially positioned over this item.
;;;                        Defaults to T.
;;;
;;;     2:if-no-response0    This value is returned if the user declines to select a choice by
;;;                        moving off the menu.  Defaults to nil.
;;;
;;;     2:superior0          Window to be used as superior of menu.  Defaults to mouse's sheet.
;;;
;;;     2:menu-resource0     Resource from which to allocate menu.  Default: tv:momentary-menu.
;;;
;;;     2:menu-instance0     Menu instance to use.  Defaults to allocation from resouce.
;;;
;;;     2:yes-value0         Lisp object associated with YES response.  Defaults to T.
;;;     2:no-value0          Lisp object associated with NO response.  Defaults to nil.
;;;
;;;     2:yes-string0        String associated with YES response.  Defaults to " yes ".
;;;     2:no-string0         String associated with NO response.  Defaults to " no ".
;;;
;;;     2:yes-doc0           Mouse doc, default: (3 0 (NIL 0) (NIL :CONDENSED NIL) "CPTFONTC")" YES:  Click here to answer yes to this query."
0;;;     2:no-doc0            Mouse doc, default: 3" NO:  Click here to answer no to this query."
0;;;
;;;     2:yes-item0          Menu item for YES, defaults from value, string, and doc args.
;;;     2:no-item0           Menu item for NO, defaults from value, string, and doc args.
;;;
;;;     2:item-list0         Menu item list, defaults from :yes-item and :no-item args.
;;;
;;;
;;; ------------------------------------------------------------------------------------------


(defun 2tv:confirmation-menu
0       (query-string
	&key
	(initial-response t)
	(if-no-response   nil)
	(superior         (tv:mouse-default-superior))
	(menu-resource    'tv:momentary-menu)
	(menu-instance    nil)
	(yes-value        t)
	(no-value         nil)
	(yes-string       " yes ")
	(no-string        " no ")
	(yes-doc          " YES:  Click here to answer yes to this query.")
	(no-doc           " NO:  Click here to answer no to this query.")
	(yes-item         (list yes-string :value yes-value :documentation yes-doc))
	(no-item          (list no-string :value no-value :documentation no-doc))
	(item-list        (list yes-item no-item))
	)
  (let* ((item-list (cl:remove nil item-list))
	 (default-item (loop for item in item-list
			     when (eql initial-response
				       (tv:menu-execute-no-side-effects item))
			       do (return item))))
    (flet ((pop-up (menu)
	     (send menu :set-geometry (length item-list) 1)
	     (send menu :set-superior superior)
	     (send menu :set-item-list item-list)
	     (send menu :set-label query-string)
	     (send menu :set-last-item default-item)
	     (tv:expose-window-near menu '(:mouse))
	     (multiple-value-bind (choice item) (send menu :choose)
	       (if item choice if-no-response))))
      (if menu-instance
	  (pop-up menu-instance)
	  3;;
0	  3;; The next form is based on a macro expansion of:
0	  3;;
0	  3;;   (USING-RESOURCE (MENU menu-resource SUPERIOR)
0	  3;;     (POP-UP MENU))
0	  3;;
0	  (LET (MENU
		SI:.RESOURCE-DESCRIPTOR.)
	    (UNWIND-PROTECT (PROGN (ZL:MULTIPLE-VALUE (MENU SI:.RESOURCE-DESCRIPTOR.)
				     (ALLOCATE-RESOURCE menu-resource SUPERIOR))
				   (POP-UP MENU))
	      (WHEN MENU
		(DEALLOCATE-RESOURCE menu-resource MENU SI:.RESOURCE-DESCRIPTOR.))))))))


(defmacro 2tv:with-confirmation-menu-stream0 
	  ((query-stream
	     &key
	     (initial-response t)
	     (if-no-response   nil)
	     (superior         '(tv:mouse-default-superior))
	     (menu-resource    ''tv:momentary-menu)
	     (menu-instance    nil)
	     (yes-value        t)
	     (no-value         nil)
	     (yes-string       " yes ")
	     (no-string        " no ")
	     (yes-doc          " YES:  Click here to answer yes to this query.")
	     (no-doc           " NO:  Click here to answer no to this query.")
	     (yes-item         `(list ,yes-string :value ,yes-value :documentation ,yes-doc))
	     (no-item          `(list ,no-string :value ,no-value :documentation ,no-doc))
	     (item-list        `(list ,yes-item ,no-item)))
	   &body body)
  `(tv:confirmation-menu (with-output-to-string (,query-stream)
			   ,@body)
			 :initial-response ,initial-response
			 :if-no-response   ,if-no-response
			 :superior         ,superior
			 :menu-resource    ,menu-resource
			 :menu-instance    ,menu-instance
			 :yes-value        ,yes-value
			 :no-value         ,no-value
			 :yes-string       ,yes-string
			 :no-string        ,no-string
			 :yes-doc          ,yes-doc
			 :no-doc           ,no-doc
			 :yes-item         ,yes-item
			 :no-item          ,no-item
			 :item-list        ,item-list))


;;; ------------------------------------------------------------------------------------------

