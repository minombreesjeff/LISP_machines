;;; -*- Mode: LISP; Syntax: Common-lisp; Package: X-SCREEN; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defsubst rgb->xcolor (rgb)
  (xlib:make-color :red (/ (ldb (byte 8 0) rgb) 255.0)
		   :green (/ (ldb (byte 8 8) rgb) 255.0)
		   :blue (/ (ldb (byte 8 16) rgb) 255.0)))

(defsubst xc->rgbc (xc)
  (min 255 (round (* xc 255.0))))

(defsubst xcolor->rgb (xcolor)
  (sys:dpbs (xc->rgbc (xlib:color-blue xcolor)) (byte 8 16)
	    (xc->rgbc (xlib:color-green xcolor)) (byte 8 8)
	    (xc->rgbc (xlib:color-red xcolor))))

(defflavor x-screen-colorcompat-mixin
	((color:control (color:make-sc-control))	;Two dummy controls
	 (color:control-image (color:make-sc-control))
	 )
	(color:common-color-hardware-mixin color:simple-color-map-mixin
	 color:managed-map-mixin)
  (:default-init-plist :property-list '(:video :color))
  (:required-flavors x-screen))

(defmethod (:set-console x-screen-colorcompat-mixin :after) (console)
  (ignore console)
  (send self :new-color-map))

;;; NOTE: Only one map is supported here and in update-hardware-color-map, though
;;; the X protocol could actually support any number of them.
(defmethod (:color-map-description x-screen-colorcompat-mixin) (&optional image)
  (declare (ignore image))
  ;; Size of map, number of maps available, rgb dependent or independent, mode
  (values 256 1 :dependent :none))

(defmethod (color:update-hardware-color-map x-screen-colorcompat-mixin) (offset size)
  (when tv:console
    (let ((colormap (x-console-colormap tv:console)))
      (if (= size 1)
	  (let ((color (sys:%1d-aref color:color-map-image offset)))
	    (xlib:store-color colormap offset (rgb->xcolor color)))
	  (stack-let ((colors (make-array (* 2 size))))
	    (dotimes (i size)
	      (setf (aref colors (* 2 i)) i)
	      (setf (aref colors (1+ (* 2 i)))
		    (rgb->xcolor (sys:%1d-aref color:color-map-image i))))
	    (xlib:store-colors colormap colors))))))

(defmethod (:hardware-control-locs x-screen-colorcompat-mixin) (&rest ignore)
  (values nil nil nil))

(defmethod (:hardware-set-base-addresses x-screen-colorcompat-mixin) (&rest ignore)
  nil)

(defmethod (:put-sync-on-video x-screen-colorcompat-mixin) (&rest ignore)
  nil)

(defmethod (:set-base-addresses x-screen-colorcompat-mixin) (&rest ignore)
  nil)

(defmethod (:set-interlace x-screen-colorcompat-mixin) (&rest ignore)
  nil)

(defmethod (:beep x-screen-colorcompat-mixin) (&optional beep-type)
  "Beep the beeper."
  beep-type
  (cli::console-beep tv:console)
  nil)

(defmethod (:compute-rgb-alu x-screen-colorcompat-mixin)
	   (alu r g b &optional inv (perm 0))
  ;; Invert the sense of color intensity if requested
  (cond
    ((listp inv)
     (and (first inv) (setq r (- 1.0 r)))
     (and (second inv) (setq g (- 1.0 g)))
     (and (third inv) (setq b (- 1.0 b))))
    ((eq inv t)
	 (setq r (- 1.0 r))
	 (setq g (- 1.0 g))
	 (setq b (- 1.0 b))))
  ;; Permute the colors if requested
  (unless (zerop perm)
    (multiple-value-bind (div rem) (floor perm 3)
      (selector rem eql 
	(1 (psetq r g g r))
	(2 (psetq r b b r)))
      (selector div eql
	(1 (psetq g b b g)))))
  (send self ':combine-alu-and-data alu (send self ':compute-rgb-data r g b)))

(defflavor x-colorcompat-real-screen () (x-screen-colorcompat-mixin x-real-screen))

(defflavor x-colorcompat-who-line-screen () (x-screen-colorcompat-mixin x-who-line-screen))

(compile-flavor-methods x-colorcompat-real-screen x-colorcompat-who-line-screen)
