;;;-*- Mode: LISP; Package: COLOR; Base: 10 -*- 

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defflavor common-framegrab-mixin () ()
  (:required-flavors tv:sheet)
  (:required-methods :vertical-sync-p :sync-program grab-frame-loop))

(defmethod (:user-visible common-framegrab-mixin) () t)

(defmethod (:invisible-to-mouse-p common-framegrab-mixin) () t)

(defun default-grab-parameters (type)
  (get 'frame-grabber-setups type))

(cl:defsetf default-grab-parameters (type) (new-value)
  `(putprop 'frame-grabber-setups ,new-value ,type))

(defun frame-grabber-parameters-list (&optional type old-parameters bits-per-pixel)
  
  (let ((old-parameters (or old-parameters (default-grab-parameters type)))
	(bpp (or bits-per-pixel
		 (selectq type
		   ((:B&W :false-color) 8)
		   (t 32.)))))
    
    (labels ((init-parameter (name default)
	       (let ((val (locf (get (locf old-parameters) name))))
		 (unless (location-contents val)
		   (setf (location-contents val) default))
		 val)))
      
      (let* ((l-dx (init-parameter :dx 0))
	     (l-dy (init-parameter :dy 0))
	     (l-wdx (init-parameter :wdx 0))
	     (l-wdy (init-parameter :wdy 0))
	     (l-width (init-parameter :width nil))
	     (l-height (init-parameter :height nil))
	     (l-grab-gamma (init-parameter :grab-gamma 1))
	     (l-view-gamma (init-parameter :view-gamma 1))
	     (l-to-colors (init-parameter :to-colors
					  (if ( bpp 32.) :rgba :red)))
	     (colors (location-contents l-to-colors))
	     (from-field (init-parameter :from-field nil))
	     (to-field (init-parameter :to-field nil))	     
	     (l-sync-source (init-parameter :sync-source :external))
	     (l-grab-type (init-parameter :grab-type
					  (if ( bpp 23.) :FULL-COLOR
					      (if (and (listp colors)
						       ( (length colors) 3))
						  :FALSE-COLOR
						  :B&W))))
	     (l-grab-wait (init-parameter :grab t))
	     (l-alu (init-parameter :alu tv:alu-seta))
	     (l-colors (init-parameter
			 :colors (if (or (>= bpp 24.)
					 (= (location-contents l-alu) tv:alu-ior))
				     :rgb :ggg)))
	     (l-grab-color-map (init-parameter :grab-color-map
					       (if (and (eq colors :rgb)
							(< bpp 24.))
						   'color-separation-grab-hack
						   'ramp-color-map-value)))
	     (l-view-color-map (init-parameter :view-color-map
					       (if (and (eq colors :rgb)
							(< bpp 24.))
						   'color-separation-view-hack
						   'ramp-color-map-value)))
	     (l-zoom (init-parameter :zoom nil))
	     (choice-list
	       `((,l-dx "Frame grab X-offset" :number)
		 (,l-dy "Frame grab Y-offset" :number)
		 (,l-wdx "Destination X-offset" :number)
		 (,l-wdy "Destination Y-offset" :number)
		 (,l-width "Transfer width" :number)
		 (,l-height "Transfer height" :number)
		 (,l-zoom "Zoom Window to fill screen" :boolean)
		 (,l-sync-source "Sync source" :assoc
		  (("Sync from external source" . :external)
		   ("Sync from internal clock" . :internal)))
		 (,l-grab-type "Type of Grab" :assoc
		  (("Full RGB" . :FULL-COLOR)
		   ("Greyscale" . :B&W)
		   ("False Color" . :FALSE-COLOR)))
		 (,l-grab-wait "Wait for grab done"
		    :assoc
		    ((" Busy wait " . t)
		     (" Process Wait " . :wait)
		     (" External Trigger" . :EXTERNAL-TRIGGER)))
		 (,l-alu "Transfer Combination"
		  :assoc ((" copy " .  ,tv:alu-seta)
			  (" combine " . ,tv:alu-ior)))
		 (,l-colors "Transfer From Colors" :choose (:rgba :rgb :ggg :red :green :blue :alpha))
		 (,l-to-colors "Transfer To Colors" :choose (:rgba :rgb :red :green :blue :alpha))
		 (,from-field "Transfer from field"
		  :assoc (("Whole frame " . nil)
			  ("Field 1" . 1)
			  ("Field 2" . 2)))
		 (,to-field "Transfer to field"
		  :assoc (("Whole frame " . nil)
			  ("Field 1" . 1)
			  ("Field 2" . 2)))
		 (,l-grab-gamma "Grabber Gamma Correction" :number)
		 (,l-view-gamma "View Screen Gamma Correction" :number)
		 (,l-grab-color-map "Color Map to Grab with" :assoc
		  (("Standard Ramp" . ramp-color-map-value)
		   ("Color Separation for 8 Bit" . color-separation-grab-map)))
		 (,l-view-color-map  "Color Map to view with"
		  :assoc (("Standard Ramp" . ramp-color-map-value)
			  ("Color Separation for 8 Bit" . color-separation-view-map)
			  ("Unspecified" . nil)))
		 )))
	(setf (default-grab-parameters type) old-parameters)
	(values choice-list old-parameters)    
    ))))


(defun choose-framegrab-parameters (&optional type old-parameters bits-per-pixel)
  (multiple-value-bind (choose-list transfer-list)
      (frame-grabber-parameters-list type
				     (copylist (or old-parameters
						   (default-grab-parameters type)))
				     bits-per-pixel)
    (labels ((choose-framegrab-parameters-constraints
	       (window item ignore new)
	       (let ((item (equal (cadr (assq item choose-list)) "Type of Grab")))
		 (when item
		   (if (eq new :false-color)
		       (progn
			 (putprop (locf transfer-list)
				  'color-separation-view-map :view-color-map)
			 (putprop (locf transfer-list)
				  'color-separation-grab-map :grab-color-map)
			 (putprop (locf transfer-list) ':rgb :colors)
			 (putprop (locf transfer-list) :red :to-colors)
			 (putprop (locf transfer-list) tv:alu-ior :alu))
		       
		       (putprop (locf transfer-list) 'ramp-color-map-value :view-color-map)
		       (putprop (locf transfer-list) 'ramp-color-map-value :grab-color-map)
		       (putprop (locf transfer-list) tv:alu-seta :alu)
		       (cond ((member new '(:rgba :rgb))
			      (putprop (locf transfer-list) new :colors)
			      (putprop (locf transfer-list) new :to-colors))
			     (t (putprop (locf transfer-list) :ggg :colors)
				(putprop (locf transfer-list) :rgba :to-colors))))
		   (send window :refresh)
		   t))
	       ))
      (tv:choose-variable-values
	choose-list
	:label "Frame Grabber Parameters"
	:function #'choose-framegrab-parameters-constraints
	)
      (setf (default-grab-parameters type) transfer-list)
      transfer-list)))

(eval-when (eval load)
  (setf (default-grab-parameters :full-color)
	'(:ZOOM NIL :VIEW-COLOR-MAP RAMP-COLOR-MAP-VALUE
	  :FROM-FIELD NIL :TO-FIELD NIL
	  :GRAB-COLOR-MAP RAMP-COLOR-MAP-VALUE
	  :SYNC-SOURCE :EXTERNAL
	  :COLORS :RGBA :ALU 5 :GRAB-TYPE :FULL-COLOR :GRAB T
	  :TO-COLORS :RGBA :VIEW-GAMMA 1 :GRAB-GAMMA 1
	  :HEIGHT NIL :WIDTH NIL :WDY 0 :WDX 0 :DY 0 :DX 0))
  (setf (default-grab-parameters :B&W)
        `(:ZOOM NIL :VIEW-COLOR-MAP RAMP-COLOR-MAP-VALUE
	  :FROM-FIELD NIL :TO-FIELD NIL
	  :GRAB-COLOR-MAP RAMP-COLOR-MAP-VALUE
	  :SYNC-SOURCE :EXTERNAL
	  :COLORS :GGG :ALU 5 :GRAB-TYPE :B&W
	  :GRAB T :TO-COLORS :RGBA :VIEW-GAMMA 1 :GRAB-GAMMA 1
	  :HEIGHT NIL :WIDTH NIL :WDY 0 :WDX 0 :DY 0 :DX 0))
  (setf (default-grab-parameters :false-color)
	`(:ZOOM NIL :VIEW-COLOR-MAP COLOR-SEPARATION-VIEW-MAP
	  :FROM-FIELD NIL :TO-FIELD NIL
	  :GRAB-COLOR-MAP COLOR-SEPARATION-GRAB-MAP :COLORS :RGBA :ALU 7
	  :SYNC-SOURCE :EXTERNAL
	  :GRAB-TYPE :FALSE-COLOR :GRAB T :TO-COLORS :RED
	  :VIEW-GAMMA 1 :GRAB-GAMMA 1 :HEIGHT NIL :WIDTH NIL :WDY 0 :WDX 0 :DY 0 :DX 0)))


(defmethod (:transfer-frame common-framegrab-mixin)
	   (to-window &key 
		      (type :full-color)
		      (set-color-maps nil)
		      (loop nil)

		      (default-parameters (default-grab-parameters type))

		      (grab (get (locf default-parameters) :grab))
		      (colors (get (locf default-parameters) :colors))
		      (to-colors (get (locf default-parameters) :to-colors))

		      (dx (get (locf default-parameters) :dx))
		      (dy (get (locf default-parameters) :dy))
		      (wdx (get (locf default-parameters) :wdx))
		      (wdy (get (locf default-parameters) :wdy))
		      (width (or (get (locf default-parameters) :width)
				 (send self :width)))
		      (height (or (get (locf default-parameters) :height)
				  (send self :height)))
		      (alu (get (locf default-parameters) :alu))
		      (first-alu tv:alu-seta)
		      (zoom (get (locf default-parameters) :zoom))
		      (grab-gamma (get (locf default-parameters) :grab-gamma))
		      (view-gamma (get (locf default-parameters) :view-gamma))
		      (grab-color-map (get (locf default-parameters) :grab-color-map))
		      (view-color-map (get (locf default-parameters) :view-color-map))
		      (sync-source (or (get (locf default-parameters) :sync-source)
				       :external))
		      (hold-frame #/space)
		      (from-field (get (locf default-parameters) :from-field))
		      (to-field (get (locf default-parameters) :to-field))

		      (plane-mask -1)
		      )
  (when (neq sync-source (send self :sync-source))
    (send self :set-sync-source sync-source))

  (setq width (min (- (send self :width) dx) width))
  (setq height (min (- (// (send self :height) (if from-field 2 1))
		       dy)
		    height))

  (let* ((first-window (if (listp to-window) (first to-window) to-window))
	 (bits-per (min (useful-bits-per-pixel first-window)
			(send self :useful-bits-per-pixel))))

    (cond ((eq colors ':rgba)
	   (setq colors '(:red :green :blue :alpha))
	   )
	  ((eq colors :rgb)
	   (setq colors '(:red :green :blue)))
	  ((eq colors :ggg)
	   (setq colors (if (> bits-per 8)
			    '(:green :green :green :green)
			    '(:green))))
	  ((null colors)
	   (setq colors (if (= bits-per 8)
			    '(:green)
			    '(:red :green :blue :alpha))))
	  )

    (cond ((eq to-colors :rgba)
	   (setq to-colors '(:red :green :blue :alpha)))
	  ((eq to-colors :rgb)
	   (setq to-colors '(:red :green :blue)))
	  ((null to-colors)
	   (setq to-colors
		 (if (= bits-per 8)
		     '(:red)
		     '(:red :green :blue :alpha)))))

    (when set-color-maps
      (when grab-color-map
	(send self :initialize-color-map
	      (send self :map-segment-number)
	      nil
	      grab-color-map
	      (or grab-gamma 1)))
      (when (and view-color-map (instancep first-window))
	(let ((scr (send first-window :screen)))
	  (send scr :initialize-color-map
		(send scr :map-segment-number)
		nil
		view-color-map
		(or view-gamma 1))
	  )))
    )

  (with-stack-list (x colors)
    (with-stack-list (y to-colors)
      (with-stack-list (to-windows to-window)
	(let ((colors (if (listp colors) colors x))
	      (to-colors (if (listp to-colors) to-colors y))
	      (windows (if (listp to-window) to-window to-windows))
	      )
	  (when (eq zoom t)
	    (setq zoom
		  (max 0
		       (1- (loop for win in windows
				 minimize (// (send (send win :screen) :width)
					      (min (send win :width) tv:width))
				 minimize (// (send (send win :screen) :height)
					      (min (send win :height) tv:height)))))))
	  (grab-frame-loop self
			   :colors colors
			   :to-colors to-colors
			   :zoom zoom
			   :alu alu
			   :grab grab
			   :from-field from-field
			   :to-field to-field
			   :hold-frame hold-frame
			   :loop loop
			   :first-alu first-alu
			   :plane-mask plane-mask

			   :dx dx
			   :dy dy
			   :width width
			   :height height
			   :wdx wdx
			   :wdy wdy

			   :windows windows)
	  ))))
  )

;patch
(defun make-framegrab-screen (&rest options)
  (multiple-value-bind (cont slot) (frame-grabber-available-p)
    (lexpr-funcall 'make-color-screen
		 :controller cont
		 :backplane-slot slot
		 :expose-p t
		 :no-setq t
		 options)))

(defun find-frame-grabber-screen (&rest options)
  (when (equal options '(t))
    ;hack for compatability
    (setq options '(:create-p t :error-p nil)))
  (lexpr-funcall 'find-color-screen
		 :frame-grabbers :only
		 :create-options '(:controller-types (:frame-grabber))
		 options))

;patch
(defun frame-grabber-available-p ()
  (loop for (c slot) in (color:color-controllers)
	when (or (eq c :frame-grabber)
		    (let ((info (cl:getf color-parts c)))
		      (cl:getf info :frame-grabber)))
	return (values c slot)))



(defvar *dither-grab-map* t)
;;
;; This is a function suitable to pass to INITIALIZE-COLOR-MAP, which
;; permits a semblance of an RGB frame grab onto an 8 bit screen.
;; The basic technique is that we use the frame grabber's color map
;; to partition the grabbed image into 3 bits red, 3 bits green and 
;; 2 bits blue.  We then view the image by IORing the three color planes.
;;
;; Dithering is done using the same value for all three colors, so the
;; jogs in color will change intensity but not hue.
;;
(defun color-separation-grab-map (slot)
  (declare (special gamma n-slots))
  (unless (or (eql gamma 1) (eql gamma 1.0))
    (setq slot (min (1- n-slots)
		    (max 0 (round (expt (* slot (// 1.0 n-slots)) gamma))))))
  (labels ((dither-bit (slot bits dither-map)
	     (let ((dither (ldb (byte (- 7 bits) 0) slot))
		   (hilo (ldb (byte 1 (- 7 bits)) slot)))
	       (if dither-map
		   (if (zerop hilo)
		       (if (< dither (- (random (lsh 1 (- 8 bits))) (lsh 1 (- 7 bits))))
			   -1
			   0)
		       (if (> dither (random (lsh 1 (- 8 bits))))
			   1
			   0))
		   0))))
    (let* ((dither (dither-bit slot 3 *dither-grab-map*))
	   (zone (+ dither (ldb (byte 3 (- 8 3)) slot)))
	   )
      (setq zone (max 0 (min 7 zone))) 
      (values (dpb zone (byte 3 7) 0)
	      (dpb zone (byte 3 4) 0)
	      (dpb (lsh zone -1) (byte 2 2) 0)
	      ))
    ))
;;
;; This is a map initialization function suitable for an 8 bit color screen to view
;; a frame grabbed with color-separation-grab-map
;;
(defun color-separation-view-map (slot)
  (declare (special n-slots gamma))
  (multiple-value-bind (quo rem)
      (floor (haulong (1- n-slots)) 3)
    (let* ((rbs (if (> rem 1) (1+ quo) quo))
	   (gbs (if (> rem 0) (1+ quo) quo))
	   (bbs quo)
	   (bval (ldb (byte bbs 0) slot))
	   (gval (ldb (byte gbs bbs) slot))
	   (rval (ldb (byte rbs (+ gbs bbs)) slot))
	   (rval (// (* rval 1023.) (1- (lsh 1 rbs))))
	   (gval (// (* gval 1023.) (1- (lsh 1 gbs))))
	   (bval (// (* bval 1023.) (1- (lsh 1 bbs))))
	   )
      (if (or (eql gamma 0) (eql gamma 1.0))
	  (values rval gval bval)
	  (macrolet ((expo (val)
		       `(min 1023. (max 0
		       (round (* 1024.0 (expt (* ,val (// 1.0 1024.0)) gamma)))))))
	  (values (expo rval)
		  (expo gval)
		  (expo bval))
	      )))))

(defun grab-frame (window)

  (or window (when (fdefinedp 'color:demo-window)
	       (setq window (funcall 'color:demo-window))))

  (let* ((fg (find-frame-grabber-screen :create-p t :error-p :notify))
	 (scr (send window :screen))
	 (bpp (send scr :bits-per-pixel))
	 (choices '(("Set Grab Parameters" :value :set-parameters :font fonts:cptfontb)
		    ("" :no-select :no-select)
		    ("Save viewing window" :value :save-screen
		     :documentation "Save the picture currently on the viewing window")
		    ("Save frame grabber buffer" :value :save-frame
		     :documentation "Save the picture currently in the frame grabber")
		    ("" :no-select :no-select)
		    ("Grab once again" :do-again)
		    ("Loop indefinitely" :keep-going)
		    ("Double Buffered Loop" :double)
		    ("Mouse Controlled Wash" :mouse-wash)
		    ("Exit" nil)))
	 )

    (when fg 

	(unless (default-grab-parameters scr)
	  (setf (default-grab-parameters scr)
		(copylist (default-grab-parameters (if (> bpp 8) :full-color :b&w)))))

	(loop with choice = :do-again
	      and set-color-maps = t
	      and spare
	      and max-x = (send fg :width)
	      and max-y = (send fg :height)
	      as prev-choice = (loop for i in choices
				     when (eq choice (second i))
				       return i)
	      do 
	  (when (and (eq choice :double)
		     (null spare))
	    (setq spare
		  (loop repeat 2
			for x-offset from 0 
				     by (// (send window :width) 2)
			collect
			  (tv:make-window (typep window)
					  :edges `(,x-offset 0
						   ,(+ x-offset
						       (// (send window :inside-width) 2))
						   ,(send window :inside-height))
					  :borders nil
					  :superior window
					  :save-bits nil
					  :expose-p t))))

	  (cond ((eq choice :set-parameters)
		 (choose-framegrab-parameters scr)
		 (setq set-color-maps t)))

	  (cond ((member choice '(:save-screen :save-frame))
		 (load-images-system)
		 (let* ((options (default-grab-parameters scr))
			(grab-type (get (locf options) :grab-type))
			(save-type (if (eq grab-type :false-color) :full-color grab-type))
			(color-map (cond ((and (eq grab-type :false-color)
					       (eq choice :save-screen))
					  (symeval '*primary-false-color-map*))
					 ((eq grab-type :b&w)
					  (symeval '*standard-b&w-map*)))))
		   (if (eq choice :save-screen)
		       (funcall 'save-window window :load-or-save :save
				:color-map color-map
				)
		       (save-frame-grabber-window
			 :frame-grabber fg
			 :new-grab (setq set-color-maps (neq save-type grab-type))
			 :type save-type
			 ))))
		((eq choice :mouse-wash )
		 (loop as start-x = (max 0 (min tv:mouse-x (- max-x 100)))
		       as start-y = (max 0 (min tv:mouse-y (- max-y 100)))
		       until (send terminal-io :any-tyi-no-hang)
		       do (send fg :transfer-frame
				window
				:type scr
				:zoom t
				:dx start-x :dy start-y
				:width 100 :height 100
				:wdx start-x :wdy start-y)))
		(t (send fg :transfer-frame
			 (if (eq choice :double) spare window)
			 :type scr
			 :zoom t
			 :loop (memq choice '(:keep-going :double))
			 :set-color-maps set-color-maps
			 :hold-frame nil)
		   (setq set-color-maps nil)))
	  
	  (setq choice (tv:menu-choose choices
				       "Frame grabber loop options"
				       '(:mouse)
				       prev-choice))
	      while choice
	      finally 
		(send (send window :screen) :send-if-handles :set-pan-and-zoom 0 0 0 0)
		(tv:delaying-screen-management
		  (loop for i in spare do (send i :deactivate)))
		))))

(defun save-frame-grabber-window
       (&key
	(frame-grabber (find-frame-grabber-screen))
	(new-grab nil)
	(type :full-color)
	)
  (load-images-system)
  (multiple-value-bind (w h)
      (send frame-grabber :size)
    (with-stack-list (dims h w)
      (tv:with-temp-sheet-raster
	(temp-array dims
		    :type (if (eq type :full-color) 'art-fixnum 'art-8b)
		    :initial-value 0)
	(send frame-grabber :transfer-frame temp-array
	      :type type :set-color-maps new-grab :grab new-grab)
	(funcall 'save-window temp-array :load-or-save :save)))))


(defmethod D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(:grab-frame-p screen-stuff-mixin)0 ()
  (values nil "This screen has no associated framegrabber."))
