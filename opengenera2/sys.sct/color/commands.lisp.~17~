;;-*- Mode: LISP; Package: COLOR; Base: 10. -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;
;; first some presentation types, then the commands
;;
0(define-presentation-type (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")selectable-window0 (())
   :parser ((stream) (dw:complete-from-sequence 
		       (delete nil (listarray tv:previously-selected-windows))
		       stream
		       :name-key #'tv:sheet-name
		       :type 'selectable-window))
   :printer ((x stream) (princ x stream))
   :description "A selectable window")


;patch
(define-presentation-type 2color-screen0 (())
   :parser ((stream) (dw:complete-from-sequence 
		       (color:find-color-screen :error-p nil :which :all :frame-grabbers t)
		       stream
		       :type 'color-screen
		       :name-key #'tv:sheet-name))
   :printer ((x stream) (princ x stream))
   :description "A color screen")


(defun color:likely-sync-programs (screen)
  (let* ((cont (send screen :get :controller))
	 (paddle (send screen :get :paddle-card)))
    (possible-sync-programs cont paddle)))


(define-presentation-type 2sync-program-for-screen0 ((screen))
   :Parser ((stream)
	    (dw:complete-from-sequence
	      (color:likely-sync-programs screen)
	      stream))
   :description "A sync program")

(define-presentation-type 2genlock-type 0(())
  :parser ((stream)
	   (dw::complete-from-sequence '(nil :genlock :hdtv-genlock) stream))
  :description "A type of genlock card")


(cp:define-command (2Choose-Window0 :values t :command-table :global)
    ((window 'selectable-window))
   window)

(cp:define-command (2Choose-Color-Screen0 :values t :command-table :global)
    ((screen 'color-screen))
   screen)

;;
;; this replaces the :SET COLOR MONITOR command in the old color console system
;;

;;
;; this replaces the :SET COLOR MONITOR command in the old color console system
;;


(defun set-sync-program-internal (screen &key sync-program sync-on-green
				  (genlock (send screen :get :genlock)))
  (let ((prog (color:get-sync-program-for-paddle-card
	       sync-program
	       (send screen :get :paddle-card)
	       genlock
	       (send screen :get :controller)
	       )))
    (when prog
      (send screen :set-sync-program prog)
      (send screen :send-if-handles :set-put-sync-on-video sync-on-green)
      (send screen :setup-hardware))
    prog))

(cp:define-command (2set-sync-program0 :values t :command-table :global)
    ((screen 'color-screen)
     (sync-program `((sync-program-for-screen ,screen)))
     &key
     (genlock 'genlock-type
	      :default (send screen :get :genlock)
	      :prompt "Genlocked?")
     (sync-on-green 'boolean
		    :default (when (send screen :put-sync-on-video) t)
		    :prompt "Sync on Green?")
     )
   (set-sync-program-internal screen
			      :genlock genlock
			      :sync-on-green sync-on-green
			      :sync-program sync-program)
   )

(cp:define-command (2set-sync-on-green0 :values t :command-table :global)
    ((screen 'color-screen)
     (on-vid 'boolean
	      :default (when (send screen :put-sync-on-video) t)
	      :prompt "Sync on Green?"))

   (send screen :send-if-handles :set-put-sync-on-video on-vid)
   (send screen :put-sync-on-video))

;;
;; If loading color on a color console, convert the screen
;;
(add-initialization "Switch to color console" '(cli::maybe-move-cad-buffer-console) ()
		    '*after-loading-color-initialization-list*)
