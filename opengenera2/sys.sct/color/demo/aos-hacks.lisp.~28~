;;; -*- Mode: LISP;  Base: 8;  Package: COLOR;  Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


;; e.g. (arg-pass send w ':foo (2 (math:decompose a)) (car x))
;; gives (let (g069 g105)
;;	  (send w ':foo (multiple-value (g069 g105) (math:decompose a)) g105 (car x)).


(defmacro arg-pass (f &body body &aux (let `(,(ncons 'dummy) (,f)))
				      (gensyms (car let))
				      (call (cadr let)))
  (dolist (term body)
    (cond ((and (listp term) (fixp (car term)))
	   (nconc gensyms (setq gensyms (loop repeat (1- (car term)) collect (gensym))))
	   (nconc call
		  (setq call `((multiple-value ,(append '(nil) gensyms '()) ,(cadr term))))
		  (copylist gensyms)))	;can't setq here if turkey says (1 ...)
	  (t (nconc call (setq call (ncons term))))))
  `(let . ,(rplaca let (cdar let))))


(defun demo-stop-now? (self)
  (or (send self ':any-tyi-no-hang)
      (send terminal-io ':any-tyi-no-hang)))


(defun demo-window-center (self)
  (multiple-value-bind (width height) (send self ':inside-size)
    (values (// width 2) (// height 2))))


(defun demo-checker (self &optional
	     (nx (+ 10 (random 40)))
	     (ny (+ 10 (random 40)))
	     (grey-frac (+ 0.02 (// (random 1000) 10000.0))))
  "Produces a warped chackerboard pattern"
  (send self ':clear-window)
  (let ((height (// (tv:sheet-inside-height self) ny))
	(width (// (tv:sheet-inside-width self) nx)))
    (dotimes (i ny)
      (do ((x (if (evenp i) 0 (// width -2)) (+ x width))	;(car wid)
	   (black nil (not black)))
	  (( (+ x width) (tv:sheet-inside-right self)))
	(and black (send self ':draw-rectangle width height x (* i height) tv:alu-ior)
	     ))
      (send self ':bitblt
	       tv:alu-seta (tv:sheet-inside-width self) (fixr (* height grey-frac))
	       tv:50%-gray 0 0
	       0 (- (* (1+ i) height) (fixr (* height grey-frac))))))
  self)

(defconst vdx0101 '((0 . 22) (1 . 20) (0 . 21) (-1 . 23)))

(defconst vdy0101 '((0 . 21) (1 . 23) (0 . 22) (-1 . 20)))

(defconst vd1210 '((1 . 22) (0 . 22) (-1 . 22) (-2 . 11)
		 (-1 . 22) (0 . 22) (1 . 22) (2 . 11)))

(defconst vd1111 '((0 . 22) (1 . 22) (0 . 22) (-1 . 22)
		 (0 . 22) (-1 . 22) (0 . 22) (1 . 22)))


(defvar demo-alu (make-instance 'color:general-sc-color-alu
				':array ':default
				':pixel-mask -1
				':plane-mask -1
				':fill-data -1
				':alu tv:alu-xor))

(defvar random-array (si:random-create-array 71. 35. 69.))

(si:random-initialize random-array (time:fixnum-microsecond-time))


(defun demo-poly
	   (self &optional (xvd vd1210)
		      (yvd vd1210)
		      &key
		      (width (tv:sheet-inside-width self))
		      (height (tv:sheet-inside-height self))
		      (dx 0)
		      (dy 0)
		      )
  (send self :clear-window)
  (multiple-value-bind (x1 x2 x3) (wave-fixup xvd width)
    (multiple-value-bind (y1 y2 y3) (wave-fixup yvd height)
      (demo-polybaz self x1 (+ x2 dx) x3 y1 (+ y2 dy) y3)
      )))

(defun demo-polybaz (self xvd x0 xper yvd y0 yper
		&optional (increment (random 255.))
		&aux (xlen (length xvd)) (ylen (length yvd))
		(stepping nil) (lcm (cl:lcm xper yper)))

  (do ((x x0)
       (y y0)
       (xvd (copylist xvd)
	    (loop with xv
		  repeat xlen
		  for vd in (cdr xvd)
		  do (push (cons (- (car vd)) (cdr vd)) xv)
		  finally (return xv)))
       (yvd (copylist yvd)
	    (loop with yv
		  repeat ylen
		  for vd in (cdr yvd)
		  do (push (cons (- (car vd)) (cdr vd)) yv)
		  finally (return yv)))
       (time lcm (- lcm time))
       (xd (cdar xvd) (- (cdar xvd) xd))
       (yd (cdar yvd) (- (cdar yvd) yd)))
      (nil)
    (nconc xvd xvd)
    (nconc yvd yvd)
    (return
      (loop do
	    (when (demo-stop-now? self) (return t))
	    (cond ((> xd yd)
		   (demo-aos-triangle self x0 y0 x y (setq x (+ x (* yd (caar xvd))))
			 (setq y (+ y (* yd (caar yvd)))) increment)
		   (setq xd (- xd yd) time (- time yd) yd (cdar (setq yvd (cdr yvd)))))
		  (t
		   (demo-aos-triangle self x0 y0 x y (setq x (+ x (* xd (caar xvd))))
			 (setq y (+ y (* xd (caar yvd)))) increment)
		   (setq yd (- yd xd) time (- time xd) xd (cdar (setq xvd (cdr xvd))))))
	    (cond ((or stepping ( time 0))
		   (setq stepping 't
			 time (\ (+ time lcm) lcm))
		   (return (values)))))
    )))

(defun ranvd (vel-durs)
  (loop for vd in vel-durs collect (cons (car vd) (random (1+ (cdr vd)) random-array))))



(defun wave-fixup (vel-durs amp)
  (multiple-value-bind (pos neg) (pos-neg vel-durs)
    (multiple-value-bind (min max)
	(min-max (setq vel-durs
		       (pn-scale vel-durs (- neg) pos (min (- neg) pos))))
      (multiple-value (vel-durs min) (pn-scale vel-durs amp amp (- max min)))
      (dc-tweak vel-durs min))))

(defun pos-neg (vel-durs &aux (pos 0) (neg 0))
  (dolist (vel-dur vel-durs) (if (plusp (car vel-dur))
				 (setq pos (+ pos (* (car vel-dur) (cdr vel-dur))))
				 (setq neg (+ neg (* (car vel-dur) (cdr vel-dur))))))
  (values pos neg))

(defun min-max (vel-durs &aux (min 0) (max 0) (loc 0))
  (dolist (vel-dur vel-durs)
    (setq min (min min (setq loc (+ loc (* (car vel-dur) (cdr vel-dur))))))
    (setq max (max max loc)))
  (values min max))

(defun pn-scale (vel-durs pos neg den)
  (loop for vel-dur in vel-durs
	for dur = (// (* (cdr vel-dur) (if (plusp (car vel-dur)) pos neg))
		      den)
	collect (cons (car vel-dur) dur) into vel-durs
	sum (* (car vel-dur) dur) into loc
	finally (return (values vel-durs loc))))

(defun dc-tweak (vel-durs gap &aux time)
  (loop for vel-dur in vel-durs
	for dur = (if (plusp (* (car vel-dur) gap))
		      (cond ((> (cdr vel-dur) (setq time (// gap (car vel-dur))))
			     (setq gap (- gap (* time (car vel-dur))))
			     (- (cdr vel-dur) time))
			    ((setq gap (- gap (* (car vel-dur) (cdr vel-dur))))
			     0))
		      (cdr vel-dur))
	sum dur into period
	collect (cons (car vel-dur) dur) into vel-durs
	sum (* (car vel-dur) dur) into loc
	minimize loc into min
	finally (return (values vel-durs (- min) period))))

(defvar default-increment #O3)

(defun demo-aos-triangle (self x1 y1 x2 y2 x3 y3 &optional (increment default-increment))

  (setq increment (%logdpb increment (byte 20 10)
			   (%logdpb increment (byte 10 10)
				    increment)) )
			   
  (or (zerop increment)
      (let ((area (- (* (- x2 x1) (- y3 y1)) (* (- x3 x1) (- y2 y1)))))
	(or (zerop area)
	    (tv:prepare-sheet (self)
		  (send demo-alu ':set-alu color:alu-add)
		  (send demo-alu ':set-fill-data
			(multiple-value-bind (nil nil pos)
			    (send (send self :screen) :map-mode)
			  (lsh (if (< area 0) (- increment) increment)
			       pos)))
		  (send self ':draw-triangle
			(round x1) (round y1)
			(round x2) (round y2)
			(round x3) (round y3)
			demo-alu
			))
	    ))))

(defflavor psircle (x1 y1 (x 0) (y 0) (dt .1s0) (x0 111) (y0 111)) ()
  :settable-instance-variables
  (:init-keywords :center-of))

(defmethod (:restart psircle) () (setq x x1 y y1))

(defmethod (:next psircle) ()
  (values (round (+ x0 (setq x (+ x (* dt y))))) (round (+ y0 (setq y (- y (* dt x)))))))

(defmethod (:init psircle :after) (plist &aux dawk)
  (if (setq dawk (get plist ':center-of))
      (multiple-value (x0 y0) (demo-window-center dawk)))
  (setq x1 x y1 y))

(defmethod (:xx psircle) () (round (+ x0 x)))

(defmethod (:yy psircle) () (round (+ y0 y)))

(defmethod (:point psircle) () (values (round (+ x x0)) (round (+ y y0))))

(defmethod (:center psircle)() (values (round x0) (round y0)))

(compile-flavor-methods psircle)

(def-color-demo "ballantine"
		(:value demo-ballantine
		 :documentation "Pulsating spheres, in a ballantine beer logo shape"
		 :color-map :any))

(defun demo-ballantine (self &aux (tv:screen (tv:sheet-screen self)))

  (unwind-protect
    (let* ((xamp (min (send self ':inside-width) 600))
	   (yamp (min (send self ':inside-height) 400))
	   (xoff)
	   (yoff)
	   (dx (// (- (send self :inside-width) xamp) 2))
	   (dy (// (- (send self :inside-height) yamp) 2))
	   (c1 (make-instance 'psircle
			      ':x (// (min xamp yamp) 4)
			      ':dt (float (* 2 (sin (* -0.08 (atan 1 1)))))
			      ':x0 (+ dx (// xamp 4))
			      ':y0 (+ dy (// yamp 4))))
	   (c2 (make-instance 'psircle
			      ':x (// (min xamp yamp) 2)
			      ':dt (float (* 2 (sin (* 0.06 (atan 1 1)))))
			      ':x0 (+ dx (- xamp (// xamp 3)))
			      ':y0 (+ dy (// yamp 2))))
	   (c3 (make-instance 'psircle ':x (// (min xamp yamp) 3)
			      ':dt (float (* 2 (sin (* 0.04 (atan 1 1)))))
			      ':x0 (+ dx (// xamp 4))
			      ':y0 (+ dy (- yamp (// yamp 3)))))
	   )

      (multiple-value (xoff yoff)
	(tv:sheet-calculate-offsets self tv:screen))

      (when (send tv:screen ':pan-and-zoom-p)
	(send tv:screen ':pan-and-zoom-from-rectangle
	      (+ xoff dx)
	      (+ yoff dy)
	      (+ xoff dx xamp)
	      (+ yoff dy yamp)))
      ;
      ; this hack supplies a background color for full color systems, which
      ; prevents underflow at the edges.
      ;
      (send self ':draw-rectangle (send self :inside-width) (send self :inside-height)
	    0 0 (send tv:screen ':compute-color-alu tv:alu-seta
		      0.15 0.15 0.15))

      (loop as inc = (if color-microcode-p default-increment (random 20))
	    until (demo-stop-now? self)
	    do
	    (arg-pass demo-aos-triangle self (2 (send c1 ':next))
		      (2 (send c2 ':next))
		      (2 (send c3 ':next))
		      inc)
	    ))
    (when (send tv:screen :pan-and-zoom-p)
      (send tv:screen ':set-pan-and-zoom 0 0 0 0))))


(defflavor bouncer ( bx by ) ()
  :settable-instance-variables
  (:default-init-plist :x 0 :y 0 :vx 0 :vy 0 :window nil)
  (:init-keywords :window :x :y :vx :vy :width :height :DX :DY))

(defflavor unibouncer (x v lim (dx 0)) ()
  :initable-instance-variables
  )

(defmethod (:next unibouncer) ()
  (if ( (+ x v)
	 (setq x (abs (- lim (abs (- lim (+ x v)))))))
      (setq v (- v)))
  (+ dx (round x)))

(defmethod (:init bouncer) (plist)
  (multiple-value-bind (width height)
      (send (get plist ':window) ':inside-size)

    (when (get plist ':width) (setq width (min width (get plist ':width))))
    (when (get plist ':height) (setq height (min height (get plist ':height))))

    (setq bx (make-instance 'unibouncer ':x (round (* 1000 (get plist ':x)))
					':v (round (* 1000 (get plist ':vx)))
					':dx (round (* 1000 (or (get plist :dx) 0)))
					':lim (round (* 1000  width)))
	  by (make-instance 'unibouncer ':x (round (* 1000 (get plist ':y)))
					':v (round (* 1000 (get plist ':vy)))
					':dx (round (* 1000 (or (get plist :dy) 0)))
					':lim (round (* 1000 height))))
    ))

(defmethod (:next bouncer) ()
  (values (// (send bx ':next) 1000)
	  (// (send by ':next) 1000)))

(compile-flavor-methods bouncer unibouncer)

(def-color-demo "movie"
		(:value demo-movie
		 :color-map :any
		 :documentation "more pulsating triangles"))

(defun demo-movie (self &aux (tv:screen (tv:sheet-screen self)))
  (unwind-protect
    (let* ((xamp (min (send self ':inside-width) 600))
	   (yamp (min (send self ':inside-height) 400))
	   (dx (// (- (send self :inside-width) xamp) 2))
	   (dy (// (- (send self :inside-height) yamp) 2))
	   (xoff)
	   (yoff)
	   )

      (multiple-value (xoff yoff)
	(tv:sheet-calculate-offsets self tv:screen))

      (when (send tv:screen ':pan-and-zoom-p)
	(send tv:screen ':pan-and-zoom-from-rectangle
	      (+ xoff dx)
	      (+ yoff dy)
	      (+ xoff dx xamp)
	      (+ yoff dy yamp)))

      (loop until 
	    (demo-poly self (ranvd vd1210) (ranvd vd1210)
		  :width xamp
		  :height yamp
		  :dx dx
		  :dy dy)
	    do (process-sleep (* 5 60)))
      )
    (when (send tv:screen ':pan-and-zoom-p)
      (send tv:screen ':set-pan-and-zoom 0 0 0 0))))

(def-color-demo "triangles"
		(:value demo-triangle-hack
		 :documentaion "pulsating triangles"
		 :color-map :any))

(defun demo-triangle-hack (self &aux (tv:screen (tv:sheet-screen self)))
  (unwind-protect
    (loop with xamp = (min 600 (send self ':inside-width))
	  and yamp = (min 400 (send self ':inside-height))
	  with dx = (// (- (send self :inside-width) xamp) 2)
	  and dy = (// (- (send self :inside-height) yamp) 2)
	  and xoff and yoff
	  initially
	    (multiple-value (xoff yoff)
	      (tv:sheet-calculate-offsets self tv:screen))
	  (when (send tv:screen ':pan-and-zoom-p)
	    (send tv:screen ':pan-and-zoom-from-rectangle
		  (+ xoff dx)
		  (+ yoff dy)
		  (+ xoff dx xamp)
		  (+ yoff dy yamp)))
	  until (demo-acw self :width xamp :height yamp :dx dx :dy dy)
	  do (process-sleep (* 5 60.)))
    (when (send tv:screen ':pan-and-zoom-p)
      (send tv:screen ':set-pan-and-zoom 0 0 0 0))))

(defun demo-good-triangle (self)
  (demo-acw self
	:vx1 10.0 :vy1 10.0
	:vx2 10.05 :vy2 10.0 
	:vx3 10.0 :vy3 10.05
	:x1 0 :x2 0 :x3 0
	:y1 0 :y2 0 :y3 0
	:count 10000000
	:increment 1
	:width 401 :height 401))

  
(defun demo-acw 
       (self &key
	(vx1 (- (random 10) 5))
	(vy1 (- (random 10) 5))
	(vx2 (- (random 10) 5))
	(vy2 (- (random 10) 5))
	(vx3 (- (random 10) 5))
	(vy3 (- (random 10) 5))
	(x1 (random 10))
	(y1 (random 10))
	(x2 (random 10))
	(y2 (random 10))
	(x3 (random 10))
	(y3 (random 10))
	(count (+ 500 (random 500.)) )
	(width 600.)
	(height 400.)
	(dx (// (- (send self :inside-width) width) 2))
	(dy (// (- (send self :inside-height) height) 2))
	(b1 (make-instance 'bouncer ':vx vx1 ':vy vy1 ':window self
			   ':x x1 :dx dx ':y y1 :dy dy
			   :width width :height height ))
	(b2 (make-instance 'bouncer ':vx vx2 ':vy vy2 ':window self
			   ':x x2 :dx dx ':y y2 :dy dy
			   :width width :height height))
	(b3 (make-instance 'bouncer ':vx vx3 ':vy vy3 ':window self
			   ':x x3 :dx dx ':y y3 :dy dy
			   :width width :height height))
	(increment (random 255))
	)
  (declare (special count))
  (send self :clear-window)
  (loop	repeat count
	do
    (when (demo-stop-now? self) (return t))
    (arg-pass demo-aos-triangle self (2 (send b1 ':next))
	      (2 (send b2 ':next))
	      (2 (send b3 ':next))
	      increment)
    ))
	




