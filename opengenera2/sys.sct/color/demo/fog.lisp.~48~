;-*- Mode: LISP; Package: COLOR; Base: 10 -*-
;-------------------------------------
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>
-----------------------------------------
;
;  Support for layered graphics (planes) on multi-bit-per-pixel frame buffers
;
;------------------------------------------------------------------------------
;  6-28-83  cwr  Created file.
;------------------------------------------------------------------------------
;  
;  Example:
;    Layer set:
;
;      Background:                    black
;      Layer 0:    1 bit,  2 colors:  invisible, white
;      Layer 1:    2 bit,  4 colors:  invisible, red, green, blue
;      
;      Total depth used: 3 bits
;    
;    ==========================
;     Pixel  Layered PV  Color
;     value     1  0     value
;     =====----==--=-----=====
;       0      00  0     black
;       1      00  1     white
;       2      01  0     red
;       3      01  1     red
;       4      10  0     green
;       5      10  1     green
;       6      11  0     blue
;       7      11  1     blue
;    ==========================
;  
;------------------------------------------------------------------------------

;;
;; A few ASAS primitives
;;
(eval-when (compile load)
  (deff vx 'second)
  (deff vy 'third)
  (deff vz 'fourth)
  (deff cof-grp 'cdr))


(defun  asasify  (list-of-xyz-lists)
  (bld-grp  (mapcar  'bld-vec  list-of-xyz-lists)))

(defun bld-vec (list)
  (cons 'vector list))

(defun bld-grp (list)
  (cons 'group list))

(defun groupp (object)
  (and (listp object)
       (eq 'group
	   (first object))))

;==============================================================================
;
; A "layer" or "bit plane" of a multi-bit-per-pixel raster frame buffer.  The
; current assumption is that color 0 (the first one in "color-list") is the
; background and is completely transparent and the other colors are opaque.
; Hence each layer is like an animation "cel", a transparent base with opaque
; colors on it.  Layers are stacked together to from "layer-sets" (see below).
;
; For later:
; Other transparency relations besides "color 0 is completely transparent and
; others are completely opaque" allow partial transparency and other sorts of
; things (eg a "color" which inverts the color below it, or rotates its hue).

(defflavor  layer
	((depth  1)
	 (color-list  (list  *black*  *white*)))
	()
  :initable-instance-variables
  :gettable-instance-variables
  :settable-instance-variables)


;------------------------------------------------------------------------------
; Checks to make sure number of colors corresponds to number of bits of depth.
; If the color-list is too short, it extends "color-list" with extra entries of
; color "black".  If the color-list is too long, an error is signaled.


(defmethod (:adjust-color-list layer)  ()

  (let  ((number-of-colors-specified  (length  color-list))
	 (number-of-slots-available   (expt  2 depth)))

    (when  (>  number-of-slots-available  number-of-colors-specified)
      (setq  color-list
	     (append  color-list
		      (make-list  (-  number-of-slots-available
				      number-of-colors-specified)
				  ':initial-value  *black*))))

    (when  (>  number-of-colors-specified  number-of-slots-available)
      (fsignal  "more colors specified (~d) than the maximum (~d) implied ~@
		 by the depth (~d) of the layer"
		number-of-colors-specified
		number-of-slots-available
		depth))))



;==============================================================================
; This version assumes 8 bits per pixel.
; Layer 0 is the one at the bottom (least visible)


(defflavor  layer-set
	((max-depth)
	 (depth-in-use        0)
	 (background-color    *black*)
	 (layer-list          nil)
	 (max-layer           nil)
	 (current-slot        nil)
	 (screen)
	 (segment-number 0)
	 (overlay-bits 0))
	()
  :initable-instance-variables
  :settable-instance-variables
  :gettable-instance-variables)

(defmethod (:init layer-set :after) (ignore)

  (send self ':set-screen screen)
  )


(defmethod (:set-screen layer-set :after) (ignore)

  (let ((map-size (cond (screen (send screen ':color-map-description))
			(t (values 256. 4.)))))

    (setq max-depth (haulong (1- map-size)))
    (if screen
	(multiple-value-bind (shift ignore overlay-type)
	    (send screen ':overlay-description)
	  (if (eq overlay-type :transparent)
	      ;; use the hardware overlay to take us to the munged map, if we have one.
	      (setq overlay-bits (lsh 1 shift))
	      (setq overlay-bits 0)
	      ))))
  )

;------------------------------------------------------------------------------
; Returns the "ALU" number for a given color of a given layer.  Erasing bits on
; a given layer (the "erase-aluf") is the same as writing with color 0.
;

(defmethod  (:alu-for-color-on-layer layer-set)
	    (color-number  layer-or-layer-number &optional (alu tv:alu-xor))

  (send  self  ':check)
  
  (let  ((layer-number (if  (typep  layer-or-layer-number  'layer)
			    (find-position-in-list  layer-or-layer-number  layer-list)
			    layer-or-layer-number)))
    
    (when  (or  (not  (numberp  layer-number))
		(minusp  layer-number)
		(>  layer-number  max-layer))
      (fsignal  "layer number ~a out of range, valid numbers are 0 to ~a"
		layer-number  max-layer))
    
    (let* ((layer-depth     (send  (nth layer-number layer-list)
				   ':depth))
	   (layer-max-val   (- (expt  2  layer-depth) 1))
	   (layer-position  (loop repeat layer-number
				  for layer in layer-list
				  summing (send layer ':depth))))
      
      (when  (or  (not  (numberp  color-number))
		  (minusp  color-number)
		  (>  color-number  layer-max-val))
	(fsignal  "color number ~a out of range for layer ~a ~
		(which has ~a bits hence: 0  color  ~a)"
		  color-number  layer-number  layer-depth  layer-max-val))
      
      (setq alu (send screen ':compute-color-alu alu
		      (deposit-byte  0  layer-position  layer-depth  #2R11111111)))
      (send alu ':set-plane-mask (send alu :fill-data))
      (send alu :set-fill-data -1)
      alu
      )))


;------------------------------------------------------------------------------
; Makes sure everything is kosher.


(defmethod  (:check layer-set)  ()

  (unless  (listp  layer-list)
    (fsignal  "LAYER-LIST is not a list of layers: ~a"  layer-list))

  (loop for layer in layer-list do
	(if  (typep  layer  'layer)
	     (send  layer  ':adjust-color-list)
	     (fsignal  "non-layer found in LAYER-LIST: ~a"  layer)))

  (setq  max-layer  (-  (length  layer-list)  1)
	 depth-in-use (loop for layer in layer-list
			    summing (send layer ':depth)))

  (when  (>  depth-in-use  max-depth)
    (fsignal  "attempt to use more bits (~a) ~
	       than are available for each pixel (~a)."
	      depth-in-use  max-depth))
  (multiple-value-bind (nil nil nil hardware-depth)
      (send screen :map-mode)
    (when  (>  max-depth  hardware-depth)
      (fsignal  "attempt to use more bits per pixel (~a)~@
	       than are available on the current hardware (~d)."
		max-depth hardware-depth)))
  t)


;------------------------------------------------------------------------------
; Makes the layer-set become active by loading it into the hardware.


(defmethod  (:activate layer-set)  (&optional (scr self))
  (send self ':set-screen scr)
  (send  self  ':update-lookup-table-image t)
  (send screen ':set-map-segment-number segment-number)
  )


;------------------------------------------------------------------------------
; Fill in the video lookup table image from the background color and layer
; descriptions.


(defmethod  (:update-lookup-table-image layer-set)  (&optional setup-hardware )

  (send  self  ':check)

  (loop for layer in layer-list
	for opaque-colors  = (cdr (send layer ':color-list))
	for slots-per-color  first 1  then current-slot
	initially
	(setq  current-slot 0)
	(send  self  ':load-slot-with-color  background-color current-slot)
	(incf current-slot)
	do
	(loop for color in opaque-colors
	      do
	      (loop repeat slots-per-color
		    do
		    (send  self  ':load-slot-with-color color current-slot)
		    (incf current-slot))))
  (and setup-hardware (send screen ':new-color-map))
  )

(defmethod  (:load-slot-with-color layer-set)  (color slot)

  (comment  (format t "~%slot ~3d (~2,8,48r):  ~a"
		    current-slot  current-slot  (send color ':name)))

  (send screen ':write-managed-map slot
	(send color ':red) (send color ':green) (send color ':blue)
	segment-number)
  )

;==============================================================================





;------------------------------------------------------------------------------




(defvar *x-array-for-thick-line* (make-array 2.))
(defvar *y-array-for-thick-line* (make-array 2.))

(defun demo-draw-thick-line (self x1 y1 x2 y2 width alu)
  (tv:prepare-sheet (self)
    ;; Also does without-interrupts, so only one person will use array at a time
    (aset x1 *x-array-for-thick-line* 0)
    (aset x2 *x-array-for-thick-line* 1)
    (aset y1 *y-array-for-thick-line* 0)
    (aset y2 *y-array-for-thick-line* 1)
    (send self ':draw-wide-curve
	  *x-array-for-thick-line* *y-array-for-thick-line*
	  width 2 alu)))


; This is what the tablet thinks its range is, the document is confused.
(defconst  *tablet-max-x*  2200)
(defconst  *tablet-max-y*  2200)

; An encoded figure can be closed by returning to touch the first point again.
; This is the maximum distance allowed between two encoded points for them to
; be considered "almost coincident".
(defconst  *tablet-figure-closing-distance*  12)
(defconst  *tablet-figure-closing-distance-squared* 144)

; These are parameters for Show-Buffer and Show-Figure, the width of the lines
; used to draw the figure, and a flag which allows a figure composed of all
; closed three point figures to be displayed as "triangle blts".
(defconst  *line-width*  3)
(defconst  *triangle-mode*  nil)

(defmacro  with-tablet-xy-mapped-to-window-xy  ((tx ty  wx wy  wwidth wheight)
						&body forms)
  
  (check-arg-type  tx      :symbol)
  (check-arg-type  ty      :symbol)
  (check-arg-type  wx      :symbol)
  (check-arg-type  wy      :symbol)
  (check-arg-type  wwidth  :symbol)
  (check-arg-type  wheight :symbol)

  `(let* ((*tablet-window-scaler*  (min ,wwidth ,wheight))
	  (,wx  (// (* ,tx *tablet-window-scaler*)  *tablet-max-x*))
	  (,wy  (// (* ,ty *tablet-window-scaler*)  *tablet-max-y*))
	  (,wy  (- ,wheight ,wy))
	  (*tablet-window-figure-closing-distance*
	    (//  (*  *tablet-figure-closing-distance*
		     *tablet-window-scaler*)
		 *tablet-max-x*)))

     *tablet-window-figure-closing-distance*
     ,@forms))

				     




(defmacro  line  ()
  `(send  self  ':draw-line
	  curr-ep-x  curr-ep-y
	  prev-ep-x  prev-ep-y
	  tv:alu-xor  nil))

(defun demo-show-buffer (self &optional  (buffer  "")  (s 1) (x 0) (y 0)
			 (alu  tv:alu-xor) (show-mode #'demo-show-vector-list-as-line))
  (when (stringp  buffer)
    (setq  buffer
	   (symeval (intern  (string-upcase  (demo-get-buffer-name  buffer))))))
  (loop for figure-name-symbol in buffer
	for figure = (symeval figure-name-symbol)
	do
	;;(format t "~&~a:" figure-name-symbol) (tyi)
	(demo-show-figure self figure s x y alu show-mode))
  )

(defun demo-show-figure (self &optional  (figure  "")  (s 1) (x 0) (y 0)
			 (alu  tv:alu-xor) (show-mode #'demo-show-vector-list-as-line))
  (when (stringp  figure)
    (setq  figure  (symeval (intern  (string-upcase
				       (demo-get-figure-name  figure "show"))))))
  (let  ((contents  (cof-grp  figure)))
    (if  (groupp  (first contents))
	 (loop for figure in contents
	       do (demo-show-figure self figure s x y alu ))
	 (funcall show-mode self contents s x y alu ))))



(defun demo-show-vector-list-as-line (self vector-list  s x y alu)
  (loop for point in vector-list
	for fx1 = (vx  point)
	for fy1 = (vy  point)
	for skip first t then nil
	;; for i from 0 by 1
	with height = (send self ':inside-height)
	with width  = (send self ':inside-width)
	with wx0
	with wy0
	do
	(with-tablet-xy-mapped-to-window-xy  (fx1 fy1  wx1 wy1  width height)
	  (let  ((x1  wx0)
		 (y1  wy0)
		 (x2  (fixr (+ x (* s wx1))))
		 (y2  (fixr (+ y (* s wy1)))))
	    ;; (format t "~&~d:" (incf i)) (tyi)
	    (setq  wx0 x2  wy0 y2)
	    (unless skip
	      (demo-draw-thick-line self x1 y1  x2 y2  *line-width* alu))))))


(defun demo-show-vector-list-as-curve (self vector-list  s x y alu)
  (loop with len = (length vector-list)
	with xs = (make-array len :leader-list '(0))
	and ys = (make-array len :leader-list '(0))
	for point in vector-list
	for fx1 = (vx  point)
	for fy1 = (vy  point)
	with height = (send self ':inside-height)
	with width  = (send self ':inside-width)
	with px2 and py2
	do
	(with-tablet-xy-mapped-to-window-xy  (fx1 fy1  wx1 wy1  width height)
	  (let  ((x2  (fixr (+ x (* s wx1))))
		 (y2  (fixr (+ y (* s wy1)))))
	    (unless (and (eql x2 px2)(eql y2 py2))
	      (array-push-extend xs x2)
	      (array-push-extend ys y2))
	    (setq py2 y2 px2 x2)
	    ))
	finally
	  (send self :draw-wide-curve xs ys  (* s *line-width*) nil alu)))

(defun demo-show-vector-list-as-triangle (self vector-list  s x y alu)

  (let (x1 y1 x2 y2 x3 y3 w h)
    (multiple-value (w h)
      (send self ':inside-size))
    (multiple-value (x1 y1)
      (demo-transform-tablet-xy-to-window-xy (vx (first  vector-list))
					 (vy (first  vector-list)) w h))    
    (multiple-value (x2 y2)
      (demo-transform-tablet-xy-to-window-xy (vx (second  vector-list))
					 (vy (second  vector-list)) w h))
    (multiple-value (x3 y3)
      (demo-transform-tablet-xy-to-window-xy (vx (third  vector-list))
					 (vy (third  vector-list)) w h))
    (send self ':draw-triangle
	   (fixr (+ x (* s x1)))
	   (fixr (+ y (* s y1)))
	   (fixr (+ x (* s x2)))
	   (fixr (+ y (* s y2)))
	   (fixr (+ x (* s x3)))
	   (fixr (+ y (* s y3)))
	   alu)))


(defun demo-show-vector-list-as-polygon (self vector-list  s x y alu)
  (loop for point in vector-list
	for fx1 = (vx  point)
	for fy1 = (vy  point)
	for skip first t then nil
	
	with height = (send self ':inside-height)
	with width  = (send self ':inside-width)
	with wx0
	with wy0
	with (xmean ymean)
	initially
	(multiple-value  (xmean ymean)
	  (demo-find-xy-mean-of-vector-list  vector-list))
	(multiple-value  (xmean ymean)
	  (demo-transform-tablet-xy-to-window-xy  xmean ymean  width height))
	(multiple-value  (xmean ymean)
	  (values  (fixr (+ x (* s  xmean)))  (fixr (+ y (* s  ymean)))))
	(multiple-value (xmean ymean)
	  (values (random width) (random height)))
	do
	(with-tablet-xy-mapped-to-window-xy  (fx1 fy1  wx1 wy1
						  width height)
	  (let  ((x1  wx0)
		 (y1  wy0)
		 (x2  (fixr (+ x (* s wx1))))
		 (y2  (fixr (+ y (* s wy1)))))
	    
	    (setq  wx0 x2  wy0 y2)
	    (unless  skip
	      (send self ':draw-triangle  x1 y1  x2 y2  xmean ymean  alu))))))

; ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----

(defun  demo-find-xy-mean-of-vector-list  (vector-list)
  (loop for point in vector-list
	for count from 1 by 1
	summing (vx  point) into x-sum
	summing (vy  point) into y-sum
	finally
	(return  (values  (//  x-sum  count)
			  (//  y-sum  count)))))


(defun demo-transform-tablet-xy-to-window-xy (tx ty w h)
  (with-tablet-xy-mapped-to-window-xy  (tx ty wx wy  w h)
    (values  wx  wy)))

(defconst  *default-figure-name*  "")

(defun demo-get-figure-name  (name operation)
  (loop until
	(not (equal name ""))
	initially
	(when  (not  (stringp  *default-figure-name*))
	  (setq  *default-figure-name*  ""))
	do
	(format  t  "~&Name of figure to ~a? "  operation)
	(unless  (equal  *default-figure-name*  "")
	  (format t "[return gets default: /"~a/"]: " *default-figure-name*))
	(setq  name  (readline))
	(when  (equal name "")
	  (setq  name  *default-figure-name*))
	finally
	(return  (setq  *default-figure-name*  name))))

(defconst  *default-buffer-name*  nil)

(defun demo-get-buffer-name  (name)
  (when  (not  (stringp  *default-buffer-name*))
    (setq  *default-buffer-name*  name))
  (format  t
	   "~&Name of buffer to use? [return gets default: /"~a/"]: "
	   *default-buffer-name*)
  (setq  *default-buffer-name*
	 (let  ((b  (readline)))
	   (if  (equal b "")  *default-buffer-name*  b))))


(defvar symbolics-grid)
(defvar symbolics-grid-2)
(defvar symbolics-logo)
(defvar symbolics-logo-2)

(defvar *layer-set-for-logo-grid*  nil)

(defun demo-logo-grid-color-setup (self segn)

  (when  (null  *layer-set-for-logo-grid*)
    (setq
      *layer-set-for-logo-grid*
      (make-instance
	'layer-set
	':background-color
	(make-standard-color :rgb .5 .5 .5)
	:segment-number segn
	':layer-list 
	(list
	  (make-instance  'layer  ':color-list  (list *black* *black*))
	  (make-instance  'layer  ':color-list  (list *black* *red*))
	  (make-instance  'layer  ':color-list  (list *black* *yellow*))
	  (make-instance  'layer  ':color-list  (list *black* *green*))
	  (make-instance  'layer  ':color-list  (list *black* *cyan*))
	  (make-instance  'layer  ':color-list  (list *black* *blue*))
	  (make-instance  'layer  ':color-list  (list *black* *magenta*))
	  (make-instance  'layer  ':color-list  (list *black* *white*))))))
  (send  *layer-set-for-logo-grid* :set-segment-number segn)
  (send  *layer-set-for-logo-grid*
	 ':activate
	 (send self ':screen))
  *layer-set-for-logo-grid*)

(def-color-demo "Finger of God"
		(:value demo-logo-grid-hack
		 :color-map :change
		 :documentation "demo of color plane animation"))
  

(defun demo-logo-grid-hack (self &optional  (scale 1.0)
			    (x 0)
			    (y 0)
			    &aux (tv:screen (tv:sheet-screen self))
			    )
  
  (declare  (special  Symbolics-Logo  *line-width*))
  (multiple-value-bind (mode mapn bitp) (send tv:screen :map-mode)
    (multiple-value-bind (nil n-maps map-type) (send tv:screen :color-map-description)
      (let* ((default-map-segment-number (send tv:screen :default-map-segment-number))
	     (new-segment (min (1- n-maps) 1)))
	(unwind-protect 
	    (progn
	      (send tv:screen :set-default-map-segment-number new-segment)
	      (loop with ls = (demo-logo-grid-color-setup self new-segment)
		    for Grid = (if (oddp (random))  Symbolics-Grid  Symbolics-Grid-2)
		    for Logo = (if (oddp (random))  Symbolics-Logo  Symbolics-Logo-2)
		    with ystep = (// (send self ':inside-height) 6)
		    for yy   = (+ y (* (- (random 5) 2.0) ystep))
		    and l0 = (send  ls  ':alu-for-color-on-layer  0 0)
		    and l1 = (send  ls  ':alu-for-color-on-layer  0 1)
		    and l2 = (send  ls  ':alu-for-color-on-layer  0 2)
		    and l3 = (send  ls  ':alu-for-color-on-layer  0 3)
		    and l4 = (send  ls  ':alu-for-color-on-layer  0 4)
		    with l1in and l2in and l3in 
		    initially
		      
		      (send self ':draw-rectangle
			    (send self :inside-width) (send self ':inside-height) 
			    0 0
			    (send tv:screen ':compute-color-alu tv:alu-seta
				  (send ls :overlay-bits)))
		      
		      (unless (eq map-type :dependent)
			(send tv:screen :set-map-mode :8-bit new-segment))
		      (send tv:screen :set-default-map-segment-number new-segment)
		      
		    until
		      (or (send  terminal-io ':any-tyi-no-hang)
			  (send self ':any-tyi-no-hang))
		    do
		(when  (demo-randomp .15)
		  (let  ((*line-width*  3))
		    (cond ((setq l1in (not l1in)) 
			   (send l1 ':set-alu alu-x+y))
			  (t (send l1 ':set-alu alu-~x*y)))
		    (demo-show-buffer self  Grid  scale  x yy l1)))
		
		(when  (demo-randomp .4)
		  (demo-show-buffer self  Grid  scale  x yy l0
				    #'demo-show-vector-list-as-triangle))
		
		(when  (demo-randomp .2)
		  (let  ((*line-width*  3))
		    (cond ((setq l3in (not l3in))
			   (send l3 ':set-alu alu-x+y))
			  (t (send l3 ':set-alu alu-~x*y)))
		    (demo-show-buffer self  Logo  scale  x yy l3)))
		
		(when  (demo-randomp .2)
		  (let  ((*line-width*  5))
		    (cond ((setq l2in (not l2in))
			   (send l2 ':set-alu alu-x+y))
			  (t (send l2 ':set-alu alu-~x*y)))
		    (demo-show-buffer self  Logo  scale  x yy l2)))
		
		(when  (demo-randomp .4)
		  (demo-show-buffer self  Logo  scale  x yy l4
				    #'demo-show-vector-list-as-polygon
			))
		))
	  (send (send self :screen) ':set-map-mode mode mapn bitp)
	  (send (send self :screen) :set-default-map-segment-number
		default-map-segment-number))
	)))
  )
 
(defun demo-randomp (probability)
  (>  probability
      (si:random-in-range 0.0 1.0)))


(def-color-demo "Symbolics Logos"
		(:value demo-logo-hack
		 :documentation "Self promotion"
		 :color-map :any))

(defun demo-logo-hack (self &aux (tv:screen (tv:sheet-screen self)))
  (send self ':clear-window)
  (loop
	for s first 2.0 then (* s 0.78)
	with r and g and b and backward
	until (< s 0.1)
	do
	(setq r (si:random-in-range 0 1.0)
	      g (si:random-in-range 0 1.0)
	      b (si:random-in-range 0 1.0))
	(when (< (+  r g b) 1.5)
	  (setq r (- 1 r)
		g (- 1 g)
		b (- 1 b)))
	(demo-show-buffer self
	      (cond ((setq backward (not backward)) symbolics-logo)
		    (t symbolics-logo-2))
	      s 0 0
	      (send tv:screen ':compute-color-alu tv:alu-ior
		    r g b)
	      #'demo-show-vector-list-as-curve
	      )
	finally (return (values))))

(compile-flavor-methods layer-set)
