;;; -*- Mode: LISP; Base: 8; Package: COLOR; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; A useful window

(defvar *text-left*)
(defconst *text-top* 20.)
(defvar *circle-center*)
(defvar *cfont* nil)

(defun demo-sphere-message (self text &optional char-alu erase-alu &aux w h)

  (multiple-value (w h) (send self ':inside-size))

  (send self ':draw-rectangle w (* 4 (// h 5))
	0 (* 4 (// h 5))
	(or erase-alu (send self :erase-aluf)))
  (letf (((tv:sheet-char-aluf self) (or char-alu (send self :char-aluf))))
    (with-character-style ('(:dutch :bold :very-large) self)
      (send self ':display-x-y-centered-string
	    (string-downcase text)
	    0 (* 4 (// h 5 ))
	    w h
	    ))))
;;
;;
;; Global pan and zoom
;;
;;

(defun demo-do-global-zoom-and-pan
       (self &aux ww wh left top (tv:screen (tv:sheet-screen self)))

  (when (send tv:screen ':pan-and-zoom-p)
    (demo-sphere-message self "Global Pan and Zoom")
    (multiple-value (ww wh)
      (send self ':inside-size))
    (multiple-value (left top)
      (send self ':edges))
    
    (unwind-protect
      (progn
	;; Wrap mode must be on for nice demo
	(send tv:screen ':set-wrap 1 1)
	(send tv:screen ':set-zoom 0 0)
	
	(loop repeat 200.
	      for rad from 0 by .05
	      for x = (+ (// ww 2) (fix (* (cos rad) (// ww 2))))
	      for y = (+ (// wh 2) (fix (* (sin rad) (// wh 2))))
	      until (send terminal-io ':tyi-no-hang)
	      do
	      (send tv:screen ':set-pan (+ x left) (+ y top))
	      )
	(send tv:screen ':set-pan (+ *text-left* left) (+ top *text-top*))
	
	(process-sleep 120.)
	(loop for i from 0 to 50. by 10.
	      do
	      (send tv:screen ':set-zoom i 0)
	      (process-sleep 30.))
	(process-sleep 60.)
	(loop for i from 0 to 50. by 10.
	      do
	      (send tv:screen ':set-zoom 0 i)
	      (process-sleep 30.))
	(process-sleep 60.)
	(send tv:screen ':set-pan
	      (+ left (car *circle-center*))
	      (+ top (cadr  *circle-center*)))
	(send tv:screen ':set-zoom 0 0)
	(process-sleep 180.)
	(loop for i from 0 to 255. by 20.
	      do
	      (send tv:screen ':set-zoom i i)
	      (send tv:screen ':set-pan
		    (+ (first *circle-center*) left (// (- 255. i) 20.))
		    (+ (second *circle-center*) top (// (- 255. i) 20.)))
	      (process-sleep 30.))
	(process-sleep 120.)
	)
      (send tv:screen ':set-pan 0 0)
      (send tv:screen ':set-zoom 0 0)
      )))


(defun demo-do-cursor-color-map (self &aux (tv:screen (tv:sheet-screen self)))

  (dotimes (slot 256.)
    ;; For map 3, just use white
    (send tv:screen ':write-color-map-image slot -1 -1 -1 3))

  (loop for slot from 1 to 255. with r and g and b do
    ;; For map 2, brighten the color underneath
	(multiple-value (r g b) (send tv:screen ':read-color-map-image slot 1))
	(send tv:screen ':write-color-map-image slot
	      (max 0 (min 1777 (* r 5)))
	      (max 0 (min 1777 (* g 5)))
	      (max 0 (min 1777 (* b 5)))
	      2))
  (send tv:screen ':update-color-map-from-image))


(defun demo-do-cursor (self &aux (tv:screen (tv:sheet-screen self)))
  
  
  (when (send tv:screen ':cursor)
    (demo-sphere-message self "Hardware Cursor")
    
    (let ((cursor-bitmap (send tv:screen ':cursor-image-bitmap))
	  (bitmap-alu (sc-fill-alu 1 -1))
	  (w (send self :inside-width))
	  (h (send self :inside-height)))
      
      (multiple-value-bind (x-start y-start)
	  (tv:sheet-calculate-offsets self tv:screen)
	
	(multiple-value-bind (cursor-w cursor-h)
	    (send cursor-bitmap :size)
	  
	  (demo-do-cursor-color-map self)
	  
	  (send cursor-bitmap :draw-rectangle cursor-w cursor-h 0 0 bitmap-alu)
	  
	  
	  (send bitmap-alu :set-fill-data 2)
	  
	  (send cursor-bitmap :draw-rectangle
		(- cursor-w 20) 7 10 4 bitmap-alu)
	  (send cursor-bitmap :draw-rectangle
		(- cursor-w 20) 7 10 (- cursor-h (+ 7 4 -1)) bitmap-alu)
	  (send cursor-bitmap :draw-rectangle
		7 (- cursor-h 20) 4 10 bitmap-alu)
	  (send cursor-bitmap :draw-rectangle
		7 (- cursor-h 20) (- cursor-w 7 4 -1) 10 bitmap-alu)
	  
	  
	  (si:with-character-style ('(:device-font fonts:cptfontb :normal) cursor-bitmap)
	    
	    (send cursor-bitmap :DISPLAY-X-Y-CENTERED-STRING
		  "N" 0 0 cursor-w (// cursor-h 2))
	    (send cursor-bitmap :DISPLAY-X-Y-CENTERED-STRING
		  "S" 0 (// cursor-h 2) cursor-w  cursor-h)
	    (send cursor-bitmap :display-x-y-centered-string
		  "E" (// cursor-w 2) 0 cursor-w cursor-h)
	    (send cursor-bitmap :display-x-y-centered-string
		  "W" 0 0 (// cursor-w 2) cursor-h)
	    )
	  
	  (send bitmap-alu :set-fill-data -1)
	  (send cursor-bitmap :draw-line 12. 12. (- cursor-w 12.) (- cursor-h 12.) bitmap-alu)
	  (send cursor-bitmap :draw-line 12. (- cursor-w 12.) (- cursor-h 12.) 12. bitmap-alu)
	  
	  (unwind-protect
	      (progn
		(send tv:screen ':new-cursor)
		(send tv:screen ':set-cursor-visible? t)
		
		(*catch 'done
		  (let ((x (// w 2)) (y (// h 2)))
		    (loop repeat 10 do
		      (let ((x-end (random (- w cursor-w)))
			    (y-end (random (- h cursor-h)))
			    )
			(loop repeat 200.
			      for nx from x by (// (- x-end x) 200.0)
			      for ny from y by (// (- y-end y) 200.0)
			      finally (setq x nx y ny)
			      when (send terminal-io ':tyi-no-hang)
				do (*throw 'done nil)
			      do (send tv:screen ':set-cursor-position
				       (+ x-start (fixr nx))
				       (+ y-start (fixr ny))))))))
		)
	    (send tv:screen ':set-cursor-visible? nil))
	  )))))


(defun demo-do-cadbuffer-pan (self &aux (tv:screen (tv:sheet-screen self)))
  (when (and (send tv:screen :operation-handled-p :set-pan)
	     (not (send tv:screen :pan-and-zoom-p)))
    (demo-sphere-message self "(limited) Global Pan")
    (multiple-value-bind (old-x old-y) (send tv:screen :pan)
      (unwind-protect
	  (loop repeat 10 
	    as i from 0 by 32.
		do
	    (process-sleep 120.)
	    (send tv:screen :set-pan i i))
	(send tv:screen :set-pan old-x old-y))
      )))

(defun demo-do-cadbuffer-overlay (self mode message
				  &optional (restore-original-mode t)
				  &aux (tv:screen (tv:sheet-screen self)))

  (when (memq mode (send tv:screen ':map-modes))

    (demo-sphere-message self message)
    
    (multiple-value-bind (x-start y-start)
	(tv:sheet-calculate-offsets self tv:screen)
      (let* ((ov (tv:make-window 'tv:window
				 :superior (send tv:screen :active-overlay-screen)
				 :borders nil
				 :label nil
				 :blinker-p nil
				 :save-bits nil))
	     (ov-alu (make-instance 'general-sc-color-alu
				    :alu tv:alu-seta
				    :array :external-overlay
				    :plane-mask -1 :fill-data -1))
	     (ov-erase (make-instance 'general-sc-color-alu
				      :alu tv:alu-setz
				      :array :external-overlay
				      :plane-mask -1 :pixel-mask -1))
	     (w (send ov :inside-width))
	     (h (send ov :inside-height))
	     (ow-w (// w 10))
	     (ow-h (// h 10))
	     (overlay-colors (send tv:screen :send-if-handles :overlay-colors))
	     (overlay-color (send tv:screen :overlay-color))
	     (ov-window (tv:make-window 'tv:window
					:borders nil
					:label "Overlay"
					:expose-p nil
					:width ow-w

					:height ow-h
					:superior ov
					:save-bits nil
					:blinker-p nil)))

	(unwind-protect
	    (tv:without-screen-management

	      (when (eq mode :8-bit-with-transparent-overlay)
		(let ((alu (make-instance 'general-sc-color-alu
					  :alu tv:alu-seta
					  :fill-data 1
					  :plane-mask -1)))
		  (send ov-window :set-erase-aluf alu)
		  (send ov :set-erase-aluf alu)
		  
		  (loop for i from 1 below 255.
			do
		    (multiple-value-bind (r g b)
			(send tv:screen :read-managed-map i 1)
		      (send tv:screen :write-managed-map i (// r 2) (// g 2) (// b 2) 2)
		      (send tv:screen :write-managed-map i
			    (+ r (min r (// (- 1.0 r) 2)))
			    (+ g (min g (// (- 1.0 g) 2)))
			    (+ b (min b (// (- 1.0 b) 2)))
			    3)))
		  (send tv:screen :new-color-map)
		  ))

	      (send tv:screen :set-overlay-color :white)

	      (send ov-window :set-position
		    (setq x-start (truncate (+ x-start (// w 2))))
		    (setq y-start (truncate (+ y-start (// h 2)))))
	      (send ov-window :expose)
	      (send tv:screen :set-map-mode mode)
	      (send ov :expose)
	      (test-reso ov :black-alu (send ov :erase-aluf))
	      (test-grid ov-window :fat (send ov-window :erase-aluf))

	      (when overlay-colors
		(let* ((alu (make-instance 'general-sc-color-alu 
					   :fill-data 2
					   :alu tv:alu-ior))
		       (ow2 (// ow-w 2))
		       (oh2 (// ow-h 2))
		       (ow4 (// ow-w 4))
		       (oh4 (// ow-h 4))
		       (corner (round (sqrt (+ (* ow4 ow4) (* oh4 oh4))))))
		  
		  (send ov-window :draw-rectangle
			ow2 oh2 ow4 oh4 alu)

		  (if (neq mode :8-bit-with-transparent-overlay)
		      (send alu :set-fill-data 2)
		      (send alu :set-alu tv:alu-seta)
		      (send alu :set-fill-data 0))

		  (send ov-window :draw-ring ow2 oh2
			(+ 2 corner) (- (max ow2 oh2) 2)
			alu)))

	      (demo-sphere-message self message ov-alu ov-erase)

	      (loop named outer-loop
		    for color in '(:white :red :green :blue :black :cyan :yellow :magenta)
		    do
		(if overlay-colors
		    (loop for i from 1 to 3 do
		      (send tv:screen :set-overlay-colors
			    (list (// (+ 128 (random 128)) 256.0)
				  (// (+ 128 (random 128)) 256.0)
				  (// (+ 128 (random 128)) 256.0))
			    i))
		    (send tv:screen :set-overlay-color color)
		    )
		
		(let ((x-end (random (- w ow-w)))
		      (y-end (random (- h ow-h)))
		      )
		  (loop repeat 100.
			with xinc = (// (- x-end x-start) 100.0)
			and yinc =  (// (- y-end y-start) 100.0)	
			do (incf x-start xinc)
			   (incf y-start yinc)

			   (multiple-value-bind (old-x old-y)
			       (send ov-window :position)
			     (send ov-window :set-position
				   (truncate x-start) (truncate y-start))
			     (multiple-value-bind (new-x new-y)
				 (send ov-window :position)
			       (let* ((xinc (- new-x old-x))
				      (yinc (- new-y old-y))
				      (clear-x (if (> xinc 0) old-x (+ new-x ow-w)))
				      (clear-y (if (> yinc 0) old-y (+ new-y ow-h)))
				      )
				 (when ( xinc 0)
				   (send ov :draw-rectangle (abs xinc) ow-h
					 clear-x old-y (send ov :erase-aluf)))
				 (when ( yinc 0)
				   (send ov :draw-rectangle ow-w (abs yinc)
					 old-x clear-y (send ov :erase-aluf))))))

			when (send terminal-io ':tyi-no-hang)
			  do (return-from outer-loop nil)
			     ))))
	  (if overlay-colors
	      (loop for i in overlay-colors
		    as j from 0
		    do (send tv:screen :set-overlay-colors i j))
	      (send tv:screen :set-overlay-color overlay-color))
	  (send ov-window :deactivate)
	  (send ov :deactivate)
	  (when restore-original-mode (send tv:screen :set-map-mode :8-bit))
	  )))))

#||
(defun demo-do-hardware-overlay (self mode message &aux (tv:screen (tv:sheet-screen self)))

  (when (memq mode (send tv:screen ':map-modes))

    (demo-sphere-message self message)
    
    (multiple-value-bind (x-start y-start)
	(tv:sheet-calculate-offsets self tv:screen)
      (unwind-protect
	  (tv:without-screen-management
	    (send tv:screen :set-map-mode mode)
	    (multiple-value-bind (ov-p ov-s)
		(send tv:screen :overlay-description)
	      (let* ((ov-alu (make-instance 'general-sc-color-alu
					    :alu tv:alu-seta
					    :array :default
					    :plane-mask (dpb -1 (byte ov-s ov-p) 0)
					    :fill-data -1))
		     (ov-erase (make-instance 'general-sc-color-alu
					      :alu tv:alu-setz
					      :array :default
					      :plane-mask (dpb -1 (byte ov-s ov-p) 0)
					      :pixel-mask -1))
		     (w (send self :inside-width))
		     (h (send self :inside-height))
		     (ow-w (// w 10))
		     (ow-h (// h 10)))
	      (color:test-reso self
			       :background-alu ov-erase
			       :white-alu ov-alu
			       :black-alu ov-erase)
	      (demo-sphere-message self message ov-alu ov-erase)
	      (loop named outer-loop
		    for color in '(:white :red :green :blue :black :cyan :yellow :magenta)
		    do
		(send tv:screen :set-overlay-color color)
		
		(let ((x-end (random (- w ow-w)))
		      (y-end (random (- h ow-h)))
		      )
		  (loop repeat 100.
			with xinc = (// (- x-end x-start) 100.0)
			and yinc =  (// (- y-end y-start) 100.0)	
			do (incf x-start xinc)
			   (incf y-start yinc)

			   (multiple-value-bind (old-x old-y)
			       (send ov-window :position)
			     (send ov-window :set-position
				   (truncate x-start) (truncate y-start))
			     (multiple-value-bind (new-x new-y)
				 (send ov-window :position)
			       (let* ((xinc (- new-x old-x))
				      (yinc (- new-y old-y))
				      (clear-x (if (> xinc 0) old-x (+ new-x ow-w)))
				      (clear-y (if (> yinc 0) old-y (+ new-y ow-h)))
				      )
				 (when ( xinc 0)
				   (send ov :draw-rectangle (abs xinc) ow-h
					 clear-x old-y tv:alu-setz))
				 (when ( yinc 0)
				   (send ov :draw-rectangle ow-w (abs yinc)
					 old-x clear-y tv:alu-setz)))))

			when (send terminal-io ':tyi-no-hang)
			  do (return-from outer-loop nil)
			     ))))
	  (send tv:screen :set-map-mode :8-bit)
	  (send ov-window :deactivate)
	  (send ov :deactivate)
	  ))))))
||#

;;
;;
;; Line index table hacking
;;
;;
;;
(defun demo-do-individual-zoom-and-pan (self &aux (tv:screen (tv:sheet-screen self)))
  (when (send tv:screen ':line-index-table)
    (multiple-value-bind (left top )
	(tv:sheet-calculate-offsets self tv:screen)
      (let ((lpz (make-instance 'line-index-pan-zoom
				:first-line top
				:last-line (+ top 110)
				:border-lines 0
				:dest-screen tv:screen)))
	(unwind-protect
	    (progn
	      ;; Wrap mode must be on for nice demo
	      (send tv:screen ':set-wrap 1 1)
	      (send lpz :set-video-on t)
	      (demo-sphere-message self "Pan individual lines")
	      
	      (loop for i from 0 below *text-left* by (ceiling *text-left* 100.)
		    do
		(send lpz :set-pan (+ left i) top)
		)
	      (demo-sphere-message self "Zoom individual lines")
	      (dotimes (j 2)
		(dotimes (i 5)
		  (send lpz :set-pan-and-zoom
			(+ left *text-left*) top
			i j)
		  (process-sleep 45.))))
	  (send lpz :set-video-on nil)
	  )))))

(defun demo-do-offscreen-memory (self &aux (tv:screen (tv:sheet-screen self)))
  (when (and (send tv:screen :line-index-table)
	     (color-bitmap-on-real-screen-flavor tv:screen)
	     (typep self 'tv:window))
    (let ((ofs (send tv:screen :unused-screen-memory-size))
	  (*circle-center* nil)
	  (*text-left* nil))
      (when (and ofs (> ofs (* 20 (send tv:screen :width))))
	(let* ((offscreen-screen
		 (make-color-bitmap-on-real-screen tv:screen
				:width (send tv:screen :width)
				:first-line 110
				:border-lines 2
				:border-array-pixel -1
				:height (min (- (tv:sheet-inside-height self) 130)
					     (floor ofs (send tv:screen :width)))
				:right-margin-size (- (tv:sheet-width tv:screen)
						      (tv:sheet-inside-right tv:screen))
				))
	       (win (tv:make-window 'tv:window :superior offscreen-screen
				    :save-bits nil
				    :label "offscreen window")))
	  (unwind-protect
	      (progn
		(send offscreen-screen :expose)
		(demo-sphere-message self "Offscreen Memory")
		(send win :expose)
		(send offscreen-screen :set-video-on t)
		(demo-spheres-draw-initial-screen win 0)
		(demo-sphere-message win "This is Offscreen Memory")
		(process-sleep 300)
		(loop for i from 110 below (send win :height) by 3
		      do
		  (send offscreen-screen :set-pan 0 i nil)
		  (send offscreen-screen :set-last-line
			(+ 100 (- i) (send offscreen-screen :height)))
		  ))
	    (send offscreen-screen :set-video-on nil)
	    (send offscreen-screen :kill)))))))

(defun demo-scroll-liti (self start size &optional backwards?)
  (let* ((screen (tv:sheet-screen self))
	 (lit (send screen ':line-index-table-image))
	 (liti (or (and (array-has-leader-p lit)
			(sc-control-alternate-array lit))
		   lit)))
    (declare (sys:array-register-1d liti))
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")    ;this is really just a hack that happens to work for both
    ;nuvista and standard color controllers.  The right and modern
    ;way to do this is to use line index pan zoom objects.
0    (if backwards?
        (loop repeat size
	      for off downfrom (1- size)
	      for noff = (- size 2) then (if (zerop off) (1- size) (1- off))
	      for cur = (aref liti (+ start off)) then next
	      for next = (aref liti (+ start noff))
	      do (setf (aref liti (+ start noff)) cur))
	(loop repeat size
	      for off from 0
	      for noff = 1 then (\ (1+ off) size)
	      for cur = (aref liti (+ start off)) then next
	      for next = (aref liti (+ start noff))
	      do (setf (aref liti (+ start noff)) cur)))))

(defun demo-invert-liti (self start size)
  (let* ((screen (tv:sheet-screen self))
	 (lit (send screen ':line-index-table-image))
	 (liti (or (and (array-has-leader-p lit)
			(sc-control-alternate-array lit))
		   lit)))
    (declare (sys:array-register-1d liti))
1    ;this is really just a hack that happens to work for both
    ;nuvista and standard color controllers
0    (dotimes (idx (// size 2))
      (let* ((i0 (+ idx start))
	     (i1 (- (+ start size) idx 1))
	     (v0 (aref liti i0)))
1	;can't use swapf because its macros disguise the array register
0	(setf (aref liti i0) (aref liti i1))
	(setf (aref liti i1) v0)))))

(defun demo-do-line-index-table (self &aux (tv:screen (tv:sheet-screen self)))
  (when (send tv:screen ':line-index-table)
    (demo-sphere-message self "move individual lines")
    (unwind-protect
      (progn
	;; Now, invert the screen
	(loop repeat 4 do
	  (demo-invert-liti self  0 1023.)
	  (send tv:screen ':new-line-index-table)
	  (process-sleep 60.))
	;; Scroll around
	(dotimes (i 301.)
	  (demo-scroll-liti self 100. 350. nil)
	  (demo-scroll-liti self 400. 350. t)
	  (if (zerop (\ i 1.)) (send tv:screen ':new-line-index-table)))
	)
      (send tv:screen ':initialize-line-index-table)
      (send tv:screen ':new-line-index-table))))

;;
;;
;; Simple drawing, and copying around segments
;;
;;

(defun demo-draw-shaded-sphere 
  (self x y r steps starting-color overlay-bits &aux (tv:screen (tv:sheet-screen self)))

  (multiple-value-bind (ww wh)
      (send self ':inside-size)
    (setq r (min (* r ww) (* r wh)))
    (setq x (fixr (* x ww))
	  y (fixr (* y wh)))
    (loop repeat steps with alu = tv:alu-seta
	  for r from r by (- (// r steps))
	  for color from starting-color
	  when (> (fixr r) 0)
	  do
	    (send self ':draw-filled-in-circle x y (fixr r)
		  (send tv:screen ':compute-color-alu alu (logior overlay-bits color)))

	    )
    ))

(defun demo-draw-multiple-spheres
	   (self x y ir steps starting-color nx x-off overlay-bits &aux r)

  (multiple-value-bind (ww wh)
      (send self ':inside-size)
    (demo-draw-shaded-sphere self x y ir steps starting-color overlay-bits)
    (setq *circle-center* (list (fixr (* x ww)) (fixr (* y wh))))
    (setq r (min (* ir ww) (* ir wh)))
    (loop repeat nx
	  with ileft = (1- (fixr (- (* ww x) r)))
	  and itop = (1- (fixr (- (* wh y) r)))
	  and fixr = (1+ (fixr r))
	  for x from (+ x x-off) by x-off
	  do (send self ':bitblt-within-sheet tv:alu-seta (* 2 fixr) (* 2 fixr)
		   ileft itop
		   (fixr (- (* x ww) r)) (fixr (- (* y wh) r))))))

;;
;; Color map 
;;
(defun demo-do-color-map-animation (self)
  (demo-sphere-message self "Animate color map")
  (loop repeat 10 do
    (demo-spheres-setup-color-map self t nil)
    (process-sleep 30.)
    (demo-spheres-setup-color-map self nil nil)
    (process-sleep 30.))
  (loop repeat 5 do
    (dotimes (j 4)
      (demo-spheres-setup-color-map self nil j)
      (process-sleep 30.))))

(defun demo-spheres-setup-color-map (self &optional invert? rotate
				     &aux (tv:screen (tv:sheet-screen self)))
    ;; First four regions are sets of 50 colors each
    (loop for (r g b) in '((0 0 0) (0 0 0) (0 0 0) (0 0 0))
	  for (roff goff boff) in '((0 0 20.) (0 20. 0) (20. 0 0) (20. 20. 20.))
	  for islot in (selectq rotate
			 ((nil 0) '(1. 51. 101. 151.))
			 (1 '(151. 1. 51. 101.))
			 (2 '(101. 151. 1. 51.))
			 (3 '(51. 101. 151. 1.)))
	  do (loop repeat 50.
		   for slot from islot
		   do (let ((slot (if invert? (+ islot (- 49. (- slot islot))) slot)))
			(send tv:screen ':write-color-map-image slot r g b))
		      (incf r roff)
		      (incf g goff)
		      (incf b boff)))

    ;; Also, put a gray scale in the part of the map
    (loop for slot from 255. downto 201.
	  for color from 1777 by -40.
	  do (send tv:screen ':write-color-map-image slot color color color))
    ;; And a red background
    (send tv:screen ':write-color-map-image 0 300. 0 0)
    (send tv:screen ':new-color-map nil 1))

;;
;;
;; Simple drawing
;;
;;

(defun demo-spheres-draw-initial-screen
       (self overlay-bits &aux (tv:screen (tv:sheet-screen self)))

  (send self ':clear-window)

  (with-character-style ('(:dutch :bold :very-large) self)
    (let* ((str (format nil "Symbolics ~A" (send tv:screen :name)))
	   (slen (send self ':string-length str))
	   (ww (tv:sheet-inside-width self)))
      (send self ':set-cursorpos (setq *text-left* (// (- ww slen) 2)) *text-top*)
      (send self ':string-out str)
      (dotimes (i 4)
	(demo-draw-multiple-spheres self
	      0.15 (* (+ 1.25 i) 0.15) 0.047 50. (1+ (* i 50.)) 7. 0.10 overlay-bits)))))

(def-color-demo "spheres demo"
		(:value DEMO-SPHERES-DEMO
		 :documentation "Demonstrate all hardware features"
		 :color-map :change))

(defun demo-spheres-demo (self &aux (tv:screen (tv:sheet-screen self)))
  (let* ((def-color-map (send tv:screen :default-map-segment-number ))
	 (*circle-center* nil)
	 (*text-left* nil))
    (multiple-value-bind (shift bits overlay-type) (send tv:screen ':overlay-description)
      (setq bits (1- (lsh 1 bits)))
      (multiple-value-bind (mode mapn bitpos)
	  (send tv:screen :map-mode)
	(unwind-protect

	    (letf (((tv:sheet-char-aluf self)
		    (send tv:screen ':compute-color-alu tv:alu-ior
			  (logior #O377 (logand bits (lsh 1 shift)))))
		   ((tv:sheet-erase-aluf self)
		    (send tv:screen ':compute-color-alu tv:alu-seta
			  (logior (logand bits (lsh 1 shift)) 0))))
	      
	      (send self ':clear-window)

	      (when (neq overlay-type :transparent)
		(send tv:screen ':set-map-mode :8-bit 1)
		(send tv:screen ':set-default-map-segment-number 1))
	      
	      (demo-spheres-setup-color-map self)

	      (demo-spheres-draw-initial-screen self (logand bits (lsh 1 shift)))
	      
	      (demo-do-color-map-animation self)
	      
	      (demo-do-line-index-table self)
	      (demo-do-individual-zoom-and-pan self)
	      (demo-do-offscreen-memory self)
	      (demo-do-cursor self )
	      (demo-do-cadbuffer-overlay self :8-bit-with-transparent-overlay
		    "Transparent Overlay" nil)
	      (demo-do-cadbuffer-overlay self :8-bit-with-embedded-overlay
		    "Embedded Overlay" nil)
	      (demo-do-cadbuffer-overlay self :8-bit-with-foreground-overlay
		    "Foreground Overlay" t)
	      (demo-do-global-zoom-and-pan self )
	      (demo-do-cadbuffer-pan self)
	      (demo-sphere-message self "")
	      (process-sleep 120.))
	  
	  (send tv:screen ':set-map-mode mode mapn bitpos)
	  (send tv:screen ':set-default-map-segment-number def-color-map)
	  )))
    )
  )

