D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: Lisp; Package: Color; Syntax: Common-lisp; Lowercase: Yes; Base: 10. -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;; Adapted for the Lisp Machine by joseph, with some help from DCP and leo.
;;; Originally written for MagicSix (or one of its predecessors?) by cwr.

;;; Grids, dots, circles - stuff that's the same regardless of display hardware0.
(defun(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") get-offset-and-num-lines0 (width holesize thickness)
  (multiple-value-bind (q r) (floor width (+ holesize thickness))
    (cond ((= r thickness)
	   (values holesize q))
	  (( r (* 3 thickness))
	   (values (+ holesize (/ r 2)) (- q 1)))
	  (t
	   (values (/ r 2) (+ q 1))))))

(defun2 draw-grid0 (holesize thickness &optional (w standard-output))
  (multiple-value-bind (width height)
      (send w :inside-size)
    (loop for frame from 0 below thickness do
      (send w :draw-line frame frame (- width frame 1) frame)
      (send w :draw-line frame (- height frame 1) (- width frame 1) (- height frame 1))
      (send w :draw-line frame frame frame (- height frame 1))
      (send w :draw-line (- width frame 1) frame (- width frame 1) (- height frame 1)))
    
    (multiple-value-bind (offset num-lines)
	(get-offset-and-num-lines (- width (* 2 thickness)) holesize thickness)
      (loop for x from (+ thickness offset) by (+ thickness holesize) repeat num-lines do
	(loop for x-real from x repeat thickness do
	  (send w :draw-line x-real 0 x-real (- height 1)))))
    
    (multiple-value-bind (offset num-lines)
	(get-offset-and-num-lines (- height (* 2 thickness)) holesize thickness)
      (loop for y from (+ thickness offset) by (+ thickness holesize) repeat num-lines do
	(loop for y-real from y repeat thickness do
	  (send w :draw-line 0 y-real (- width 1) y-real))))))

(defun2 draw-dots0 (holesize thickness &optional (w standard-output))
  (multiple-value-bind (width height)
      (send w :inside-size)
    (multiple-value-bind (xoffset num-vertical-lines)
	(get-offset-and-num-lines (- width (* 2 thickness)) holesize thickness)
      (multiple-value-bind (yoffset num-horizontal-lines)
	  (get-offset-and-num-lines (- height (* 2 thickness)) holesize thickness)
	(let ((dotoffset (round (/ holesize 2.0))))
	  (loop for x from (+ xoffset thickness dotoffset) by (+ holesize thickness)
		repeat (- num-vertical-lines 1)
		do (loop for y from (+ yoffset thickness dotoffset) by (+ holesize thickness)
			 repeat (- num-horizontal-lines 1)
			 do (send w :draw-rectangle thickness thickness x y))))))))

1;;; Lots of magic numbers in here; they should really be defvar'd...
0(defun2 draw-circles0 (thickness &optional (w standard-output))
  (multiple-value-bind (width height)
      (send w :inside-size)
    (let* ((cx (/ width 2))
	   (cy (/ height 2))
	   (rmax (min cx cy)))
      (loop for percentage in '(.71 .883) do
	(loop for radius upfrom (round (* rmax percentage)) repeat thickness do
	  (send w :draw-circle cx cy radius)))
      (let* ((corner-x-offset (/ (* width 1.5) 16))
	     (corner-y-offset (/ (* width 1.5) 12))
	     (corner-offset (round (min corner-x-offset corner-y-offset)))
	     (center-x-offset (- cx corner-offset))
	     (center-y-offset (- cy corner-offset)))
	(loop for xfactor from -1 to 1 by 2 do
	  (loop for yfactor from -1 to 1 by 2 do
	    (loop for radius upfrom (round (* corner-offset .8)) repeat thickness do
	      (send w :draw-circle
		    (+ cx (* center-x-offset xfactor))
		    (+ cy (* center-y-offset yfactor))
		    radius))))))))



(defvar2 *minimum-intensity*0 0)
(defvar 2*maximum-intensity*0 1023)

1;;; 0 reserved for background (black)
;;; 255 reserved for grid (white)
0(defvar2 *lowest-color-slot*0 1)
(defvar 2*highest-color-slot*0 127)
(defvar 2*lowest-gray-slot*0 128)
(defvar 2*highest-gray-slot*0 254)


(defun 2wash-nicely-through-color-map0 (w)1 ;; thanks to DCP
0  (let (( 3.1415963)
	(s (send w :screen)))
    (loop with (r b g) = `(,*maximum-intensity* 0 0)
	  with colored-slots = (1+ (- *highest-color-slot* *lowest-color-slot*))
	  for side upfrom 0
	  for (dr dg db) in '((+0 +1 +0)
			      (-1 +0 +0)
			      (+0 +0 +1)
			      (+0 -1 +0)
			      (+1 +0 +0)
			      (+0 +0 -1))
	  for this-base = *lowest-color-slot* then next-base
	  as next-base = (+ *lowest-color-slot* (/ (* (1+ side) colored-slots) 6))
	  as delta = (+ dr dg db) do
      (loop with count = (- next-base this-base)
	    for offset below count
	    as phase = (/ (* offset (/  2)) count)
	    as intensity = (if (minusp delta) (cos phase) (sin phase))
	    do (setq intensity (fixr (* *maximum-intensity* intensity)))
	       (cond ((not (zerop dr)) (setq r intensity))
		     ((not (zerop dg)) (setq g intensity))
		     ((not (zerop db)) (setq b intensity)))		   
	       (send s :write-color-map-image (+ this-base offset) r g b))
	  finally (send s :write-color-map-image *highest-color-slot* r g b)
		  )))

(defun2 wash-gray-through-color-map0 (w)
  (let ((s (send w :screen))
	(di (/ (float *maximum-intensity*) (- *highest-gray-slot* *lowest-gray-slot*))))
    (loop for slot from *lowest-gray-slot* to *highest-gray-slot*
	  for i first 0 then (+ i di)
	  for intensity = (round i) do
      (send s :write-color-map-image slot intensity intensity intensity))
    ))



(defvar2 *wash-left*0 0.1)
(defvar2 *wash-right0 0.9)
(defvar2 *smooth-graying-top*0 0.205)
(defvar2 *smooth-graying-bottom*0 0.26)
(defvar2 *chunky-graying-top*0 0.265)
(defvar2 *chunky-graying-bottom*0 0.29)
(defvar2 *chunky-whitening-top*0 0.295)
(defvar2 *chunky-whitening-bottom*0 0.32)
(defvar2 *smooth-whitening-top*0 0.325)
(defvar2 *smooth-whitening-bottom*0 0.38)
(defvar2 *color-wash-top*0 0.7)
(defvar2 *color-wash-bottom*0 0.78)

(defun2 chip-endpoints0 (left right num-chips)
  (let* ((width (/ (- (1+ right) left) (float num-chips)))
	 (edges (loop for i upfrom 0
		      for l first left then (1+ r)
		      for r first (+ (1- left) width) then (+ (1- l) width)
		      repeat num-chips
		      ;; this third number represents the fraction through the spread
		      ;; that should be represented.
		      collect `(,(round l) ,(round r) ,(/ i (float (1- num-chips)))))))
    edges))

(defun2 false-color-draw-wash-from-color-map
0       (window left top right bottom first-slot last-slot &optional num-chips)
  (stack-let ((endpoints (chip-endpoints left right
					 (or num-chips
					     (1+ (abs (- last-slot first-slot)))))))
    (multiple-value-bind (nil nil pos ) (send (send window :screen) :map-mode)
      (let ((alu (make-instance 'general-sc-color-alu))
	    (slot-width (float (1+ (abs (- last-slot first-slot)))))
	    (slot-slope (if (< first-slot last-slot) 1 -1)))
	(loop for (l r frac) in endpoints
	      for w = (1+ (- r l))
	      for h = (1+ (- bottom top))
	      for slot = (round (+ first-slot (* slot-slope (1- slot-width) frac)))
	      do (send alu :set-fill-data (lsh slot pos))
		 (send window :draw-rectangle w h l top alu))))))

(defun2 false-color-draw-washes0 (window)
  (let ((screen (send window :screen)))
    (send screen :write-color-map-image 0 *minimum-intensity* *minimum-intensity* *minimum-intensity*)
    (send screen :write-color-map-image 255 *maximum-intensity* *maximum-intensity* *maximum-intensity*)
    (wash-nicely-through-color-map window)
    (wash-gray-through-color-map window)
    (send screen :new-color-map
	  (send screen :color-map-image)
	  (send screen :default-map-segment-number))
    (flet ((draw-wash (top bottom first-slot last-slot &optional num-chips)
	     (multiple-value-bind (width height)
		 (send window :inside-size)
	       (false-color-draw-wash-from-color-map
		 window
		 (round (* width *wash-left*))
		 (round (* height top))
		 (round (* width *wash-right))
		 (round (* height bottom))
		 first-slot
		 last-slot
		 num-chips))))
      (draw-wash *smooth-graying-top*   *smooth-graying-bottom*   *lowest-gray-slot*  *highest-gray-slot*)
      (draw-wash *chunky-graying-top*   *chunky-graying-bottom*   *lowest-gray-slot*  *highest-gray-slot*  6)
      (draw-wash *chunky-whitening-top* *chunky-whitening-bottom* *highest-gray-slot* *lowest-gray-slot*   6)
      (draw-wash *smooth-whitening-top* *smooth-whitening-bottom* *highest-gray-slot* *lowest-gray-slot*)
      (draw-wash *color-wash-top*       *color-wash-bottom*       *lowest-color-slot* *highest-color-slot*))))



(defun2 direct-color-draw-gray-wash0 (window left top right bottom i1 i2 &optional num-chips)
  (let* ((screen (send window :screen))
	 (scratch-alu (send screen :compute-color-alu tv:alu-seta 0.0 0.0 0.0))
	 (intensity-width (abs (- i2 i1)))
	 (intensity-slope (if (< i1 i2) 1 -1)))
    (if num-chips
	(stack-let ((endpoints (chip-endpoints left right num-chips)))
	  (loop for (l r frac) in endpoints
		for width = (1+ (- r l))
		for height = (1+ (- bottom top))
		for i = (+ i1 (* intensity-slope frac intensity-width))
		for alu = (send screen :compute-color-alu scratch-alu i i i)
		do (send window :draw-rectangle width height l top alu)))
	(loop for x from left to right
	      for fractional-width = (/ (float (- x left)) (- right left))
	      for ni = (+ i1 (* intensity-slope intensity-width fractional-width))
	      for alu = (send screen :compute-color-alu scratch-alu ni ni ni)
	      do (send window :draw-line x top x bottom alu)))))
	
(defun 2direct-color-draw-nice-color-wash0 (window left top right bottom)1 ;; thanks to DCP
0  (loop with  = 3.1415963
	with screen = (send window :screen)
	with scratch-alu = (send screen :compute-color-alu tv:alu-seta 0 0 0)
	with height = (1+ (- bottom top))
	with (r g b) = `(,*maximum-intensity* 0 0)
	with colored-slots = (1+ (- right left))
	with x = left
	for side upfrom 0
	for (dr dg db) in '((+0 +1 +0)
			    (-1 +0 +0)
			    (+0 +0 +1)
			    (+0 -1 +0)
			    (+1 +0 +0)
			    (+0 +0 -1))
	for this-corner = left then next-corner
	for next-corner = (+ left (/ (* (1+ side) colored-slots) 6))
	for delta = (+ dr dg db) do
    (loop with count = (- next-corner this-corner)
	  for offset below count
	  as phase = (/ (* offset (/  2)) count)
	  as intensity = (if (minusp delta) (cos phase) (sin phase))
	  do (cond ((not (zerop dr)) (setq r intensity))
		   ((not (zerop dg)) (setq g intensity))
		   ((not (zerop db)) (setq b intensity)))
	     (send window :draw-rectangle 1 height x top
		   (send screen :compute-color-alu scratch-alu r g b))
	     (incf x))))

(defun2 direct-color-draw-washes0 (window)
  (multiple-value-bind (width height)
      (send window :inside-size)
    (let ((left (round (* width *wash-left*)))
	  (right (round (* width *wash-right))))
      (flet ((draw-gray-wash (top bottom i1 i2 &optional num-chips)
	       (direct-color-draw-gray-wash
		 window
		 left
		 (round (* height top))
		 right
		 (round (* height bottom))
		 i1 i2
		 num-chips)))
	(draw-gray-wash *smooth-graying-top*   *smooth-graying-bottom*   0.0 1.0)
	(draw-gray-wash *chunky-graying-top*   *chunky-graying-bottom*   0.0 1.0 6)
	(draw-gray-wash *chunky-whitening-top* *chunky-whitening-bottom* 1.0 0.0 6)
	(draw-gray-wash *smooth-whitening-top* *smooth-whitening-bottom* 1.0 0.0)
	(direct-color-draw-nice-color-wash
	  window
	  left
	  (round (* height *color-wash-top*))
	  right
	  (round (* height *color-wash-bottom*)))))))

(defvar2 *holesize*0 41)
(defvar2 *line-thickness*0 2)

(defun2 draw-date0 (w)
  (multiple-value-bind (width height)
      (send w :inside-size)
    (let ((cs (si:backtranslate-font 'fonts:40vr)))
      (with-character-style (cs w)
	(let* ((now (with-output-to-string (ss) (time:print-current-date ss)))
	       (nowlength (send w :string-length now)))
	  (when ( nowlength width)
1	    ;; The 0.55 is how it "appears" just over a horizontal grid line.
	    ;; Yep, c'est une kludge.
0	    (send w :set-cursorpos (/ (- width nowlength) 2) (* height 0.55))
	    (send w :string-out now)))))))

(defun2 testpat0 (window)
  (let ((screen (send window :screen)))
    (send window :clear-window)
    (draw-circles *line-thickness* window)
    (draw-grid *holesize* *line-thickness* window)
    (draw-dots *holesize* *line-thickness* window)
    (multiple-value-bind (ignore ignore map-mode ignore)
	(send screen :color-map-description)
      (cl:ecase map-mode
	(:dependent (false-color-draw-washes window))
	(:independent (direct-color-draw-washes window))))
    (draw-date window)))

(def-color-demo  "Grays/Spectrum on grid"
		 (:value 2testpat
0		  :color-map :change-8b
		  :documentation "Some color swatches and a grid of points")
  test-patterns)
