; -*- Base: 10; Lowercase: Yes; Mode: Lisp; Package: Color; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defun  graph-color-maps 
  (self &optional (x0 0) (y0 0)
	     (h (min (max 50 (send (tv:sheet-screen self) ':number-of-segments ':gray))
		     (* 0.6 (send self ':inside-height))
		     (* 0.6 (send self ':inside-width))))
	     (orientation ':horizontal)
	     (colors '(:red :green :blue :gray))
	     (map (send (tv:sheet-screen self) ':color-map-image))
	     &aux xi yi xx r g b)
  (setq h (float h))
  (selectq orientation
    (:vertical (setq xi 0 yi h))
    (t (setq xi h yi 0)))

  (loop with tv:screen = (tv:sheet-screen self)
	for x from x0 by xi
	as y from y0 by yi
	as color in colors
     do
     (send self ':draw-rectangle (fix h) (fix h) (fix x) (fix y) tv:alu-setz)
     (send self ':draw-fat-lines tv:alu-seta
	   (fix x) (fix y)
	   (fix x) (fix (+ y h))
	   (fix (+ x h)) (fix (+ y h))
	   (fix (+ x h)) (fix y)
	   (fix x) (fix y))

     (setq xx (- h 2))

     (loop with segs = (send tv:screen ':number-of-segments color)
	   and n = (send tv:screen ':map-segment-number)
	   for i from 0.1 by 1
	   repeat segs
	   with oldx = 0 and oldy = 0 do
	   (setq r 0 g 0 b 0)

	   (selectq color
	     (:red (setq r (// i segs)))
	     (:green (setq g (// i segs)))
	     (:blue (setq b (// i segs)))
	     (:gray (setq r (setq g (setq b (// i segs))))))
	     
	   (multiple-value (r g b)
	     (send tv:screen ':compute-rgb-slots r g b))
	   (and (null g) (setq g r))
	   (and (null b) (setq b r))

	   (cond ((neq color ':gray)
		  (multiple-value (r g b)
		    (send tv:screen ':read-color-map-image
			  (selectq color
			    (:red r) (:green g) (:blue b))
			  n map))
		  )
		 (t ;; grey image
		  (multiple-value (r nil nil)
		    (send tv:screen ':read-color-map-image r n map))
		  (multiple-value (nil  g nil)
		    (send tv:screen ':read-color-map-image g n map))
		  (multiple-value (nil nil  b)
		    (send tv:screen ':read-color-map-image b n map))
		  ))

	   (send self ':draw-fat-line
		 (fix (+ x oldx)) (fix (+ y oldy))
		 (fix (+ x (setq oldx (fixr (* h (// i segs) )))))
		 (fix (+ y (setq oldy
				 (fixr (- xx
					  (* xx
					     (// (selectq color
						   (:red r)
						   (:green g)
						   (:blue b)
						   (:gray (// (+ r g b ) 3)))
						 1024.0))
					  -1))))))
	   ))
  (values))


(defun demo-draw-ring 
	   (self color rad x y &optional invert-colors (grain 50)
		  (neutral-green 0.0)
		  (neutral-blue  0.0)
		  (alu tv:alu-seta))
  "draw a set of concentric rings ramping a color"
  (or grain (setq grain 50))

  (setq rad (fix rad)
	x (fix x)
	y (fix y))

  (loop with tv:screen = (tv:sheet-screen self)
	with segs = (min grain (send tv:screen ':number-of-segments
				     ':gray))
	with inc = (max (// (float rad) segs) 1.0) 
	and oldrad = 0 and cl
	as i from 0 by inc below rad while (> rad (1+ i)) do

	(setq cl (// (+ -0.1 i) rad))

	(cond ((eq color ':gray)
	       (setq neutral-green cl neutral-blue cl)))
	#||
	(graphics:draw-circle
	  x y i :inner-radius oldrad
	  :stream self
	  :alu
	  (send tv:screen ':compute-color-alu alu cl neutral-green neutral-blue
		invert-colors
		(selectq color
		  (:red 0)
		  (:green 1)
		  (:blue 2)
		  (t 0))))
	(setq oldrad i)
	||#
    (send self :draw-ring x y
	  oldrad
	  (setq oldrad i)
	  (setq alu
		(send tv:screen ':compute-color-alu alu cl neutral-green neutral-blue
		      invert-colors
		      (selectq color
			(:red 0)
			(:green 1)
			(:blue 2)
			(t 0)))))
	)
	)

(defun demo-draw-bar
	   (self color x y wid height &optional invert-colors
		  (grain (send (tv:sheet-screen self) ':number-of-segments color))
		  (neutral-green 0.001)
		  (neutral-blue  0.001)
		  &aux (alu tv:alu-seta) cl)
  "draw a bar ramping the color palette for a color"
  (loop with tv:screen = (tv:sheet-screen self)
	with segs = (min grain (send tv:screen ':number-of-segments color))
	with inc = (max (// (float wid) segs) 1)
	as i from 0.001 by inc
	repeat segs do
	(setq cl (// (+ 0.1 i) wid))
	(cond ((eq color ':gray)
	       (setq neutral-green cl neutral-blue cl)))

	(send self ':draw-fat-line (fixr (+ x i)) y (fixr (+ x i inc)) y
	      (setq alu
		    (send tv:screen ':compute-color-alu alu cl neutral-green neutral-blue
			      invert-colors
		               (selectq color
				 (:red 0)
				 (:green 1)
				 (:blue 2)
				 (t 0)))))
	finally
	(send self ':bitblt-within-sheet tv:alu-seta (fix wid) (1- height)
	      x y x (1+ y))
	)
  (send self ':draw-fat-lines tv:alu-seta
	x y
	(+ x wid) y
	(+ x wid) (+ y height)
	x (+ y height)
	x y
	)
  )

(def-color-demo "wandering window"
		(:value DEMO-MIRROR-WANDER
		 :documentation "Use a small window as a viewport on the whole window"
		 :color-map :none)
  )

(defun  demo-mirror-wander (self)
  (let ((win (multiple-value-bind (x y)
		 (send self ':inside-size)
	       (cond ((and (> x 200) (> y 200))
		      (tv:make-window 'tv:window ':superior self ':borders 2
				      ':edges-from ':mouse
				      ':expose-p t))
		     (t self)))))
    
    (unwind-protect
	(hacks:mirror-wander win)
      (and (neq win self) (send win ':deactivate)))))

(def-color-demo "mouse pan//zoom window"
		(:value demo-mouse-pan-zoom
		 :documentation "Use a small mouse-pan-zoom window"
		 :color-map :none))

(defun demo-mouse-pan-zoom (self &aux x y win)
  (multiple-value (x y) (send self ':inside-size))
  (cond ((or (not (send self :operation-handled-p :mouse-pan-zoom))
	     (and (> x 200) (> y 200)))
	 (setq win (tv:make-window 'pan-zoom-window ':superior self ':borders 2
				   ':edges-from ':mouse
				   ':expose-p t))
	)
	(t (setq win self)))
  (unwind-protect
      (send win :mouse-pan-zoom)
    (when (neq win self)
      (send win ':deactivate)
      (send win :kill))))

(def-color-demo "edit color map"
		(:value DEMO-EDIT-COLOR-MAP
		 :color-map :new
		 :documentation "Change color map parameters"
		 )
  test-patterns)

(defun demo-edit-color-map (self)
  (demo-standardize-color-map self nil nil nil ':mouse-right))

(def-color-demo "show color map"
		(:value DEMO-SHOW-COLOR-MAP
		 :color-map :standard
		 :documentation "Paint a graph of the standard color map colors")
  test-patterns)

(defun demo-show-color-map (self &aux wid hei)
  (send self ':clear-window)
  (multiple-value (wid hei) (send self ':inside-size))
  (demo-bar-charts self 0 0 wid hei)
  )

(defun demo-bar-charts (self x y wid height
		   &optional (map (send (tv:sheet-screen self) ':color-map-image))
		   &aux (barh (// height 4)))

  "draw color bars and graphs"
  (loop for i from 0 to 3
	as bar in '(:red :green :blue :gray) do
	(demo-draw-bar self bar x (+ y (* i barh))
	      (- wid barh) barh)
	)
  (graph-color-maps self 
	(+ x (- wid barh -4)) y
	barh
	':vertical '(:red :green :blue :gray)
	map)
  )

(defun demo-draw-rgb-cube (self x y wid &optional (grain 50) inv (perm 0))
  "draw a RGB cube"
  (let* ((grain (or grain 50))
	 (color tv:alu-seta)
	 (screen (tv:sheet-screen self))
	 (nr (min grain (send screen ':number-of-segments ':red)))
	 (ng (min grain (send screen ':number-of-segments ':green)))
	 (nb (min grain (send screen ':number-of-segments ':blue)))
	 (x (fix x))
	 (y (fix y))
	 (wid (fix wid)))

    (if (and ( nb 50)( ng 50)( nr 50))

	D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;
0	1;; do it the fast way using draw-grad-triangle
0	1;;
0	(let* ((n (// wid 5))
	       (hi (* 4 n))
	       (vi (* 3 n))
	       (zi (* 5 n))
	       (magenta-x (+ x hi))
	       (magenta-y (- y vi))
	       (blue-x magenta-x)
	       (blue-y (+ y (- zi vi)))
	       (cyan-x x)
	       (cyan-y (+ y zi))
	       (green-x (- x vi))
	       (green-y (+ y (- zi hi)))
	       (yellow-x green-x)
	       (yellow-y (- y  hi))
	       (red-x (+ x n))
	       (red-y (- y (+ vi hi)))
	       (white (send screen :compute-rgb-data 1.0 1.0 1.0))
	       (magenta (send color:color-screen :compute-rgb-data 1.0 0.0 1.0))
	       (blue (send color:color-screen :compute-rgb-data 0.0 0.0 1.0 ))
	       (cyan (send color:color-screen :compute-rgb-data 0.0 1.0 1.0))
	       (green (send color:color-screen :compute-rgb-data 0.0 1.0 0.0))
	       (yellow (send color:color-screen :compute-rgb-data 1.0 1.0 0.0))
	       (red (send color:color-screen :compute-rgb-data 1.0 0.0 0.0))
	       )

	  (i-p:draw-grad-triangle self x y magenta-x magenta-y blue-x blue-y
				  white magenta blue -1)
	  (i-p:draw-grad-triangle self blue-x blue-y cyan-x cyan-y x y  
				  blue cyan white -1)
    
	  (i-p:draw-grad-triangle self cyan-x cyan-y x y green-x green-y
				  cyan white green -1)
	  (i-p:draw-grad-triangle self green-x green-y yellow-x yellow-y x y
				  green yellow white -1)

	  (i-p:draw-grad-triangle self yellow-x yellow-y x y red-x red-y
				  yellow white red -1)
	  (i-p:draw-grad-triangle self red-x red-y x y magenta-x magenta-y
				  red white magenta -1)
    
	  )


	(let* ((old-n (// wid (* 5 (max nr ng nb))))
	       (n (max 1 old-n))
	       (hi (* 4 n))
	       (vi (* 3 n))
	       (zi (* 5 n)))

						;reduce the number of segments if necessary
	  (cond ((zerop old-n)
		 (setq nr (min nr (// wid 5)))
		 (setq ng (min ng (// wid 5)))
		 (setq nb (min nb (// wid 5)))))


	  ;; draw top face
	  (loop for ii from 0 below nb as y0 from y by (- hi) do
	    (loop for jj from 0 below ng
		  as x0 from (- x (* ii vi)) by hi with y1 do
	      (setq color (send screen ':compute-color-alu
				color
				1.0
				(- 1.0 (// (+ 0.1 jj) ng))
				(- 1.0 (// (+ 0.1 ii) nb))
				inv
				perm))
	      (send self ':draw-regular-polygon
		    x0 (setq y1 (- y0 (* vi jj)) )
		    (+ x0 hi) (- y1 vi )
		    -4 color)
	      ))
	  ;; draw left face  
	  (loop for ii from 0 below nr as y0 from (+ y zi) by zi do
	    (loop for jj from 0 below nb
		  as x0 from x by (- vi) with y1 and x2 and y2 do
	      (setq color (send screen ':compute-color-alu
				color
				(- 1.0 (// (+ 0.1 ii) nr))
				1.0
				(- 1.0 (// (+ 0.1 jj) nb))
				inv
				perm))
	      (send self ':draw-triangle
		    x0 (setq y1 (- y0 (* hi jj)) )
		    (setq x2 (- x0 vi)) (setq y2 (- y1 hi ))
		    x2  (setq y2 (- y2 zi))
		    color)
	      (send self ':draw-triangle
		    x0 y1
		    x2 y2
		    x0 (- y1 zi)
		    color)))
	  ;; draw right face
	  (loop for ii from 0 below nr as y0 from (+ y zi) by zi do
	    (loop for jj from 0 below ng
		  as x0 from x by hi with y1 and x2 and y2 do
	      (setq color (send screen ':compute-color-alu
				color
				(- 1.0 (// (+ 0.1 ii) nr))
				(- 1.0 (// (+ 0.1 jj) ng))
				1.0
				inv
				perm))
	      (send self ':draw-triangle
		    x0 (setq y1 (- y0 (* vi jj)) )
		    (setq x2 (+ x0 hi)) (setq y2 (- y1 vi ))
		    x2  (setq y2 (- y2 zi))
		    color)
	      (send self ':draw-triangle
		    x0 y1
		    x2 y2
		    x0 (- y1 zi)
		    color))
	    ))
	)))


(defun demo-draw-ihs-cube (self x y wid &optional grain inv (perm 0)
		      &aux hi vi zi n
		      (color tv:alu-seta)
		      (tv:screen (tv:sheet-screen self)))
  "draw a hexcone cube"
  (or grain
      (setq grain (min 40
		       (* (send tv:screen ':number-of-segments ':red)
			  (send tv:screen ':number-of-segments ':green)
			  (send tv:screen ':number-of-segments ':blue)))))
  (setq x (fix x)
	y (fix y)
	wid (fix wid)
	n (max 1 (// wid (* 5 grain))))

  (setq hi (* 4 n))
  (setq vi (* 3 n))
  (setq zi (* 5 n))

  ;; draw top face
  (loop for ii from 0 below grain as y0 from y by (- hi) do
	(loop for jj from 0 below grain
	      as x0 from (- x (* ii vi)) by hi with y1 do
	      (setq color (send tv:screen ':compute-hexcone-alu
				color
				1.0
				(- 0.999 (* jj (// 1.0 grain)))
				(- 1.0 (* ii (// 1.0 grain)))
				inv
				perm))
	      (send self ':draw-regular-polygon
		    x0 (setq y1 (- y0 (* vi jj)) )
		    (+ x0 hi) (- y1 vi )
		    -4 color)
	      ))

  ;; draw left face  
  (loop for ii from 0 below grain as y0 from (+ y zi) by zi do
	(loop for jj from 0 below grain
	      as x0 from x by (- vi) with y1 and x2 and y2 do
	      (setq color (send tv:screen ':compute-hexcone-alu
				color
				(- 1.0 (* ii (// 1.0 grain)))
				0.999
				(- 1.0 (* jj (// 1.0 grain)))
				inv
				perm))
	      (send self ':draw-triangle
		    x0 (setq y1 (- y0 (* hi jj)) )
		    (setq x2 (- x0 vi)) (setq y2 (- y1 hi ))
		    x2  (setq y2 (- y2 zi))
		    color)
	      (send self ':draw-triangle
		    x0 y1
		    x2 y2
		    x0 (- y1 zi)
		    color)))

  ;; draw right face
  (loop for ii from 0 below grain as y0 from (+ y zi) by zi do
	(loop for jj from 0 below grain
	      as x0 from x by hi with y1 and x2 and y2 do
	      (setq color (send tv:screen ':compute-hexcone-alu
				color
				(- 1.0 (* ii (// 1.0 grain)))
				(- 0.999 (* jj (// 1.0 grain)))
				1.0
				inv
				perm))
	      (send self ':draw-triangle
		    x0 (setq y1 (- y0 (* vi jj)) )
		    (setq x2 (+ x0 hi)) (setq y2 (- y1 vi ))
		    x2  (setq y2 (- y2 zi))
		    color)
	      (send self ':draw-triangle
		    x0 y1
		    x2 y2
		    x0 (- y1 zi)
		    color)))
  )

(def-color-demo "shaded circles"
		(:value demo-color-ball
		 :color-map :standard
		 :documentation "Draw some smoothly shaded circles using the standard color map")
  test-patterns)

(defun demo-color-ball (self &aux wid hei)
  (send self ':clear-window)
  (multiple-value (wid hei) (send self ':inside-size))
  (demo-draw-ring self ':green (// wid 10) (// wid 5) (// hei 5) t)
  (demo-draw-ring self ':red (// wid 3) (// wid 2) (// hei 2.2) '(t nil nil))
  (demo-draw-ring self ':blue (// wid 7) (// wid 1.3) (// hei 1.4) '(t nil t))
  (demo-draw-ring self ':green (// wid 20) (// wid 1.2) (// hei 4) '(t))
  (demo-draw-ring self ':blue (// wid 10) (// wid 4) (// hei 1.5) '(nil t t))
  )


(def-color-demo "hexcone cube"
		(:value DEMO-HEXCONE-CUBE
		 :documentation "A representation of Hexcone color space, painted on a cube"
		 :color-map :standard
		 )
  test-patterns)

(defun demo-hexcone-cube (self &aux wid hei)
  (send self ':clear-window )
  (multiple-value (wid hei) (send self ':inside-size))
  (demo-draw-ihs-cube self (// wid 2) (// hei 1.7) (// (min wid hei ) 2.5))
  )


(def-color-demo "rgb cube"
		(:value DEMO-RGB-CUBE
		 :documentation "A representation of RGB color space, painted on a cube"
		 :color-map :standard)
  test-patterns)


(defun demo-rgb-cube (self &aux wid hei)
  (send self ':clear-window)
  (multiple-value (wid hei) (send self ':inside-size))
  (demo-draw-rgb-cube self (// wid 2) (// hei 1.7) (// (min wid hei ) 2.5)) 
  )


(defun demo-draw-random-sphere (self &optional (frob-boolean nil) &aux wid hei)
  (multiple-value (wid hei) (send self ':inside-size))
  (let ((x (+ (// wid 10) (random (- wid (// wid 10)))))
	(y (+ (// hei 10) (random (- hei (// hei 10)))))
	(rad (+ (// (min wid hei) 20) (random (// (min wid hei) 5))))
	(i1 (zerop (random 2)))
	(i2 (zerop (random 2)))
	(i3 (zerop (random 2)))
	(n1 (// (random 1000) 1000.0))
	(n2 (// (random 1000) 1000.0))
	(bool (cond ((fixp frob-boolean) frob-boolean)
		    (frob-boolean (1+ (random 12.)))
		    (t tv:alu-seta)))
	(col (selectq (random 3)
	       (0 ':red)
	       (1 ':green)
	       (t ':blue))))
    (demo-draw-ring self col rad x y (list i1 i2 i3) nil n1 n2 bool)))

(def-color-demo "munching spheres"
		(:value DEMO-MUNCHING-SPHERES
		 :color-map :standard
		 :documentation "lots of smoothly shaded spheres")
  )

(defun demo-munching-spheres (self &optional (frob-boolean nil))
  (loop while (not (or (send terminal-io ':any-tyi-no-hang)
		       (send self ':any-tyi-no-hang))) do
	(demo-draw-random-sphere self frob-boolean)
	)
  )


;------------------------------------------------------------------------------
;
;  Color display - video - monitor  Test Patterns
;
;
;   :TEST-GRID	Linearity / alignment test grid (no single pixel lines)
;
;   :TEST-RESOLUTION   vertical white/black stripes at binary frequency multiples
;
;   :TEST-COLOR  Gray scales, primary and and secondary colors.
;
;------------------------------------------------------------------------------
;  9-13-83  cwr  Moved to  >Sys>Window>Color>Test.Lisp
;  7-11-83  cwr  Created file.
;------------------------------------------------------------------------------

(defun demo-standardize-color-map
       (self ignore ignore ignore button &aux (tv:screen (tv:sheet-screen self)))
  (selectq button
    (:mouse-middle (send tv:screen ':init-color-map))
    (:mouse-right
     (let* ((map-manager (send tv:screen ':map-manager))
	    (lb (send map-manager ':min))
	    (ub (send map-manager ':max))
	    (segs (send map-manager ':number-of-segments))
	    (fn (send map-manager ':luminance-method))
	    maxcol ind
	    (base 10.)
	    (ibase 10.)
	    )
       (declare (special map-manager lb ub segs fn))
       (multiple-value (maxcol nil ind)
	 (send tv:screen ':color-map-description))

       (cond ((eq ind :dependent)
	      (setq maxcol (fix (expt maxcol 0.334))))
	     (t (setq maxcol (- maxcol 2))))

       (tv:choose-variable-values
	 `((lb "Lower bound of dynamic range (0-1.0) " :number)
	   (ub "Upper bound of dynamic range (0-1.0) " :number)
	   (segs ,(format nil "Number of color steps (1-~D) " maxcol) :number)
	   (fn "Gamma correction exponent " :sexp)))

       (send map-manager ':set-luminance-method fn)
       (send map-manager ':set-number-of-segments segs)
       (send map-manager ':create-balanced-map lb ub)
    ))
    (t (send tv:screen ':create-balanced-map)
       (send tv:screen  ':new-color-map)))
  (values nil ':noprint))


(def-color-demo "color QIX"
		(:value DEMO-COLOR-QIX
		 :documentation "A color version of the QIX (wandering lines) demo"
		 :color-map :any))

(defun DEMO-COLOR-QIX  (self &optional (length 100)
			(line-drawing-method #'graphics:draw-line)
			(bool tv:alu-seta)
			(ntimes 9999999) 
			&aux history &special xlim ylim xcen ycen half min
			(tv:screen (tv:sheet-screen self)))
  (or line-drawing-method (setq line-drawing-method #'graphics:draw-line))
  (or bool (setq bool tv:alu-seta))
  (or length (setq length 100))
  (send self ':clear-window)
  
  (multiple-value (xlim ylim)
    (send self ':inside-size))

  (setq history (loop repeat length collect nil into ll
					finally (return (nconc ll ll)))
	min (min xlim ylim)
	half  (//  min 2)
	xcen  (// (- xlim min) 2)
	ycen  (// (- ylim min) 2)
	xlim  min
	ylim  min)
  (loop repeat length
	for h = history then (cdr h)
	do (setf (car h) (make-list 5)))

  (loop with x1 = 0
	and y1 = (1- ylim)
	and x2 = 0
	and y2 = (1- ylim)
	and dx1 = 5
	and dy1 = 12
	and dx2 = 12
	and dy2 = 5
	and r = 0.2
	and g = 1.0
	and b = 1.0
	and col
	with tem
	as time from 1
	until (or (send self ':any-tyi-no-hang)
		  (and (neq self ':terminal-io)
		       (send terminal-io ':any-tyi-no-hang))
		  (> time ntimes))
	when (caar history)
	do (funcall line-drawing-method 
		 (first (car history))
		 (second (car history))
		 (third (car history))
		 (fourth (car history))
		 :stream self
		 :alu
		 (cond ((= bool tv:alu-seta) tv:alu-setz)
		       (t (fifth (car history
			  )))))
	do (setf (first (car history)) x1)
	(setf (second (car history)) y1)
	(setf (third (car history)) x2)
	(setf (fourth (car history)) y2)
	(setf (fifth (car history))
	      (setq col
		    (send tv:screen ':compute-color-alu
			  (or (fifth (car history))
			      bool
			      )
			  r g b)))
	(setq history (cdr history))
	(funcall line-drawing-method  x1 y1 x2 y2 :alu col :stream self)
	(and (= bool alu-add)
	     (send col ':set-fill-data (- (send col ':fill-data))))

	(setq r (max 0.2 (min 1.0 (+ r (// (- (random 20) 10) 200.0))))
	      g (max 0.2 (min 1.0 (+ g (// (- (random 20) 10) 200.0))))
	      b (max 0.2 (min 1.0 (+ b (// (- (random 20) 10) 200.0)))))
	
	(setq dx1 (1- (+ dx1 (random 3)))
	      dy1 (1- (+ dy1 (random 3)))
	      dx2 (1- (+ dx2 (random 3)))
	      dy2 (1- (+ dy2 (random 3))))
	(cond ((> dx1 12) (setq dx1 12))
	      ((< dx1 -12) (setq dx1 -12)))
	(cond ((> dy1 12) (setq dy1 12))
	      ((< dy1 -12) (setq dy1 -12)))
	(cond ((> dx2 12) (setq dx2 12))
	      ((< dx2 -12) (setq dx2 -12)))
	(cond ((> dy2 12) (setq dy2 12))
	      ((< dy2 -12) (setq dy2 -12)))
	(cond ((or ( (setq tem (+ x1 dx1)) xlim)
		   (minusp tem))
	       (setq dx1 (- dx1))))
	(cond ((or ( (setq tem (+ x2 dx2)) xlim)
		   (minusp tem))
	       (setq dx2 (- dx2))))
	(cond ((or ( (setq tem (+ y1 dy1)) ylim)
		   (minusp tem))
	       (setq dy1 (- dy1))))
	(cond ((or ( (setq tem (+ y2 dy2)) ylim)
		   (minusp tem))
	       (setq dy2 (- dy2))))
	(setq x1 (+ x1 dx1)
	      y1 (+ y1 dy1)
	      x2 (+ x2 dx2)
	      y2 (+ y2 dy2))
	finally (loop repeat length
		      when (caar history)
		      do (funcall line-drawing-method 
			       (first (car history))
			       (second (car history))
			       (third (car history))
			       (fourth (car history))
			       :stream self
			       :alu
			       (cond ((= bool tv:alu-seta) tv:alu-setz)
				     (t (fifth (car history)))))
		      do (setq history (cdr history)))))

(defmacro  qixx-draw-centered-line (x1 y1 x2 y2 alu)
  `(funcall draw 
	    (+ ,x1 xcen)
	    (+ ,y1 ycen)
	    (+ ,x2 xcen)
	    (+ ,y2 ycen)
	    :stream stream
	    :alu ,alu))

(defun demo-draw-8-symmetric-fat-lines
       (x1 y1 x2 y2 &key (stream) (alu (send stream ':char-aluf)))
  (demo-draw-8-symmetric-lines
	x1 y1 x2 y2 :alu alu :draw #'(lambda (x1 y1 x2 y2 &key alu stream)
				       (send stream :draw-fat-line x1 y1 x2 y2 alu))))

(defun demo-draw-8-symmetric-lines (x1 y1 x2 y2
				    &key 
				    (stream)
				    (alu (send stream ':char-aluf))
				    (draw #'graphics:draw-line))
  (declare  (special xlim ylim xcen ycen half))

  (let  ((xa  (+ half (- half x1)))
	 (xb  (+ half (- half x2)))
	 (ya  (+ half (- half y1)))
	 (yb  (+ half (- half y2))))
    (if (eql draw #'graphics:draw-line)
	(with-stack-array (ar 32 :type 'art-q)
	  (let ((idx 0))
	    (macrolet ((pushxy (x1 y1 x2 y2 ignore)
			       `(progn (setf (aref ar idx) (+ ,x1 xcen))
				       (incf idx)
				       (setf (aref ar idx) (+ ,y1 ycen))
				       (incf idx)
				       (setf (aref ar idx) (+ ,x2 xcen))
				       (incf idx)
				       (setf (aref ar idx) (+ ,y2 ycen))
				       (incf idx)
				       )))
	      (pushxy  x1 y1  x2 y2 alu)	; normal
	      (pushxy  xa y1  xb y2 alu)	; mir x
	      (pushxy  x1 ya  x2 yb alu)	; mir y
	      (pushxy  xa ya  xb yb alu)	; mir x&y

	      (pushxy  y1 x1  y2 x2 alu)	; normal
	      (pushxy  y1 xa  y2 xb alu)	; mir x
	      (pushxy  ya x1  yb x2 alu)	; mir y
	      (pushxy  ya xa  yb xb alu)
	      (send stream :draw-multiple-lines ar alu))))
	(tv:prepare-sheet (stream)
	  (qixx-draw-centered-line  x1 y1  x2 y2 alu)	; normal
	  (qixx-draw-centered-line  xa y1  xb y2 alu)	; mir x
	  (qixx-draw-centered-line  x1 ya  x2 yb alu)	; mir y
	  (qixx-draw-centered-line  xa ya  xb yb alu)	; mir x&y

	  (qixx-draw-centered-line  y1 x1  y2 x2 alu)	; normal
	  (qixx-draw-centered-line  y1 xa  y2 xb alu)	; mir x
	  (qixx-draw-centered-line  ya x1  yb x2 alu)	; mir y
	  (qixx-draw-centered-line  ya xa  yb xb alu)))))

(def-color-demo "color Mandala"
		(:value demo-color-qix8
		 :documentation "QIX with eightfold symmetry.  AKA /"Oriental Rug/""
		 :color-map :any))

(defun demo-color-qix8 (self &optional (length 200) (draw :draw-line) (bool tv:alu-seta))
  (demo-color-qix self length 
		  (selectq draw
		    ((nil :draw-line) #'demo-draw-8-symmetric-lines)
		    (t #'demo-draw-8-symmetric-fat-lines))
		  bool))


(defun copyright-notice (window &optional (style '(:dutch :bold :very-large))
			 &aux xs ys str year down x y xof yof)

  (with-character-style (style window :bind-line-height t)

    (multiple-value (nil nil nil nil nil year)
      (time:decode-universal-time (time:get-universal-time)))
    (setq xs (send window :compute-motion 
		   (setq str (format nil "Copyright ~d Symbolics Inc."
				     (+ 1900. year)))
		   0 nil 0 0))
    (setq ys (send window ':line-height))
    (tv:with-mouse-grabbed-on-sheet (window)
      (setq tv:who-line-mouse-grabbed-documentation
	    "L: drop a copyright notice at the position of the box  M: abort")
      (tv:mouse-set-blinker-definition :box-blinker 0 0 :on
				       ':set-size xs ys)
      (loop do
	(multiple-value (down nil x y)
	  (tv:mouse-buttons))
	(tv:mouse-set-blinker-cursorpos)
	    until (not (zerop down))
	    finally
	      (when (bit-test down 1)
		(multiple-value (xof yof) (send window ':inside-edges))
		(display-outlined-string
		  window 
		  str (- x xof) (- y yof) (+ x xs (- xof)) (+ y ys (- yof))
		  ))))))

;;
;; A sort of who line for the color screen
;; 

(defflavor color-who-line ((alu))
	   (tv:window tv:process-mixin tv:pane-mixin use-managed-map-mixin)
  :settable-instance-variables
  (:default-init-plist :blinker-p nil :process '(keep-color-who-line-current ))
  )

(defun keep-color-who-line-current (window)
  (error-restart-loop ((si:error si:abort) "color who-line")
    (loop while t do (send window ':update) (process-sleep 60))))
    
(defmethod (:init color-who-line :after) (ignore &aux w h sw sh left)
  (multiple-value (w h) (send tv:who-line-screen ':size))
  (multiple-value (sw sh) (send tv:superior ':inside-size))
  (send self ':set-label nil)
  (send self ':set-borders nil)
  (send self ':set-edges
	(setq left (max 0 (// (- sw w) 2)))
	(- sh h)
	(min sw (+ w left))
	sh)
  )

(defmethod (:update color-who-line) (&optional ignore &aux w l)
  (multiple-value (w l)  (send tv:who-line-screen ':size))
  (cond ((send self ':exposed-p)
	 (or alu (setq alu (sc-fill-alu -1 -1)))
	 (wait-for-vertical-sync
	   (tv:prepare-sheet (self)
	     (let* ((fill-array (send tv:screen :fill-mode-array tv:screen-array))
		    (source-array (send tv:who-line-screen ':screen-array))
		    (source-type (array-type source-array))
		    (dest-type (and fill-array (array-type fill-array)))
		    (array-mode (if (eq source-type dest-type)
				    :fill
				    :masked-bits)))

	       (when (eq array-mode :fill)
		 ;;
		 ;; If there is a real fill mode, clear first and fill using real fill mode
		 ;;
		 (send self ':draw-rectangle w l 0 0 tv:alu-setz ))

	       (send alu :set-array array-mode)
	       (send alu :set-fill-data -1)
	       (send self ':bitblt alu
		     (min w (tv:sheet-inside-width)) l
		     source-array 0 0 0 0)

	       (when (eq array-mode :masked-bits)
		 ;;
		 ;; if there isn't a real fill mode, use NOT-MASKED-BITS to clear,
		 ;; because clear-and-fill is so slow it flashed annoyingly.
		 ;;
		 (send alu :set-array :not-masked-bits)
		 (send alu :set-fill-data 0)
		 (send self ':bitblt
		       alu
		       (min w (tv:sheet-inside-width)) l
		       (send tv:who-line-screen ':screen-array) 0 0 0 0)
		 )
	       )))
	)))

(defun make-color-who-line (superior)
  (tv:make-window 'color-who-line ':superior superior ':expose-p t)) 

(defun demo-draw-3rings (self tag x y major minor alu
			 &optional (c1  ':red) (c2 ':green) (c3 ':blue)
	      &aux (rad (- major minor)) angle (tv:screen (tv:sheet-screen self)))

  (cond ((> rad 0)
	 (and tag (send self ':display-centered-string tag
			(- x major) (+ x major) (- y (* 0.9 major))))
	 (send self ':draw-filled-in-circle
	       (+ x (* minor (sin (setq angle (// (* *pi-single-float* 2) 3)))))
	       (+ y (* minor (cos angle)))
	       rad (send tv:screen ':compute-color-alu alu c1))
	 (send self ':draw-filled-in-circle
	       (+ x (* minor (- (sin (setq angle (// (* *pi-single-float* 2) 3))))))
	       (+ y (* minor (cos angle)))
	       rad (send tv:screen ':compute-color-alu alu  c2))
	 (send self ':draw-filled-in-circle
	       (+ x (* minor (sin 0)))
	       (+ y (* minor (cos 0)))
	       rad (send tv:screen ':compute-color-alu alu c3))
	 (send self ':set-cursorpos 0 0)))
  )

(def-color-demo "color mixing"
		(:value demo-mix-colors
		 :documentation "Primary colored circles, demonstrating color mixing models"
		 :color-map :standard
		 )
  test-patterns)

(defun demo-mix-colors (self &aux xs ys)
  (multiple-value (xs ys)
    (send self ':inside-size))

  (loop for i from (// xs 4) below xs by (// xs 2)
	with major = (min (// xs 4.2) (// ys 4.2))
	with  minor = (min (// major 2.5))
	and bool = `(,tv:alu-seta ,tv:alu-xor ,tv:alu-ior ,alu-add)
	and tag = '("Opaque" "Exclusive OR" "Inclusive OR" "Additive")
	do
	(loop for j from (// ys 4) below ys by (// ys 2.0)
	      do
	      (cond ((> j (// ys 2))
		     (demo-draw-3rings self (car tag) i j major minor (car bool)
			   ':cyan ':yellow ':magenta))
		    (t (demo-draw-3rings self (car tag) i j major minor (car  bool))))
	      (setq tag (cdr tag)
		    bool (cdr bool)))))


(def-color-demo "Pan and Zoom using the mouse"
		(:value DEMO-DO-MOUSE-PAN-ZOOM
		 :documentation "Global mouse-pan-zoom, like function-2-z"
		 :color-map :none))

(defun demo-do-mouse-pan-zoom (self &optional (tv:screen (tv:sheet-screen self)))
  (if (send tv:screen ':pan-and-zoom-p)
      (progn (send tv:screen ':mouse-pan-zoom)
	     (send tv:screen ':set-pan-and-zoom 0 0 0 0))
      (tv:mouse-y-or-n-p "Sorry, this hardware doesn't pan and zoom")))

(defmacro dac-pack (r g b) `(logior ,r (lsh ,g 8) (lsh ,b 16)))

(defmacro dac-box (r g b q)
  `(progn (send alu :set-fill-data (dac-pack ,r ,g ,b))
	  (send self :draw-rectangle
		(// w 4)  (1+ v-step)
		(+ x (// (* w ,q) 4)) y
		alu)))

(defun demo-single-color-map (self r g b &aux (tv:screen (tv:sheet-screen self)))
  
  (setq r (selectq r (0 0) (nil 0) (t 1))
	g (selectq g (0 0) (nil 0) (t 1))
	b (selectq b (0 0) (nil 0) (t 1))
	)
  (let ((s (send tv:screen ':color-map-description))
	(mapn (send tv:screen :map-segment-number)))
    (loop for i from 0 below s
	  with val
	  as v from 0.0 by (// 1.0 s) do
      (setq val (fix (* v 1023.)))
      (send tv:screen ':write-color-map-image i
	    (* r val) (* g val) (* b val)
	    mapn))
    (send tv:screen ':new-color-map nil mapn)))

(defun demo-rgb-map-loop (self)
  (loop with choices = '((:red :value (1 0 0))
			 (:green :value (0 1 0))
			 (:blue :value (0 0 1))
			 (:cyan :value (0 1 1))
			 (:yellow :value (1 1 0))
			 (:magenta :value (1 0 1))
			 (:gray :value (1 1 1)))
	and  choice = '(1 1 1)
	as  prev-choice = (loop for i in choices
				when (equal choice (third i))
				  return i)
	do
	(lexpr-funcall #'demo-single-color-map self choice)
	while
	(setq choice (tv:choose-with-menu
		       :choices choices
		       :label "Next color"
		       :default-item prev-choice))
	)
  )

(defun demo-binary-ramp-single (self top w h alu overlay-bits r g b
				&aux (tv:screen (tv:sheet-screen self)))
  (ignore overlay-bits)
  (multiple-value-bind (siz nil typ)
      (send tv:screen ':color-map-description)
    (multiple-value-bind (nil nil p s)
	(send tv:screen :map-mode)
      
      (loop with box = (and (zerop r) (zerop g) (zerop b))
	    and 1-siz = (1- siz)
	    and steps = (1- (haulong siz))
	    with row-height = (// h steps)
	    for cycle from 0 below steps
	    as cycle-size = 2 then (* cycle-size 2)
	    do
	(loop for i from 0 below cycle-size
	      with incr = (// 1.0 cycle-size)
	      as dat from 0 by incr
	      as wid = (fix (1+ (* w incr)))
	      as left = (fix (* i w incr))
	      as vert = (+ top (* row-height cycle))
	      as datv = (if box 0 (min 1-siz (fix (* siz dat))))
	  do

	  (setq datv
		(if (eq typ :independent)
		    (%logdpbs (fixnum-rgb->y (* r datv)(* g datv)(* b datv)) (byte 8 24.)
			      (* b datv) (byte 8 16.)
			      (* g datv) (byte 8 8)
			      (* r datv))
		    (deposit-byte 0 p s datv))
	      )
	  (send alu :set-fill-data datv)

	  (if (and box
		   (> wid 2))
	      (send self ':draw-lines tv:alu-seta
		    left vert
		    (+ left wid -1) vert
		    (+ left wid -1) (+ vert row-height -1)
		    left (+ vert row-height -1)
		    left vert)
	      (send self ':draw-rectangle
		    wid row-height
		    left vert
		    alu))
	  )
	))))

(def-color-demo "Color Intensity Ramps"
		(:value demo-binary-ramps
		 :documentation "Ramps using all intensity levels"
		 :color-map :change-8b)
  test-patterns)

(defun demo-binary-ramps (self &aux map-type shift overlay-type
			  (tv:screen (tv:sheet-screen self)))
  
  (send self :clear-window)
  
  (multiple-value (nil nil map-type)
    (send tv:screen ':color-map-description))
  (multiple-value (shift nil overlay-type)
    (send tv:screen ':overlay-description))
  
  (let* ((w (send self :inside-width))
	 (h (// (send self :inside-height) 5))
	 (alu (send tv:screen ':compute-color-alu tv:alu-seta :black))
	 (old-segn (send tv:screen :map-segment-number))
	 (overlay-bits (if (eq overlay-type :transparent) (lsh 1 shift) 0)))
    (loop repeat 5
	  as spec in '((1 0 0) (0 1 0) (0 0 1) (1 1 1) (0 0 0))
	  as top from 0 by h
	  do
      (lexpr-funcall #'demo-binary-ramp-single self top w h alu overlay-bits spec))
    
    (when (eq map-type :dependent)
      (unwind-protect 
	  (progn
	    (when (neq overlay-type :transparent)
	      (send tv:screen ':set-map-segment-number 1))
	    (demo-rgb-map-loop self)
	    )
	(send tv:screen ':set-map-segment-number old-segn))))
  )


(defun demo-cycle-map (self &key reverse (first 1) (last 254.) 
		       &aux (tv:screen (tv:sheet-screen self)))
  (unless (> last first)
    (psetq last first
	   first last)
    (setq reverse t))
  (loop with screen = tv:screen
	with mapn = (send screen :map-segment-number)
	and inc = (if reverse -1 1)
	with first-r and first-g and first-b
	initially (multiple-value (first-r first-g first-b)
		    (send screen :read-color-map-image (if reverse last first) mapn))
	repeat 253.
	for index from (if reverse last first) by inc
	do
    (multiple-value-bind (r g b)
	(send screen :read-color-map-image (+ inc index) mapn)
      (send screen :write-color-map-image index r g b mapn))
    finally (send screen :write-color-map-image
		  (if reverse first last) first-r first-g first-b mapn)
	    (send screen :new-color-map nil mapn)))

(defun demo-mandelbrot (self)
  (labels ((view-centered-image (image)
	     (let* ((im (funcall 'find-image image))
		    (dx (// (- (send self :inside-width) (send im :width)) 2))
		    (dy (// (- (send self :inside-height) (send im :height)) 2)))
	       (funcall 'view-image self im :wdx dx :wdy dy :clear-before-load t))))

    (load-images-system)

    (loop as pix = (funcall 'color:find-images (fs:parse-pathname "images:mandelbrot;*"))
	  as menu = (funcall 'color:choose-from-images
			     pix
			     :label "Mandelbrot image"
			     :additional-choices
			     '(("Load some more" :value :load-some :font fonts:cptfonti)
			       ("Cycle color map" :value :cycle-map :font fonts:cptfonti)
			       ("Cycle pictures and maps" :value :cycle-everything)))
	  do
      (selectq menu
	(nil (return nil))
	(:load-some
	 (funcall 'load-images "images:mandelbrot;*"))
	(:cycle-map
	 (loop until
		 (send terminal-io :any-tyi-no-hang)
	       do (demo-cycle-map self)))
	(:cycle-everything
	 (loop do nil
	       until 
		 (loop for picture in pix do
		   (view-centered-image picture)
		   (when (loop with start-time = (time:microsecond-time)
			       until (> (time:time-difference
					  (time:microsecond-time)
					  start-time)
					30000000.)
			       do (demo-cycle-map self)
				  (when (send terminal-io :any-tyi-no-hang)
				    (return t)))
		     (return t))
		 )))
	
	(t (view-centered-image menu))
	))
    )
  )

(def-color-demo "mandelbrot images"
		(:value demo-mandelbrot
		 :color-map :change
		 :documentation "Load and view mandelbrot images"))
  

(when (memq (send net:*local-site* :name) '(:sww :scrc))
  (def-color-demo "Copyright Notice"
		  (:value copyright-notice
		   :color-map :none
		   :documentation "Stamp a copyright notice onto this window")
    test-patterns))

