;;; -*- Mode: LISP; Package: COLOR; Base: 10 -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>


(defmacro draw-corners (x y alu)
  `(send window
	 :draw-rectangle
	 corners corners
	 ,x ,y
	 ,alu))

(defun xy-spline (xa ya  xb yb  xc yc  window)
  (loop with pc = 0.5
	with x1 = (linear-interpolation  pc  xa xb)
	with y1 = (linear-interpolation  pc  ya yb)
	with x2 = xb
	with y2 = yb
	with x3 = (linear-interpolation  pc  xb xc)
	with y3 = (linear-interpolation  pc  yb yc)
	for k from 0 to 100
	for blend = (// k 100.0)
	for x12 = (linear-interpolation  blend  x1 x2)
	for y12 = (linear-interpolation  blend  y1 y2)
	for x23 = (linear-interpolation  blend  x2 x3)
	for y23 = (linear-interpolation  blend  y2 y3)
	for x = (linear-interpolation  blend  x12 x23)
	for y = (linear-interpolation  blend  y12 y23)
	for alu = (if (oddp k) tv:alu-seta tv:alu-andca)
	do (send window :draw-rectangle 20 20  x y  alu)))


;------------------------------------------------------------------------------

(defun xy-rgb-spline  (xa ya  xb yb  xc yc  ra ga ba  rb gb bb  rc gc bc
		       window sleep-ticks)
  (let* ((screen (send window :screen)))
    (multiple-value-bind (map-size nil map-type)
	(send screen :color-map-description)
      (multiple-value-bind (nil nil pos) (send screen :map-mode)
      (setq map-size (1- map-size))
      (loop with pc = 0.5
	    and pc2 = 0.6
	    and dither+ = (// 0.5 map-size)
	    and dither- = (// -0.5 map-size)
	    with x1 = (linear-interpolation  pc  xa xb)
	    with y1 = (linear-interpolation  pc  ya yb)
	    with r1 = (linear-interpolation  pc  ra rb)
	    with g1 = (linear-interpolation  pc  ga gb)
	    with b1 = (linear-interpolation  pc  ba bb)
	    with x2 = xb
	    with y2 = yb
	    with r2 = rb
	    with g2 = rb
	    with b2 = rb
	    with x3 = (linear-interpolation  pc  xb xc)
	    with y3 = (linear-interpolation  pc  yb yc)
	    with r3 = (linear-interpolation  pc  rb rc)
	    with g3 = (linear-interpolation  pc  gb gc)
	    with b3 = (linear-interpolation  pc  bb bc)
	    
	    with dist = (+ (sqrt (+ (expt (- xa xb) 2) (expt (- ya yb) 2)))
			   (sqrt (+ (expt (- xb xc) 2) (expt (- yb yc) 2))))
	    with steps = (max (* 3 dist) 1500)
	    for k from 0 to steps
	    for blend = (// k (float steps))
	    
	    for x12 = (linear-interpolation  blend  x1 x2)
	    for y12 = (linear-interpolation  blend  y1 y2)
	    for r12 = (linear-interpolation  blend  r1 r2)
	    for g12 = (linear-interpolation  blend  g1 g2)
	    for b12 = (linear-interpolation  blend  b1 b2)
	    
	    for x23 = (linear-interpolation  blend  x2 x3)
	    for y23 = (linear-interpolation  blend  y2 y3)
	    for r23 = (linear-interpolation  blend  r2 r3)
	    for g23 = (linear-interpolation  blend  g2 g3)
	    for b23 = (linear-interpolation  blend  b2 b3)
	    
	    for x  =  (linear-interpolation  blend  x12 x23)
	    for y  =  (linear-interpolation  blend  y12 y23)
	    for r  =  (linear-interpolation  blend  r12 r23)
	    for g  =  (linear-interpolation  blend  g12 g23)
	    for b  =  (linear-interpolation  blend  b12 b23)
	    with sqrt3 = (sqrt 3.0)
	    for rgb-bright = (// (sqrt (+ (expt r 2) (expt g 2) (expt b 2))) sqrt3)
	    
	    with size = 80
	    with half-size = (// size 2)
	    with alu1 = (send screen ':compute-color-alu tv:alu-seta 0)
	    with alu2 = (send screen ':compute-color-alu tv:alu-seta 0)
	    with alu3 = (send screen ':compute-color-alu tv:alu-seta 0)
	    with alu4 = (send screen ':compute-color-alu tv:alu-seta 0)
	    with alu5 = (send screen ':compute-color-alu tv:alu-seta 0)
	    with i1 = 1.0
	    with i2 = 0.9
	    with i3 = 0.6
	    with i4 = 0.4
	    for last-x first (fixr x) then this-x
	    for last-y first (fixr y) then this-y
	    for this-x = (fixr x)
	    for this-y = (fixr y)
	    do
	(labels ((snake-add-noise (r)
		  (let ((dither (random)))
		    (truncate (* map-size
			 (+ r (if (bit-test #2r001 dither) dither+ dither-))))))
		 (snake-pack-rgb (r g b)
		   (if (eq map-type :independent)
		       (let ((r (snake-add-noise r))
			     (g (snake-add-noise g))
			     (b (snake-add-noise b)))
			 (dpb b (byte 8 16) (dpb g (byte 8 8) r)))
		       (lsh (snake-add-noise r) pos))))
	  (unless (and (= this-x last-x)
		       (= this-y last-y))
	    (send alu1 :set-fill-data (snake-pack-rgb (* i1 r) (* i1 g) (* i1 b)))
	    (send alu2 :set-fill-data (snake-pack-rgb (* i2 r) (* i2 g) (* i2 b)))
	    (send alu3 :set-fill-data (snake-pack-rgb (* i3 r) (* i3 g) (* i3 b)))
	    (send alu4 :set-fill-data (snake-pack-rgb (* i4 r) (* i4 g) (* i4 b)))
	    (send alu5 :set-fill-data
		  (snake-pack-rgb (linear-interpolation pc2 r rgb-bright)
				  (linear-interpolation pc2 g rgb-bright)
				  (linear-interpolation pc2 b rgb-bright)))
	    (when (or (> (abs (- last-x this-x)) 1)
		      (> (abs (- last-y this-y)) 1))
	      (draw-snake-segment  window
				   (// (+ last-x this-x) 2)
				   (// (+ last-y this-y) 2)
				   half-size
				   alu1 alu2 alu3 alu4 alu5))
	    (draw-snake-segment  window
				 this-x this-y  half-size
				 alu1 alu2 alu3 alu4 alu5)
	    (process-sleep sleep-ticks "snake"))))))))


(defun draw-snake-segment  (window
			    x y half-size
			    alu1 alu2 alu3 alu4 ignore)
  (send window :draw-triangle
	x y
	(- x half-size) (- y half-size)
	(- x half-size) (+ y half-size)
	alu2)
  (send window :draw-triangle
	x y
	(- x half-size) (+ y half-size)
	(+ x half-size) (+ y half-size)
	alu4)
  (send window :draw-triangle
	x y
	(+ x half-size) (+ y half-size)
	(+ x half-size) (- y half-size)
	alu3)
  (send window :draw-triangle
	x y
	(+ x half-size) (- y half-size)
	(- x half-size) (- y half-size)
	alu1))


(comment
 (defun draw-snake-segment  (window
			    x y half-size
			    alu1 alu2 alu3 alu4 alu5)
  (send window :draw-line
	(- x half-size) (- y half-size)
	(- x half-size) (+ y half-size)
	alu2 nil)
  (send window :draw-line
	(- x half-size) (+ y half-size)
	(+ x half-size) (+ y half-size)
	alu4 nil)
  (send window :draw-line
	(+ x half-size) (+ y half-size)
	(+ x half-size) (- y half-size)
	alu3 nil)
  (send window :draw-line
	(+ x half-size) (- y half-size)
	(- x half-size) (- y half-size)
	alu1 nil)
  (send window :draw-rectangle
	(1- (* 2 half-size)) (1- (* 2 half-size))
	(- x half-size -1) (- y half-size -1) alu5)))

;------------------------------------------------------------------------------

(defun snake (window)
  (loop until (or (send terminal-io :any-tyi-no-hang)
		  (send window :any-tyi-no-hang))
	with x = (send window :inside-width)
	with y = (send window :inside-height)
	for xa first (random x) then xb
	for ya first (random y) then yb
	for xb first (random x) then xc
	for yb first (random y) then yc
	for xc = (random x)
	for yc = (random y)
	do (xy-spline  xa ya  xb yb  xc yc  window)))


(defun rgb-snake (&optional
		  (window terminal-io)
		  (sleep-ticks 1)
		  (how-many :infinite)
		  (outsideness 100))
  (loop for i from 0 by 1
	until (or (equal i how-many)
		  (send terminal-io :any-tyi-no-hang)
		  (send window :any-tyi-no-hang))
	;;with fudge-factor = 100
	with x = (send window :inside-width)
	with y = (send window :inside-height)
	initially (send window :clear-window)

	for xa first (// x 2) then xb
	for ya first (// y 2) then yb
	for ra first -1.0     then rb
	for ga first -1.0     then gb
	for ba first -1.0     then bb

	for xb first (// x 2) then xc
	for yb first (// y 2) then yc
	for rb first 1.0           then rc
	for gb first 1.0           then gc
	for bb first 1.0           then bc

	for xc = (frandom (- outsideness) (+ outsideness x))
	for yc = (frandom (- outsideness) (+ outsideness y))
	for rc = (frandom 0 1)
	for gc = (frandom 0 1)
	for bc = (frandom 0 1)

	do (xy-rgb-spline  xa ya     xb yb     xc yc
			   ra ga ba  rb gb bb  rc gc bc
			   window  sleep-ticks)
        finally (return (equal i how-many))))

(defun frandom (low high) (si:random-in-range (float low) (float high)))

(defun bright-color-map (screen &optional segn map)
  (let ((map-size (send screen :color-map-description)))
    (send screen :initialize-color-map segn map
	  #'(lambda (slot)
	      (let* ((ms map-size)
		     (seg (// ms 8))
		     (quo (// slot seg))
		     (rem (\ slot seg))
		     (pc (// rem (float seg))))
		(cond ((= slot 0) (values 0 0 0))
		      ((= slot (1- ms))
		       (values 1023. 1023. 1023.))
		      (t (values
			   (selectq quo
			     (0 (linear-interpolation pc 1023. 512.))
			     (1 (linear-interpolation pc 511. 0))
			     (4 (linear-interpolation pc 0 511.))
			     (5 (linear-interpolation pc 512. 1023.))
			     (6 (linear-interpolation pc 1023. 768.))
			     (7 (linear-interpolation pc 768. 512.))
			     (t 0))
			   (selectq quo
			     (0 (linear-interpolation pc 1023. 384.))
			     (1 (if (< pc 0.3333)
				    (progn (setq pc (min 1.0 (max 0 (// pc 0.3333))))
					   (linear-interpolation pc 384. 0))
				    (progn (setq pc
						 (min 1.0 (max 0 (// (- pc 0.3333) 0.6666))))
					   (linear-interpolation pc 0 512.)))
				)
			     (2 (linear-interpolation pc 512. 1023.))
			     (5 (linear-interpolation pc 1023. 512.))
			     (6 (linear-interpolation pc 512. 0))
			     (7 0)
			     (t 1023.)
			     )
			   (selectq quo
			     ((0 1) 1023.)
			     (2 (linear-interpolation pc 1023. 512.))
			     (3 (linear-interpolation pc 511. 0))
			     (t 0))))
		      ))))))

(defun rgb-snake-restarting 
       (&optional
	(window terminal-io)
	(sleep-ticks 1)
	(how-many 20)
	(outsideness 100))
  (let* ((scr (send window :screen))
	 (segn (send scr :map-segment-number)))

    (multiple-value-bind (nil n-maps map-type)
	(send scr :color-map-description)

      (unwind-protect
	  (loop initially
		  (when (eq map-type :dependent)
		    (let ((new-mapn (min 1 (1- n-maps))))
		      (bright-color-map scr new-mapn)
		      (send scr :set-map-segment-number new-mapn))
		    )
		until
		  (or (send terminal-io :any-tyi-no-hang)
		      (send window :any-tyi-no-hang))
		do 
	    (unless (rgb-snake window sleep-ticks how-many outsideness)
	      (return nil))
	    (process-sleep 600))
	(when (eq map-type :dependent)
	  (send scr :set-map-segment-number segn))
	 ))))

(def-color-demo "snake"
		(:value rgb-snake-restarting
		 :documentation "a smoothly shaded, growing snake"
		 :color-map :change-8b))
