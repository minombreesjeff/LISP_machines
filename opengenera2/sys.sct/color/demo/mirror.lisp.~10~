;;; -*- Mode: LISP; Package: HACKS; Base: 8 -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

#| These things are called "mirrors" because when the source and destination
   overlap you get an effect analogous to that of standing between two parallel
   mirrors and because I couldn't think of a better short name.
|#

(defvar *speed-upper-limit* 10.)		;for random selection by gen-random-speed
(defvar *speed-lower-limit* 4.)			;              "

(defvar *wander-wait* 4.)			;process-sleep time for wandering
(defvar *mouse-wait* 2.)			;       "        "   "  mouse-version

(defmacro defvars (&rest vars)			;define a bunch of variables
  `(progn 'compile
	  ,@(loop for v in vars collect `(defvar ,v))))

(defvars
  *x						;current blinker x position
  *y						;current blinker y position
  *dx						;delta x
  *dy						;delta y
  *mx						;max x of blinker
  *my						;max y of blinker
  *xx						;max x of screen
  *yy)						;max y of screen

(defmacro guard (fixup-form &body body)		;do fixup both at end of progn and if aborted
  `(unwind-protect
     (progn
       ,@body
       ,fixup-form)
     ,fixup-form))

(defun mirror-mouse (&optional (window (fdefinition standard-output)))
  "Creates bitblt mirror which moves with the mouse"
  (multiple-value-bind (*xx *yy)
      (send tv:mouse-sheet ':size)		;bounds to wander over
    (multiple-value-bind (*mx *my)
	(send window ':inside-size)
      (mirror-internal
	#'(lambda ()
	    (process-sleep *mouse-wait*)	;allow someone else to run
	    (list tv:mouse-x tv:mouse-y))	;return x and y for source
	window					;destination
	tv:mouse-sheet))))			;source

(defun mirror-wander (&optional (window (fdefinition standard-output)) (visibility ':on)
		      (start-x tv:mouse-x) (start-y tv:mouse-y)
		      (speed-x (minus (gen-random-speed)))
		      (speed-y (minus (gen-random-speed)))
		      (typein-stops-p t)
		      )
  "Creates a randomingly wandering bitblt mirror"
  (multiple-value-bind (*xx *yy)
      (send (send window ':screen) ':size)		;bounds to wander over
    (multiple-value-bind (*mx *my)
	(send window ':inside-size)		;bounds to BITBLT into
      (let ((*dx (if (zerop speed-x) 2 speed-x))
	    (*dy (if (zerop speed-y) 1 speed-y))	;don't allow zero delta's
	    (*x (if (or (too-right start-x) (too-left start-x)) 0 start-x))
	    (*y (if (or (too-high start-y) (too-low start-y)) 0 start-y)))
	(mirror-internal
	  #'(lambda ()
	      (process-sleep *wander-wait*)	;give someone else a chance
	      (let ((new-x (+ *x *dx))
		    (new-y (+ *y *dy)))
		;; If this would be out of bounds, bounce
		(if (or (too-left new-x) (too-right new-x))
		    (setq *dx (minus *dx)))		
		(if (or (too-high new-y) (too-low new-y))
		    (setq *dy (minus *dy)))
		(list
		  (setq *x (+ *x *dx))
		  (setq *y (+ *y *dy)))))		;return points
	  window (send window ':screen) typein-stops-p visibility)))))

(defun mirror-internal (&functional x-y-function
			window sheet &optional (typein-stops-p t) (visibility ':on))
  ;; window is the destination
  ;; sheet is the area available as source
  (let ((old-window-blinker-list (send window ':blinker-list))
	(new-sheet-blinker (tv:make-blinker sheet 
					    'tv:hollow-rectangular-blinker
					    ':width *mx ':height *my ':visibility visibility))
	new-blinker)				;nil when no source blinker is active
    (guard
      (progn				     ;cleanup both at normal end and in unwind-protect
	(set-in-instance window 'tv:blinker-list
			 old-window-blinker-list) ;turn on original blinkers in window
	(when new-blinker
	  (send new-blinker ':set-visibility ':off)	;turn off source indication blinker
	  ;; Force blinker status to change somehow -- there probably is a better way I don't
          ;; know about.  This is so we don't remove it while it is still visible
	  (process-sleep 10.)
	  (without-interrupts
	    (set-in-instance sheet 'tv:blinker-list
		(remq new-blinker (send sheet ':blinker-list)))
	    (setq new-blinker nil))))		;end of cleanup
      (set-in-instance window 'tv:blinker-list nil)	;turn off window's blinkers
      (without-interrupts
	(set-in-instance sheet 'tv:blinker-list
	   (push new-sheet-blinker (symeval-in-instance sheet 'tv:blinker-list)))
	(setq new-blinker new-sheet-blinker))
      (loop for char = (if typein-stops-p (or (send window ':any-tyi-no-hang)
					      (send terminal-io ':any-tyi-no-hang)))
	    until char				;inifinte loop if typein-stops-p is nil
	    for (from-x from-y) = (funcall x-y-function)
	    do
	    (tv:prepare-sheet (sheet)
	      (send window ':bitblt tv:alu-seta *mx *my (send sheet ':screen-array)
		    (max from-x 0) (max from-y 0) 0 0))
	       (send new-blinker ':set-cursorpos from-x from-y)
	       (process-allow-schedule)))))	;in case wait times are 0
						
(defun too-high (y) (< y 0))
(defun too-left (x) (< x 0))
(defun too-low (y) ( (+ y *my) *yy))
(defun too-right (x) ( (+ x *mx) *xx))

(defun gen-random-speed ()
  (+ *speed-lower-limit* (random (- *speed-upper-limit* *speed-lower-limit*))))








