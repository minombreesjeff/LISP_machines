;;; -*- Mode:Lisp; Package:Hacks; Base: 8; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; User documentation:
;;; HACKS:TEST-PARC-WINDOW &optional (LABEL "This is a label.")
;;;     gets corners from the mouse and creates a PARC-labelled window.,
;;; HACKS:SPLINES draw splines on TERMINAL-IO.  You hit the left
;;;     button to set the next knot, and other buttons to draw it.  CTRL/ABORT to quit.
;;;     The middle button is relaxed open splines.
;;;     The right button is cyclic closed splines.
;;; (SETQ BASE ':TALLY) will cause numbers to come out in tally-mark notation.
;;; (TVBUG) from any Lisp Listener will walk a TV bug up from the bottom center.
;;;     It will go until it hits the top or until you type a character.  It runs
;;;     in "real time" mode.

(DEFFLAVOR PARC-LABEL-MIXIN () (TV:LABEL-MIXIN TV:WINDOW)
  (:DOCUMENTATION :MIXIN "Label at the top, with a box around it.
If the label is a string or defaults to the name, it is at the top.
When combined with BORDERS-MIXIN, the label will be surrounded by a box.
TOP-BOX-LABEL-MIXIN assumes borders will be outside, but this assumes
they will be inside."))

;;; Tell margin recomputation that there is an extra line, for the box.
(DEFWHOPPER (:PARSE-LABEL-SPEC PARC-LABEL-MIXIN) (SPEC LM TM RM BM)
  (MULTIPLE-VALUE (SPEC LM TM RM BM)
    (CONTINUE-WHOPPER SPEC LM TM RM BM T))
  (COND (SPEC
	 (SETQ TM (+ TM 1))
	 (INCF (TV:LABEL-BOTTOM SPEC))))
  (PROG () (RETURN (VALUES SPEC LM TM RM BM))))

;;; Draw a box around the label.  Only draw three sides; the top border forms
;;; the bottom.
(DEFMETHOD (:DRAW-LABEL PARC-LABEL-MIXIN :AFTER) (SPEC LEFT TOP RIGHT BOTTOM)
  SPEC TOP
  ;; Take into account what the wrapper did
  (SETQ LEFT (1- LEFT)
	TOP (1- TOP))
  (LET* ((WIDTH (- RIGHT LEFT))
	 (HEIGHT (- BOTTOM TOP))
	 (LABEL-LENGTH (MIN (1+ (FUNCALL-SELF ':LABEL-SIZE)) WIDTH)))
    (TV:SHEET-FORCE-ACCESS (SELF)
      (TV:SHEET-DRAW-RECTANGLE 1 (1+ HEIGHT) LEFT TOP TV:CHAR-ALUF SELF)
      (TV:SHEET-DRAW-RECTANGLE LABEL-LENGTH 1 LEFT TOP TV:CHAR-ALUF SELF)
      (TV:SHEET-DRAW-RECTANGLE 1 (1+ HEIGHT) (+ LEFT LABEL-LENGTH) TOP TV:CHAR-ALUF SELF))))

(DEFWHOPPER (:DRAW-LABEL PARC-LABEL-MIXIN) (SPEC LEFT TOP RIGHT BOTTOM)
  ;;; Must add 1 to top and left of string, to make room for the box.
  (CONTINUE-WHOPPER SPEC (1+ LEFT) (1+ TOP) RIGHT BOTTOM))

(DEFFLAVOR PARC-WINDOW () (PARC-LABEL-MIXIN TV:WINDOW))

(COMPILE-FLAVOR-METHODS PARC-WINDOW)

(DEFVAR TEST-PARC-WINDOW)

(DEFUN TEST-PARC-WINDOW (&OPTIONAL (LABEL "This is a label."))
  (SETQ TEST-PARC-WINDOW
	(TV:MAKE-WINDOW 'PARC-WINDOW
			':EDGES-FROM ':MOUSE
			':EXPOSE-P T
			':LABEL LABEL
			':BLINKER-P NIL)))

;;; Get a bunch of points from the user.
;;; Do graphics on WINDOW.  PX and PY are arrays which this function pushes
;;; pairs of coordinates onto.  If CLOSE-P, it will also push the first point
;;; onto the end.  It zeroes the fill pointers of the arrays.  It echoes
;;; by putting dots at each point.  You click left to put a point and click
;;; anything else to get out.  Note: you must call this with the mouse grabbed!
;;; This isn't the right thing, and should be fixed.
;;; The kludgery in here to avoid putting the same point in twice can be taken out if
;;; (:method tv:graphics-mixin :draw-cubic-spline) is ever changed to not blow out
;;; with zero-divides.  -- philg

(DEFUN MOUSE-DRAW-SPLINE-CURVE (WINDOW PX PY DOCUMENTATION-STRING &AUX DX DY)
  (STORE-ARRAY-LEADER 0 PX 0)
  (STORE-ARRAY-LEADER 0 PY 0)
  (MULTIPLE-VALUE (DX DY)
    (TV:SHEET-CALCULATE-OFFSETS WINDOW TV:MOUSE-SHEET))
  (SETQ DX (+ DX (TV:SHEET-INSIDE-LEFT WINDOW))
	DY (+ DY (TV:SHEET-INSIDE-TOP WINDOW)))
  (SETQ TV:WHO-LINE-MOUSE-GRABBED-DOCUMENTATION DOCUMENTATION-STRING)
  (LOOP WITH OLD-X = NIL WITH OLD-Y = NIL DOING
    (MULTIPLE-VALUE-BIND (BUTTONS X Y)
	(TV:WAIT-FOR-MOUSE-BUTTON-DOWN "Button or End" NIL #'(LAMBDA () (SEND WINDOW :LISTEN)))
      (UNLESS (= BUTTONS 1)
	(RETURN BUTTONS))			;Didn't click left
      (DECF X DX)				;Convert to window inside coordinates
      (DECF Y DY)
      ;; If we put the same point in twice, we will blow out with a zero-divide later
      (UNLESS (AND (EQL X OLD-X) (EQL Y OLD-Y))
	(SEND WINDOW :DRAW-RECTANGLE 3 3 (1- X) (1- Y) TV:ALU-XOR)
	(ARRAY-PUSH-EXTEND PX X)
	(ARRAY-PUSH-EXTEND PY Y))
      (SETQ OLD-X X OLD-Y Y))))

;;; Simple test program
(DEFVAR MOUSE-PX)
(DEFVAR MOUSE-PY)
(DEFVAR MOUSE-CX)
(DEFVAR MOUSE-CY)

(DEFUN SPLINES (&OPTIONAL (WINDOW TERMINAL-IO) (WIDTH 4) (ALU TV:ALU-IOR) (PRECISION 20.))
  (FUNCALL WINDOW ':CLEAR-SCREEN)
  (OR (BOUNDP 'MOUSE-PX)
      (SETQ MOUSE-PX (MAKE-ARRAY 100. ':LEADER-LENGTH 1)
	    MOUSE-PY (MAKE-ARRAY 100. ':LEADER-LENGTH 1)
	    MOUSE-CX (MAKE-ARRAY (* PRECISION 100.) ':LEADER-LENGTH 1)
	    MOUSE-CY (MAKE-ARRAY (* PRECISION 100.) ':LEADER-LENGTH 1)))
  (TV:WITH-MOUSE-AND-BUTTONS-GRABBED
    (DO () (())
      (LET ((BUTTONS (MOUSE-DRAW-SPLINE-CURVE WINDOW MOUSE-PX MOUSE-PY
        "Left: Set point.  Middle: Draw open curve.  Right: Draw closed curve.  End exits.")))
	(LET ((LEN (ARRAY-ACTIVE-LENGTH MOUSE-PX)))
	  (DOTIMES (N LEN)
	    (FUNCALL WINDOW ':DRAW-RECTANGLE 3 3 (1- (AREF MOUSE-PX N)) (1- (AREF MOUSE-PY N))
		     TV:ALU-XOR))
	  (COND ((= BUTTONS 0)
		 (LET ((CHAR (SEND WINDOW :TYI-NO-HANG)))
		   (COND ((NOT CHAR))
			 ((EQL CHAR #\End) (RETURN-FROM SPLINES))
			 (T (BEEP)))))
		((< LEN 2)
		 (FUNCALL WINDOW ':BEEP))
		((= BUTTONS 2)
		 (FUNCALL WINDOW ':DRAW-CUBIC-SPLINE
			  MOUSE-PX MOUSE-PY PRECISION WIDTH ALU ':RELAXED))
		(T
		 (ARRAY-PUSH-EXTEND MOUSE-PX (AREF MOUSE-PX 0))
		 (ARRAY-PUSH-EXTEND MOUSE-PY (AREF MOUSE-PY 0))
		 (FUNCALL WINDOW ':DRAW-CUBIC-SPLINE
			  MOUSE-PX MOUSE-PY PRECISION WIDTH ALU ':CYCLIC))))))))

(DEFVAR *SPLINES-WINDOW* NIL "Window used by SPLINES-IN-WINDOW")

(DEFUN SPLINES-IN-WINDOW (&AUX (OLD-MOUSE-SHEET TV:MOUSE-SHEET))
  (UNLESS *SPLINES-WINDOW*
    (MULTIPLE-VALUE-BIND (LEFT TOP RIGHT BOTTOM)
	(FUNCALL TV:MOUSE-SHEET ':INSIDE-EDGES)
      (LET ((FACTOR 10.))
	(SETQ *SPLINES-WINDOW*
	      (TV:MAKE-WINDOW 'TV:WINDOW
			      ':LEFT (+ LEFT FACTOR) ':TOP (+ TOP FACTOR)
			      ':RIGHT (- RIGHT FACTOR) ':BOTTOM (- BOTTOM FACTOR)
			      ':SAVE-BITS T
			      ':BORDERS 4
			      ':BLINKER-P NIL ':LABEL "Spline-drawing Window")))))
  (UNWIND-PROTECT
    (PROGN
      (FUNCALL *SPLINES-WINDOW* ':SELECT)
      (TV:MOUSE-SET-SHEET *SPLINES-WINDOW*)
      (SPLINES *SPLINES-WINDOW*))
    (TV:MOUSE-SET-SHEET OLD-MOUSE-SHEET)
    (FUNCALL  *SPLINES-WINDOW* ':DEACTIVATE)))

(DEFDEMO "Splines" "Lets you draw open and closed cubic splines with the mouse."
  (SPLINES-IN-WINDOW))

(DEFPROP :TALLY TALLY-PRINC SI:PRINC-FUNCTION)

(DEFUN TALLY-PRINC (N STREAM)
  (COND ((TYPEP STREAM 'TV:SHEET)
	 (SI:WITH-CHARACTER-STYLE ('(:DEVICE-FONT FONTS:TALLY :NORMAL) STREAM)
	   (TALLY-PRINT (IF (BIGP N) N (- N)) STREAM))
	 )
	(T
	 (TALLY-BOMB (IF (BIGP N) N (- N)) STREAM))))

(DEFUN TALLY-PRINT (N STREAM)
  (DOTIMES (I (// N 5))
    (DECLARE (IGNORE I))
    (FUNCALL STREAM ':TYO #/5))
  (DOTIMES (I (\ N 5))
    (DECLARE (IGNORE I))
    (FUNCALL STREAM ':TYO #/1)))

(DEFUN TALLY-BOMB (N STREAM)
  (LET ((BASE 10.))
    (PRINC N STREAM)))

(COMMENT ;old version
  (DEFUN TVBUG (&OPTIONAL (SLOWNESS 10000.) (WINDOW STANDARD-OUTPUT))
    (IF (NOT (BOUNDP 'FONTS:TVBUG))
	(LOAD "SYS: FONTS; TVBUG"))
    (*CATCH 'CUT-IT-OUT
      (MULTIPLE-VALUE-BIND (WIDTH HEIGHT)
	  (FUNCALL WINDOW ':INSIDE-SIZE)
	(WITH-REAL-TIME
	  (DO ((X (// WIDTH 2))
	       (Y (- HEIGHT 33.)))
	      ((MINUSP Y))
	    (DOLIST (CHAR '(#/A #/B #/C #/D))
	      (FUNCALL WINDOW ':DRAW-CHAR FONTS:TVBUG CHAR X Y TV:ALU-XOR)
	      (DOTIMES (I SLOWNESS))
	      (FUNCALL WINDOW ':DRAW-CHAR FONTS:TVBUG CHAR X Y TV:ALU-XOR)
	      (IF (FUNCALL WINDOW ':TYI-NO-HANG)
		  (*THROW 'CUT-IT-OUT NIL))
	      (SETQ Y (1- Y))))))))
) ;end COMMENT

(DEFUN MAKE-*TVBUG-ARRAYS* (BUGS)
  (LOOP FOR BUG IN BUGS
	AS RASTER = (MAKE-RASTER-ARRAY 32. 32. :TYPE 'ART-1B)
	DO (LOOP FOR Y BELOW 32. FOR (ROW) IN BUG DO
	     (LOOP FOR X BELOW 32. DO
	       (SETF (RASTER-AREF RASTER X Y) (LDB (BYTE 1 X) ROW))))
	COLLECT RASTER))
  
(DEFVAR *TVBUG-ARRAYS*	;List of the arrays of the bug
	(MAKE-*TVBUG-ARRAYS*
	  '#2R(((11100000000000000000000000000111)	;extra parens for the indentor!
		(00111000000000111100000000011100)
		(00001111000011100111000011110000)
		(00000001111110000001111110000000)
		(00000000000110000001100000000000)
		(00000000000011000011000000000000)
		(11000000000001111110000000000011)
		(11000000000001100110000000000011)
		(01100000000111111111100000000110)
		(00111000001110000001110000011100)
		(00011100111000000000011100111000)
		(00000111100000000000000111100000)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(11000011000000000000000011000011)
		(11000011000000000000000011000011)
		(11001111000000000000000011110011)
		(01111011000000000000000011011110)
		(00110011000000000000000011001100)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00000001100000000000000110000000)
		(00000011110000000000001111000000)
		(00000110011100000000111001100000)
		(00001100001111000011110000110000)
		(00011000000011111111000000011000)
		(00110000000000000000000000001100)
		(00110000000000000000000000001100)
		(00110000000000000000000000001100)
		(00110000000000000000000000001100)
		)
	       ((11000000000000000000000000001110)
		(01110000000000111100000000011100)
		(00011110000011100111000011100000)
		(00000011111110000001111110000000)
		(00000000000110000001100000000000)
		(00000000000011000011000000000000)
		(00000000000001111110000000000000)
		(00000000000001100110000000000011)
		(11000000000111111111100000000011)
		(11000000001110000001110000001110)
		(01100000111000000000011100011100)
		(00110011100000000000000111110000)
		(00011111000000000000000011000000)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00001111000000000000000011110011)
		(00111011000000000000000011110110)
		(11110011000000000000000011011100)
		(00000011000000000000000011001000)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00000001100000000000000110000000)
		(00000011110000000000001111100000)
		(00011110011100000000111000111000)
		(01110000001111000011110000001110)
		(00110000000011111111000000111100)
		(00110000000000000000000011110000)
		(00011000000000000000001111000000)
		(00001100000000000000000000000000)
		(00000000000000000000000000000000))
	       ((11000000000000000000000000001111)
		(11100000000000111100000000111000)
		(00111000000011100111000001110000)
		(00001111111110000001111111000000)
		(00000000000110000001100000000000)
		(00000000000011000011000000000000)
		(00000000000001111110000000000000)
		(00000000000001100110000000000000)
		(11000000000111111111100000001110)
		(11000000001110000001110000000011)
		(11000011111000000000011100000011)
		(01111111100000000000000111000011)
		(00111011000000000000000011111011)
		(00000011000000000000000011001111)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00001111000000000000000011110000)
		(00001111000000000000000011011100)
		(00111011000000000000000011001110)
		(01110011000000000000000011000110)
		(01100011000000000000000011000011)
		(11000011000000000000000011000011)
		(00000011000000000000000011000000)
		(00111111100000000000000110000000)
		(11110011110000000000001111000000)
		(11100000011100000000111001111000)
		(01110000001111000011110000001110)
		(00111111000011111111000000001100)
		(00000001100000000000000001111000)
		(00000000000000000000011111100000)
		(00000000000000000000000000000000)
		(00000000000000000000000000000000))
	       ((01110000000000000000000000000011)
		(00111000000000111100000000001110)
		(00000111000011100111000001111000)
		(00000001111110000001111111000000)
		(00000000000110000001100000000000)
		(00000000000011000011000000000000)
		(00000000000001111110000000000000)
		(11000000000001100110000000000011)
		(11000000000111111111100000000011)
		(01110000001110000001110000000011)
		(00111000111000000000011100000110)
		(00001111100000000000000111001100)
		(00000011000000000000000011111000)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(11001111000000000000000011110011)
		(01101111000000000000000011110011)
		(00111011000000000000000011011011)
		(00010011000000000000000011001110)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00000011000000000000000011000000)
		(00000001100000000000000110000000)
		(00000111110000000000001111000000)
		(00011100011100000000111001111000)
		(01110000001111000011110000001110)
		(00111100000011111111000000001100)
		(00001111000000000000000000001100)
		(00000011110000000000000000011000)
		(00000000000000000000000000110000)
		(00000000000000000000000000000000)))))

(DEFVAR *TVBUG-XORS*)	;Boolean first differences of the above
(DEFUN TVBUG (&OPTIONAL (SLOWNESS 10000.) (WINDOW STANDARD-OUTPUT))
  (IF (NOT (BOUNDP '*TVBUG-ARRAYS*))
      (LOAD "SYS: DEMO; TVBGAR"))
  (IF (NOT (BOUNDP '*TVBUG-XORS*))
      (SETQ *TVBUG-XORS*
	    (LOOP FOR (A1 A2) ON *TVBUG-ARRAYS*
		  AS XOR = (MAKE-RASTER-ARRAY 32. 33. :TYPE 'ART-1B)
		  DO (BITBLT TV:ALU-SETA 32. 32. A1 0 0 XOR 0 1)
		     (BITBLT TV:ALU-XOR 32. 32. (OR A2 (CAR *TVBUG-ARRAYS*)) 0 0 XOR 0 0)
		  COLLECT XOR)))
  (MULTIPLE-VALUE-BIND (WIDTH HEIGHT)
      (SEND WINDOW :INSIDE-SIZE)
    (LET ((ORIG-WINDOW WINDOW))
      (DW:WITH-OWN-COORDINATES (WINDOW :CLEAR-WINDOW NIL)
	(WITH-REAL-TIME
	  (LET ((X (// WIDTH 2))
		(Y (- HEIGHT 33.))
		(PHASE 0))
	    (SEND WINDOW :DRAW-1-BIT-RASTER 32. 32. (FIRST *TVBUG-ARRAYS*) 0 0 X Y
		  CL:BOOLE-XOR CL:BOOLE-2)
	    (DO-NAMED LUPO () ((FUNCALL ORIG-WINDOW :TYI-NO-HANG))
	      (DOLIST (XOR *TVBUG-XORS*)
		(SETQ Y (1- Y))
		(FUNCALL WINDOW :BITBLT TV:ALU-XOR 32. 33. XOR 0 0 X Y)
		(SETQ PHASE (\ (1+ PHASE) (LENGTH *TVBUG-XORS*)))
		(DOTIMES (I SLOWNESS) (DECLARE (IGNORE I)))
		(IF (ZEROP Y) (RETURN-FROM LUPO))))
	    (SEND WINDOW :DRAW-1-BIT-RASTER 32. 32. (NTH PHASE *TVBUG-ARRAYS*) 0 0 X Y
		  CL:BOOLE-XOR CL:BOOLE-2)))))))
(DEFDEMO "TV bug" "Display bugs in windows." (TVBUG))
