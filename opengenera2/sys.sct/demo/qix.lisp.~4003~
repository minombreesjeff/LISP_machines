;;; -*- Mode:LISP;  Base:8.;  Package:HACKS;  Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defun make-circular-list (length)
  (let* ((list (make-list (1+ length)))
	 (last (nthcdr (1- length) list)))
    (si:%change-list-to-cons last)
    (rplacd last list)
    list))

(defun qix (&optional (length 100) (stream terminal-io))
 (with-real-time
  (let ((history (make-circular-list length))
	(old-stream stream))
    (send stream :clear-window)
    (dw::with-own-coordinates (stream :enable-output-recording nil)
      (loop repeat length
	  for h = history then (cdr h)
	  do (setf (car h) (make-list 4)))
      (multiple-value-bind (xlim ylim)
	  (send stream ':inside-size)
	(loop with x1 = 0
	      and y1 = (1- ylim)
	      and x2 = 0
	      and y2 = (1- ylim)
	      and dx1 = 5
	      and dy1 = 12
	      and dx2 = 12
	      and dy2 = 5
	      with tem
	      until (send old-stream ':tyi-no-hang)
	      when (caar history)
		do (send stream ':draw-line
			 (first (car history))
			 (second (car history))
			 (third (car history))
			 (fourth (car history))
			 tv:alu-xor)
	      do (setf (first (car history)) x1)
		 (setf (second (car history)) y1)
		 (setf (third (car history)) x2)
		 (setf (fourth (car history)) y2)
		 (setq history (cdr history))
		 (send stream ':draw-line x1 y1 x2 y2 tv:alu-xor)
		 (setq dx1 (1- (+ dx1 (random 3)))
		       dy1 (1- (+ dy1 (random 3)))
		       dx2 (1- (+ dx2 (random 3)))
		       dy2 (1- (+ dy2 (random 3))))
		 (cond ((> dx1 12) (setq dx1 12))
		       ((< dx1 -12) (setq dx1 -12)))
		 (cond ((> dy1 12) (setq dy1 12))
		       ((< dy1 -12) (setq dy1 -12)))
		 (cond ((> dx2 12) (setq dx2 12))
		       ((< dx2 -12) (setq dx2 -12)))
		 (cond ((> dy2 12) (setq dy2 12))
		       ((< dy2 -12) (setq dy2 -12)))
		 (cond ((or ( (setq tem (+ x1 dx1)) xlim)
			    (minusp tem))
			(setq dx1 (- dx1))))
		 (cond ((or ( (setq tem (+ x2 dx2)) xlim)
			    (minusp tem))
			(setq dx2 (- dx2))))
		 (cond ((or ( (setq tem (+ y1 dy1)) ylim)
			    (minusp tem))
			(setq dy1 (- dy1))))
		 (cond ((or ( (setq tem (+ y2 dy2)) ylim)
			    (minusp tem))
			(setq dy2 (- dy2))))
		 (setq x1 (+ x1 dx1)
		       y1 (+ y1 dy1)
		       x2 (+ x2 dx2)
		       y2 (+ y2 dy2))
	      finally (loop repeat length
			    when (caar history)
			      do (send stream ':draw-line
				       (first (car history))
				       (second (car history))
				       (third (car history))
				       (fourth (car history))
				       tv:alu-xor)
			    do (setq history (cdr history)))))))))

(defdemo "QIX" "Hypnotic wandering lines" (qix))
