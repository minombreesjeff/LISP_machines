;;; -*- Mode:Lisp; Base: 8; Package: Hacks -*-

;;; The switch register uses the TOG font to find its characters.  There is a pair
;;; of lights at 101 and 102, and a pair of switches at 60 and 61.  They are followed
;;; immediately by other pairs (at 103 and 104, and 62 and 63, repectively) by
;;; the same thing in the other color.

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(DEFFLAVOR SWITCH-REGISTER-MIXIN
	(N-SWITCHES				; Number of switches in this register
	 START-X				; X-position of first switch
	 START-Y				; Y-position of first switch
	 X-SPACING				; Spacing between switches (including switch)
	 (VALUE 0)				; Current value of switch
	 (STATE NIL)				; Value being displayed, NIL -> bashed.
	 (CHAR-ORIGIN 60)			; Where in font to find the two chars
	 MOUSE-BLINKER				; Blinker for mouse-sensitivity
	 (COLOR-PATTERN NIL)			; Which color to make the switches
	 )
	()
  (:REQUIRED-FLAVORS TV:WINDOW)
  (:GETTABLE-INSTANCE-VARIABLES N-SWITCHES VALUE)
  (:INITABLE-INSTANCE-VARIABLES N-SWITCHES VALUE)
  (:SETTABLE-INSTANCE-VARIABLES COLOR-PATTERN)
  (:INIT-KEYWORDS :SWITCHES :LIGHTS :OCTAL :HEX :RADIX)
  )

;;; Get the least significant bit of a number.
(DEFSUBST LOW-BIT (X)
  (LDB (BYTE 1 0) X))

;;; This is the method to update the screen, given the
;;; old STATE and new VALUE.  It draws characters and updates STATE.
(DEFMETHOD (:UPDATE SWITCH-REGISTER-MIXIN) ()
  ;; Loop from right to left, from least significant bit up.
  (DO ((X (+ START-X (* (1- N-SWITCHES) X-SPACING)) (- X X-SPACING))
       (V VALUE (LSH V -1))
       (C COLOR-PATTERN (LSH C -1))
       (S STATE)
       (I 0 (1+ I)))
      (( I N-SWITCHES))
    ;; The character should be redisplayed if STATE is NIL, or if the bit in
    ;; STATE is different from the bit in VALUE.
    (LET ((V-BIT (LOW-BIT V))			; Current bit of VALUE.
	  (C-BIT (LOW-BIT C)))			; Current bit of COLOR-PATTERN.
      (IF (OR (NULL S)
	      ( V-BIT (PROG1 (LOW-BIT S) (SETQ S (LSH S -1)))))
	  ;; Character needs to be redrawn.
	  (FUNCALL-SELF ':PLUNK-CHAR
			FONTS:TOG
			(AND S (+ CHAR-ORIGIN (LOW-BIT S) (* 2 C-BIT)))
			(+ CHAR-ORIGIN V-BIT (* 2 C-BIT))
			X
			START-Y))))
  (SETQ STATE VALUE))

(DEFUN WIDTH-OF-CHARACTER (FONT CHAR)
  (LET ((TABLE (TV:FONT-CHAR-WIDTH-TABLE FONT)))
    (IF TABLE (AREF TABLE CHAR) (TV:FONT-CHAR-WIDTH FONT))))

;;; This function is like :DRAW-CHAR, but it does not overwrite.  It erases
;;; the old character at the location (except if OLD-CHAR is NIL it does
;;; not erase anything), and draws the new character.
(DEFMETHOD (:PLUNK-CHAR SWITCH-REGISTER-MIXIN) (FONT OLD-CHAR NEW-CHAR X Y)
  (COND ((NOT (NULL OLD-CHAR))
	 (FUNCALL-SELF ':DRAW-RECTANGLE
		       (WIDTH-OF-CHARACTER FONT OLD-CHAR)
		       (TV:FONT-CHAR-HEIGHT FONT)
		       X Y
		       TV:ERASE-ALUF)))
  (SEND SELF ':DRAW-GLYPH NEW-CHAR FONT X Y))

;;; This function deduces the internal spacing given the size of the
;;; window and N-SWITCHES.  You give it the new width and height,
;;; and it returns the start-x, start-y, and x-spacing, or else NIL
;;; if the width or height is unacceptable.
(DEFUN-IN-FLAVOR (DEDUCE-SWITCH-REGISTER-SPACING SWITCH-REGISTER-MIXIN) (WIDTH HEIGHT)
  (LET ((CHAR-WIDTH (WIDTH-OF-CHARACTER FONTS:TOG CHAR-ORIGIN))
	(CHAR-HEIGHT (TV:FONT-CHAR-HEIGHT FONTS:TOG))
	(CELL-WIDTH (// WIDTH N-SWITCHES))
	(CELL-HEIGHT HEIGHT))
    (IF (AND (< CHAR-WIDTH CELL-WIDTH)
	     (< CHAR-HEIGHT CELL-HEIGHT))
	(PROG () (RETURN (VALUES (// (- CELL-WIDTH CHAR-WIDTH) 2)
				 (// (- CELL-HEIGHT CHAR-HEIGHT) 2)
				 CELL-WIDTH)))
	NIL)))

(DEFUN-IN-FLAVOR (SET-SWITCH-REGISTER-SPACING SWITCH-REGISTER-MIXIN) ()
  (MULTIPLE-VALUE-BIND (INSIDE-WIDTH INSIDE-HEIGHT)
      (FUNCALL-SELF ':INSIDE-SIZE)
    (MULTIPLE-VALUE-BIND (SX SY XS)
	(DEDUCE-SWITCH-REGISTER-SPACING INSIDE-WIDTH INSIDE-HEIGHT)
      (COND ((NOT (NULL SX))
	     (SETQ START-X SX START-Y SY X-SPACING XS))))))

(DEFMETHOD (:CHANGE-OF-SIZE-OR-MARGINS SWITCH-REGISTER-MIXIN :AFTER) (&REST IGNORE)
  (SET-SWITCH-REGISTER-SPACING))

(DEFMETHOD (:VERIFY-NEW-EDGES SWITCH-REGISTER-MIXIN) (IGNORE IGNORE WIDTH HEIGHT)
  (IF (DEDUCE-SWITCH-REGISTER-SPACING WIDTH HEIGHT)
      NIL
      "Not enough room for that many switches."))

(DEFMETHOD (:INIT SWITCH-REGISTER-MIXIN :AFTER) (INIT-PLIST)
  (IF (GET INIT-PLIST ':LIGHTS)
      (SETQ CHAR-ORIGIN 101))
  (SETQ MOUSE-BLINKER (TV:MAKE-BLINKER SELF 'TV:HOLLOW-RECTANGULAR-BLINKER))
  (FUNCALL MOUSE-BLINKER ':SET-VISIBILITY NIL)
  (FUNCALL MOUSE-BLINKER ':SET-SIZE
	   (+ (TV:FONT-BLINKER-WIDTH FONTS:TOG) 4)
	   (+ (TV:FONT-BLINKER-HEIGHT FONTS:TOG) 4))				       
  (COND ((NULL COLOR-PATTERN)
	 ;; User didn't specify a color pattern, make an alternating one.
	 (LET ((RADIX (GET INIT-PLIST ':RADIX)))
	   (LET ((N-BITS (COND ((NOT (NULL RADIX))
				(1- (HAULONG RADIX)))
			       ((GET INIT-PLIST ':HEX) 4)
			       (T 3))))
	     (DO ((PATTERN 0)
		  (BYTE-SPEC 0001 (+ BYTE-SPEC 100))
		  (I 0 (1+ I)))
		 (( I N-SWITCHES)
		  (SETQ COLOR-PATTERN PATTERN))
	       (IF (ODDP (// I N-BITS))
		   (SETQ PATTERN (DPB 1 BYTE-SPEC PATTERN))))))))
  (SET-SWITCH-REGISTER-SPACING))
	 
(DEFMETHOD (:REFRESH SWITCH-REGISTER-MIXIN :AFTER) (&REST IGNORE)
  (COND ((NULL TV:RESTORED-BITS-P)
	 (SETQ STATE NIL)
	 (FUNCALL-SELF ':UPDATE))))

(DEFMETHOD (:SET-VALUE SWITCH-REGISTER-MIXIN) (NEW-VALUE)
  (SETQ VALUE NEW-VALUE)
  (FUNCALL-SELF ':UPDATE))

(DEFUN-IN-FLAVOR (SWITCH-REGISTER-CELL SWITCH-REGISTER-MIXIN) (X)
  (MIN (// X X-SPACING) (1- N-SWITCHES)))

(DEFMETHOD (:MOUSE-BUTTONS SWITCH-REGISTER-MIXIN) (IGNORE X IGNORE)
  (LET ((BITS (- N-SWITCHES (SWITCH-REGISTER-CELL X) 1)))
    (PROCESS-RUN-FUNCTION "SREG click"
			  SELF
			  ':NEW-MOUSE-VALUE
			  (LOGXOR VALUE (LSH 1 BITS)))))

;;; This message exists specifically so that you can put daemons on it.
(DEFMETHOD (:NEW-MOUSE-VALUE SWITCH-REGISTER-MIXIN) (NEW-VALUE)
  (SETQ VALUE NEW-VALUE)
  (FUNCALL-SELF ':UPDATE))

(DEFMETHOD (:MOUSE-MOVES SWITCH-REGISTER-MIXIN) (X IGNORE)
  (TV:MOUSE-SET-BLINKER-CURSORPOS)
  (LET ((CELL (SWITCH-REGISTER-CELL X)))
    (FUNCALL MOUSE-BLINKER ':SET-CURSORPOS
	     (- (+ START-X (* CELL X-SPACING)) 2)
	     (- START-Y 2))
    (FUNCALL MOUSE-BLINKER ':SET-VISIBILITY T)))

(DEFMETHOD (:HANDLE-MOUSE SWITCH-REGISTER-MIXIN :AFTER)  ()
  (FUNCALL MOUSE-BLINKER ':SET-VISIBILITY NIL))

;;; (DEFFLAVOR SWITCH-REGISTER () (SWITCH-REGISTER-MIXIN TV:WINDOW)
;;;   (:DEFAULT-INIT-PLIST
;;;     :BLINKER-P NIL
;;;     :LABEL NIL
;;;     :SAVE-BITS T
;;;     :FONT-MAP (LIST FONTS:TOG)))
;;; 
;;; ;;; TESTING
;;; 
;;; (DEFVAR S)
;;; 
;;; (DEFUN S (&REST OPTIONS)
;;;   (SETQ S (LEXPR-FUNCALL #'TV:MAKE-WINDOW 'SWITCH-REGISTER
;;; 			 ':EDGES-FROM ':MOUSE
;;; 			 ':EXPOSE-P T
;;; 			 ':N-SWITCHES 10
;;; 			 OPTIONS)))

(DEFFLAVOR MUNCH-WINDOW () (TV:BORDERED-CONSTRAINT-FRAME-WITH-SHARED-IO-BUFFER))

(DEFFLAVOR MUNCH-BITS-PANE () (TV:PANE-MIXIN TV:WINDOW)
  (:DEFAULT-INIT-PLIST :BLINKER-P NIL :LABEL NIL))

(DEFFLAVOR MUNCH-SWITCH-REGISTER-PANE () (SWITCH-REGISTER-MIXIN TV:PANE-MIXIN TV:WINDOW)
  (:DEFAULT-INIT-PLIST :BLINKER-P NIL :LABEL NIL :N-SWITCHES 16.))

(DEFMETHOD (:NEW-MOUSE-VALUE MUNCH-SWITCH-REGISTER-PANE :AFTER) (NEW-VALUE)
  (FUNCALL-SELF ':FORCE-KBD-INPUT (LIST ':NEW-MOUSE-VALUE NEW-VALUE)))

(DEFFLAVOR MUNCH-NUMBER-PANE () (TV:BORDERS-MIXIN TV:TOP-BOX-LABEL-MIXIN
				 TV:PANE-MIXIN TV:WINDOW)
  (:DEFAULT-INIT-PLIST :BLINKER-P NIL :LABEL NIL
		       :MORE-P NIL #+++ignore #+++ignore :FONT-MAP '(FONTS:43VXMS)))

(DEFMETHOD (:PRINT-OUT MUNCH-NUMBER-PANE) (VALUE)
  (FUNCALL-SELF ':SET-CURSORPOS 0 0)
  (FUNCALL-SELF ':CLEAR-WINDOW)
  (FORMAT SELF "~O" VALUE))

#+CADR
(DEFCONST
  *MUNCH-HELP-LINES*
  '("To modify value in switches: NETWORK through \ keys"
    "toggle corresponding switches. - and = shift in bits."
    "Numbers shift in three bits.  CLEAR-INPUT zeroes."
    "Hands up and down increment and decrement, hands"
    "right and left shift.  N gets next higher number with"
    "same number of one bits. END exits."
    "HOLD OUTPUT stops the action, RESUME resumes it."))

#-CADR
(DEFCONST
  *MUNCH-HELP-LINES*
  '("To modify value in switches: TAB through COMPLETE keys"
    "toggle corresponding switches. ~ and = shift in bits."
    "Numbers shift in three bits.  CLEAR-INPUT zeroes."
    "+ and - increment and decrement, > and < right and"
    "left shift.  N gets next higher number with"
    "same number of one bits. END exits."
    "SQUARE stops the action, RESUME resumes it."))


(DEFFLAVOR MUNCH-HELP-PANE () (TV:WINDOW-PANE)
  (:DEFAULT-INIT-PLIST :BLINKER-P NIL :LABEL NIL :MORE-P NIL))

(DEFMETHOD (:REFRESH MUNCH-HELP-PANE :AFTER) (&OPTIONAL TYPE)
  (AND (OR (NOT TV:RESTORED-BITS-P) (EQ TYPE ':SIZE-CHANGED))
       (TV:SHEET-FORCE-ACCESS (SELF)
	 (FUNCALL-SELF ':SET-CURSORPOS 0 0)
	 (DO ((L *MUNCH-HELP-LINES* (CDR L)))
	     ((NULL (CDR L))
	      (FUNCALL-SELF ':STRING-OUT (CAR L)))
	   (FUNCALL-SELF ':LINE-OUT (CAR L))))))

(DEFVAR *MUNCH-WINDOW* NIL)

(DEFUN MAKE-MUNCH-WINDOW (EDGES)
  (SETQ *MUNCH-WINDOW*
	(TV:MAKE-WINDOW
	  'MUNCH-WINDOW
	  ':EDGES EDGES
	  ':PANES '((NUMBER MUNCH-NUMBER-PANE :LABEL "Munching Squares")
		    (BITS MUNCH-BITS-PANE)
		    (SREG MUNCH-SWITCH-REGISTER-PANE)
		    (HELP MUNCH-HELP-PANE))
	  ':CONSTRAINTS
	    `((MAIN . ((NUMBER BITS SREG HELP)
		       ((NUMBER 1 :LINES))
		       ((SREG 0.2S0))
		       ((HELP ,(LENGTH *MUNCH-HELP-LINES*) :LINES))
		       ((BITS :EVEN))))))))

(DEFUN MUNCH (&OPTIONAL (INITIAL-VALUE 401));TRY ALSO 1, 10421, 11111, 100001, ETC.
  (IF (NULL *MUNCH-WINDOW*) (MAKE-MUNCH-WINDOW '(140 130 1140 1300)))
  (LET ((BITS-PANE (FUNCALL *MUNCH-WINDOW* ':GET-PANE 'BITS))
	(OLD-SELECTED-WINDOW TV:SELECTED-WINDOW))
    (UNWIND-PROTECT
      (PROGN
	(FUNCALL *MUNCH-WINDOW* ':EXPOSE)
	(FUNCALL BITS-PANE ':SELECT) 
	(FUNCALL BITS-PANE
		 ':DO-MUNCHING
		 INITIAL-VALUE 
		 (FUNCALL *MUNCH-WINDOW* ':GET-PANE 'NUMBER)
		 (FUNCALL *MUNCH-WINDOW* ':GET-PANE 'SREG)))
      (FUNCALL *MUNCH-WINDOW* ':DEACTIVATE)
      (FUNCALL OLD-SELECTED-WINDOW ':SELECT))))

#+CADR
(DEFVAR *LM-2-KEY-ROW* '(#/\ #/` #/) #/( #/P #/O #/I #/U
			 #/Y #/T #/R #/E #/W #/Q #\TAB #\NETWORK))

#-CADR
(DEFVAR *3600-KEY-ROW* '(#\COMPLETE #/PAGE #/backspace #/) #/( #/P #/O #/I #/U
				  #/Y #/T #/R #/E #/W #/Q #\TAB))

(DEFUN MUNCH-PROCESS-CHAR (CHAR VALUE)
  (IF (NOT (ATOM CHAR))
      (SELECTQ (FIRST CHAR)
	(:NEW-MOUSE-VALUE
	 (SECOND CHAR)))
      (SELECTOR CHAR CHAR-EQUAL
	(#\END
	 (*THROW 'QUIT-MUNCHING NIL))
	(#/N
	 (NHNWSNOOB VALUE))
	((#/0 #/1 #/2 #/3 #/4 #/5 #/6 #/7)
	 (+ (LSH VALUE 3) (DIGIT-CHAR-P CHAR 8)))
	(#\CLEAR-INPUT
	 0)
	((#/+ #\SP #+CADR #\HAND-UP)
	 (1+ VALUE))
	((#\< #\~ #+CADR #/- #+CADR #\HAND-LEFT)
	 (LSH VALUE 1))
	(#/=
	 (1+ (LSH VALUE 1)))
	((#\> #+CADR #\HAND-RIGHT)
	 (LSH VALUE -1))
	((#-CADR #\- #+CADR #\HAND-DOWN)
	 (1- VALUE))
	(#\CLEAR-SCREEN
	 VALUE)
	(( #-CADR #\SQUARE #+CADR #\HOLD-OUTPUT #+CADR #\STOP-OUTPUT)
	 'STOP)
	(#\RESUME
	 'GO)
	(OTHERWISE
	  (LET ((BIT-POSITION (FIND-POSITION-IN-LIST
				(CHAR-UPCASE (MAKE-CHAR CHAR))
				#+CADR *LM-2-KEY-ROW*
				#-CADR *3600-KEY-ROW*)))
	    (IF BIT-POSITION
		(LOGXOR VALUE (LSH 1 BIT-POSITION))
		NIL))))))

(DEFMETHOD (:DO-MUNCHING MUNCH-BITS-PANE) (INITIAL-VALUE NUMBER-PANE SREG-PANE)
  (LET ((VALUE INITIAL-VALUE)
	(AB 0)
	(X-OFFSET (+ (TV:SHEET-INSIDE-LEFT)
		     (// (- (TV:SHEET-INSIDE-WIDTH) 256.) 2)))
	(Y-OFFSET (+ (TV:SHEET-INSIDE-TOP)
		     (// (- (TV:SHEET-INSIDE-HEIGHT) 256.) 2))))
    (FUNCALL-SELF ':CLEAR-WINDOW)
    (FUNCALL NUMBER-PANE ':PRINT-OUT VALUE)
    (FUNCALL SREG-PANE ':SET-VALUE VALUE)
    (*CATCH 'QUIT-MUNCHING
      (LOOP WITH RUNNING-P = T
	    DO (LOOP AS CHAR = (FUNCALL-SELF ':TYI-NO-HANG)
		     DO (COND ((NULL CHAR)
			       (IF (NOT RUNNING-P)
				   (FUNCALL-SELF ':UNTYI (FUNCALL-SELF ':TYI))))
			      (T
			       (LET ((X (MUNCH-PROCESS-CHAR CHAR VALUE)))
				 (COND ((NUMBERP X)
					(SETQ VALUE (LOGAND 177777 X) AB 0)
					(FUNCALL-SELF ':CLEAR-WINDOW)
					(FUNCALL NUMBER-PANE ':PRINT-OUT VALUE)
					(FUNCALL SREG-PANE ':SET-VALUE VALUE))
				       ((EQ X 'GO)
					(SETQ RUNNING-P T))
				       ((EQ X 'STOP)
					(SETQ RUNNING-P NIL))))))
		       (IF RUNNING-P
			   (TV:PREPARE-SHEET (SELF)
			     (DO ((X) (Y)) ((TV:KBD-HARDWARE-CHAR-AVAILABLE))
			       (SETQ AB (LOGAND 177777 (+ AB VALUE)))
			       (SETQ X (LOGAND AB 377))
			       (SETQ Y (+ Y-OFFSET (LOGXOR X (LDB (BYTE 10 10) AB))))
			       (SETQ X (+ X X-OFFSET))
			       (SETF (RASTER-AREF TV:SCREEN-ARRAY X Y)
				     (LOGXOR 1 (RASTER-AREF TV:SCREEN-ARRAY X Y)))))))))))

(DEFUN NHNWSNOOB (A)	;NEXT HIGHER NUMBER WITH SAME NUMBER OF ONE BITS (SEE HAKMEM)
  (IF (ZEROP A)
      0
      (LET* ((C (LOGAND A (- 0 A)))
	     (B (+ A C)))
	(LOGIOR B (// (LSH (LOGXOR A B) -2) C)))))

(DEFDEMO "Munching Squares" "A classic display hack from the PDP-1." (MUNCH))

(COMPILE-FLAVOR-METHODS MUNCH-WINDOW MUNCH-BITS-PANE MUNCH-SWITCH-REGISTER-PANE
			MUNCH-NUMBER-PANE MUNCH-HELP-PANE)
