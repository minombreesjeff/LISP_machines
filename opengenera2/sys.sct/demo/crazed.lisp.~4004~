;; -*- Mode: Lisp; Package: Hacks; Lowercase: Yes; Base: 10 -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defsubst frandom () (// (random 65535.) (float 65536.)))

(defvar fooz (*  2 (frandom)))
(defvar foox (cos fooz))
(defvar fooy (sin fooz))
(defvar spokes 29.)
(defvar thetaz (// (*  2) spokes))
(defvar thetax (cos thetaz))
(defvar thetay (sin thetaz))

(defun clipped-line (x0 y0 x1 y1 xl yl xh yh &aux clipped-p)
  (if (< x0 xl) (setq x0 xl clipped-p t))
  (if (< x1 xl) (setq x1 xl clipped-p t))
  (if (> x0 xh) (setq x0 xh clipped-p t))
  (if (> x1 xh) (setq x1 xh clipped-p t))
  (if (< y0 yl) (setq y0 yl clipped-p t))
  (if (< y1 yl) (setq y1 yl clipped-p t))
  (if (> y0 yh) (setq y0 yh clipped-p t))
  (if (> y1 yh) (setq y1 yh clipped-p t))
  (send standard-output :draw-line x0 y0 x1 y1 tv:alu-xor)
  clipped-p)

(defun crack (p x0 y0 x1 y1 xl yl xh yh &aux x y)
  (if (> (frandom) p)
      (clipped-line x0 y0 x1 y1 xl yl xh yh)
      (progn
	(setq p (* p p)
	      x (fix (+ x0 (* (frandom) (- x1 x0))))
	      y (fix (+ y0 (* (frandom) (- y1 y0)))))
	(or (crack p x0 y0 x y xl yl xh yh)
	    (crack p x y x1 y1 xl yl xh yh)))))

(defun jag-ray (p pl x0 y0 dx dy xl yl xh yh &optional last-ray
		&aux x1 y1 this-ray)
  (do ()
      ((clipped-line x0 y0
		     (setq x1 (fix (+ x0 (* 2 (frandom) dx))))
		     (setq y1 (fix (+ y0 (* 2 (frandom) dy))))
		     xl yl xh yh)
       (reverse this-ray))
    (setq x0 x1 y0 y1)
    (setq this-ray (cons (cons x1 y1) this-ray))
    (setq p (+ p (* (- pl p) .1)))
    (if (< (frandom) p)
	(setq last-ray (jag-ray p pl
				x0 y0 
				(- (* dx thetax) (* dy thetay))     
				(+ (* dy thetax) (* dx thetay))     
				xl yl xh yh last-ray)))
    (when last-ray
      (if (< (frandom) (- 1.0 (// p pl)))
	  (crack .85 x1 y1 (caar last-ray) (cdar last-ray) xl yl xh yh))
      (setq last-ray (cdr last-ray)))))
   

(defun outspoken (x0 y0 xl yl xh yh &aux (dx foox) (dy fooy) ray ray0)
  (dotimes (n spokes)
    (setq ray (jag-ray 0 .15 x0 y0 
		       (// (* dx (- xh xl)) 23.)
		       (// (* dy (- yh yl)) 23.)
		       xl yl xh yh ray))
    (if (= n 0) (setq ray0 ray))
    (psetq dx (- (* dx thetax) (* dy thetay))
	   dy (+ (* dy thetax) (* dx thetay))))
  (dotimes (n (min (length ray) (length ray0)))
    (declare (ignore n))
    (crack .85 (caar ray) (cdar ray) (caar ray0) (cdar ray0) xl yl xh yh)
    (setq ray (cdr ray) ray0 (cdr ray0))))


(defun craze (&optional (standard-output standard-output))
  (multiple-value-bind (xl yl xh yh)
      (send standard-output :inside-edges)
    (outspoken (+ xl (fix (* (- xh xl) (+ .15 (* .7 (frandom))))))
	       (+ yl (fix (* (- yh yl) (+ .15 (* .7 (frandom))))))
	       xl yl xh yh)))
