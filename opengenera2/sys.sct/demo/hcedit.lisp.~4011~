;;;Hollerith card editor -*-Mode:LISP; Package:HACKS; Base: 8; Syntax: Zetalisp; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(DEFVAR CARD-WINDOW)
(DEFCONST CARD-WINDOW-TOP 300)
(DEFCONST CARD-WINDOW-BOTTOM 1200)

(DEFVAR CARD-TOP 140)
(DEFVAR CARD-WIDTH 1400)
(DEFVAR CARD-BOTTOM-HEIGHT 310)
(DEFVAR CARD-TOP-HEIGHT 50)
(DEFVAR CARD-CUT-SIZE 24)
(DEFVAR CARD-MARGIN 30)
(DEFVAR CARD-NUMBER-TOP-HEIGHT 14)
(DEFVAR CARD-NUMBER-HEIGHT 22)
(DEFVAR CARD-LETTER-TOP 2)
(DEFVAR CARD-PUNCH-ARRAY)
(DEFVAR CARD-IMAGE)

;;; Draw the outline
(DEFUN DRAW-CARD (&AUX (WID (1- CARD-WIDTH)) (TOP (+ CARD-TOP CARD-TOP-HEIGHT))
		       (TOT (+ CARD-TOP-HEIGHT CARD-BOTTOM-HEIGHT CARD-TOP)))
  (GRAPHICS:DRAW-RECTANGLE 0 TOP WID (+ TOP CARD-BOTTOM-HEIGHT)
			   :ALU :ERASE :STREAM CARD-WINDOW)
  (GRAPHICS:DRAW-RECTANGLE CARD-CUT-SIZE CARD-TOP WID (+ CARD-TOP CARD-TOP-HEIGHT)
			   :ALU :ERASE :STREAM CARD-WINDOW)
  (GRAPHICS:DRAW-TRIANGLE (1- CARD-CUT-SIZE) CARD-TOP (1- CARD-CUT-SIZE) TOP 0 TOP
			  :ALU :ERASE :STREAM CARD-WINDOW :filled nil)
  (GRAPHICS:DRAW-LINE (1- CARD-CUT-SIZE) CARD-TOP WID CARD-TOP :STREAM CARD-WINDOW)
  (GRAPHICS:DRAW-LINE WID CARD-TOP WID TOT :STREAM CARD-WINDOW)
  (GRAPHICS:DRAW-LINE WID TOT 0 TOT :STREAM CARD-WINDOW)
  (GRAPHICS:DRAW-LINE 0 TOT 0 TOP :STREAM CARD-WINDOW)
  (GRAPHICS:DRAW-LINE 0 TOP (1- CARD-CUT-SIZE) CARD-TOP :STREAM CARD-WINDOW))

(DEFUN DRAW-LARGE-NUMBERS ()
  (DO ((CHAR (CHAR-CODE #/0) (1+ CHAR))
       (Y (+ CARD-TOP CARD-TOP-HEIGHT CARD-NUMBER-TOP-HEIGHT) (+ Y CARD-NUMBER-HEIGHT)))
      ((> CHAR (CHAR-CODE #/9)))
    (DO ((I 1. (1+ I))
	 (X (+ CARD-MARGIN 2) (+ X 9)))
	((> I 80.))
      (SEND CARD-WINDOW :DRAW-GLYPH CHAR FONTS:TVFONT X Y TV:ALU-IOR))))

(DEFUN DRAW-SMALL-NUMBERS (&AUX Y)
  (SETQ Y (+ CARD-TOP CARD-TOP-HEIGHT CARD-NUMBER-TOP-HEIGHT (// CARD-NUMBER-HEIGHT 2)))
  (DRAW-SMALL-NUMBERS-1 Y)
  (SETQ Y (+ Y (* CARD-NUMBER-HEIGHT 9)))
  (DRAW-SMALL-NUMBERS-1 Y))

(DEFUN DRAW-SMALL-NUMBERS-1 (Y)
  (DO ((I 1. (1+ I))
       (X (+ CARD-MARGIN 2) (+ X 9)))
      ((> I 80.))
    (DRAW-SMALL-NUMBER I X Y)))

(DEFUN DRAW-SMALL-NUMBER (I X Y)
  (LET ((ZERO (CHAR-CODE #/0)))
    (IF (< I 10.)
	(SEND CARD-WINDOW :DRAW-GLYPH (+ I ZERO) FONTS:TINY (1+ X) Y TV:ALU-IOR)
	(SEND CARD-WINDOW :DRAW-GLYPH (+ (// I 10.) ZERO) FONTS:TINY (1- X) Y TV:ALU-IOR)
	(SEND CARD-WINDOW :DRAW-GLYPH (+ (\ I 10.) ZERO) FONTS:TINY (+ X 3) Y TV:ALU-IOR))))

(DEFUN DRAW-LOGO (&AUX X Y)
  (SETQ X (+ CARD-MARGIN 2 (* 9 6))
	Y (+ CARD-TOP CARD-TOP-HEIGHT CARD-NUMBER-TOP-HEIGHT (* CARD-NUMBER-HEIGHT 10.)))
  (DRAW-TINY "IBM" X Y)
  (SETQ X (+ X (* 9 2)))
  (LET ((X0 (1- X)) (Y0 (1- Y))
	(X1 (+ X 15.)) (Y1 (+ Y 7)))
    (GRAPHICS:DRAW-LINE X0 Y0 X1 Y0 :STREAM CARD-WINDOW)
    (GRAPHICS:DRAW-LINE X1 Y0 X1 Y1 :STREAM CARD-WINDOW)
    (GRAPHICS:DRAW-LINE X1 Y1 X0 Y1 :STREAM CARD-WINDOW)
    (GRAPHICS:DRAW-LINE X0 Y1 X0 Y0 :STREAM CARD-WINDOW))
  (DRAW-TINY "5081" X Y))

(DEFUN DRAW-TINY (STR X Y)
  (DO ((I 0 (1+ I))
       (LEN (ARRAY-ACTIVE-LENGTH STR))
       (X X (+ X 4)))
      (( I LEN))
    (SEND CARD-WINDOW :DRAW-GLYPH (CHAR-CODE (AREF STR I)) FONTS:TINY X Y TV:ALU-IOR)))

(DEFUN DRAW-IT ()
  (DRAW-CARD)
  (DRAW-LARGE-NUMBERS)
  (DRAW-SMALL-NUMBERS)
  (DRAW-LOGO))

(DEFUN DRAW-CARD-CHAR (CHAR CHAR-X &AUX X BITS)
  (SETQ X (+ CARD-MARGIN 2 (* CHAR-X 9)))
  (SEND CARD-WINDOW :DRAW-GLYPH
	(CHAR-CODE CHAR) FONTS:TVFONT X (+ CARD-TOP CARD-LETTER-TOP) TV:ALU-IOR)
  (WHEN (= (SETQ BITS (AREF CARD-PUNCH-ARRAY (CHAR-CODE CHAR))) 177777)
    (FERROR NIL "Attempt to punch ~C" CHAR))
  (DO ((BITS BITS (LSH BITS -1))
       (Y (+ CARD-TOP CARD-TOP-HEIGHT CARD-NUMBER-TOP-HEIGHT (* CARD-NUMBER-HEIGHT 9))
	  (- Y CARD-NUMBER-HEIGHT)))
      ((ZEROP BITS))
    (WHEN (BIT-TEST 1 BITS)
      (GRAPHICS:DRAW-RECTANGLE X Y (+ X 6) (+ Y (- CARD-NUMBER-HEIGHT 3))
			       :STREAM CARD-WINDOW))))

(DEFUN ERASE-CARD-CHAR (CHAR CHAR-X &AUX X BITS)
  (SETQ X (+ CARD-MARGIN 2 (* CHAR-X 9)))
  (SEND CARD-WINDOW :DRAW-GLYPH
	(CHAR-CODE CHAR) FONTS:TVFONT X (+ CARD-TOP CARD-LETTER-TOP) 
	:ERASE)
  (WHEN (= (SETQ BITS (AREF CARD-PUNCH-ARRAY (CHAR-CODE CHAR))) 177777)
    (FERROR NIL "Attempt to unpunch ~C" CHAR))
  (DO ((BITS BITS (LSH BITS -1))
       (Y (+ CARD-TOP CARD-TOP-HEIGHT CARD-NUMBER-TOP-HEIGHT (* CARD-NUMBER-HEIGHT 9))
	  (- Y CARD-NUMBER-HEIGHT))
       (I 9 (1- I)))
      ((ZEROP BITS))
    (COND ((BIT-TEST 1 BITS)
	   (GRAPHICS:DRAW-RECTANGLE X Y (+ X 6) (+ Y (- CARD-NUMBER-HEIGHT 3))
				    :ALU :ERASE :STREAM CARD-WINDOW)
	   (COND (( I 0)
		  (SEND CARD-WINDOW :DRAW-GLYPH
			(+ (CHAR-CODE #/0) I) FONTS:TVFONT X Y TV:ALU-IOR)
		  (AND (OR (= I 0) (= I 9))
		       (DRAW-SMALL-NUMBER (1+ CHAR-X) X
					  (+ Y (// CARD-NUMBER-HEIGHT 2))))))))))

(DEFVAR CARD-PUNCH-FORMAT
	'((#\SP . ())
	  (#/. . (12. 8 3))
	  (#/) . (12. 8 4))
	  (#/] . (12. 8 5))
	  (#/< . (12. 8 6))
	  (#/_ . (12. 8 7))
	  (#/+ . (12.))
	  (#/! . (11. 8 2))
	  (#/$ . (11. 8 3))
	  (#/* . (11. 8 4))
	  (#/[ . (11. 8 5))
	  (#/> . (11. 8 6))
	  (#/& . (11. 8 7))
	  (#/- . (11.))
	  (#// . (0 1))
	  (#/' . (0 8 3))
	  (#/( . (0 8 4))
	  (#/" . (0 8 5))
	  (#/# . (0 8 6))
	  (#/% . (0 8 7))
	  (#/= . (8 3))
	  (#/@ . (8 4))
	  (#/^ . (8 5))
	  (#/, . (8 6))
	  (#/\ . (8 7))
	  (#/A . (12. 1))
	  (#/B . (12. 2))
	  (#/C . (12. 3))
	  (#/D . (12. 4))
	  (#/E . (12. 5))
	  (#/F . (12. 6))
	  (#/G . (12. 7))
	  (#/H . (12. 8))
	  (#/I . (12. 9))
	  (#/J . (11. 1))
	  (#/K . (11. 2))
	  (#/L . (11. 3))
	  (#/M . (11. 4))
	  (#/N . (11. 5))
	  (#/O . (11. 6))
	  (#/P . (11. 7))
	  (#/Q . (11. 8))
	  (#/R . (11. 9))
	  (#/; . (0 8 2))
	  (#/S . (0 2))
	  (#/T . (0 3))
	  (#/U . (0 4))
	  (#/V . (0 5))
	  (#/W . (0 6))
	  (#/X . (0 7))
	  (#/Y . (0 8))
	  (#/Z . (0 9))
	  (#/0 . (0))
	  (#/1 . (1))
	  (#/2 . (2))
	  (#/3 . (3))
	  (#/4 . (4))
	  (#/5 . (5))
	  (#/6 . (6))
	  (#/7 . (7))
	  (#/8 . (8))
	  (#/9 . (9))))

(DEFUN INITIALIZE-CARD-PUNCH-ARRAY ()
  (OR (BOUNDP 'CARD-PUNCH-ARRAY)
      (SETQ CARD-PUNCH-ARRAY (MAKE-ARRAY 200 ':TYPE 'ART-16B)))
  (FILLARRAY CARD-PUNCH-ARRAY '(-1))
  (DOLIST (LIST CARD-PUNCH-FORMAT)
    (ASET (DO ((PUNCHES (CDR LIST) (CDR PUNCHES))
	       (PUNCH)
	       (VALUE 0))
	      ((NULL PUNCHES) VALUE)
	    (SETQ PUNCH (CAR PUNCHES))
	    (AND (< PUNCH 10.) (SETQ PUNCH (- 10. PUNCH)))
	    (SETQ VALUE (LOGIOR VALUE (LSH 1 (1- PUNCH)))))
	  CARD-PUNCH-ARRAY (CHAR-CODE (CAR LIST)))))

(OR (BOUNDP 'CARD-PUNCH-ARRAY) (INITIALIZE-CARD-PUNCH-ARRAY))

;;; Now the top level editor
(DEFUN CARD-EDITOR ()
  (SETUP-CARD-WINDOW)
  (TV:WINDOW-CALL (CARD-WINDOW :DEACTIVATE)
    (FUNCALL CARD-WINDOW ':CLEAR-SCREEN)
    (CARD-EDITOR-INTERNAL)))

(DEFUN SETUP-CARD-WINDOW ()
  (OR (BOUNDP 'CARD-WINDOW)
      (SETQ CARD-WINDOW (TV:MAKE-WINDOW 'TV:WINDOW
					':LABEL NIL
					':SUPERIOR TV:MOUSE-SHEET
					':TOP CARD-WINDOW-TOP
					':BOTTOM CARD-WINDOW-BOTTOM)))
  ;; Load fonts if necessary
  (FUNCALL (TV:SHEET-GET-SCREEN CARD-WINDOW) ':PARSE-FONT-DESCRIPTOR 'FONTS:TINY)
  (FUNCALL (TV:SHEET-GET-SCREEN CARD-WINDOW) ':PARSE-FONT-DESCRIPTOR 'FONTS:TVFONT))

(DEFUN CARD-EDITOR-INTERNAL ()
  (UNLESS (BOUNDP 'CARD-IMAGE)
    (SETQ CARD-IMAGE (MAKE-ARRAY 80. ':TYPE 'ART-STRING ':LEADER-LENGTH 1)))
  (SETF (FILL-POINTER CARD-IMAGE) 0)
  (DRAW-IT)
  (*CATCH 'RETURN-FROM-EDITOR
    (DO () (NIL)
      (*CATCH 'ABORT-COMMAND
	(LET (CH)
	  (SEND CARD-WINDOW ':SET-CURSORPOS 
		(+ CARD-MARGIN 2 (* (FILL-POINTER CARD-IMAGE) 9))
		(+ CARD-TOP CARD-LETTER-TOP))
	  (SETQ CH (CHAR-UPCASE (SEND CARD-WINDOW ':TYI)))
	  (SELECTOR CH CHAR-EQUAL
	    ((#\CR #\END)
	     (*THROW 'RETURN-FROM-EDITOR T))
	    (#\RUBOUT
	     (LET ((I (1- (FILL-POINTER CARD-IMAGE))))
	       (COND ((MINUSP I)
		      (BEEP)
		      (*THROW 'ABORT-COMMAND T)))
	       (ERASE-CARD-CHAR (AREF CARD-IMAGE I) I)
	       (SETF (FILL-POINTER CARD-IMAGE) I)))
	    (#\CLEAR
	     (DO ((I (1- (FILL-POINTER CARD-IMAGE)) (1- I)))
		 ((MINUSP I))
	       (ERASE-CARD-CHAR (AREF CARD-IMAGE I) I))
	     (SETF (FILL-POINTER CARD-IMAGE) 0))
	    (OTHERWISE
	      (COND ((OR (NOT (GRAPHIC-CHAR-P CH))
			 (= (AREF CARD-PUNCH-ARRAY (CHAR-CODE CH)) 177777)
			 (NOT (ARRAY-PUSH CARD-IMAGE CH)))
		     (BEEP)
		     (*THROW 'ABORT-COMMAND T)))
	      (DRAW-CARD-CHAR CH (1- (FILL-POINTER CARD-IMAGE)))))))))
  (SEND CARD-WINDOW ':SET-CURSORPOS 0 (+ CARD-TOP-HEIGHT CARD-BOTTOM-HEIGHT CARD-TOP))
  CARD-IMAGE)

#|| 
(DEFDEMO "Hollerith Editor" "Upward compatibilty with primitive computers." (CARD-EDITOR))
||#

(DEFDEMO "Multiple Hollerith Editor" "Upward compatibilty with primitive computers." (EDIT-MULTIPLE-CARDS))

(DEFCONST CARD-Y-OFFSET -20)
(DEFCONST CARD-X-OFFSET -5)
(DEFUN EDIT-MULTIPLE-CARDS ()
  (SETUP-CARD-WINDOW)
  (TV:WINDOW-CALL (CARD-WINDOW :DEACTIVATE)
    (FUNCALL CARD-WINDOW ':CLEAR-SCREEN)
    (WITH-OUTPUT-TO-STRING (STR)
      (DO () (())
	(LET ((CARD-IMAGE (CARD-EDITOR-INTERNAL)))
	  (WHEN (STRING-EQUAL CARD-IMAGE "") (RETURN))
	  (CL:WRITE-LINE CARD-IMAGE STR))
	(LET ((X-WID (- (TV:SHEET-INSIDE-WIDTH CARD-WINDOW) (ABS CARD-X-OFFSET)))
	      (Y-WID (- (TV:SHEET-INSIDE-HEIGHT CARD-WINDOW) (ABS CARD-Y-OFFSET))))
	  (FUNCALL CARD-WINDOW ':BITBLT-WITHIN-SHEET TV:ALU-SETA
		   (IF (< CARD-X-OFFSET 0) X-WID (- X-WID))
		   (IF (< CARD-Y-OFFSET 0) Y-WID (- Y-WID))
		   (IF (< CARD-X-OFFSET 0) (- CARD-X-OFFSET) 0)
		   (IF (< CARD-Y-OFFSET 0) (- CARD-Y-OFFSET) 0)
		   (IF (< CARD-X-OFFSET 0) 0 CARD-X-OFFSET)
		   (IF (< CARD-Y-OFFSET 0) 0 CARD-Y-OFFSET))
	  (FUNCALL CARD-WINDOW ':DRAW-RECTANGLE
		   (ABS CARD-X-OFFSET) (TV:SHEET-INSIDE-HEIGHT CARD-WINDOW)
		   (IF (< CARD-X-OFFSET 0)
		       (+ (TV:SHEET-INSIDE-WIDTH CARD-WINDOW) CARD-X-OFFSET)
		       0)
		   0
		   :ERASE)
	  (FUNCALL CARD-WINDOW ':DRAW-RECTANGLE
		   (TV:SHEET-INSIDE-WIDTH CARD-WINDOW) (ABS CARD-Y-OFFSET)
		   0 (IF (< CARD-Y-OFFSET 0)
			 (+ (TV:SHEET-INSIDE-HEIGHT CARD-WINDOW) CARD-Y-OFFSET)
			 0)
		   :ERASE))))))
