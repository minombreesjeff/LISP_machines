;;;-*- Mode:LISP; Package:HACKS; BASE: 8; -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(DEFFLAVOR ABACUS-WINDOW
	((NBEADS 10.)
	 (BEAD-MARGIN-WIDTH 4.)
	 (RACK-WIDTH 8.)
	 (CURRENT-NUMBER 0)
	 DISPLAYED-NUMBER
	 RACK-LEFT
	 UPPER-RACK-TOP
	 LOWER-RACK-TOP
	 )
	(TV:DONT-SELECT-WITH-MOUSE-MIXIN TV:WINDOW)
  (:DEFAULT-INIT-PLIST :BLINKER-P NIL :MORE-P NIL)
  (:INITABLE-INSTANCE-VARIABLES NBEADS BEAD-MARGIN-WIDTH RACK-WIDTH CURRENT-NUMBER)
  (:GETTABLE-INSTANCE-VARIABLES CURRENT-NUMBER))

(DEFMETHOD (:REFRESH ABACUS-WINDOW :AFTER) (&OPTIONAL IGNORE)
  (OR TV:RESTORED-BITS-P
      (LET ((TV:CURRENT-FONT FONTS:ABACUS))
	(LET ((INSIDE-LEFT (TV:SHEET-INSIDE-LEFT))
	      (INSIDE-TOP (TV:SHEET-INSIDE-TOP))
	      (INSIDE-RIGHT (TV:SHEET-INSIDE-RIGHT))
	      (INSIDE-BOTTOM (TV:SHEET-INSIDE-BOTTOM))
	      (BEAD-WIDTH (FONT-CHAR-WIDTH TV:CURRENT-FONT))
	      (BEAD-HEIGHT (FONT-CHAR-HEIGHT TV:CURRENT-FONT)))
	  (LET ((INSIDE-WIDTH (- INSIDE-RIGHT INSIDE-LEFT))
		(MAGIC-WIDTH (+ (* NBEADS BEAD-WIDTH)
				(* (1+ NBEADS) BEAD-MARGIN-WIDTH)
				(* 2 RACK-WIDTH)))
		(MAGIC-HEIGHT (+ (* BEAD-HEIGHT (+ 2 5))
				 (* 3 RACK-WIDTH)
				 4))
		(MAGIC-MIDDLE-Y (+ (* BEAD-HEIGHT 2)
				   (* 2 RACK-WIDTH)
				   2))
		RECT-LEFT RECT-TOP RECT-RIGHT RECT-BOTTOM)
	    (SETQ RECT-LEFT (// (- INSIDE-WIDTH MAGIC-WIDTH) 2))
	    (OR (PLUSP RECT-LEFT) (FERROR NIL "Window not wide enough"))
	    (SETQ RECT-TOP (+ INSIDE-TOP RECT-LEFT)
		  RECT-LEFT (+ INSIDE-LEFT RECT-LEFT))
	    (SETQ RECT-RIGHT (+ RECT-LEFT MAGIC-WIDTH))
	    (SETQ RECT-BOTTOM (+ RECT-TOP MAGIC-HEIGHT))
	    (OR (< RECT-BOTTOM INSIDE-BOTTOM)
		(FERROR NIL "Window not high enough"))
	    (FUNCALL-SELF ':DRAW-HOLLOW-RECTANGLE RECT-LEFT RECT-TOP RECT-RIGHT RECT-BOTTOM)
	    (FUNCALL-SELF ':DRAW-HOLLOW-RECTANGLE (+ RECT-LEFT RACK-WIDTH)
			  (+ RECT-TOP RACK-WIDTH) (- RECT-RIGHT RACK-WIDTH)
			  (- (+ RECT-TOP MAGIC-MIDDLE-Y) RACK-WIDTH))
	    (FUNCALL-SELF ':DRAW-HOLLOW-RECTANGLE (+ RECT-LEFT RACK-WIDTH)
			  (+ RECT-TOP MAGIC-MIDDLE-Y) (- RECT-RIGHT RACK-WIDTH)
			  (- RECT-BOTTOM RACK-WIDTH))
	    (SETQ RACK-LEFT (+ RECT-LEFT RACK-WIDTH 1)
		  UPPER-RACK-TOP (+ RECT-TOP RACK-WIDTH 1))
	    (SETQ LOWER-RACK-TOP (+ RECT-TOP MAGIC-MIDDLE-Y 1))
	    (SETQ DISPLAYED-NUMBER NIL)
	    (FUNCALL-SELF ':REDISPLAY))))))

(DEFMETHOD (:DRAW-HOLLOW-RECTANGLE ABACUS-WINDOW) (LEFT TOP RIGHT BOTTOM)
  (TV:PREPARE-SHEET (SELF)
    (TV:SHEET-DRAW-LINE LEFT TOP RIGHT TOP TV:CHAR-ALUF NIL SELF)
    (TV:SHEET-DRAW-LINE (1- RIGHT) TOP (1- RIGHT) BOTTOM TV:CHAR-ALUF NIL SELF)
    (TV:SHEET-DRAW-LINE (1- RIGHT) (1- BOTTOM) LEFT (1- BOTTOM) TV:CHAR-ALUF NIL SELF)
    (TV:SHEET-DRAW-LINE LEFT TOP LEFT BOTTOM TV:CHAR-ALUF NIL SELF)))

(DEFMETHOD (:REDISPLAY ABACUS-WINDOW) (&AUX BEAD-WIDTH)
  (LET ((TV:CURRENT-FONT FONTS:ABACUS))
    (SETQ BEAD-WIDTH (+ BEAD-MARGIN-WIDTH (FONT-CHAR-WIDTH TV:CURRENT-FONT)))
    (DO ((I 0 (1+ I))
	 (X (+ RACK-LEFT BEAD-MARGIN-WIDTH (* (1- NBEADS) BEAD-WIDTH)) (- X BEAD-WIDTH))
	 (N CURRENT-NUMBER (// N 10.))
	 (M DISPLAYED-NUMBER (AND M (// M 10.))))
	(( I NBEADS))
      (FUNCALL-SELF ':DRAW-BEADS X UPPER-RACK-TOP 2 (LOGXOR (// (\ N 10.) 5) 1)
		    (AND M (LOGXOR (// (\ M 10.) 5) 1)))
      (FUNCALL-SELF ':DRAW-BEADS X LOWER-RACK-TOP 5 (\  N 5) (AND M (\ M 5))))
    (SETQ DISPLAYED-NUMBER CURRENT-NUMBER)))

(DEFMETHOD (:DRAW-BEADS ABACUS-WINDOW) (X Y NHIGH VAL OVAL)
  (OR (EQ VAL OVAL)
      (LET ((TV:CURRENT-FONT FONTS:ABACUS))
	(TV:PREPARE-SHEET (SELF)
	  (LET* ((BEAD-WIDTH (FONT-CHAR-WIDTH TV:CURRENT-FONT))
		 (BEAD-HEIGHT (FONT-CHAR-HEIGHT TV:CURRENT-FONT))
		 (LEN (LSH 1 NHIGH))
		 (ALLBITS (1- LEN))
		 (BITS (LOGXOR ALLBITS (LSH LEN (- (1+ VAL)))))
		 (OBITS (IF OVAL
			    (LOGXOR ALLBITS (LSH LEN (- (1+ OVAL))))
			  (LOGXOR BITS ALLBITS))))
	    (DO ((I 0 (1+ I))
		 (Y1 (- Y (TV:SHEET-INSIDE-TOP)) (+ Y1 BEAD-HEIGHT))
		 (X1 (- X (TV:SHEET-INSIDE-LEFT)))
		 (MASK (LOGXOR BITS OBITS))
		 (PPSS (DPB (1- NHIGH) (BYTE 6 6) 0001) (- PPSS 0100)))
		(( I NHIGH))
	      (AND (LDB-TEST PPSS MASK)
		   (LET ((CHAR (CHAR-CODE (IF (LDB-TEST PPSS BITS) #/B #/A))))
		     (SEND SELF ':DRAW-RECTANGLE BEAD-WIDTH BEAD-HEIGHT X1 Y1 TV:ERASE-ALUF)
		     (SEND SELF ':DRAW-GLYPH CHAR TV:CURRENT-FONT X1 Y1)))))))))

(DEFMETHOD (:SET-CURRENT-NUMBER ABACUS-WINDOW) (NEW-NUMBER)
  (LET ((MAX (^ 10. NBEADS)))
    (SETQ NEW-NUMBER (\ NEW-NUMBER MAX))
    (AND (MINUSP NEW-NUMBER)
	 (SETQ NEW-NUMBER (+ MAX NEW-NUMBER))))
  (SETQ CURRENT-NUMBER NEW-NUMBER)
  (TV:SHEET-FORCE-ACCESS (SELF)
    (FUNCALL-SELF ':REDISPLAY)))

(DEFMETHOD (:MOUSE-CLICK ABACUS-WINDOW) (BUTTON X Y &AUX TEM)
  (COND ((CHAR-MOUSE-EQUAL BUTTON #\MOUSE-1-1)
	 (IF (SETQ TEM (FUNCALL-SELF ':BEAD-CLICK X Y))
	     (PROCESS-RUN-FUNCTION "Click" SELF ':SET-CURRENT-NUMBER TEM)
	     (BEEP))
	 T)))

(DEFMETHOD (:BEAD-CLICK ABACUS-WINDOW) (X Y &AUX BEAD-WIDTH BEAD-HEIGHT)
  (LET ((TV:CURRENT-FONT FONTS:ABACUS))
    (SETQ BEAD-WIDTH (FONT-CHAR-WIDTH TV:CURRENT-FONT)
	  BEAD-HEIGHT (FONT-CHAR-HEIGHT TV:CURRENT-FONT))
    (LET ((XIDX (// (- X (+ RACK-LEFT BEAD-MARGIN-WIDTH)) (+ BEAD-WIDTH BEAD-MARGIN-WIDTH))))
      (AND ( XIDX 0) (< XIDX NBEADS)
	   (< X (+ RACK-LEFT BEAD-MARGIN-WIDTH (* XIDX (+ BEAD-WIDTH BEAD-MARGIN-WIDTH))
		   BEAD-WIDTH))
	   (LET* ((TOP-P (< Y LOWER-RACK-TOP))
		  (YIDX (// (- Y (IF TOP-P UPPER-RACK-TOP LOWER-RACK-TOP)) BEAD-HEIGHT)))
	     (AND ( YIDX 0) (< YIDX (IF TOP-P 2 5))
		  (LET* ((POWER (^ 10. (- NBEADS XIDX 1)))
			 (DIGIT (\ (// CURRENT-NUMBER POWER) 10.))
			 (NDIGIT (IF TOP-P
				     (+ (\ DIGIT 5) (* 5 (LOGXOR YIDX 1)))
				   (+ (* 5 (// DIGIT 5)) YIDX))))
		    (AND ( DIGIT NDIGIT)
			 (+ (- CURRENT-NUMBER (* POWER DIGIT)) (* POWER NDIGIT))))))))))

(DEFMETHOD (:OPERATE ABACUS-WINDOW) (OPERATION NUMBER &OPTIONAL (SLEEP-TIME 30.))
  (OR (MEMQ OPERATION '(- +))
      (FERROR NIL "~S is not a known operation" OPERATION))
  (DO ((N NUMBER (// N 10.))
       (POWER 1 (* POWER 10.))
       (NEW-NUMBER))
      ((ZEROP N))
    (SETQ NEW-NUMBER (FUNCALL OPERATION CURRENT-NUMBER (* (\ N 10.) POWER)))
    (LET ((MAX (^ 10. NBEADS)))
      (SETQ NEW-NUMBER (\ NEW-NUMBER MAX))
      (AND (MINUSP NEW-NUMBER)
	   (SETQ NEW-NUMBER (+ MAX NEW-NUMBER))))
    (COND (( NEW-NUMBER CURRENT-NUMBER)
	   (DO ((I 0 (1+ I))
		(POWER 1 (* POWER 10.))
		(DIGIT) (NDIGIT))
	       (( I NBEADS))
	     (SETQ DIGIT (\ (// CURRENT-NUMBER POWER) 10.)
		   NDIGIT (\ (// NEW-NUMBER POWER) 10.))
	     (COND (( DIGIT NDIGIT)
		    (FUNCALL-SELF ':SET-CURRENT-NUMBER
				  (+ (- CURRENT-NUMBER (* POWER DIGIT)) (* POWER NDIGIT)))
		    (AND SLEEP-TIME (PROCESS-SLEEP SLEEP-TIME))))))))
  CURRENT-NUMBER)

(DEFFLAVOR ABACUS-PANE () (ABACUS-WINDOW TV:PANE-MIXIN))

(DEFFLAVOR ABACUS-FRAME () (TV:BORDERED-CONSTRAINT-FRAME TV:PROCESS-MIXIN))

(DEFFLAVOR ABACUS-LISP-LISTENER-PANE ()
	   (TV:DONT-SELECT-WITH-MOUSE-MIXIN TV:AUTOEXPOSING-MORE-MIXIN TV:WINDOW-PANE))

(DEFCONST ABACUS-LABEL
	  "[END]: exit   =: print   +: add   -: subtract   digits: set number")

(DEFMETHOD (:INIT ABACUS-FRAME :BEFORE) (IGNORE)
  (SETQ TV:SELECTED-PANE 'LISP-WINDOW
	TV:PROCESS '(ABACUS-PROCESS-TOP-LEVEL :SPECIAL-PDL-SIZE 4000)
	TV:PANES '((LISP-WINDOW ABACUS-LISP-LISTENER-PANE :LABEL NIL :MORE-P NIL)
		   (ABACUS-WINDOW ABACUS-PANE :LABEL NIL))
	TV:CONSTRAINTS '((MAIN . ((ABACUS-WINDOW LISP-WINDOW)
				  ((LISP-WINDOW 0.25s0 :LINES))
				  ((ABACUS-WINDOW :EVEN)))))))

(DEFUN ABACUS-PROCESS-TOP-LEVEL (WINDOW)
  (LET ((TERMINAL-IO (FUNCALL WINDOW ':GET-PANE 'LISP-WINDOW))
	(ABACUS-WINDOW (FUNCALL WINDOW ':GET-PANE 'ABACUS-WINDOW))
	(BASE 10.) (IBASE 10.)
	(CH) (THROW T))
    (ERROR-RESTART-LOOP ((ERROR SYS:ABORT) "Abacus Command Loop")
      (AND THROW (SEND ABACUS-WINDOW ':SET-LABEL ABACUS-LABEL))
      (SETQ THROW T)
      (SELECTOR (SETQ CH (FUNCALL STANDARD-INPUT ':TYI)) CHAR=
	(#/=
	 (FORMAT T "= ~D~%" (FUNCALL ABACUS-WINDOW ':CURRENT-NUMBER)))
	((#/+ #/-)
	 (FUNCALL ABACUS-WINDOW ':SET-LABEL
		  (FORMAT NIL "Type a number to ~:[add~;subtract~].  ~
			       End with Space or Return."
			  (CHAR= CH #/-)))
	 (TYO CH)
	 (LET ((NUMBER (READ)))
	   (AND (NUMBERP NUMBER)
		(FUNCALL ABACUS-WINDOW ':OPERATE (IF (CHAR= CH #/+) '+ '-) NUMBER))))
	(#\END
	 (FUNCALL WINDOW ':DESELECT))
	(OTHERWISE
	 (IF (CHAR #/0 CH #/9)
	     (PROGN (FUNCALL STANDARD-INPUT ':UNTYI CH)
		    (FUNCALL ABACUS-WINDOW ':SET-LABEL
		      "Type a number to store in the abacus.  End with Space or Return.")
		    (LET ((NUMBER (READ)))
		      (AND (NUMBERP NUMBER)
			   (FUNCALL ABACUS-WINDOW ':SET-CURRENT-NUMBER NUMBER))))
	     (TV:BEEP))))
      (SETQ THROW NIL))))

(DEFVAR *ABACUS-FRAME*)

(DEFUN ABACUS ()
  (FED:FIND-AND-LOAD-FONT 'FONTS:ABACUS)
  (UNLESS (BOUNDP '*ABACUS-FRAME*)
    (SETQ *ABACUS-FRAME* (TV:MAKE-WINDOW 'ABACUS-FRAME ':EDGES '(100 100 1200 700))))
  (FUNCALL *ABACUS-FRAME* ':SELECT))

(DEFUN ABACUS-DEMO ()
  (ABACUS)
  (PROCESS-WAIT "Deexpose" #'(LAMBDA (X) (NOT (CAR X)))
		(LOCF (TV:SHEET-EXPOSED-P *ABACUS-FRAME*))))

(COMPILE-FLAVOR-METHODS ABACUS-WINDOW ABACUS-PANE ABACUS-FRAME ABACUS-LISP-LISTENER-PANE)

(DEFDEMO "Abacus" "Upward compatibilty with primitive computers." (ABACUS-DEMO))
