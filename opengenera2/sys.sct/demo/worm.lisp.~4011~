;;; -*- Mode:Lisp; Package:Hacks; Base:8 -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(DECLARE (SPECIAL WORM-ALU-FUNCTION WORM-X WORM-Y WORM-TURNS WORM-SG X-WORM Y-WORM
		  CHAR ORDER DIR FITP))

(DEFVAR WORM-WINDOW
	(LET ((WINDOW
		(TV:MAKE-WINDOW 'HOF-WINDOW
				':BLINKER-P NIL)))
	  WINDOW))

;These are the "character codes" in the worm font
;for the various kinds of spots.
(DEFCONST WORM-BIG-CHAR 5)
(DEFCONST WORM-STRIPE-CHAR 4)
(DEFCONST WORM-GRAY-CHAR 3)
(DEFCONST WORM-BLACK-CHAR 2)

;This is a 6-long array of stack groups,
;each of which runs one worm.
(DEFVAR WORMS)

(DEFUN PRESET (SG CHAR ALU-FN N BITS)
       (STACK-GROUP-PRESET SG
			   (FUNCTION FLOP)
			   (SYMEVAL CHAR)
			   (SYMEVAL ALU-FN)
			   ORDER
			   WORM-X
			   WORM-Y
			   BITS
			   (* N (^ 3 (1- ORDER)))
			   TERMINAL-IO
			   SYS:%CURRENT-STACK-GROUP))

(DEFUN WORM (&OPTIONAL (BITS 0) (ORDER 7) (WORM-X 222) (WORM-Y 777) 
	     &AUX LENGTH (TERMINAL-IO WORM-WINDOW))
  (TV:WINDOW-CALL (WORM-WINDOW :DEACTIVATE)
    (CATCH-ERROR-RESTART ((ERROR SYS:ABORT) "Exit WORM")
      (FUNCALL WORM-WINDOW ':SET-LABEL "Worm")
      (UNLESS (BOUNDP 'WORMS)
	(SETQ WORMS (MAKE-ARRAY 6 ':TYPE 'ART-Q-LIST))
	(DOTIMES (I 6)
	  (ASET (MAKE-STACK-GROUP (FORMAT NIL "WORM-~D" I)) WORMS I)))
      (SETQ LENGTH (^ 3 (1+ ORDER)))
      (PRESET (AREF WORMS 0) 'WORM-BIG-CHAR 'TV:ALU-IOR 0 BITS)
      (SETQ FITP NIL)
      (DO I 0 (1+ I) (OR FITP ( I 2))		; Paint blackness over whole worm
	  (SETQ FITP T)
	  (FUNCALL TERMINAL-IO ':CLEAR-SCREEN)
	  (DOTIMES (I (1+ LENGTH))
	    (DECLARE (IGNORE I))
	    (IF (FUNCALL (AREF WORMS 0))
		(SIGNAL 'SYS:ABORT))))
      (SETQ WORM-X X-WORM WORM-Y Y-WORM)
      (MAPC (FUNCTION PRESET)			; Preset wormlets
	    (G-L-P WORMS)
	    '(WORM-GRAY-CHAR WORM-BLACK-CHAR WORM-STRIPE-CHAR WORM-BLACK-CHAR
			     WORM-BLACK-CHAR WORM-BLACK-CHAR)
	    '(TV:ALU-XOR TV:ALU-ANDCA TV:ALU-IOR TV:ALU-IOR TV:ALU-ANDCA TV:ALU-IOR)
	    '(0 1 2 3 5 6)			;4 is intentionally missing!
	    (CIRCULAR-LIST BITS))
      (WORM-COMMAND-LOOP))))

(DEFUN WORM-COMMAND-LOOP (&AUX (YPOS (- (TV:SHEET-INSIDE-HEIGHT TERMINAL-IO)
					(* 3 (TV:SHEET-LINE-HEIGHT TERMINAL-IO)))))
  (DO ((I 0 (1+ I))
       RUN
       (STOP-VAL 0))
      (NIL)
    (COND ((OR RUN (< I STOP-VAL))
	   (AND (FUNCALL TERMINAL-IO ':TYI-NO-HANG)
		(SETQ RUN NIL STOP-VAL 0)))
	  (T (FUNCALL WORM-WINDOW ':SET-LABEL
		      (LET ((BASE 9))
			(FORMAT NIL "Worm    Generation ~S (base 9)" I)))
	     (FUNCALL TERMINAL-IO ':SET-CURSORPOS 0 YPOS)
	     (FUNCALL TERMINAL-IO ':CLEAR-EOL)
	     (FUNCALL TERMINAL-IO ':STRING-OUT
		      "    P: Run  nR: Run until n  nN: Run n steps  nS: Run till nth order  End: exit
    ")
	     (PROG (CH VAL)
		   (SETQ VAL 0)
		LOOP
		   (SETQ CH (CHAR-UPCASE (TYI)))
		   (COND ((DIGIT-CHAR-P CH 9)
			  (SETQ VAL (+ (* VAL 9) (DIGIT-CHAR-P CH 9)))
			  (GO LOOP))
			 (T (SELECTOR CH CHAR-EQUAL
			      (#/END (SIGNAL 'SYS:ABORT))
			      (#/N (SETQ STOP-VAL (+ VAL I)))
			      (#/R (SETQ STOP-VAL VAL))
			      (#/S (SETQ VAL (^ 3 VAL)
					 STOP-VAL (* VAL (1+ (// I VAL)))))
			      (#/P (SETQ RUN T))))))
	     (WHEN (OR RUN (< I STOP-VAL))
	       (SEND WORM-WINDOW ':SET-LABEL "Worm    Type any character to stop"))))
    (DOTIMES (I 6)
      (WHEN (FUNCALL (AREF WORMS I))
	(SIGNAL 'SYS:ABORT)))))

(OR (BOUNDP 'WORM-TURNS) (SETQ WORM-TURNS (MAKE-ARRAY 12. :TYPE 'ART-Q-LIST)))

(FillArray WORM-TURNS '( 6  0
			 3  5
			-3  5
			-6  0
			-3 -5
			 3 -5))

;This is the coroutining function for each worm.
;Returns to the calling stack group with NIL normally,
;T if the user typed Abort.
(DEFUN FLOP (CHAR WORM-ALU-FUNCTION ORDER WORM-X WORM-Y BITS SNOOZE TERMINAL-IO WORM-SG)
  (CATCH-ERROR-RESTART ((ERROR SYS:ABORT) "Exit WORM")
    (DO I 0 (1+ I) ( I SNOOZE)
	(STACK-GROUP-RETURN NIL))
    (DO ((I 0 (1+ I))
	 (DIR (BOOLE 4 (- ORDER) 1)))
	(NIL)
      (TERD ORDER BITS)
      (WORM-STEP)
      (SETQ X-WORM WORM-X Y-WORM WORM-Y)
      (SETQ DIR (+ DIR 4))))
  (DO () (()) (STACK-GROUP-RETURN T)))

(DEFUN TERD (N BITS &AUX BIT)			;terdragon
  (UNLESS (MINUSP (DECF N))
    (MULTIPLE-VALUE (BITS BIT) (FLOOR BITS 2))
    (SELECTOR BIT =
      (0 (TERD n BITS)
	 (WORM-STEP)
	 (INCF DIR 4)
	 (TERD n BITS)
	 (DECF DIR 2)
	 (WORM-STEP)
	 (DECF DIR 2)
	 (TERD n BITS))
      (1 (TERD n BITS)				;palindrome!
	 (DECF DIR 2)
	 (WORM-STEP)
	 (DECF DIR 2)
	 (TERD n BITS)
	 (WORM-STEP)
	 (INCF DIR 4)
	 (TERD n BITS)))))
	    
(DEFUN WORM-STEP ()
   (CLIP 'WORM-X (TV:SHEET-INSIDE-WIDTH TERMINAL-IO) (SETQ DIR (\ (+ 12. DIR) 12.)))
   (CLIP 'WORM-Y (- (TV:SHEET-INSIDE-HEIGHT TERMINAL-IO) 55) (1+ DIR))
   (SEND TERMINAL-IO :DRAW-GLYPH CHAR FONTS:WORM WORM-X WORM-Y WORM-ALU-FUNCTION)
   (STACK-GROUP-RETURN NIL))

(DEFUN CLIP (Z N D)
       (SELECTQ (// (+ N (SET Z (+ (SYMEVAL Z) (AREF WORM-TURNS D))))
                    N)
            (0 (SET Z 1) (SETQ FITP NIL))
            (1)
            (2 (SET Z (1- N)) (SETQ FITP NIL))))

(DEFDEMO "Worm" "Pretty fractal patterns, by Gosper and Holloway." (WORM))
