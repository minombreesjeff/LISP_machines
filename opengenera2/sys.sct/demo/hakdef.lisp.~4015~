;;;-*- Mode:LISP; Package:HACKS; Lowercase: Yes; Base: 8 -*-

;;; Shared definitions for the hacks.
;;; On the LM-2 this disable all sequence breaks except for the keyboard interface.
;;; In today's complicated world of network window systems, this isn't practical.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defmacro with-real-time (&body body)
  `(progn ,@body))

;;; System for menu of demos

(defvar *demo-alist*
	nil
  "Menu item list.  Elements are (name :VALUE <value> :DOCUMENTATION <string>).
   <value>s are either forms to evaluate or lists of shape (MENU name . elements),
   where elements are recursively the same thing.")


(defmacro defdemo (name documentation &rest args)
  "For a simple demo, (DEFDEMO <name> <documentation> <form>).
   For a sub-menu, (DEFDEMO <name> <documentation> <sub-menu title> . <elements>)
   where each <element> is a list that looks like the cdr of a defdemo form."
  `(setq *demo-alist* (add-or-update-demo *demo-alist* ',name ',documentation ',args)))

(defun undefdemo (name)
  (setq *demo-alist*
	(loop for demo in *demo-alist*
	      if (not (string-equal (car demo) name))
	      collect demo)))

(defstruct (demo-list-element (:type :list))
  demo-name
  (demo-value-symbol ':value)
  demo-value
  (demo-documentation-symbol ':documentation)
  demo-documentation)

;;; Given a demo list, add the new demo, or update the old demo of the same
;;; name, and return the updated demo list.
(defun add-or-update-demo (demo-list name documentation args)
  (let ((element (or (assoc name demo-list)
		     (car (push (make-demo-list-element demo-name name) demo-list)))))
    (setf (demo-documentation element) documentation)
    (setf (demo-value element)
	  (if (= (length args) 1)
	      ;; This is the simple form.
	      (first args)
	      ;; This is the hairy form.
	      `(menu ,(first args) . ,(let ((list (cddr (demo-value element))))
					(dolist (x (rest1 args))
					  (setq list
						(add-or-update-demo
						  list
						  (first x)
						  (second x)
						  (rest2 x))))
					list)))))
  demo-list)

(defun print-hacks (&optional (stream t) (menu hacks:*demo-alist*))
  (format stream (print-hacks-menu menu 0)))

(defun print-hacks-menu (menu level)
  (setq menu (sortcar (copylist menu) #'string-lessp))
  (loop for hack in menu
	for label = (first hack)
	for value = (third hack)
	for doc = (fifth hack)
	for blurb = (print-hack label value doc level)
	for string first blurb then (string-append string blurb)
	finally (return string)))

(defun print-hack (label value doc level &aux (indent (* level 4)) (indent2 (+ indent 2)))
  (if (or (atom value) (not (string-equal (first value) "menu")))
      (format nil "~%~V@T~A: ~S~%~V@T~A"		;simple entry
	      indent label value indent2 doc)
      (let ((sub-menu (print-hacks-menu (cddr value) (1+ level))))
	(format nil "~%~V@T~A -- ~A Menu:~%~V@T~A~A"
		indent label (second value) indent2 doc sub-menu))))
;;; hacks that don't run acceptably on remote screens
(defvar *hacks-forbidden-for-remote-screens*
	'("Digital Crock" "Munching Squares" "Munching Tunes" "Zowie"))
;;; hacks that don't run acceptably on small screens
(defvar *hacks-forbidden-for-small-screens*
	'("Abacus" "Birds" "Escher" "Godel" "Lexiphage" "Life" "Multiple Hollerith Editor"
	  "Rotate"))

;;; takes a demo-alist and trims out the items that don't work on the
;;; machine on which we are running
;;;
(defun demo-list-for-machine (alist)
  (let ((machine-forbidden-list	
	  (let ((screen (tv:console-default-superior)))
	    (append (and (typep screen 'tv:basic-remote-screen)
			 *hacks-forbidden-for-remote-screens*)
		    (and (or (< (send screen :inside-height) 500.)
			     (< (send screen :inside-width) 750.))
			 *hacks-forbidden-for-small-screens*)))))
    (setq alist (loop for item in alist
		      unless (cl:find (first item) machine-forbidden-list
				      :test #'(lambda (a b)
						(string-equal a b 0 0 (string-length b))))
			collect item))))

(defun demo (&optional (alist *demo-alist*) (name "Demo:"))
  (setq alist (sortcar (demo-list-for-machine alist) #'string-lessp))
  (loop as choice = (tv:menu-choose alist name)
	until (null choice)
	do (if (eq (car choice) 'menu)
	       (demo (cddr choice) (cadr choice))
	       (catch-error-restart ((error sys:abort) "Return to the DEMO Menu")
		 (eval choice)))))

(defflavor hof-window ()
	   (tv:borders-mixin tv:bottom-box-label-mixin tv:window)
  (:default-init-plist :save-bits ':delayed :blinker-p nil :more-p nil :label ""))

(defmethod (:select hof-window :before) (&rest ignore)
  (funcall-self ':clear-input)
  (funcall-self ':set-label ""))

(defvar *hof-magnification* nil
  "Magnification factor for magnifying mouse blinker HOF windows")

(defvar *hof-magnifier-size* 20
  "Number of pixels to magnify with mouse blinker in HOF windows")

(defmethod (:handle-mouse hof-window) ()
  (if (memq *hof-magnification* '(nil 0 1))
      (tv:mouse-standard-blinker self)
      (tv:mouse-set-blinker-definition 'settable-magnifying-blinker 0 0 t
				       ':set-magnification
				       *hof-magnification*
				       *hof-magnifier-size*))
  (tv:mouse-default-handler self (funcall-self ':scroll-bar-p)))

(compile-flavor-methods hof-window)

(tv:defwindow-resource *hof-window* ()
  :make-window (hof-window :position '(177 177) :inside-size '(1001 1001)))

(tv:defwindow-resource *little-hof-window* ()
  :make-window (hof-window :position '(500 500) :inside-size '(200 200)))

(defvar *hof-window*)
(defvar *little-hof-window*)

(defmacro hof-window-call ((window-var final-action &rest final-action-args)
			   &body body)
  `(using-resource (,window-var ,window-var (send terminal-io :screen))
     (tv:sheet-force-access (,window-var)
       (send ,window-var :clear-window))
     (tv:window-call (,window-var ,final-action ,@final-action-args)
       ,@body)))

(cp:define-command (com-demonstrate-hacks :provide-output-destination-keyword nil)
    ()
   (format t "  Select a demonstration from the menu; move the mouse off to exit.")
   (demo)
   (format t "~2&"))
(defun show-legal-notice (stream)
  (format stream "Copyright (c) 19~D-1980, Symbolics, Inc.  All Rights Reserved.~
	        ~%Use the ~@\PRESENTATION\ command to see other important legal notices."
	  (nth 5 (multiple-value-list (time:get-time)))
	  '(si:com-show-legal-notice) 'cp:command))
