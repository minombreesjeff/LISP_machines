;; -*- Mode: Lisp; Package: Hacks; Base: 8 -*-

;; Originally written by ACW, modified by CWH
;; Modified again by DLA.
;; partially converted to char objects by Dodds, needs more work.

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defvar *key* 0)
(defvar *initial-speed* 400000)			;Normal speed
(defvar *speed* *initial-speed*)		;Current speed
(defvar *organ-initial-speed*)			;Speed when ORGAN was last called

(defvar *organ-input-buffer* (make-array 300 :type 'art-string :leader-length 1))
(defvar *organ-speed-stack* (make-array 300 :type 'art-q :leader-length 1))

(defvar *organ-initial-right*)			;Variables for rubout handling
(defvar *organ-initial-down*)

(defun piano (n)
  (fix (* .5878590257 (piano-1 (- n *key*)))))	;A = 440 4 Jan 1981

(defun piano-1 (n)
  (if (zerop n)
      1.0
      (let ((s (piano-1 (lsh n -1))))
	(* s s (if (oddp n)
		   1.059463095
		   1.0)))))

(defvar *scale*
  (let ((arr (make-array 177 :type 'art-16b)))
    (aset (piano 230) arr (CHAR-CODE #/z))
    (aset (piano 227) arr (CHAR-CODE #/Z))
    (aset (piano 226) arr (CHAR-CODE #/x))
    (aset (piano 225) arr (CHAR-CODE #/X))
    (aset (piano 224) arr (CHAR-CODE #/c))
    (aset (piano 223) arr (CHAR-CODE #/C))
    (aset (piano 223) arr (CHAR-CODE #/v))
    (aset (piano 222) arr (CHAR-CODE #/V))
    (aset (piano 221) arr (CHAR-CODE #/b))
    (aset (piano 220) arr (CHAR-CODE #/B))
    (aset (piano 217) arr (CHAR-CODE #/n))
    (aset (piano 216) arr (CHAR-CODE #/N))
    (aset (piano 215) arr (CHAR-CODE #/m))
    (aset (piano 214) arr (CHAR-CODE #/M))
    (aset (piano 214) arr (CHAR-CODE #/a))
    (aset (piano 213) arr (CHAR-CODE #/A))
    (aset (piano 212) arr (CHAR-CODE #/s))
    (aset (piano 211) arr (CHAR-CODE #/S))
    (aset (piano 210) arr (CHAR-CODE #/d))
    (aset (piano 207) arr (CHAR-CODE #/D))
    (aset (piano 207) arr (CHAR-CODE #/f))
    (aset (piano 206) arr (CHAR-CODE #/F))
    (aset (piano 205) arr (CHAR-CODE #/g))
    (aset (piano 204) arr (CHAR-CODE #/G))
    (aset (piano 203) arr (CHAR-CODE #/h))
    (aset (piano 202) arr (CHAR-CODE #/H))
    (aset (piano 201) arr (CHAR-CODE #/j))
    (aset (piano 200) arr (CHAR-CODE #/J))
    (aset (piano 200) arr (CHAR-CODE #/q))
    (aset (piano 177) arr (CHAR-CODE #/Q))
    (aset (piano 176) arr (CHAR-CODE #/w))
    (aset (piano 175) arr (CHAR-CODE #/W))
    (aset (piano 174) arr (CHAR-CODE #/e))
    (aset (piano 173) arr (CHAR-CODE #/E))
    (aset (piano 173) arr (CHAR-CODE #/r))
    (aset (piano 172) arr (CHAR-CODE #/R))
    (aset (piano 171) arr (CHAR-CODE #/t))
    (aset (piano 170) arr (CHAR-CODE #/T))
    (aset (piano 167) arr (CHAR-CODE #/y))
    (aset (piano 166) arr (CHAR-CODE #/Y))
    (aset (piano 165) arr (CHAR-CODE #/u))
    (aset (piano 164) arr (CHAR-CODE #/U))
    (aset (piano 164) arr (CHAR-CODE #/k))
    (aset (piano 163) arr (CHAR-CODE #/K))
    (aset (piano 162) arr (CHAR-CODE #/l))
    (aset (piano 161) arr (CHAR-CODE #/L))
    (aset (piano 160) arr (CHAR-CODE #/i))
    (aset (piano 157) arr (CHAR-CODE #/I))
    (aset (piano 157) arr (CHAR-CODE #/o))
    (aset (piano 156) arr (CHAR-CODE #/O))
    (aset (piano 155) arr (CHAR-CODE #/p))
    (aset (piano 154) arr (CHAR-CODE #/P)) arr))
  
;; We need the entire processor here, so turn off :CLOCK and :CHAOS interrupts.
;; Change when new version of PROCES installed.
  
  
(defun play-string (str)
  (with-real-time
    (prog (where char ii (repeat (char= (aref str 0) #/:)))
       R (setq where -1)
       L (setq where (1+ where))
	  (if (= where (string-length str))
	      (if (and repeat
		       (not (funcall terminal-io ':tyi-no-hang)))
		  (go R)
		  (return nil)))
	  (setq char (aref str where))
	  (and (> (CHAR-CODE char) 177) (go L))
	  (selector char char=
	    (#/')
	    (#//)
	    (#/ )
	    (#/:)
	    (#\CR)
	    (#/@ (setq *speed* *initial-speed*))
	    (#/< (setq *speed* (// *speed* 3)))
	    (#/> (setq *speed* (* *speed* 3)))
	    (#/[ (setq *speed* (lsh *speed* -1)))
	    (#/] (setq *speed* (lsh *speed* 1)))
	    (#/- (si:%beep -1 *speed*))		;rest
	    (t (go ON)))
	  (go L)
       ON (setq ii (do ((i where (1+ i)))
		       ((or (= i (string-length str))
			    (not (char= (aref str i) char))) i)))
	  (si:%beep (aref *scale* (char-code char)) (* *speed* (- ii where)))
	  (setq where (1- ii))
	  (go L))))

(defun play (thing)
  (cond ((stringp thing) (play-string thing))
	((symbolp thing) (play (symeval thing)))
	((listp thing) (mapc #'play thing))
	((fixp thing) (si:%beep (aref *scale* thing) *speed*))))

(defun organ (&aux (buffer *organ-input-buffer*)
		   (speed-stack *organ-speed-stack*)
	           (stream standard-input)
		   (temp-array (make-array 1 ':type 'art-string)))
  (organ-note-initial-cursorpos stream)
  (store-array-leader 0 buffer 0)		;Flush buffer contents
  (store-array-leader 0 speed-stack 0)
  (do ((char (funcall stream ':tyi) (funcall stream ':tyi)))
      ((CHAR= char #/.)
       (return-array temp-array)
       (string-append buffer))
    (selectq char
      (#\rubout (organ-do-rubout buffer speed-stack stream))
      ((#\return #\tab)
       (funcall stream ':tyo char)
       (array-push-extend buffer char))
      ((#\form 554 514)
       (funcall stream ':clear-screen)
       (organ-note-initial-cursorpos stream)
       (princ buffer))
      ((#/? #\help)
       (funcall stream ':clear-screen)
       (princ "
Welcome to the ORGAN.  The keyboard is now an organ.  Most of the keys play
notes, but the following have special meanings.  The most notable of these are
the following:

:       If this is the first character in the string, the string will
        repeat when played.
@       Resets speed to the initial speed.
<       Speeds you up by a factor of 3.
>       Slows you down by a factor of 3.
[       Speeds you up ba a factor of 2.
]       Slows you down by a factor of 2.
-       Plays a rest.
RUBOUT  Allows you to erase your mistakes.
.       Stops.  ORGAN returns a string which is your tune.  This tune can
        be played with the PLAY function.

")
	   (organ-note-initial-cursorpos stream)
	   (princ buffer))
      (otherwise
       (cond ((< (CHAR-CODE char) 200)
	      (funcall stream ':tyo char)
	      (and (memq char '(#/< #/> #/[ #/] #/@))
		   (array-push-extend speed-stack *speed*))
	      (aset char temp-array 0)
	      (OR (CHAR-EQUAL CHAR #/:)		;This would play forever...
		  (play-string temp-array))
	      (array-push-extend buffer char))
	     (t (tv:beep)))))))


(defun organ-do-rubout (buffer speed-stack stream &aux r d char)
  (cond ((plusp (array-leader buffer 0))
	 (setq char (array-pop buffer))
	 (multiple-value (r d)
	   (send stream ':read-cursorpos))	;in PIXEL!!
	 (cond ((or (zerop r)
		    (char= char #\tab))
		(send stream ':set-cursorpos *organ-initial-right* *organ-initial-down*)
		(send stream ':string-out buffer))
	       (t (send stream ':set-cursorpos
			(- r (funcall stream ':character-width char))
			d)
		  (send stream ':clear-rest-of-line)))
	 (and (member char '(#/< #/> #/[ #/] #/@))
	      (setq *speed* (array-pop speed-stack))))
	(t (tv:beep))))				;Is this the right thing??

(defun organ-note-initial-speed ()
  (setq *organ-initial-speed* *speed*))

(defun organ-figure-out-speed (buffer temp-array)
  (setq *speed* *organ-initial-speed*)
  (dotimes (x (string-length buffer))
    (and (mem #'char= (aref buffer x) '(#/< #/> #/[ #/] #/@))
	 (progn (aset (aref buffer x) temp-array 0)
		(play-string temp-array)))))

(defun organ-note-initial-cursorpos (stream)
  (multiple-value (*organ-initial-right* *organ-initial-down*)
    (funcall stream ':read-cursorpos)))


(DEFUN INS (SEXP)
    (PRIN1 SEXP ZWEI:(INTERVAL-STREAM (POINT) (POINT) T)))

(zwei:defcom com-play-region "Plays the region with the ORGAN program." ()
   (zwei:region (a b)
      (play (zwei:string-interval a b)))
   zwei:dis-none)

;Thank you, Khyai Udin Mas
(defvar pelog-scale
  (let ((arr (make-array 177 :type 'art-16b)))
    (aset 2340 arr (CHAR-CODE #/a))
    (aset 2340 arr (CHAR-CODE #/A))
    (aset 2200 arr (CHAR-CODE #/s))
    (aset 2200 arr (CHAR-CODE #/S))
    (aset 2030 arr (CHAR-CODE #/d))
    (aset 2030 arr (CHAR-CODE #/D))
    (aset 1540 arr (CHAR-CODE #/f))
    (aset 1540 arr (CHAR-CODE #/F))
    (aset 1444 arr (CHAR-CODE #/g))
    (aset 1444 arr (CHAR-CODE #/G))
    (aset 1377 arr (CHAR-CODE #/h))
    (aset 1377 arr (CHAR-CODE #/H))
    (aset 1273 arr (CHAR-CODE #/j))
    (aset 1273 arr (CHAR-CODE #/J))
    arr))

(defun gamelan ()
  (let ((*scale* pelog-scale))
    (organ)))

(defun play-gamelan (thing)
  (let ((*scale* pelog-scale))
    (play thing)))
