D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: LISP; Syntax: Common-Lisp; Package: Print; Base: 10.; Lowercase: Yes; Vsp: 0 -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;; Printer Managers that understand ASCII printers.

0(define-printer-manager(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") :ascii0 :flavor ascii-printer-manager)

1;;; Header page stuff. 

0(defmethod2 (start-request ascii-printer-manager)0 (request)
  (ignore request))

(defconstant 2*ascii-*-line*0 "****************************************")

(defun-in-flavor 2(ascii-stars ascii-printer-manager)0 (stream)
  (loop repeat 3 do
    (send stream :line-out *ascii-*-line*)))

(defmethod 2(print-start-header ascii-printer-manager)0 (request)
  (with-open-stream (hs (hardcopy:make-hardcopy-stream
			  printer
			  :output-stream stream
			  :keep-output-stream-open-p t))
    (ascii-stars hs)
    (format hs "~A~@
                ~%~@
                For:               ~A~@
                Printed on:        ~A~@
                Number of copies:  ~A~@
                Queued at:         ~A~%"
	    (get-request-property-as-string request :title)
	    (get-request-property-as-string request :recipient)
	    (send printer :pretty-name)
	    (get-request-property-as-string request :copies)
	    (get-request-property-as-string request :data-creation-date)
	    (get-request-property-as-string request :queue-entry-time))
    (let ((dcd-string (get-request-property-as-string request :data-creation-date)))
      (when (not (string-equal dcd-string ""))
	(format hs "Data created at:   ~A~%" dcd-string)))

    (ascii-stars hs)))

(defmethod2 (end-request ascii-printer-manager)0 (request)
  (ignore request)
  (send stream :tyo #\page))

(compile-flavor-methods 2ascii-printer-manager0)
