D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: LISP; Syntax: Common-Lisp; Package: Print; Base: 10.; Lowercase: Yes; -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defvar(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") *print-spooler-log*0 nil)

(dw:define-program-framework print-spooler-log-program
  :pretty-name "Printer Spooler Log"
  :command-definer define-print-spooler-log-command
  :command-table (:inherit-from '(;"colon full command"
				  ;"standard arguments"
				  ;"standard scrolling"
				  "global")
		  :kbd-accelerator-p nil)
  :top-level (dw:default-command-top-level :dispatch-mode :command-preferred
					   :prompt "Print Spooler command: "
					   :blank-line-mode :return-nil)
  :configurations `((main
		      (:layout
			(main :column log command-menu listener))
		      (:sizes
			(main
			  (command-menu :ask-window self :size-for-pane command-menu)
			  :then (log 0.8)
			  :then (listener :even)))))
  :panes ((log :display
	       :more-p nil
	       :end-of-page-mode :scroll
	       :deexposed-typeout-action :permit
	       :margin-components
	       '((dw:margin-scroll-bar)
		 (dw:margin-white-borders :thickness 3)))
	  (listener :listener
		    :more-p nil
		    :margin-components
		    `((dw:margin-borders)
		      (dw:margin-scroll-bar)
		      (dw:margin-white-borders :thickness 3)))
	  (command-menu :command-menu
			:margin-components
			'((dw:margin-borders)
			  (dw:margin-white-borders)
			  (dw:margin-label
			    :string "Printer Log"
			    :style (:sans-serif :italic :normal))
			  (dw:margin-whitespace :margin :left :thickness 10))))
  :state-variables ((log-monitor)))

(define-print-spooler-log-command (2com-start-print-spooler0 :menu-accelerator "Start Print Spooler")
				  ()
  (start-print-spooler))

(define-print-spooler-log-command (2com-halt-print-spooler0 :menu-accelerator "Halt Print Spooler")
				  ()
  (halt-print-spooler))

(defflavor2 print-spooler-log
0	((frame)
	 (program))
	su::(log-hosts-mixin log-file-mixin log-monitor-mixin basic-log)
  (:readable-instance-variables frame program)
  :initable-instance-variables)

(defmethod2 (su:server-description print-spooler-log)0 (open-reason)
  (multiple-value-bind (major minor status)
      (sct:get-system-version "Print Spooler")
    (setq status (second (assoc status sct:system-status-alist)))
    (format nil "~:[~*~;~A ~]Print Spooler~:[~*~;~:* ~D.~D~] ~A ~A"
	    (and status (not (equal status "")))
	    status major minor open-reason
	    (send net:*local-host* :mail-name))))

(compile-flavor-methods 2print-spooler-log0)



(defvar 2*print-spooler-directory*0 nil)

(defun 2print-spooler-directory-initialize0 ()
  (setf *print-spooler-directory* (fs:parse-pathname "local:>Print-Spooler>")))

(add-initialization "Print Spooler directory" '(print-spooler-directory-initialize)
		    '(:now) 'net:local-name-initialization-list)

(defun 2initialization-type-string0 (type)
  (case type
    (:cold "cold booted on")
    (:warm "warm booted on")
    (otherwise
      "running on")))

(defun 2initialize-log-file0 (type)
  (let ((su:*log* *print-spooler-log*))
    (letf (((su:log-process-id su:*log*) "ST")
	   ((su:log-herald     su:*log*) "Log File setup"))
      (su:check-server-directory *print-spooler-directory*)
      1;; If any log file is left around, close it.
0      (su:close-log-file *print-spooler-log* t)
      (su:open-log-file *print-spooler-log* (initialization-type-string type)))))

(defun 2initialize-log-frame0 (type)
1  ;; Someday log the fact we're initializing the log pane.
0  (ignore type)
  (when *print-spooler-log*
    (su:forcibly-unlock-log *print-spooler-log*)
1    ;; clear the screen, but how?
0    )
  (let ((frame (if *print-spooler-log*
		   (print-spooler-log-frame *print-spooler-log*)
		   (or (dw::find-program-window 'print-spooler-log-program :create-p nil)
		       (dw::find-program-window 'print-spooler-log-program)))))
    (when (null (print-spooler-log-program-log-monitor (send frame :program)))
      (send frame :set-save-bits t)		;Make the inferiors be relatively exposed.
      (let ((log-pane (send frame :get-pane 'log)))
	(setf (print-spooler-log-program-log-monitor (send frame :program))
	      (setq *print-spooler-log*
		    (make-instance 'print-spooler-log
				   :frame frame
				   :program (send frame :program)
				   :window log-pane
				   :directory *print-spooler-directory*)))))))

(defun2 initialize-log0 (type)
  (initialize-log-frame type)
  (initialize-log-file type))

(defun2 find-print-spooler-log-program0 ()
  (if *print-spooler-log*
1      ;; already there, so use it.
0      (print-spooler-log-frame *print-spooler-log*)
1      ;; not already there, make one (but don't initialize log!)
0      (dw::find-program-window 'print-spooler-log-program)))

(tv:add-select-key #\s '(find-print-spooler-log-program) "Print Spooler" nil)

(defun 2shutdown-log0 (&optional (abort-p nil))
  (su:close-log-file *print-spooler-log* abort-p))
