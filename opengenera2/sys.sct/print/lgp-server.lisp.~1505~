;;; -*- Mode: LISP; Base: 8;  Package: LGP -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(DEFUN GET-LOCAL-PRINTER ()
  (OR (CAAR (SEND NET:*LOCAL-HOST* ':SPOOLED-PRINTER))
      (FIRST (NET:FIND-OBJECTS-FROM-PROPERTY-LIST
	       :PRINTER :HOST NET:*LOCAL-HOST*))))

(DEFUN LGP-SERVER-ERROR (ACCEPTED-P STREAM FORMAT &REST FORMAT-ARGS)
  (LET ((STRING (WITH-OUTPUT-TO-STRING (STR)
		  (LEXPR-FUNCALL #'FORMAT STR FORMAT FORMAT-ARGS))))
    (SU:LOG-EVENT :PROBLEM STRING)
    (IF ACCEPTED-P
	(SEND STREAM ':CLOSE-WITH-REASON STRING :ABORT)
	(SEND STREAM ':REJECT STRING))))

;;; Network servers for LGP's which are relevant if one is attached to this machine
;;; or if this machine is spooling for the LGP.
(NET:DEFINE-SERVER :LGP (:MEDIUM :BYTE-STREAM :STREAM (STREAM :ACCEPT-P NIL :CHARACTERS NIL)
				 :HOST HOST :NO-EOF T)
   (SYS:LETF-IF PRINT::*PRINT-SPOOLER-LOG*
		((SU:*LOG* PRINT::*PRINT-SPOOLER-LOG*))
     (SYS:LETF-IF SU:*LOG*
		  (((SU:LOG-PROCESS-ID SU:*LOG*) "SE")
		   ((SU:LOG-HERALD SU:*LOG*) "Hardcopy"))
       (LET ((ARGS (GET-CONNECTION-ARGUMENT-STRINGS STREAM))
	     (ACCEPTED-P NIL))
	 (CONDITION-CASE (ERROR)
	      (LET ((PRINTER (IF (SECOND ARGS)
				 (NET:FIND-OBJECT-NAMED ':PRINTER (SECOND ARGS))
				 (GET-LOCAL-PRINTER))))
		(SEND STREAM ':ACCEPT)
		(SETQ ACCEPTED-P T)
		(LET* ((HOST-NAME (SEND HOST :MAIL-NAME))
		       (REQUEST-NAME
			 (IF (FIRST ARGS)
			     (FORMAT NIL "for ~A" (FIRST ARGS))
			     (FORMAT NIL "from ~A" (SEND HOST ':PRETTY-NAME))))
		       (USER-NAME (THIRD ARGS))
		       (USER-PERSONAL-NAME (OR (FOURTH ARGS) (THIRD ARGS)))
		       (DATA-CREATION-DATE (AND (FIFTH ARGS)
						(SI:PARSE-NUMBER
						  (FIFTH ARGS) 0 NIL 10.)))
		       (TITLE (OR (SIXTH ARGS) REQUEST-NAME))
		       (COPIES (OR (SEVENTH ARGS) 1))
		       (PRINT-COVER-PAGES (NOT (NTH 7 ARGS)))
		       (NOTIFY-REQUESTOR (OR (NTH 8 ARGS) NIL)))
		  (WHEN (< (LENGTH ARGS) 3)
		    (CONDITION-CASE (LIST)
			 (NET:INVOKE-SERVICE-ON-HOST ':LISPM-FINGER HOST)
		       ;; Host does not support service or random lossage.
		       (SYS:NETWORK-ERROR)
		       (:NO-ERROR
			 (SETQ USER-NAME (FIRST LIST)
			       USER-PERSONAL-NAME (FOURTH LIST))
			 (WHEN (EQUAL USER-NAME "")
			   (SETQ USER-NAME "not logged in"))
			 (WHEN (EQUAL USER-PERSONAL-NAME "")
			   ;; If no personal name is known, use the user-name.
			   (SETQ USER-PERSONAL-NAME USER-NAME)))))
		  (LET ((OPTIONS `(,@(AND USER-NAME `(:REQUESTOR-USER-ID ,USER-NAME))
				   ,@(AND HOST-NAME `(:REQUESTOR-HOST ,HOST-NAME))
				   ,@(AND USER-PERSONAL-NAME `(:RECIPIENT ,USER-PERSONAL-NAME))
				   ,@(AND DATA-CREATION-DATE `(:DATA-CREATION-DATE ,DATA-CREATION-DATE))
				   ,@(AND TITLE `(:TITLE ,TITLE))
				   ,@(AND COPIES `(:COPIES ,COPIES))
				   ,@(AND PRINT-COVER-PAGES `(:PRINT-COVER-PAGES ,PRINT-COVER-PAGES))
				   ,@(AND (NOT NOTIFY-REQUESTOR) `(:NOTIFY-REQUESTOR ,NOTIFY-REQUESTOR)))))
		  (WITH-OPEN-STREAM (S (NET:INVOKE-SERVICE-ON-HOST ':HARDCOPY NET:*LOCAL-HOST* PRINTER OPTIONS))
		    (STREAM-COPY-UNTIL-EOF STREAM S)))))
	    (NET:OBJECT-NOT-FOUND
	      (LGP-SERVER-ERROR ACCEPTED-P
				STREAM "Bad printer~@[ named ~A~]: ~A" (SECOND ARGS) ERROR))
	    (FS:FILE-ERROR			;Disk full, e.g.
	      (LGP-SERVER-ERROR ACCEPTED-P
				STREAM "File error in server: ~A" ERROR))
	    (SYS:REMOTE-NETWORK-ERROR
	      (LGP-SERVER-ERROR ACCEPTED-P
				STREAM "Remote network error in server: ~A" ERROR))
	    (ERROR
	      (LGP-SERVER-ERROR ACCEPTED-P
				STREAM "Error in server: ~A" ERROR)))))))

;;; Given a just-listened CONN, return a list of arguments which appeared
;;; delimited by LINE characters in the RFC.
(DEFUN GET-CONNECTION-ARGUMENT-STRINGS (STREAM)
  (MULTIPLE-VALUE-BIND (STR START END)
      (SEND STREAM :READ-INPUT-BUFFER)
    (let ((str (make-array end :type 'art-string :displaced-to str)))
      (LOOP FOR DELIM = (STRING-SEARCH-CHAR #\SPACE STR START END) THEN LAST
	    WHILE DELIM
	    FOR BEG = (1+ DELIM)
	    FOR LAST = (STRING-SEARCH-CHAR #\LINE STR BEG END)
	    COLLECT (AND (NEQ BEG (OR LAST END)) (SUBSTRING STR BEG (OR LAST END)))
	    WHILE LAST
	    FINALLY (SEND STREAM :ADVANCE-INPUT-BUFFER)))))

(NET:DEFINE-SERVER :LGP-QUEUE (:MEDIUM :BYTE-STREAM :STREAM (STREAM :ACCEPT-P NIL)) 
   (SYS:LETF-IF PRINT::*PRINT-SPOOLER-LOG*
		((SU:*LOG* PRINT::*PRINT-SPOOLER-LOG*))
     (SYS:LETF-IF SU:*LOG*
		  (((SU:LOG-PROCESS-ID SU:*LOG*) "SE")
		   ((SU:LOG-HERALD SU:*LOG*) "LGP Queue"))
       (LET ((PRINTER-NAME (FIRST (LGP:GET-CONNECTION-ARGUMENT-STRINGS STREAM))))
	 (CONDITION-CASE (ERROR)
	      (LET ((PRINTER (IF PRINTER-NAME
				 (NET:FIND-OBJECT-NAMED :PRINTER PRINTER-NAME)
				 (LGP:GET-LOCAL-PRINTER))))
		(SEND STREAM :ACCEPT)
		(PRINT::PRINT-OLD-STYLE-QUEUE-LISTING PRINTER STREAM))
	    (ERROR
	      (SEND STREAM ':REJECT (FORMAT NIL "Bad printer~@[ named ~A~]: ~A"
					    PRINTER-NAME ERROR))))))))

;;; This is still bogus.  We need generic status messages to printers, which find
;;; the currently open stream or something.
(NET:DEFINE-SERVER :LGP-STATUS (:MEDIUM :DATAGRAM :RESPONSE-ARRAY (ARRAY START)
				:REQUEST-ARRAY (NAME-STRING NAME-START))
  (LET ((NAME (NSUBSTRING NAME-STRING NAME-START)))
    (WHEN (ZEROP (STRING-LENGTH NAME))
      (SETQ NAME NIL))
    (WITH-OUTPUT-TO-STRING (STREAM ARRAY START)
      (SYS:LETF-IF PRINT::*PRINT-SPOOLER-LOG*
		   ((SU:*LOG* PRINT::*PRINT-SPOOLER-LOG*))
	(SYS:LETF-IF SU:*LOG*
		     (((SU:LOG-PROCESS-ID SU:*LOG*) "SE")
		      ((SU:LOG-HERALD SU:*LOG*) "LGP Status"))
	  (CONDITION-CASE (ERROR)
	       (LET ((PRINTER (IF NAME
				  (NET:FIND-OBJECT-NAMED ':PRINTER NAME)
				  (GET-LOCAL-PRINTER))))
		 (FORMAT STREAM "~A " (SEND PRINTER ':PRETTY-NAME))
		 (SEND PRINTER ':SEND-IF-HANDLES ':DECODE-STATUS STREAM))
	     (ERROR
	       (FORMAT STREAM "Bad printer~@[ named ~A~]: ~A" NAME ERROR)
	       NIL))))))
  (VALUES T (FILL-POINTER ARRAY)))
