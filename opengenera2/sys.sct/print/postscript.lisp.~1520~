;;; -*- Mode: LISP; Syntax: Common-lisp; Package: PRINT; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;; Printer Managers that understand PostScript printers.

(define-printer-managerD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") :postscript0 :flavor postscript-printer-manager)

(defvar1 *ps-heading-character-style*0           '(:sans-serif :bold :very-large))
(defvar 1*ps-error-log-heading-character-style*0 '(:sans-serif :bold :large))
(defvar 1*ps-error-log-body-character-style*0    '(:sans-serif :roman :normal))

(defparameter 1*micas-per-inch*0  2540)
(defparameter1 *points-per-mica*0 72/2540)

(defvar 1*box-label-width*0                         (floor (* 1/32 *micas-per-inch*)))
(defvar 1*logo-height*0                             (floor (* 1.5  *micas-per-inch*)))
(defvar 1*preferred-property-height*0               (floor (* 3/16 *micas-per-inch*)))
(defvar 1*notable-properties*0 '(:recipient :printer :copies :data-creation-date :queue-entry-time))

(defvar 1*ps-border-label-ExtraBorderWidth*0 (floor (* (* 3/32 *micas-per-inch*)
						     *points-per-mica* )))
(defvar 1*ps-border-label-MaxLabelHeight*0   (floor (* (* 3/8  *micas-per-inch*)
						     *points-per-mica*)))
(defvar 1*ps-border-label-TotalLabelWidth*  0(+ *ps-border-label-ExtraBorderWidth*
					      *ps-border-label-MaxLabelHeight*
					      (floor (* (* 1/4 *micas-per-inch*)
							*points-per-mica*))))

(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Thanks, Kalman.
0(defvar 1*ps-border-label-prelude*
0	"
/min {/n1 exch def
      /n2 exch def
      n1 n2 lt {n1} {n2} ifelse} def


/border {/font-name exch def
	 /kstring exch def
         /max-height exch def
         /extra-border exch def
%	 (max-height=) print max-height 20 string cvs print (\n) print
%	 (kstring=) print kstring print (\n) print
%        (font-name=) print font-name 20 string cvs print (\n) print
         gsave initclip clippath pathbbox
         /ury exch extra-border sub def
	 /urx exch extra-border sub def
         /lly exch extra-border add def
         /llx exch extra-border add def
	 /dx urx llx sub abs def
         /dy ury lly sub abs def
         /minlength dx dy min def
%         (minlength=) print minlength 20 string cvs print (\n) print
	 grestore
	 font-name findfont setfont         

	 kstring stringwidth /string-height exch 1 add def /string-length exch def
%         (string-length=) print string-length 20 string cvs print (\n) print
%         (string-height=) print string-height 20 string cvs print (\n) print

	 /x-factor minlength string-length div def
%         (x-factor=) print x-factor 20 string cvs print (\n) print
	 /y-factor max-height string-height div def
%         (y-factor=) print y-factor 20 string cvs print (\n) print
         /factor x-factor y-factor min def
%	 (factor=) print factor 20 string cvs print (\n) print
         /real-string-length string-length factor mul def
         /real-string-height string-height factor mul def
	 currentfont factor scalefont setfont

         gsave
         llx dx 2 div real-string-length 2 div sub add lly translate
         0 0 moveto
	 kstring show
%        ( 1) show
         grestore

	 gsave
         llx dx add ury dy 2 div sub real-string-length 2 div sub translate
         90 rotate
         0 0 moveto
         kstring show
%        ( 2) show
         grestore

         gsave
         urx dx 2 div sub real-string-length 2 div add ury translate
         0 0 moveto
         -180 rotate
         kstring show
%        ( 3) show
         grestore

         gsave
         llx lly dy 2 div add real-string-length 2 div add translate
         0 0 moveto
         -90 rotate
         kstring show
%        ( 4) show
         grestore

	} def
")

(defmethod 1(draw-edge-labels lgp::postscript-output-stream)0 (label)
  (send self :force-output)
  (format hci::output-stream *ps-border-label-prelude*)
  (let ((label-string (format nil "~%~A ~A (~A) /~A border~%"
			      *ps-border-label-ExtraBorderWidth*
			      *ps-border-label-MaxLabelHeight*
			      label
			      (send hci::device :edge-label-font-name))))
    (send hci::output-stream :string-out label-string)))

;;; Arguments are in micas.
(defun-in-flavor1 (draw-logo postscript-printer-manager)0 (hs left top height)
       (let* ((width (* (/ 16.0 11.0) height))
	      (bottom (- top height))
	      ;; square
	      (square-x (+ left    (* (/ 8.0 16.0)   width)))
	      (square-y (+ bottom  (* (/ 7.0 11.0)   height)))
	      (square-side         (* (/ 1.0 11.0)   width))
	      ;; circle
	      (circle-x (+ left    (* (/ 13.5 16.0)  width)))
	      (circle-y (+ bottom  (* (/ 4.6 11.0)   height)))
	      (circle-r (* height     (/ 4.3 11.0)))
	      ;; triangle
	      (tx1         left)
	      (ty1         bottom)
	      (tx2      (+ left    (* (/ 10.0 11.0)  height)))
	      (ty2         bottom)
	      (tx3      (+ left    (* (/  5.0 11.0)  height)))
	      (ty3      (+ bottom  (* (/ 10.0 11.0)  height))))
	 (send hs :set-gray 0.93)
	 (send hs :draw-rectangle square-side square-side square-x square-y :micas)
	 (send hs :set-gray 0.3)
	 (send hs :draw-filled-in-circle circle-x circle-y circle-r         :micas)
	 (send hs :set-gray 0.6)
	 (send hs :draw-filled-in-polygon `(,tx1 ,ty1 ,tx2 ,ty2 ,tx3 ,ty3)  :micas)
	 (send hs :set-gray 0.0)))

(defun-in-flavor 1(print-standard-header postscript-printer-manager)0 (request)
  (with-open-stream (hs (hardcopy:make-hardcopy-stream
			  printer
			  :output-stream stream
			  :margins nil
			  :keep-output-stream-open-p t))
    
    (flet ((non-blank-string (string)
	     (when (not (string-equal string ""))
	       string))
	   (mica-sl (string style)
	     (with-character-style (style hs :bind-line-height t)
	       (send hs :device-units-to-micas (send hs :string-length string) :horizontal))))
      
      (loop for edge in '(:top :right :bottom :left) do
	(send hs :allocate-margin *ps-border-label-TotalLabelWidth* edge :device))
      
      (multiple-value-bind (page-width page-height) (send hs :inside-size :micas)
	
	;; This is nuts
	(loop for edge in '(:top :right :bottom :left) do
	  (send hs :allocate-margin (- *box-label-width*) edge :micas))
	
	(send hs :draw-line 0          0           0          page-height :micas)
	(send hs :draw-line 0          page-height page-width page-height :micas)
	(send hs :draw-line page-width page-height page-width 0           :micas)
	(send hs :draw-line page-width 0           0          0           :micas)
	
	(loop for edge in '(:top :right :bottom :left) do
	  (send hs :allocate-margin (* 2 *box-label-width*) edge :micas))
	
	(multiple-value-bind (page-width page-height) (send hs :inside-size :micas)
	  
	  (when (eq (send net:*local-site* :name) :scrc)
	    (draw-logo hs 0 (- page-height 1) *logo-height*))
	  
	  (let ((style (loop with height = *preferred-property-height*
			     with style = *ps-heading-character-style*
			     for property in *notable-properties*
			     for value-string = (get-request-property-as-string request
										property)
			     for line = (string-append
					  (request-property-description
					    (get-request-property-template property))
					  ":  "
					  value-string)
			     when (not (string-equal value-string ""))
			     do (ignore height)
				(loop with too-small = nil
				      for working-style first style
							then (si:merge-character-styles
							       `(nil nil :smaller)
							       working-style)
				      for length = (mica-sl line working-style)
				      when ( length page-width)
					do (progn (setf style working-style) (return))
				      when too-small
					do (setf line (nsubstring line 0 (- (length line) 1)))
				      when (eq (third (si:unparse-character-style
							working-style))
					       :tiny)
					do (setf too-small t))
			     finally (return style))))
	    
	    (send hs :set-cursorpos 0 (- page-height (floor (* *logo-height* 1.2))) :micas)
	    (with-character-style (style hs :bind-line-height t)
	      (condition-bind
		((hardcopy:hardcopy-outside-of-bounding-box
		   #'hardcopy-internals::simple-formatter-exception-interceptor))
		(let ((title (get-request-property-as-string request :title)))
		  (when (non-blank-string title)
		    (send hs :set-cursorpos 0 nil :micas)
		    (format hs "~A~%~%" title))
		  (loop for property in *notable-properties*
			for property-string = (request-property-description
						(get-request-property-template property))
			for value-string = (get-request-property-as-string request property)
			when (not (string-equal value-string ""))
			  do (format hs "~&~A:  ~A" property-string value-string)
			     (send hs :increment-cursorpos 0
				   (- (floor (* 0.2 *preferred-property-height*)))
				   :micas)))))))
	
	(draw-edge-labels hs (or (non-blank-string
				   (get-request-property request :recipient))
				 (non-blank-string
				   (get-request-property request :requestor-user-id))
				 "???"))))))

(defmethod 1(print-start-header postscript-printer-manager)0 (request)
  (when (send printer :print-cover-page-before)
    (print-standard-header request)))

(defmethod 1(print-end-header postscript-printer-manager)0 (request)
  (send stream :sync :sync-timeout (send printer :after-document-timeout))

  (unless (send printer :print-cover-page-before)
    (print-standard-header request)))

;;; 2This is going to be very, very gross.  You might want to close your eyes.
0(defmethod 1(print-error-log0 1postscript-printer-manager)0 (request)
  (let ((postscript-output (send stream :get-postscript-output))
	(first-postscript-error (send stream :get-next-postscript-error))
	(title (get-request-property request :title)))
    (flet ((print-string-on-stream (string page-heading)
	     (send stream :sync)
	     (with-input-from-string (istream string)
	       ;; 2Avoid 1Foo: 1 2 32 etc. popping up (sometimes creating a background stream...)
0	       (let ((zl:standard-output #'si:null-stream))
		 (hardcopy:hardcopy-from-stream
		   :text
		   istream
		   printer
		   :output-stream stream
		   :keep-output-stream-open-p t
		   :page-headings t
		   :page-heading page-heading
		   :heading-character-style *ps-error-log-heading-character-style*
		   :body-character-style *ps-error-log-body-character-style*)))))
      (setf postscript-output
	    (string-right-trim lgp::*lgp2-response-string-chaff*
	     (string-left-trim lgp::*lgp2-response-string-chaff*
	      postscript-output)))
      (when (not (string-equal postscript-output ""))
        (print-string-on-stream postscript-output
				(format nil "PostScript output of ~A" title)))
      (ignore postscript-output)
      (when first-postscript-error
	(let ((error-string (with-output-to-string (ostream)
			      (loop for (err op)
					first first-postscript-error
					then (send stream :get-next-postscript-error)
				    when err
				      do (send ostream :line-out
					       (format nil "For operator \"~A\": ~A" op err))
				    else do (return)))))
	  (print-string-on-stream error-string
				  (format nil "PostScript error log for ~A" title)))))))
;;; 2You can open your eyes now.


0(defmethod 1(reset-printer-stream0 1postscript-printer-manager0 :1before)0 ()
  (zl:process-sleep (* 60. 15) "Pause for Printer recovery ")
  )

(defmethod 1(start-request0 1postscript-printer-manager)0 (request)
  (ignore request)
  (send stream :interrupt-then-maybe-download-adobe-stuff-then-sync))

(defmethod 1(end-request0 1postscript-printer-manager)0 (request)
  (if (and (get-request-property request :print-cover-pages)
	   (not (send printer :print-cover-page-before)))
2      ;; use Default Timeout when waiting for cover page.
0      (send stream :sync)
2      ;; use Document timeout (usually longer) when waiting for 
      ;; document to come out.
0      (send stream :sync :sync-timeout (send printer :after-document-timeout))))

(defmethod 1(check-printer-status postscript-printer-manager :after)0 ()
2  ;; Sync up and ask for status0 2(sends two characters). If we get
  ;; serial-timeout trying
  ;; a sync or ask-for-status, the printer is dead. (Note: It can't
  ;; be running a postscript program from the last request since
  ;; the end-request method waits until the printer is ready.
0  (condition-bind
    ((hci::device-output-timed-out		2;stuck in serial-out or serial-finish.
0       #'(lambda (cond)
2	   ;; Let the printer manager deal with the problem.
0	   (handle-device-output-timeout self cond :fatal t)
2	   ;; Unless handle-device-output-timeout aborted, continue with
	   ;; the wait.
0	   (send cond :proceed :continue))))
    (send stream :sync)
    (send stream :ask-for-status)))

(compile-flavor-methods 1postscript-printer-manager0)
