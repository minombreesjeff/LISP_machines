;;; -*- Mode: LISP; Syntax: Common-lisp; Package: USER; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

(defpackage c-system
  (:use "COMMON-LISP" "SYMBOLICS-COMMON-LISP")
  (:nicknames c-sys)
  (:import
    ;;
    ;; from cts-defs
    ;;
    cts:*lisp-defuns*
    cts:*language*
    cts:*null-scope*
    cts:*global-only-scope*
    cts:*machine*
    cts:*size-of-3600-stack-frame*
    cts:*size-of-machine-fef-constant-area*
    cts:*local-constant-array-size*
    cts:*3600-immediate-constant-max*
    cts:*3600-immediate-constant-min*
    #+3600
    cts:*3600-machine*
    #+IMACH
    cts:*i-machine*
    cts:*curr-fun*
    cts:machine-dependent-boolean-to-integer-form
    cts:*compile-for-run-time-only*
    cts:basic-compilation-descriptor
    cts:internal-label-counter
    cts:internal-var-counter
    cts:stms
    cts:vars
    cts:args
    cts:lisp-arglist
    cts:lisp
    cts:undefined-value
    cts:*undefined-string*
    cts:var
    cts:make-var
    cts:var-in-memory
    cts:in-memory
    cts:var-set-but-not-referenced
    cts:set-but-not-referenced
    cts:var-referenced-but-not-set
    cts:referenced-but-not-set
    cts:var-is-tn
    cts:var-tn-intrinsic
    cts:tn-intrinsic
    cts:var-tn-initially-defined
    cts:tn-initially-defined
    cts:var-unallocated-after-pack
    cts:unallocated-after-pack
    cts:var-address-ref-count
    cts:address-ref-count
    cts:var-value-ref-count
    cts:value-ref-count
    cts:var-language-specific
    cts:basic-cts-variable
    cts:*language-flavors-to-be-compiled*
    cts:*src-interval-lo*
    cts:*src-interval-hi*
    cts:*preexpand-phase*
    cts:*language-skipper*
    cts:*skip-list*
    cts:*debug-data*
    cts:*batch-compilation*
    cts:*compile-whole-file-or-buffer*
    cts:*compile-from-file*
    cts:*omit-flow-analysis*
    cts:*simulated-debugging*
    cts:*stm*
    cts:stm-buffers
    cts:stm-card
    cts:stm-length
    cts:stm-ind
    cts:stm-card-number
    cts:stm-card-array-size
    cts:stm-card-array
    cts:stm-next-card
    cts:stm-next-card-eof
    cts:m-.-able-definitions
    cts:def-language-flavor
    cts:add-flavor-to-compile-list
    cts:defindentation
    cts:any-language
    cts:any-machine
    cts:pop-tailed-list
    cts:push-tail
    cts:visit-exprs-bottom-up
    cts:sys-err
    cts:substitute-line-number-list
    cts:substitute-line-number
    cts:parser-name
    cts:op-name

    ;; Commented out because they are only used in def-parser-clauses
    ;rbp
    ;lbp
    ;nud
    ;led

    cts:left
    cts:delimiter
    cts:poper-parser-name
    cts:poper-op-name
    cts:poper-rbp
    cts:poper-lbp
    cts:poper-nud
    cts:poper-led
    cts:poper-delimiter
    cts:def-pratt-parser
    cts:def-parser-clauses
    ;;		package-declare-with-no-superiors
    cts:program-pkg-dwim-parser
    cts:sourceloc-pc
    cts:sourceloc-pc-interval
    cts:sourceloc-line-num
    cts:pc
    cts:pc-interval
    cts:line-num
    cts:make-sourceloc-value
    cts:decode-sourceloc-value
    cts:get-pc-sourceloc-value
    cts:column
    cts:card
    cts:make-position
    cts:position-column
    cts:position-card
    cts:skip-to-on-error
    cts:def-match-defun
    cts:*keyword-package*
    cts:typein-line-more
    cts:typein-line
    cts:*phase-tree*
    cts:*generate-phase-timings*
    cts:phase-time
    cts:named-phase-time
    cts:print-phase-stats
    cts:create-phase-time
    cts:make-phase-time
    cts:phase-time-subphases
    cts:find-first-bp-of-section
    ;;
    ;; from flow-language
    ;;
    cts:expr-flags
    cts:expr-object
    cts:expr-side-effects
    cts:has-side-effects
    cts:primitive-expr-instance-variables
    cts:primitive-expr
    cts:expr-type
    cts:cseheader-or-src-from
    cts:cseparent-or-src-to-or-dad
    cts:defn-number-or-instant
    cts:line-num
    cts:defn-set
    cts:is-tn
    cts:context-name
    cts:def-flow-gen-representation
    cts:def-operator-set
    cts:def-operator
    cts:def-operator-class
    cts:def-operator-flavors
    cts:same-no
    cts:same-yes
    cts:same-maybe
    ;;
    ;; from cts-rep
    ;;
    cts:imp-type-case
    cts:sequence-operator
    cts:make-sequence-operator
    ;;
    ;;      Commented out because it conflicts with cl:sequence and scl:sequence
    ;; cts:sequence
    ;;
    cts:address-of
    cts:address-of-operator
    cts:make-address-of-operator
    cts:fetch-class
    cts:fetch
    cts:fetch-operator
    cts:make-fetch-operator
    cts:bit-fetch
    cts:bit-fetch-operator
    cts:make-bit-fetch-operator
    cts:deref
    cts:bit-deref-operator
    cts:deref-operator
    cts:make-deref-operator
    cts:store
    cts:store-operator
    cts:make-store-operator
    cts:let*-operator
    cts:make-let*-operator
    cts:prog1-operator
    cts:make-prog1-operator
    cts:goto
    cts:goto-operator
    cts:make-goto-operator
    cts:if-goto
    cts:if-goto-operator
    cts:make-if-goto-operator
    cts:displayless-call-funcall
    cts:displayless-call-funcall-operator
    cts:displayless-function-funcall
    cts:displayless-function-funcall-operator
    ;;
    ;;      Commented out because it conflicts with cl:case and scl:case
    ;; cts:case
    ;;
    cts:case-operator
    cts:make-case-operator
    cts:case-triples
    cts:label
    cts:label-operator
    cts:make-label-operator
    cts:constant
    cts:constant-operator
    cts:make-constant-operator
    cts:add
    cts:add-operator
    cts:make-add-operator
    cts:mul
    cts:mul-operator
    cts:make-mul-operator
    cts:sub
    cts:sub-operator
    cts:make-sub-operator
    cts:div
    cts:div-operator
    cts:make-div-operator
    cts:mod-operator
    cts:make-mod-operator
    cts:rem-operator
    cts:make-rem-operator
    cts:exp-operator
    cts:make-exp-operator
    cts:shift
    cts:shift-operator
    cts:make-shift-operator
    cts:and-operator
    cts:make-and-operator
    cts:or-operator
    cts:make-or-operator
    cts:xor
    cts:xor-operator
    cts:make-xor-operator
    cts:sign
    cts:sign-operator
    cts:make-sign-operator
    cts:complex-compare
    cts:complex-compare-operator
    cts:make-complex-compare-operator
    cts:relationals
    cts:eq-operator
    cts:make-eq-operator
    cts:ne
    cts:ne-operator
    cts:make-ne-operator
    cts:le
    cts:le-operator
    cts:make-le-operator
    cts:lt
    cts:lt-operator
    cts:make-lt-operator
    cts:ge
    cts:ge-operator
    cts:make-ge-operator
    cts:gt
    cts:gt-operator
    cts:make-gt-operator
    cts:eqv
    cts:eqv-operator
    cts:make-eqv-operator
    cts:neqv
    cts:neqv-operator
    cts:make-neqv-operator
    cts:compare
    cts:compare-operator
    cts:make-compare-operator
    cts:complex-part
    cts:complex-part-operator
    cts:make-complex-part-operator
    cts:imaginary
    cts:not-operator
    cts:make-not-operator
    cts:neg
    cts:neg-operator
    cts:make-neg-operator
    ;;
    ;;      Commented out because it conflicts with cl:coerce and scl:coerce
    ;; cts:coerce
    ;;
    cts:coerce-operator
    cts:make-coerce-operator
    cts:truncate-operator
    cts:make-truncate-operator
    cts:nearest-whole
    cts:nearest-whole-operator
    cts:make-nearest-whole-operator
    cts:abs-operator
    cts:make-abs-operator
    cts:take-values
    cts:take-values-operator
    cts:make-take-values-operator
    cts:max-operator
    cts:make-max-operator
    cts:min-operator
    cts:make-min-operator
    cts:concat
    cts:concat-operator
    cts:make-concat-operator
    cts:*throw-operator
    cts:make-*throw-operator
    cts:built-in-call
    cts:built-in-call-operator
    cts:make-built-in-call-operator
    cts:send-operator
    cts:make-send-operator
    cts:any-function-call
    cts:call-function-call
    cts:call-function-call-operator
    cts:make-call-function-call-operator
    cts:function-call
    cts:function-call-operator
    cts:make-function-call-operator
    cts:any-funcall
    cts:call-funcall
    cts:call-funcall-operator
    cts:make-call-funcall-operator
    cts:function-funcall
    cts:function-funcall-operator
    cts:make-function-funcall-operator
    cts:lisp-argument
    cts:lisp-argument-operator
    cts:make-lisp-argument-operator
    cts:register-fetch
    cts:register-fetch-operator
    cts:make-register-fetch-operator
    cts:values-operator
    cts:make-values-operator
    cts:return-operator
    cts:make-return-operator
    cts:*fef-constants*
    cts:*fef-constants-arrays*
    cts:pil-infix
    cts:pil-label
    ;;
    ;; from flow-defs
    ;;
    cts:cse-header
    cts:basic-block
    cts:basic-block-first-instant
    cts:basic-block-last-instant
    cts:basic-block-defines
    cts:basic-block-loopdepth
    cts:basic-block-uses
    cts:flow-graph
    cts:flow-graph-blocks
    cts:kill-object
    cts:bitvect
    cts:*life-bits*
    cts:*life-words*
    cts:*life-bit-dims*
    cts:*parent-set*
    cts:*collect-tn-creates-and-uses*
    cts:*number-of-expr-definitions*
    cts:*expr-set-words*
    cts:*expr-set-bit-dims*
    cts:*expr-definition-array*
    cts:*fetch-parent-set*
    cts:*scope-kill-cache*
    cts:*pack-registers-claimed*
    cts:*first-packable-register*
    cts:var-life
    cts:flags
    cts:life-size
    cts:var-number
    cts:creations-and-uses
    cts:profit
    cts:tn-mixin
    cts:cond-op
    cts:cond-comp-op
    cts:cond-rev-op
    cts:cond-make-comp-op
    cts:cond-make-rev-op
    cts:find-cond-comp-op
    cts:*call-stack-slots-required*
    #+IMACH
    cts:*evacuation-temporaries-required*
    #+IMACH
    cts:*argument-list-context-p*
    ;;
    ;; from flow-bitops
    ;;
    cts:bitvect-contains
    cts:bitvect-no-overlap
    cts:bitvect-bitset
    cts:bitvect-clear
    cts:bitvect-first-bit-number
    ;;
    ;;      Commented out because they conflict with things in cl and scl
    ;; cts:bit
    ;; cts:bit-and
    ;; cts:bit-ior
    ;; cts:bit-andc2
    ;; cts:replace
    ;;
    ;; from keyword-macros
    ;;
    cts:def-pattern-expander
    cts:pattern-expand
    cts:pattern-expand-sequence
    cts:one-of
    cts:zero-or-more-of
    cts:one-or-more-of
    cts:zero-or-more-of-no-duplications
    cts:one-or-more-of-no-duplications
    cts:then
    cts:with
    cts:selectq-pattern
    cts:zip
    cts:optional
    cts:define-keyword-parser
    cts:defparse-dispatch-class
    cts:select-dispatch-class
    ;;
    ;; templates -- nothing, since referenced via package zwei
    ;;
    ;; flow-code
    ;;
    cts:context-determination
    cts:eligible-cse
    cts:set-up-for-data-flow
    cts:basic-block-data-flow
    cts:global-data-flow
    cts:common-subexpression-minimum-count
    cts:cost-determination
    cts:do-flow-transformations
    cts:cse-tn-insert
    ;;
    ;; flow-graph
    ;;
    cts:build-flow-graph
    cts:simplify-flow-graph
    cts:process-flow-loops
    cts:linearize-flow-graph
    cts:goto-if-necessary
    ;;
    ;; tnbind
    ;;
    cts:make-life-bits
    cts:sequence-top-level-exprs
    cts:determine-all-var-lives
    cts:combine-tn-lives
    cts:compute-tn-profit
    cts:pack-all-tns
    cts:find-all-uses-and-roadblocks
    cts:set-parent-and-tn-uses
    cts:life-lessp
    ;;
    ;; cts-utils
    ;;
    cts:compare-chars-but-not-styles
    cts:copy-expr
    cts:copy-top-level-expr
    cts:get-start-stm-position
    cts:get-end-stm-position
    cts:given-start-get-current
    cts:get-eos-stm-position
    cts:get-current-stm-position
    cts:decode-interval
    cts:get-tok-interval
    cts:expr-interval-union
    cts:union-interval-parts
    cts:union-interval-parts-with-expr
    cts:union-interval-with-expr
    cts:list-expr-union
    cts:expr-interval
    cts:interval-union
    cts:add-current-interval-to-expr
    cts:add-interval-to-expr
    cts:current-position-interval
    cts:copy-expr-interval-to-expr
    cts:add-positions-to-expr
    cts:get-tok-interval
    cts:compiler-internal-label
    cts:compiler-intern
    cts:keyword-intern
    cts:comma-string
    cts:make-number
    cts:make-constant
    cts:constant-p
    cts:make-case
    cts:make-if-goto
    cts:make-goto
    cts:check-good-constant
    ;;
    ;;      Commented out because it conflicts with cl:make-sequence and scl:make-sequence
    ;; cts:make-sequence
    ;;
    cts:expr-semantic-type
    cts:expr-implementation-type
    cts:get-type-size-in-words
    ;;
    ;; stackreq
    ;;
    cts:unexpected-estimate-stack-requirements-error
    cts:estimate-any-stack-requirements
    cts:sum-stack-requirements
    cts:estimate-stack-requirements-for-store
    cts:estimate-stack-requirements-for-fetch
    cts:estimate-stack-requirements-for-deref
    cts:estimate-stack-requirements
    cts:sum-argument-list-stack-requirements
    ;;
    ;; lisp-expand
    ;;
    cts:type-semantic-type
    cts:type-implementation-type
    cts:type-size
    cts:type-name
    cts:constant-expression-p
    cts:allocate-and-plug-in-offsets
    cts:allocate-after-flow
    cts:reflect-all-constant-allocation
    cts:reflect-all-var-allocation
    cts:reference-count-variable-list
    cts:reference-count-constant
    cts:reference-count-double-constants
    cts:reference-count-complex-constants
    cts:reflect-debug-var-allocation
    cts:get-constant-value
    cts:lisp-expand
    cts:lisp-expand-list
    cts:*omit-source-locators*
    cts:add-source-locator
    cts:lisp-expand-fetch
    cts:lisp-expand-store
    cts:lisp-expand-fetch-word
    cts:needs-temp-copy
    cts:deref-array-copy-required-p
    cts:find-deref-array-and-copy
    cts:fetch-offset-copy-required-p
    cts:find-fetch-offset-and-copy
    cts:cts-setx-expansion
    cts:%spread
    cts:spreadable-type
    cts:spread-values
    cts:find-vars-and-regs
    cts:spread-values-list
    ;;
    ;;      Commented out because it conflicts with cl:boolean and scl:boolean
    ;; cts:boolean
    ;;
    cts:lisp-boolean
    ;;
    ;;      Commented out because it conflicts with cl:integer and scl:integer
    ;; cts:integer
    ;;
    cts:real
    cts:shortreal
    cts:pointer
    cts:cts-locf
    ;;
    ;; cts-libraries
    ;;
    cts:cts-fixr
    cts:nearest-whole
    cts:fnearest-whole
    cts:trunc
    cts:ftrunc
    cts:double-trunc
    cts:double-trunc-components
    cts:sign-of-second-times-abs-first
    cts:complex-real-part
    cts:complex-imag-part
    cts:neg-complex
    cts:complex-expt-integer
    cts:complex-expt
    ;;
    ;; runtime routines from ada
    ;;
    cts:allocate-data-stack
    cts:large-make-stack-array
    cts:small-make-stack-array
    cts:heap-allocate-ada-object
    )
  (:export
    ;;
    package-declare-with-no-superiors
    define-default-search-list
    define-search-list
    define-predefined-default-search-list
    execute
    xqt
    create-c-defsystem-from-pathnames
    build-expanded-argument-list))

(defpackage c-user (:use))

(let ((pkg (pkg-find-package 'c-user)))
   (pushnew pkg si:*reasonable-packages*))

(defsystem c-packages
    (:default-pathname "SYS: C; PACKAGES;"
     :pretty-name "C Packages"
     :maintaining-sites :scrc
     :patchable t
     :maintain-journals t
     :advertised-in ()
     :distribute-binaries t
     :distribute-sources t
     :version-controlled nil)
  (:module packages "package-dummy" (:type :lisp-read-only)))
