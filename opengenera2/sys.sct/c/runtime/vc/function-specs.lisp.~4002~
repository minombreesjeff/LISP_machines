;;; -*- Mode: lisp; Syntax: common-lisp; Package: c-system; Base: 10 -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;
;;;	 Created on Monday the twenty-seventh of October, 1986 at 8:12:25 pm by DySak on Nene
;;; at SCRC.
;;;

#|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		     C   F U N C T I O N - S P E C   D E F I N I T I O N
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|#

(defsubst c-function-spec (function-name static-source-file-name)
  `(:c-function ,function-name ,static-source-file-name))

(defstruct c-function-structure
  ;;
  ;;      Remember that once an entry is made, it can't be moved or removed since there
  ;; may be locatives to it -- that's the reason for this structure in the first place.
  ;;
  function-name
  static-source-file-name
  function-spec			; (:c-function <function-name> <static-source-file-name>)
  function-cell
  property-list)

(defsubst c-function-unbound-p (c-function-structure)
  ;;
  ;;      The = is correct, the dtp-* types are all integers
  ;;
  (= (sys:%p-data-type (locf (c-function-structure-function-cell c-function-structure)))
     sys:dtp-null))


(defsubst make-c-function-unbound (c-function-structure)
  (sys:%p-store-tag-and-pointer
    (locf (c-function-structure-function-cell c-function-structure))
    sys:dtp-null
    (sys:%pointer c-function-structure)))

;
;(defmacro prolog-compiler-warnings-context-bind (&body body)
;  `(compiler:compiler-warnings-context-bind
;     (setq compiler:last-warning-definition-type compiler:default-warning-definition-type)
;     ,@body))
;


(defselect ((c-function-structure named-structure-invoke))
  (:print-self (c-function-structure stream ignore ignore)
   (si:printing-random-object (c-function-structure stream :typep :no-pointer)
     (prin1 (c-function-structure-function-spec c-function-structure) stream))))

(defun get-c-function-structure (function-name static-source-file-name)
  (let ((c-function-structures (get function-name 'c-function-structure)))
    (loop for c-function-structure in c-function-structures
	  when (eq static-source-file-name
		   (c-function-structure-static-source-file-name c-function-structure))
	    return c-function-structure
	  ;;
	  ;;     If you can't find one that matches, make one.
	  ;;
	  finally (let ((new-c-function-structure
			  (make-c-function-structure
			    :function-name function-name
			    :static-source-file-name static-source-file-name
			    :function-spec (c-function-spec function-name
							   static-source-file-name))))
		    (make-c-function-unbound new-c-function-structure)
		    (setf (get function-name 'c-function-structure)
			  (cons new-c-function-structure c-function-structures))
		    (return new-c-function-structure)))))

(sys:define-function-spec-handler :c-function
				  (function function-spec &optional arg1 arg2)
  (case function
    (sys:validate-function-spec
      ;;
      ;;      Each C function spec should be of the form:
      ;;
      ;;           (:C-FUNCTION lisp-package:c-function-name source-name-object)
      ;;
      ;; where source-name-object is NIL for an externally visible routine and an interned
      ;; symbol for a routine visible only within a single source file.  In the second case,
      ;; the symbol is an interned version of the pathname.
      ;;
      (and (consp function-spec)
	   (consp (zl:rest1 function-spec))
	   (symbolp (second function-spec))	; C function name
	   (consp (zl:rest2 function-spec))
	   (let ((third-of-function-spec (third function-spec)))
	     (or (null third-of-function-spec)				D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI"); an (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")extern1 C function
0		 (typep third-of-function-spec 'fs:pathname)		1; 2static1 C functions
0		 (typep third-of-function-spec 'zwei:non-file-buffer)))))
    (otherwise
     (let ((c-function-structure
	     (get-c-function-structure (second function-spec) (third function-spec))))
       (case function
	 (fdefine
	   (setf (c-function-structure-function-cell c-function-structure) arg1))
	 (fdefinition
	   (c-function-structure-function-cell c-function-structure))
	 (fdefinedp
	   (not (c-function-unbound-p c-function-structure)))
	 (sys:fdefinition-location
	   (locf (c-function-structure-function-cell c-function-structure)))
	 (si:definition-has-location-p t)
	 (fundefine
	   (make-c-function-unbound c-function-structure))
	 (zl:get
	   (getf (c-function-structure-property-list c-function-structure) arg1))
	 (si:putprop
	   (setf (getf (c-function-structure-property-list c-function-structure) arg2) arg1))
	 (si:remprop
	   (remf (c-function-structure-property-list c-function-structure) arg1))
	 (zl:plist
	   (c-function-structure-property-list c-function-structure))
	 (otherwise
	   (si:function-spec-default-handler function function-spec arg1 arg2)))))))
