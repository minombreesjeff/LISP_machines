;;; -*- Mode: LISP; Package: C-SYSTEM; Lowercase: T; Base: 10; Syntax: Common-Lisp -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;
;;; Created on Wednesday the fifteenth of July, 1987 at 11:05:21 am DySak on Nene at SCRC.
;;;  
#|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
				      This file contains Symbolics C descriptor utilities
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|#
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;
;;; PURPOSE:0	1Kludges to make runtime descriptors compatible with debug descriptors
;;;
0(defmethod (bindings c-global-runtime-descriptor) () nil)
(defmethod (bindings c-global-debug-descriptor) () bindings)
1;;;
;;; PURPOSE:0	1A routine to instantiate a C routine runtime descriptor.
;;;
0(defun make-c-routine-runtime-descriptor-from-fasd (pathname)
  (make-c-routine-runtime-descriptor pathname))
1;;;
;;; PURPOSE:0	1Instantiate in the world a 0c-routine-runtime-descriptor1 or 0c-routine-debug-descriptor1, as required.
;;; NOTES:0	1This is the routine called to instantiate a routine descriptor at bin file load time.  The corresponding
;;;0	:fasd-form1 methods return forms which invoke this routine with the "appropriate constructor".
;;;
0(defun make-c-routine-descriptor-from-fasd (constructor pathname &rest debug-descriptor-keyword-value-pairs)
  (declare (values routine-descriptor))
  1;;
0  1;;        If the development system is not loaded but the bin file was compiled with debug-info, generate a runtime
0  1;;        descriptor instead.  This allows for compiling a system with 0*compile-for-run-time-only*1 bound to 0nil1 and
0  1;;        loading the generated bins into a world containing only the C runtime system.
0  1;;
0  (when (and (not *c-development-system-loaded-p*) (eq constructor 'make-c-routine-debug-descriptor-from-fasd))
    (setq constructor 'make-c-routine-runtime-descriptor-from-fasd))
  (if (eq constructor 'make-c-routine-debug-descriptor-from-fasd)
      (apply constructor pathname debug-descriptor-keyword-value-pairs)
      (funcall constructor pathname)))
1;;;
;;; PURPOSE:0	1The routine to instantiate a C global runtime descriptor.
;;;
0(defun make-c-global-runtime-descriptor-from-fasd (pathname
						   static-objects-names-sizes-and-initializations
						   referenced-external-functions
						   referenced-external-objects)
   (when (null pathname) (error "Badly formed debug descriptor encountered during load"))
   (let ((descriptor-pathname (canonicalize-pathname-for-c-system-databases pathname)))
      (when *c-development-system-loaded-p*
	1;;
0	1;;        Warn the user about the fact that loading the file has irrevocably bashed the state of the incremental
0	1;;        compilation name cache.  This is only possible when the C development system is loaded since without
0	1;;        the development system, no incremental compilation could occur.  Also, don't use a direct call here.
	;;        The routine's only defined in the development system.
0	1;;
0	(funcall 'warn-about-global-runtime-descriptor-load-if-required descriptor-pathname))
      1;;
      ;;        Invalidate any cached execution information for programs "linked" using the old descriptor.
0      1;;
0      (invalidate-names-and-arrays-and-initializations-cache (gethash descriptor-pathname *c-debug-info-descriptor-table*))
      (setf (gethash descriptor-pathname *c-debug-info-descriptor-table*)
	    (make-c-global-runtime-descriptor descriptor-pathname
					      static-objects-names-sizes-and-initializations
					      referenced-external-functions
					      referenced-external-objects))))
1;;;
;;; PURPOSE:0	1Instantiate in the world a 0c-global-runtime-descriptor1 or 0c-global-debug-descriptor1, as required.
;;; NOTES:0	1This is the routine called to instantiate a global descriptor at bin file load time.  The corresponding
;;;0	:fasd-form1 methods return forms which invoke this routine with the "appropriate constructor".
;;;
0(defun make-c-global-descriptor-from-fasd (constructor pathname
						       static-objects-names-sizes-and-initializations
						       referenced-external-functions
						       referenced-external-objects
						       &rest debug-descriptor-keyword-value-pairs)
  (declare (values global-descriptor))
  1;;
0  1;;        If the development system is not loaded but the bin file was compiled with debug-info, generate a runtime
0  1;;        descriptor instead.  This allows for compiling a system with 0*compile-for-run-time-only*1 bound to 0nil1 and
0  1;;        loading the generated bins into a world containing only the C runtime system.
0  1;;
0  (when (and (not *c-development-system-loaded-p*) (eq constructor 'make-c-global-debug-descriptor-from-fasd))
    (setq constructor 'make-c-global-runtime-descriptor-from-fasd))
  (if (eq constructor 'make-c-global-debug-descriptor-from-fasd)
      (apply constructor
	     pathname static-objects-names-sizes-and-initializations referenced-external-functions referenced-external-objects
	     debug-descriptor-keyword-value-pairs)
      (funcall constructor
	       pathname
	       static-objects-names-sizes-and-initializations referenced-external-functions referenced-external-objects)))
1;;;
;;; PURPOSE:0	1Filter a function thing so as to be able to get its debugging or runtime information.
;;;
0(defun filter-for-c-routine-object (thing)
  (declare (values function-spec-or-function-object))
  (cond ((symbolp thing) (si:unencapsulate-function-spec thing))
	((and (consp thing) (eq (first thing) ':c-function)) (si:unencapsulate-function-spec thing))
	1;;        The following tests succeed when thing is a 0dtp-compiled-function1.
0	((functionp thing) thing)
	(t thing (si:unencapsulate-function-spec thing))))
1;;;
;;; PURPOSE:0	1Find any available symbolic debugging information for a given function.
;;; RETURNS:0	nil1 if 0err-if-not-found 1is 0nil1, error otherwise.
;;; ARGUMENTS:  0function 1may be a function-spec or a function object.
;;; ASSUMES:0	1Called from a context where C debugging-info is required.  Also assumes that it is called from a context where
;;;0	1a valid function definition need not be checked for.  In particular, as of 10/10/87 at 18:54:23 the only callers were
;;;0	1those routines used to perform translation of C expressions typed at the debugger from within a blowout in a C frame.
;;;0	1Thus, a function definion must exist.
;;;
0(defun find-routine-debug-info (function &optional (err-if-not-found t))
  (let* ((debug-info-list (si:debugging-info (filter-for-c-routine-object function)))
	 (debug-info-assoc (assoc 'si:c-debug-info debug-info-list)))
    (flet ((do-error () (error "No symbol information is available for C routine ~A." function)))
      (if debug-info-assoc
	  (let ((debug-info (first (rest debug-info-assoc))))
	    (if (not (typep debug-info 'c-routine-debug-descriptor))
		(when err-if-not-found (do-error))
		debug-info))
	  (when err-if-not-found (do-error))))))
1;;;
0(defun find-routine-runtime-info (function &optional (err-if-not-found nil))
  (declare (values runtime-info-if-any))
  (let ((function-spec (filter-for-c-routine-object function)))
    1;;
0    1;;        Use 0si:valid-function-definition 1instead of 0fdefinedp1 since that's what
    ;;        0filter-for-c-routine-object 1above might return.
0    1;;
0    (unless (si:valid-function-definition function-spec t)
      (when err-if-not-found
	  (error "The routine ~A has never been compiled or loaded into this world." function-spec))
      (return-from find-routine-runtime-info nil))
    1;;
0    (let ((debug-info (first (rest (assoc 'si:c-debug-info (si:debugging-info function-spec))))))
      (when (and (null debug-info) err-if-not-found)
	(error "No program execution information is available for C routine ~A." function-spec))
      debug-info)))
