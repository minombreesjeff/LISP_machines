D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: LISP; Syntax: Common-lisp; Package:0 1C-SYSTEM; Base: 10 -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

1;;; TBD...
;;; 1) strcoll the string collate function awaits implementation of locale
;;; 2) *strtok-string* must be bound by c-execute
;;; 3) strerr maps errno to a string, we need to implement it when we implement errnos
(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB");;; 4.11 STRING HANDLING 

1;;; SECTION 4.11.2 String Functions

;;; The only difference between the two functions below is that the behavior is undefined
;;; for overlapping memory. We do it correctly in either case.
0(defun-c-runtime-routine c-user::|memcpy| (s1a s1o s2a s2o size)
  (validate-pointer s1a s1o) (validate-pointer s2a s2o)
  (c-byte-move s1a s1o s2a s2o size))

(defun-c-runtime-routine c-user::|memmove|(s1a s1o s2a s2o size)
  (validate-pointer s1a s1o) (validate-pointer s2a s2o)
  (c-byte-move s1a s1o s2a s2o size))

1;;; This works fine for small strings, we may want to do something fancier for
;;; long strings.
0(defun-c-runtime-routine c-user::|strcpy|(s1a s1o s2a s2o)
  (multiple-value-prog1
    (values s1a s1o)
    (decf s1o) (decf s2o)    
    (loop until (zerop (setf (sys:octet-aref-8 s1a (incf s1o)) (sys:octet-aref-8 s2a (incf s2o)))))))

(defun-c-runtime-routine c-user::|strncpy|(s1a s1o s2a s2o n)
  (multiple-value-prog1
    (values s1a s1o)
    (loop with save-s1o = s1o
	  initially
	    (validate-pointer s1a s1o)
	    (validate-pointer s2a s2o)
	    (decf s1o)
	    (decf s2o)
	  repeat n
	  until (zerop (setf (sys:octet-aref-8 s1a (incf s1o)) (sys:octet-aref-8 s2a (incf s2o))))
	  finally
	    1;; Pad it with nulls
0	    (loop repeat (- n (- s1o save-s1o) 1) do (setf (sys:octet-aref-8 s1a (incf s1o)) 0)))))
2;;;
;;; Section 4.11.3 Concatenation functions
;;;
0(defun-c-runtime-routine c-user::|strcat|(s1a s1o s2a s2o)
  (validate-pointer s1a s1o) (validate-pointer s2a s2o)
  (multiple-value-prog1
    (values s1a s1o)
    (loop initially (decf s1o)
	  until (zerop (sys:octet-aref-8 s1a (incf s1o)))
	  finally (c-user::|strcpy| s1a s1o s2a s2o))))

1;;;
;;; As above, but append atmost "n" bytes guarantee that there is a terminating null
;;; byte
0(defun-c-runtime-routine c-user::|strncat| (s1a s1o s2a s2o n)
  (validate-pointer s1a s1o) (validate-pointer s2a s2o)
  (multiple-value-prog1
    (values s1a s1o)
    (loop initially (decf s1o)
	  until (zerop (sys:octet-aref-8 s1a (incf s1o)))
	  finally (loop initially (decf s1o) (decf s2o)
			for i from n  downto 0
			until (zerop (setf (sys:octet-aref-8 s1a (incf s1o)) (sys:octet-aref-8 s2a (incf s2o))))
			finally (setf (sys:octet-aref-8 s1a s1o) 0)))))


2;;; Section 4.11.4 Comparison Functions

0(defun-c-runtime-routine c-user::|memcmp| (s1a s1o s2a s2o n)
  (validate-pointer s1a s1o) (validate-pointer s2a s2o)
  (loop initially (decf s1o) (decf s2o)
	repeat n
	when (neq (sys:octet-aref-8 s1a (incf s1o)) (sys:octet-aref-8 s2a (incf s2o)))
	  return (- (sys:octet-aref-8 s1a s1o) (sys:octet-aref-8 s2a s2o))
	finally (return 0)))

(defun-c-runtime-routine c-user::|strcmp| (s1a s1o s2a s2o)
  (loop initially (decf s1o) (decf s2o)
	as ch = (sys:octet-aref-8 s1a (incf s1o))
	when (neq ch (sys:octet-aref-8 s2a (incf s2o)))
	  return (- ch (sys:octet-aref-8 s2a s2o))
	when (zerop ch) return 0))

(defun-c-runtime-routine c-user::|strncmp| (s1a s1o s2a s2o n)
  (validate-pointer s1a s1o) (validate-pointer s2a s2o)
  (loop initially (decf s1o) (decf s2o)
	repeat n
	as ch = (sys:octet-aref-8 s1a (incf s1o))
	when (neq ch (sys:octet-aref-8 s2a (incf s2o)))
	  return (- ch (sys:octet-aref-8 s2a s2o))
	when (zerop ch) return 0
	finally (return 0)))
1;;;
;;; Wait for implementation of locale.h
;;; Since other locales are basically unhandled, calling 0c-user::|strcmp| 1should suffice for now -- DySak 9/12/88 18:29:47.
;;;
0(defun-c-runtime-routine c-user::|strcoll| (s1a s1o s2a s2o)
  (c-user::|strcmp| s1a s1o s2a s2o))

1;;;
;;; Since other locales are basically unhandled, calling 0c-user::|strncpy| 1should suffice for now -- DySak 9/14/88 18:44:22.
;;;
0(defun-c-runtime-routine c-user::|strxfrm| (s1a s1o s2a s2o size)
   (setq size (ldb (byte 32 0) size))	1; size is unsigned, so make it a bignum if required.
0   (cond
      ((zerop size)
       (c-user::|strlen| s2a s2o))
      (t
       1;;        Compute min-len since 0strncpy1's contract is to add nulls after the null character is copied until size is exhausted.
0       (let* ((s2-len  (c-user::|strlen| s2a s2o))
	      1;;        The 01+1 below is to account for the terminating null character.
0	      (min-len (min (1+ s2-len) size)))
	  (c-user::|strncpy| s1a s1o s2a s2o min-len)
	  (min s2-len size)))))


1;;; Section 4.11.5 The Search functions

0(defun-c-runtime-routine c-user::|memchr|(sa so c n)
  (validate-pointer sa so)
  (loop initially (decf so)
	repeat n
	when (= (sys:octet-aref-8 sa (incf so)) c)
	  return (values sa so)
	finally (return (values nil 0))))

(defun-c-runtime-routine c-user::|strchr| (sa so c)
  (validate-pointer sa so) (check-type c integer)
  (loop initially (setq c  (ldb (byte 8 0) c))
		  (decf so)
	as tc = (sys:octet-aref-8 sa (incf so))
	when (= tc c)
	  return (values sa so)
	when (zerop tc) return (values nil 0)))

(defun-c-runtime-routine c-user::|strcspn|(s1a s1o s2a s2o)
  (validate-pointer s1a s1o) (validate-pointer s2a s2o)
  (sys:with-stack-array (mask 256 :element-type 'boolean)
    1;; Set up the mask
0    (loop initially (decf s2o)
	  with save-s1o = s1o
	  as ch = (sys:octet-aref-8 s2a (incf s2o))
	  until (zerop ch)
	  do (setf (aref mask ch) t)
	  finally  (setf (aref mask 0) t)	1; Make the termination test faster below
0		   (return
		     (loop initially (decf s1o)
			   when (aref mask (sys:octet-aref-8 s1a (incf s1o)))
			     return (- s1o save-s1o))))))

(defun-c-runtime-routine c-user::|strpbrk|(s1a s1o s2a s2o)
  (validate-pointer s1a s1o) (validate-pointer s2a s2o)
  (sys:with-stack-array (mask 256 :element-type 'boolean)
    1;; Set up the mask
0    (loop initially (decf s2o)
	  as ch = (sys:octet-aref-8 s2a (incf s2o))
	  until (zerop ch)
	  do (setf (aref mask ch) t)
	  finally  (setf (aref mask 0) t)	1; Make the termination test faster below
0		   (return
		     (loop initially (decf s1o)
			   when (aref mask (sys:octet-aref-8 s1a (incf s1o)))
			     do (if (zerop (sys:octet-aref-8 s1a s1o))
				    (return (values nil 0))
				    (return (values s1a s1o))))))))

(defun-c-runtime-routine c-user::|strrchr| (sa so c)
  (validate-pointer sa so) (check-type c integer)
    (loop initially (setq c  (ldb (byte 8 0) c))
		    (decf so)
	  with match
	  as tc = (sys:octet-aref-8 sa (incf so))
	  when (= tc c)
	    do (setq match so)
	  until (zerop tc)
	  finally (return (if match (values sa match) (values nil 0)))))

(defun-c-runtime-routine c-user::|strspn| (s1a s1o s2a s2o)
  (validate-pointer s1a s1o) (validate-pointer s2a s2o)
  (sys:with-stack-array (mask 256 :element-type 'boolean)
    (loop initially (decf s2o)
	  as ch = (sys:octet-aref-8 s2a (incf s2o))
	  until (zerop ch)
	  do (setf (aref mask ch) t)
	  finally (return (loop initially (decf s1o)
				while (aref mask (sys:octet-aref-8 s1a (incf s1o)))
				count t)))))

(defun-c-runtime-routine c-user::|strstr|(s1a s1o s2a s2o)
  (validate-pointer s1a s1o) (validate-pointer s2a s2o)
  (loop with str2-len = (c-user::|strlen| s2a s2o)
	repeat (1+ (- (c-user::|strlen| s1a s1o) str2-len))
	for i from s1o
	when (loop repeat str2-len
		   for j from s2o
		   for k from i
		   always (= (sys:octet-aref-8 s1a k) (sys:octet-aref-8 s2a j)))
	  return (values s1a i)
	finally (return (values nil 0))))
1;;;
0(defvar *strtok-string* (ncons nil))
(defun-c-runtime-routine c-user::|strtok| (s1a s1o s2a s2o)
  (validate-pointer s2a s2o)
  (when s1a
    (validate-pointer s1a s1o)
    1;; The first call
0    (psetf (car *strtok-string*) s1a
	   (cdr *strtok-string*) s1o))

  (setq s1a (car *strtok-string*)
	s1o (cdr *strtok-string*))

  (unless s1a (return-from c-user::|strtok| (values nil 0)))

  1;; Skip past leading delimiters
0  (let ((length (c-user::|strspn| s1a s1o s2a s2o)))
    1;; At the end of the string (a null byte) ?
0    (when (zerop (si:octet-aref-8 s1a  (+ s1o length)))
      (psetf (car *strtok-string*) nil
	     (cdr *strtok-string*) 0)
      (return-from c-user::|strtok| (values nil 0)))
    (incf s1o length))

  1;; Advance the pointer to the end of the token
0  (multiple-value-bind (enda endo)
      (c-user::|strpbrk| s1a s1o s2a s2o)
    (if enda
	1;; Found a separator, convert it to NULL
0	(psetf (si:octet-aref-8 enda endo) 0
	       (car *strtok-string*) s1a
	       (cdr *strtok-string*) (1+ endo))
	(psetf (car *strtok-string*) nil
	       (cdr *strtok-string*)  0)))
  (values s1a s1o))

(defun-c-runtime-routine c-user::|memset| (s1a s1o c n)
  (validate-pointer s1a s1o) (check-type n integer) (check-type c integer)
  (multiple-value-prog1
    (values s1a s1o)
    (decf s1o)
    (loop repeat n do (setf (si:octet-aref-8 s1a (incf s1o)) c))))


(defun-c-runtime-routine c-user::|strerror|(errnum)
  (check-type errnum integer)
  (copy-lisp-string-into-c-string "Not implemented")
  1;;        0(zl:ferror "Not implemented")
  )


(defun-c-runtime-routine c-user::|strlen|(a o)
  (loop initially
	  (validate-pointer a o)
	  (decf o)
	with save-o = o
	when (zerop (sys:octet-aref-8 a (incf o))) return (- o save-o)))

1;;; Tests

0;(multiple-value-bind (a o)
;    (c-user::strcpy (make-array 10) 0  (copy-into-c-string "abcd") 0)
;  (copy-into-lisp-string a o (make-array (c-user::strlen a o) :element-type 'character)
;			 (c-user::strlen a o)))
;
;
;(multiple-value-bind (a o)
;    (c-user::strncpy (make-array 10) 0  (copy-into-c-string "abcd") 0 2)
;  (copy-into-lisp-string a o (make-array (c-user::strlen a o) :element-type 'character)
;			 (c-user::strlen a o)))
;
;
;
;(multiple-value-bind (a o)
;    (c-user::strcat  (c-user::strcpy (copy-into-c-string "xxxxxxxxxxxxxx") 0
;				     (copy-into-c-string "abc") 0) 0
;		     (copy-into-c-string "efgh") 0)
;  (copy-into-lisp-string a o (make-array (c-user::strlen a o) :element-type 'character)
;			 (c-user::strlen a o)))
;
;(multiple-value-bind (a o)
;    (c-user::strncat  (c-user::strcpy (copy-into-c-string "xxxxxxxxxxxxxx") 0
;				     (copy-into-c-string "abc") 0) 0 
;		     (copy-into-c-string "efgh") 0 1)
;  (copy-into-lisp-string a o (make-array (c-user::strlen a o) :element-type 'character)
;			 (c-user::strlen a o)))


;(c-user::memcmp  (copy-into-c-string "abcd") 0 (copy-into-c-string "abcd") 0 50)
;
1;0(c-user::strncmp  (copy-into-c-string "abcde") 0 (copy-into-c-string "ab") 0 4)

;(c-user::memchr   (copy-into-c-string "abcde") 0 (char-code #\d) 3)
;
;(c-user::strchr (copy-into-c-string "abcde") 0 (char-code #\z))
;(c-user::strrchr (copy-into-c-string "abcdea") 0 200)
;
;(c-user::strcspn (copy-into-c-string "abcde") 0 (copy-into-c-string "a") 0)
;
;(c-user::strbrk (copy-into-c-string "abcde") 0 (copy-into-c-string "z") 0)
;
;
;(c-user::strspn (copy-into-c-string "abcde") 0 (copy-into-c-string "x") 0)
;
;(c-user::strstr (copy-into-c-string "abcde") 0 (copy-into-c-string "de") 0)
;
;(defun c-to-lisp(a &optional (o 0))
;  (let* ((length (c-user::strlen a o))
;	 (s      (make-array length :element-type 'character)))
;    (loop for i from o below (+ o length)
;       do (setf (aref s (- i o)) (code-char (si:octet-aref-8 a i))))
;    s))
;    
;(multiple-value-call 'c-to-lisp (c-user::strtok (copy-into-c-string "?a???b,,,#c") 0 (copy-into-c-string "?") 0))
;(multiple-value-call 'c-to-lisp (c-user::strtok nil 0 (copy-into-c-string ",") 0))
;(multiple-value-call 'c-to-lisp (c-user::strtok nil 0 (copy-into-c-string "#,") 0))
;(multiple-value-call 'c-to-lisp (c-user::strtok nil 0 (copy-into-c-string "?") 0))

;
;(multiple-value-call 'c-to-lisp (c-user::memset (copy-into-c-string "1234567890") 0 (char-code #\x) 0))
;
;(c-user::strlen (copy-into-c-string "") 0)
