D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; -*- Mode: LISP; Syntax: Common-lisp; Package:0 1C-SYSTEM; Base: 100; Lowercase: Yes1 -*-


0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defconstant RAND_MAX (- (zl:^ 2 31) 1))
(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB");;; Note *random-1array2* must be bound by c::execute  1(let ((2*random-1array2*1 nil))
2;;; Bug in exchange when object  3 bytes

1;;; Skip white space in a C string
0(defun skip-white-space-in-string (nptrb nptro)
  (validate-pointer nptrb nptro)
  (loop for i from nptro below (* (array-total-size nptrb) 4)
	unless (zl:memq (sys:octet-aref-8 nptrb i) white-space-char-code)
	return i
	finally (zl:ferror "unterminated string")))

(defun print-c-string(a &optional (o 0))
  (loop for i from o below (* 4 (zl:array-length a))
	do (send zl:standard-output :tyo (code-char (si:octet-aref-8 a i)))
	until (zerop (si:octet-aref-8 a i))
	finally
	  (return (1+ (- i o)))))

	
(defun copy-into-lisp-string (a o string length)
  (loop for i from o below (+ o length)
       do (setf (aref string (- i o)) (code-char (sys:octet-aref-8 a i))))
  string)

(defun copy-into-c-string (string)
  (loop with c = (make-array (ceiling (+ 1 (string-length string)) 4))
	for i below (string-length string)
	do (setf (si:octet-aref-8 c i) (char-code (aref string i)))
	finally (setf (si:octet-aref-8 c i) 0)
		(return c)))


(defparameter strtol-lexer (lexer::def-simple-lexer
			     "[+-]?(0([07])([xX][ç(AF)(af)]ä))([19]ç)"))

1;;;
;;; double strtod(const char *nptr, char**endptr)
;;;
0(defun-c-runtime-routine c-user::|strtod|(nptrb nptro endptrb endptro)
  (declare (special c-user::|errno|))
1  ;; skip-white-space-in-string validates the pointer 
0  (let* ((save-nptro nptro)
	 (nptro (skip-white-space-in-string nptrb nptro))
	 (i 	    nptro)
	 (value-high 0)	1; This is actually the correct double zero value too
0	 (value-low  0)
	 (read-value nil)
	 (is-negative nil))

    (flet ((nextchar ()
	     (declare (sys:downward-function))
	     (let ((char (sys:octet-aref-8 nptrb i)))
	       (unless (zerop char)
		 (incf i)
		 char))))
      (multiple-value-bind (match-p ignore length)
	  (lexer::match-compiled-regex #'nextchar strtod-lexer)
	(if match-p
	  (sys:with-stack-array (number length :element-type 'character)
	    (copy-into-lisp-string nptrb nptro number length)
	    (setq is-negative (char-equal #\- (aref number 0)))
	    (unless (or (string-member #\. number) (string-member #\E number)
			(string-member #\e number))
	      (setq number (string-append number ".")))
	    (setq read-value (catch 'conversion-error (c-sys::xr-read-flonum number :double-float)))
	    
	    (cond
	      ((eq read-value :overflow)
	       (setf (aref c-user::|errno| 0) ERANGE)
	       (multiple-value-setq (value-high value-low)
		 (si:dfloat-components (if is-negative (- HUGE_VAL) HUGE_VAL))))
	      ((eq read-value :underflow)
	       (setf (aref c-user::|errno| 0) ERANGE)
	       (setq value-high 0
		     value-low 0))
	      (t (multiple-value-setq (value-high  value-low )
		   (si:dfloat-components read-value))
		 (unless (null-pointer endptrb endptro)
		   (validate-pointer endptrb endptro)
		   (assign-pointer endptrb endptro nptrb (+ nptro length))))))
	  (unless (null-pointer endptrb endptro)
		   (validate-pointer endptrb endptro)
		   (assign-pointer endptrb endptro nptrb save-nptro)))))
	
    (values value-high value-low)))



1;;; double atof(const char *nptr)
;;;
;;; with apologies to ANSI
0(defun-c-runtime-routine c-user::|atof|(nptrb nptro)
  (c-user::|strtod| nptrb nptro nil 0))


(defun-c-runtime-routine c-user::|strtol|(nptrb nptro endptrb endptro radix &optional(signed t))
  (declare (special c-user::|errno|))
  (let ((save-nptro nptro)
	(conversion nil)
	(value 0)
	(neg-sign nil))
1    
0    (setq nptro (skip-white-space-in-string nptrb nptro)
	  
	  neg-sign (when signed
		     (if (= (sys:octet-aref-8 nptrb nptro) (char-code #\+))
			 (progn (incf nptro) nil)
			 (when (= (sys:octet-aref-8 nptrb nptro) (char-code #\-))
			   (incf nptro)))))
1    ;; Base zero is special, treat it differently
0    (flet ((is-x (char-code)
	     (declare (sys:downward-function) (values boolean))
	     (or (= char-code (char-code #\x)) (= char-code (char-code #\X)))))
       (cond
	  ((zerop radix)
1	   ;; Determine the radix, can be 8, 10, or 16 
0	   (if (= (sys:octet-aref-8 nptrb nptro) (char-code #\0))
1	       ;; Octal or hex
0	       (if (is-x (sys:octet-aref-8 nptrb (1+ nptro)))
		   (setq radix 16
			 nptro (+ nptro 2))
		   (setq radix 8))
	       (setq radix 10)))
	  ((= radix 16)
	   1;;        Need to allow for 0x or 0X when base is 16.
0	   (when (and (= (sys:octet-aref-8 nptrb nptro) (char-code #\0))
		      (is-x (sys:octet-aref-8 nptrb (1+ nptro))))
	      (setq nptro (+ nptro 2))))))

    (unless ( 2 radix 36) (zl:ferror "Bad value for base"))
    
1    ;; Parse the number as appropriate to the radix
0    (loop as ch = (sys:octet-aref-8 nptrb nptro)
	  as weight = (digit-char-p (code-char ch) radix)
	  until (or (zerop ch) (null weight))
	  do (setq value (+ (* value radix) weight)
		   conversion t)
	     (incf nptro))
    
1    ;; Check whether we made a conversion
0    (if conversion
	(progn
	  (when neg-sign (setq value (- value)))
	  (unless ( (integer-length value) 32)
	    (setf (aref c-user::|errno| 0) ERANGE)
	    (setq value (if signed (if neg-sign LONG_MIN LONG_MAX) (3 0 (NIL 0) (SAGE:SANS-SERIF-BODY SAGE::TYPEWRITER :NORMAL) "CPTFONT")ULONG_MAX0)))
	  1;;        Fix this so that a fixnum is always returned.
0	  (setq value (sys:%logldb (byte 32 0) value)))
	(setq nptro save-nptro))
    
    (unless (null-pointer endptrb endptro)
      (validate-pointer endptrb endptro)
      (assign-pointer endptrb endptro nptrb nptro))
  
  value))


1;;; The unsigned version for the above
0(defun-c-runtime-routine c-user::|strtoul|(nptrb nptro endptrb endptro radix)
  (c-user::|strtol| nptrb nptro endptrb endptro radix nil))

1;;; Almost 0strtol1 with base 10, except that the behavior on error is ANSI unspecified !
0(defun-c-runtime-routine c-user::|atol|(nptrb nptro)
  (c-user::|strtol| nptrb nptro nil 0 10))

(defun-c-runtime-routine c-user::|atoi|(nptrb nptro)
  (c-user::|strtol| nptrb nptro nil 0 10))

1; Template for testing the above functions
; 0(strtol (copy-into-c-string "-077777") 0 temp 0 8)



2;;; SECTION 4.10.2 1Pseudo-random sequence generation functions

;;; The seed function
0(defvar *random-array* nil)

(defun-c-runtime-routine c-user::|srand|(seed)
  1;; A zero seed unfortunately turns zl:random off, causing it to return zero only
0  (when (zerop seed)
    (setq seed -1))
  
  (if *random-array*
      (si:random-initialize *random-array* seed)
      (setq *random-array* (si:random-create-array 71 35 seed)))
  (values))

(defun-c-runtime-routine c-user::|rand|()
  (unless *random-array* (c-user::|srand| 1))
  (zl:random RAND_MAX *random-array*))




2;;; SECTION 4.10.3 Memory Management Functions


1;;; The ANSI spec insists that calloc initialize the array to zero, we should

0(defun-c-runtime-routine c-user::|calloc|(number size)
  (if (or (zerop number) (zerop size))
      (values nil 0)
      (values (make-array (ldb (byte 31. 2) (+ (* size number) 3)) :initial-element 0) 0)))
  
1;;; This function could essentially be a nop. It exists primarily to ensure
;;; that references are not made to a piece of storage that has been freed.
0(defun-c-runtime-routine c-user::|free|(a o)
  (unless (null-pointer a o)
    (validate-pointer a o)
    1;; The pointer must point to the first word in the array
0    (when (or (not (zerop o)) (si:in-stack-or-temporary-area a))
      (zl:ferror "The pointer being freed was not generated by calloc, realloc or malloc"))

    1;; The C allocation functions never create an array of zero size.
0    (when (zerop (array-total-size a)) (zl:ferror "The pointer was previously freed"))
	  
    1;; Shrink the array, so that it cannot be accessed
0    (zl:array-grow a 0))
  0)

(defun-c-runtime-routine c-user::|malloc|(size)
  (check-type size (integer 0))
  (if (zerop size)
      (values nil 0)
      (values (make-array (ldb (byte 31. 2) (+ size 3))) 0)))

(defun-c-runtime-routine c-user::|realloc|(a o size)
  (check-type size (integer 0))
  
  (if (null-pointer a o)
      (c-user::|malloc| size)
      
      (validate-pointer a o)
      (when (or (not (zerop o)) (si:in-stack-or-temporary-area a))
	(zl:ferror
	  "The pointer being realloced was not generated by calloc, realloc or malloc"))
      (when (zerop (array-total-size a)) (zl:ferror "The pointer was previously freed"))
      (setq a (zl:array-grow a (ash (+ size 3) -2)))
      (values (if (zerop size) nil a) 0)))




2;;; Section 4.10.4  Communication with the environment
1;;; This section should be tackled when the c-system:xqt stuff is finalized

0(defun-c-runtime-routine c-user::|abort| ()
  (c-user::|raise| SIGABRT))


(defvar *atexit-list* nil)


(defun-c-runtime-routine c-user::|atexit| (function-locf function-offset)
  (ignore function-offset)
  (push function-locf *atexit-list*)
  0)


(defun-c-runtime-routine c-user::|exit| (status)
  (if (= status 0)
      (throw 'normal-completion t)
      (throw 'abnormal-completion t)))


(defun-c-runtime-routine c-user::|getenv| (c-array c-offset)
  (let ((key-string (copy-c-two-word-pointer-string-into-lisp-string c-array c-offset)))
    1;;
0    1;;        Be C-ish.  Require case matching.  As of 2/20/88 20:13:06, 0copy-lisp-string-into-c-two-word-pointer-string
1    ;;        takes care of checking that its argument is not null.
0    1;;
0    (cond
      ((string= key-string "user-file-pathname-defaults")
       (copy-lisp-string-into-c-two-word-pointer-string *user-file-pathname-defaults*))
      ((string= key-string "temporary-file-pathname-defaults")
       (copy-lisp-string-into-c-two-word-pointer-string *temporary-file-pathname-defaults*))
      (t (values nil 0)))))


(defun-c-runtime-routine c-user::|system| (c-array c-offset)
  (if (null-pointer c-array c-offset)
      1
      (condition-case ()
	   (let ((dw:*program* (send (dw:find-program-window 'c-sys::c) :program))
		 (cp:*command-table* (cp:find-command-table "C")))
	     (apply #'cp:execute-command
		    (accept-from-string 'cp:command (copy-c-two-word-pointer-string-into-lisp-string c-array c-offset))))
	 (error 1)
	 (:no-error 0))))




2;;; Section 4.10.5 Searching and Sorting 
0(defun-c-runtime-routine c-user::|bsearch| (keya keyo basea baseo size object-size funb funo)
  (ignore funo)
  (setq funb (location-contents funb))
  (unless (typep funb 'compiled-function)
    (zl:ferror "The function was undefined"))
  (check-type funo (integer 0))
  (check-type size (integer 1)) (check-type object-size (integer 1))
  (validate-pointer keya keyo) (validate-pointer basea baseo)
  
    (loop with lower = 0 and upper = (1- size)
      when (> lower upper) return (values nil 0)
				  
      do (let* ((i (ldb (byte 31. 1) (+ lower upper)))	; / 2
		(compare (funcall funb keya keyo basea (+ baseo (* i object-size)))))
	   (cond ((< compare 0)  (setq upper (1- i)))
		 ((> compare 0)  (setq lower (1+ i)))
		 (t (return (values basea (+ baseo (* i object-size)))))))))


1;; a speedy exchange for the case when the objects are
;; all aligned and ready to exchange.
0(defun exchange-objects(a-obj a-off i j size)
  (let* ((i-offset (+ (* i size) a-off))
	 (j-offset (+ (* j size) a-off))
	 (leading-bytes  (logand (- 4 (logand i-offset 3)) 3))
	 (trailing-bytes (logand (+ i-offset size) 3))
	 (middle-words   (ldb (byte 31 2) (- size leading-bytes trailing-bytes))))
1    
    ;; Exchange the leading unaligned bytes
0    (loop repeat leading-bytes
	  as byte = (sys:octet-aref-8 a-obj i-offset)
	  do (setf (si:octet-aref-8 a-obj i-offset) (sys:octet-aref-8 a-obj j-offset))
	     (setf (si:octet-aref-8 a-obj j-offset) byte)
	     (incf i-offset) (incf j-offset))
    
    (loop repeat middle-words
	  as word = (sys:octet-aref a-obj i-offset)
	  do (setf (si:octet-aref a-obj i-offset) (sys:octet-aref a-obj j-offset))
	     (setf (si:octet-aref a-obj j-offset) word)
	     (incf i-offset 4) (incf j-offset 4))
    
    (loop repeat trailing-bytes
	  as byte = (sys:octet-aref-8 a-obj i-offset)
	  do (setf (si:octet-aref-8 a-obj i-offset) (sys:octet-aref-8 a-obj j-offset))
	     (setf (si:octet-aref-8 a-obj j-offset) byte)
	     (incf i-offset) (incf j-offset))))

1;; a slow exchange for those arrays where the alignment isn't right.
0(defun slow-exchange-objects (a-obj a-off i j size)
  (let* ((i-offset (+ (* i size) a-off))
	 (j-offset (+ (* j size) a-off)))
    1;; go a byte at a time.
0    (loop repeat size
	  as byte = (sys:octet-aref-8 a-obj i-offset)
	  do (setf (si:octet-aref-8 a-obj i-offset) (sys:octet-aref-8 a-obj j-offset))
	     (setf (si:octet-aref-8 a-obj j-offset) byte)
	     (incf i-offset) (incf j-offset))))

1;;; The following quick sort is based upon the Genera quick sort. Since the C sort
;;; is expected to "sort by value", rather than by reference(as does the Genera
;;; sort, it meets the reference interface, performs the sort based upon this interface
;;; and moves the record to its final position after the sort is completed. 
0(defun-c-runtime-routine c-user::|qsort| (basea baseo size object-size funb funo)
  (ignore funo)
  1;; a locative got passed in get the contents.
0  (setq funb (location-contents funb))
  (unless (typep funb 'compiled-function)
    (zl:ferror "The function was undefined"))
  (check-type funo (integer 0))
  (check-type size (integer 0))
  (check-type object-size (integer 1))
  (when (plusp size)
    (sys:with-stack-array (a  size)
      (loop for i from 0 below size do (setf (aref a i) i))
      (flet ((sort-lessp-predicate (i j)
	       (< (funcall funb basea (+ baseo (* i object-size))
			   basea (+ baseo (* j object-size))) 0)))
	(let ((si:sort-lessp-predicate #'sort-lessp-predicate))
	  (si:sort-array-quick a 0 (1- size))))
      1;; Now move the objects to their final position. Note that
0      1;; samh left out a hairy comment about the loop below.
0      (let ((the-exchange-routine (if (= 0 (mod object-size *bytes-per-word*)) #'exchange-objects #'slow-exchange-objects)))
	(loop for i from 0 below size
	      as pos = (loop for j = (aref a i) then (aref a j) when ( j i) return j)
	      unless (eq i pos)
		do (funcall the-exchange-routine basea baseo i pos object-size)))))
  (values))

;
;(c-user::1|0binary-search-array1|0 "gh"  0
;			      (make-array 5 :initial-contents `("ab" "bc" "cd" "ef" "gh")) 0
;			      5 1
;			      (lambda (keya keyo a o)
;				(string-compare keya (aref a o)))
;			       nil)
;
;
;(c-user::1|0quick-sort1|0 (make-array 1200 :initial-contents
; (reverse `(20 18 16 14 12 10 11 13 15 17 19 1 4 7 2 5 8 3 6 9 ))) 0
;			      20  4
;			      (lambda (keya keyo a o)
;				(if (< (aref keya (ldb (byte 30 2) keyo))
;						(aref a (ldb (byte 30 2) o)))
;				    -1 1))
;			       nil)
;(defun fee (keya keyo a o)
;  (if (< (si:octet-aref-8 keya keyo) (si:octet-aref-8 a o))
;      -1 1))
;
;(defun test-qsort ( size object-size &optional (offset 0) )
;  (sys::with-stack-array (a (ceiling (+ (* size object-size) offset) 4))
;    (loop with value = (* size object-size)
;	  for i from 0 below (* size object-size) 
;	  do (setf (si:octet-aref-8 a (+ i offset) ) (decf value)))
;    (loop for i = offset  then (+ i object-size)
;	  repeat size 
;	  do (format t "~%key:~d:" (si:octet-aref-8 a i))
;	     (loop for j from (+ 1 i)
;		   repeat (1- object-size)
;		   do (format t "~d " (si:octet-aref-8 a j))))
;    
;    (c-user::1|0qsort1|0 
;      a offset size object-size (locf #'fee) 0)
;
;    (loop for i = offset  then (+ i object-size)
;	  repeat size 
;	  do (format t "~%key:~d:" (si:octet-aref-8 a i))
;	     (loop for j from (+ 1 i)
;		   repeat (1- object-size)
;		   do (format t "~d " (si:octet-aref-8 a j))))
;
;))1 

0

2;;; SECTION 4.10.6 Integer Arithmetic Functions

0(defun-c-runtime-routine c-user::|abs|(i)
  (check-type i (integer))
  (let ((a (si:abs i)))
    (unless (zl:fixnump a)
      (zl:ferror "Cannot represent the absolute value of ~A" i))
    a))

(deff c-user::|labs| 'c-user::|abs|)
1;;;
0(defun-c-runtime-routine c-user::|div| (n d)
  (unless (and (integerp n) (integerp d))
     (error "The arguments to the div runtime library must be of integral type."))
  (truncate (sys:%logldb (byte 32 0) n) (sys:%logldb (byte 32 0) d)))
1;;;
0(defun-c-runtime-routine c-user::|ldiv| (n d)
  (unless (and (integerp n) (integerp d))
     (error "The arguments to the ldiv runtime library must be of integral type."))
  (truncate (sys:%logldb (byte 32 0) n) (sys:%logldb (byte 32 0) d)))
