;;; -*- Mode: LISP; Package: C-SYSTEM; Lowercase: T; Base: 10 -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;
;;; Created on Wednesday the fifteenth of July, 1987 at 11:05:21 am DySak on Nene at SCRC.
;;;  
#|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		    This file contains Symbolics C descriptor definitions and descriptor support definitions.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|#
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;
;;;0	1Define a place to put runtime/debugging information descriptors in a function definition.
;;;
0(defprop si:c-debug-info t si:debug-info)
1;;;
;;;0	1This variable is here so we can dump the form 0(setq *c-descriptor-load-kludge* <some-c-descriptor>)1 into the
;;; stream compiler's list of forms to be dumped.  I (DySak) tried placing just the object in the list of forms to be dumped
;;; and it was blithely ignored.  It was only for the AAAI '87 demo of C anyway and should be replaced by its fasd form time
;;; permitting.
;;;
0(defvar *c-descriptor-load-kludge*)
#|==============================================================================================================================
			        The Debug Descriptor Family of Flavors and Associated Definitions
==============================================================================================================================|#
1;;;
;;; PURPOSE:0	1A table to hold all the global debug descriptors in the world.  The table is indexed by the pathname of the C
;;;0	1file which was compiled to produce the debug descriptor.
;;;
0(defvar *c-debug-info-descriptor-table* (make-hash-table :rehash-before-cold t :rehash-after-full-gc t))
1;;;
;;;0	1The base flavor for all the C descriptors
;;;
0(defflavor c-base-descriptor () () :abstract-flavor)
1;;;
0(defflavor c-runtime-descriptor
	(pathname)
	(c-base-descriptor)
  :abstract-flavor
  :initable-instance-variables
  (:readable-instance-variables (descriptor-pathname pathname)))
1;;;
;;; PURPOSE:0	1Supply a base flavor on which the various kinds of C debug descriptors will be built.
;;; NOTES:0	1A vars field is supplied by this descriptor for debug descriptors.  In compilation flavors, the IV is supplied
;;;0	1by the 0basic-compilation-descriptor1 mixin.
;;;
0(defflavor c-debug-descriptor
	((bindings nil))
	(c-runtime-descriptor)
   :abstract-flavor
   :initable-instance-variables
   (:readable-instance-variables (bindings bindings))
   (:writable-instance-variables (bindings bindings)))
1;;;
;;; PURPOSE:0	1Provide the information necessary to perform a (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")c-sys::execute1 of a function.
;;; NOTES:0	1This is currently just requires a pathname which is a key into the hash table of global compilation
;;;0	1descriptors.
;;;
0(defflavor c-routine-runtime-descriptor
	()
	(c-runtime-descriptor)
  (:constructor make-c-routine-runtime-descriptor (pathname)))
1;;;
;;; PURPOSE:0	1The repository for C routine debugging and incremental compilation information.
;;;
0(defflavor c-routine-debug-descriptor
	(name
	 (routine-type nil)
	 (routine-name nil)
	 (return-type nil))
	(c-routine-runtime-descriptor c-debug-descriptor)
   :initable-instance-variables
   (:gettable-instance-variables routine-type routine-name)
   (:constructor make-c-routine-debug-descriptor
    (pathname name routine-name return-type routine-type bindings)))
1;;;
;;; PURPOSE:0	1Provide the information necessary to perform a 2c-sys::execute1 of a function.
;;;
0(defflavor c-global-runtime-descriptor
	((static-objects-names-sizes-and-initializations nil)
	 (static-initialized-arrays nil)	1;; only used for establish program concerns.
0	 (referenced-external-functions nil)
	 (referenced-external-objects nil))
	(c-runtime-descriptor)
  (:readable-instance-variables
   (static-objects-names-sizes-and-initializations static-objects-names-sizes-and-initializations)
   (static-initialized-arrays static-initialized-arrays)
   (referenced-external-functions referenced-external-functions)
   (referenced-external-objects referenced-external-objects))
  (:writable-instance-variables
   (static-objects-names-sizes-and-initializations static-objects-names-sizes-and-initializations)
   (static-initialized-arrays static-initialized-arrays)
   (referenced-external-functions referenced-external-functions)
   (referenced-external-objects referenced-external-objects))
  (:constructor make-c-global-runtime-descriptor (pathname static-objects-names-sizes-and-initializations
							   referenced-external-functions
							   referenced-external-objects)))
1;;;
;;; PURPOSE:0	1The repository for C global debugging and incremental compilation information.
;;;
0(defflavor c-global-debug-descriptor
	((tag-bindings nil)
	 (macro-bindings nil)
	 (lisppkg-declarations nil)
	 (search-list-name nil)
	 (scoped-globals nil)
	 (compilation-time nil)
	 (exported-objects nil)	1; A list of names objects that may be imported by other files
0	 (export-table     nil)	1; The above objects indexed by their names; this table is generated
			; at bin load time from the list of exported objects.
0	 )
	(c-global-runtime-descriptor c-debug-descriptor)
  (:writable-instance-variables
   (tag-bindings tag-bindings)
   (macro-bindings macro-bindings)
   (lisppkg-declarations lisppkg-declarations)
   (search-list-name search-list-name)
   (scoped-globals scoped-globals)
   (export-table export-table))
  (:readable-instance-variables
   (tag-bindings tag-bindings)
   (macro-bindings macro-bindings)
   (lisppkg-declarations lisppkg-declarations)
   (search-list-name search-list-name)
   (scoped-globals scoped-globals)
   (exported-objects exported-objects)
   (compilation-time compilation-time)
   (export-table export-table))
  (:constructor make-c-global-debug-descriptor (pathname static-objects-names-sizes-and-initializations
							 referenced-external-functions
							 referenced-external-objects
							 &key
							 bindings tag-bindings macro-bindings lisppkg-declarations
							 search-list-name scoped-globals exported-objects compilation-time)))
1;;; The representation for a unique id. The pathname, and the time of compilation serve to
;;; uniquely identify a compilation.
0(zl:defstruct (unique-id (:type list) (:conc-name "UNIQUE-ID-"))
  pathname
   time)
