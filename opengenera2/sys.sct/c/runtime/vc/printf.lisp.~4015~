;;; -*- Syntax: Common-Lisp; Base: 10; Mode: LISP; Package: C-SYSTEM; Lowercase: Yes -*-
 
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; What is the right package for this file Dysak ?
;-----------------------------------------------------------------------------------------
; 1) These functions belong elsewhere

0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defmacro null-pointer(a o)
  `(and (null ,a) (= ,o 0)))

(defmacro assign-pointer(a o pa po)
  `(let ((wo (floor ,o)))
     (psetf (aref ,a wo) ,pa
	    (aref ,a (+ wo 1)) ,po)))

(defmacro validate-pointer(a o)
  (ignore a o)
  nil)

(defun str-length (a o)
  (validate-pointer a o)
  (loop for i from o below (* (array-total-size a) 4)
	for size from 0
	when (zerop (si:octet-aref-8 a i)) return size
	finally (zl:ferror "Unterminated string")))

1;---------------------------------------------------------------------------------------
;;;
;;; The format directive is of the form:
;;;
;;; directive  %[flags][field-width][.precision][short-specifier][conversion-specifier]
;;; flags  -  +  space  #
;;;
0  
(defconstant flag-values 		"+- #")
(defconstant short-specifier-values 	"hlL")
(defconstant specifiers  		"diouxXfeEgGcspn")
(defconstant signed-conversion-specifiers "difeEgG")
(defconstant field-width-limit 		4096)

(defvar *print-lower-case* nil)

(defconstant specifier-functions
	     `((#\d . print-number)
	       (#\i . print-number)
	       (#\o . print-number)
	       (#\u . print-number)
	       (#\x . print-number)
	       (#\X . print-number)
	       
	       (#\f . print-double)
	       (#\e . print-double)
	       (#\E . print-double)
	       
	       (#\g . print-double)
	       (#\G . print-double)
	       
	       (#\c . print-unsigned-char)
	       
	       (#\s . print-string)
	       
	       (#\p . print-pointer)
	       
	       (#\n . print-number-of-chars)))


(defconstant specifier-base-map
	  `((#\d . 10)
	    (#\i . 10)
	    (#\o . 8)
	    (#\u . 10)
	    (#\x . 16)
	    (#\X . 16)))


(defsubst string-member (char string)
  (sys:%string-search-exact-char char string 0 (string-length string)))

1;;; A check for the index as it is stepped through the format string
0(defmacro check-format-index(index limit format)
  `(unless (< ,index ,limit)
    (zl:ferror "Incomplete directive in format specification: \"~A\"" ,format)))


1;;; This is the top level driver that interprets the format string.
;;; TBD.. when we have C streams, it must note FPOS at the start and end
;;; to return the number of characters transmitted.
0(defun printf-internal (stream format arg-list)
  (catch 'bad-format
    (loop with limit = (string-length format)
	  with curr-index = 0
	  for next-% = (sys:%string-search-char #\% format curr-index limit)
	  while next-%
	  do (when ( next-% curr-index)
	       1;; print out the intervening characters, if any
0	       (send stream :string-out format curr-index next-%))
	     (check-format-index (incf next-%) limit format)
	     1;; Now process the format directive, and update the 0curr-index
	     (if (char-equal (aref format next-%) #\%)
		 (progn
		   (send stream :tyo #\%)
		   (setq curr-index (1+ next-%)))
		 (setq curr-index (process-directive stream format arg-list next-% limit)))
	  finally
	    (send stream :string-out format curr-index))))
	    

1;;;
;;; Process the %directive that is at start-index. The procedure prints the argument on the
;;; stream as dictated by the directive. It advances the arguments list based upon the 
;;; the number of arguments that were consumed by the directive, and advances the start-index
;;; to reflect the size of the directive specification.
;;; Start-index is assumed to be at the %
;;;
0(defun process-directive(stream format arg-list index limit)
  (let (flag-value field-width precision short-specifier conversion-specifier
	(pad-char #\space))
    
    (cond-every
      
      ((string-member (aref format index) flag-values)
       (let ((end-index (string-search-not-set flag-values format :start index)))
	 (setq flag-value (nsubstring format index end-index)
	       index end-index))	 
       (check-format-index index limit format))
      
      ((or (digit-char-p (aref format index)) (char-equal (aref format index) #\*))
       (cond
	 ((char-equal (aref format index) #\*)
	  (setq field-width (let ((fw (funcall arg-list)))
			      (if ( fw 0)
				  fw
				  (progn
				    (setq flag-value "-")
				    (- fw)))))
	  (check-format-index (incf index) limit format))
	 (t (when (char= (aref format index) #\0)
	      (setq pad-char #\0)
	      (check-format-index (incf index) limit format))
	    (multiple-value-setq (field-width index)
	      (parse-integer format :start index :junk-allowed t))
	    (check-format-index index limit format))))
      
      ((eq (aref format index) #\.)
       (check-format-index (incf index) limit format)
       (cond
	 ((char-equal (aref format index) #\*)
	  (setq precision (let ((prec (funcall arg-list)))
			    (if (> prec 0) prec 0)))
	  (check-format-index (incf index) limit format))
	 ((digit-char-p (aref format index))
	  (multiple-value-setq (precision index)
	    (parse-integer format :start index :junk-allowed t))
	  (check-format-index index limit format))
	 ((char-equal (aref format index) #\-)
	  (setq precision nil)
	  (check-format-index (incf index) limit format)
	  (multiple-value-setq (nil index)
	    (parse-integer format :start index :junk-allowed t)))
	 (t (setq precision nil))))
      
      ((string-member (aref format index) short-specifier-values)
       (setq short-specifier (aref format index))
       (check-format-index (incf index) limit format))
      
      ((string-member (aref format index) specifiers)
       (setq conversion-specifier (aref format index))))
    
    (unless conversion-specifier
      (zl:ferror "Illegal syntax in format specification:\"~A(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")~A0\""
		 (nsubstring format 0 index) (nsubstring format index limit)))
    
    (setq field-width (or field-width 0))
    1;; Sanity check the numeric argument directives
0    (check-type field-width (integer 0 field-width-limit))
    (check-type precision (or null (integer 0 field-width-limit)))
    
    1;; Dispatch based upon the conversion specifier
0    
    (funcall (cdr (zl:assq conversion-specifier specifier-functions))
	     stream flag-value field-width precision short-specifier conversion-specifier pad-char
	     arg-list)
    (incf index)))

1;;; Get the length of the number in digits (including the sign)
0(defun number-width (x base)
  (loop with num = (abs x)
	with w = (if ( x 0) 1 0)
	when  (zerop num) return w
	do (incf w) (setq num (floor num base))))

(defun print-n-blanks(n stream)
  (when (> n 0)
    (loop repeat n do (send stream :tyo #\space))))

(defun print-n-pad-chars(pad-char n stream)
  (when (> n 0)
    (loop repeat n do (send stream :tyo pad-char))))

1;;; Process the + and space flags as required by the standard to build the sign prefix
0(defun build-sign-prefix(x flag-value)
  (or
    (when (and (sys:%string-search-char #\+ flag-value 0 (string-length flag-value))
	       ( x 0))
      "+")
    (when (and (sys:%string-search-char #\space flag-value 0 (string-length flag-value))
	       ( x 0))
      " ")))

(defun build-unsigned-alternate-prefix (x flag-value conversion-specifier)
  (when (and (not (zerop x)) (sys:%string-search-char #\# flag-value 0
						      (string-length flag-value)))
      (cond
	1;; bug w.rt. precision specification ? ANSI is not clear here
0	((char= conversion-specifier #\o) "0")
	((char= conversion-specifier #\x) "0x")
	((char= conversion-specifier #\X) "0X"))))

1;;; This is the place to handle the "lh" specifiers, the ANSI spec is quite
;;; incomprehensible to me here
0(defun demote-number(x conversion-specifier short-specifier)
  (unless (string-member conversion-specifier signed-conversion-specifiers)
    (setq x (ldb (byte 32 0) x))
    (when (and short-specifier (char= short-specifier #\h))
      (setq x (ldb (byte 16 0) x))))
  x)

1;;; Print a number in the appropriate base. It handles the directive for number completely.
;;; After it is done, the number has been printed out to the stream as requested by the
;;; directive.

0(zl:defconst *c-digits* (make-array 2 :initial-contents
				    '("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
				      "0123456789abcdefghijklmnopqrstuvwxyz")))
(defun c-digit (weight radix lower-case)
  (and (<= 2 radix 36.)
       (not (minusp weight))			
       (< weight radix)
       (aref (aref *c-digits* lower-case) weight)))
       
;; got to handle the case of bignums as well.
(defun print-integer
       (x base lower-case stream)
  (when (minusp x)
    (send stream :tyo #\-)
    (setq x (- x)))
  (multiple-value-bind (div rem)
      (floor x base)
    (unless (zerop div)
      (print-integer div base lower-case stream))
    (send stream :tyo (c-digit rem base lower-case))))
    
(defun print-number
       (stream flag-value width precision short-specifier conversion-specifier pad-char arg-list)
  (let ((x (funcall arg-list)))
    (check-type x (integer))

    1;; Set the default parameters for the specification, they can only be done here, since
0    1;; they have different defaults based upon the specification
0    (setq x 	    (demote-number x conversion-specifier short-specifier)
	  precision (or precision 0)
	  width     (or width 0))
    
    (let* ((prefix (and flag-value
			(if (string-member conversion-specifier signed-conversion-specifiers) 
			    (build-sign-prefix x flag-value)
			    (build-unsigned-alternate-prefix x flag-value
							     conversion-specifier))))
	   (base (cdr (zl:assq conversion-specifier specifier-base-map)))
	   (number-width (number-width x base))
	   (zeroes (max (- precision number-width) 0))
	   (spaces (max 0 (- width number-width (if prefix (string-length prefix) 0) zeroes)))
	   (left-justify (and flag-value (string-member #\- flag-value )))
	   (lower-case (if (char= conversion-specifier #\x) 1 0)))

      (unless left-justify (print-n-pad-chars pad-char spaces stream))
      (when prefix (send stream :string-out prefix))
      (when zeroes (loop repeat zeroes do (send stream :tyo #\0)))
      (print-integer x base lower-case stream)
      (when left-justify (print-n-blanks spaces stream))))
  nil)

1;;;
;;;0	1Utilities to do printing for C's 0%f1 format effector.
;;;
0(defun print-f-format (stream integer exponent sign width decimal-places decimal-point-p &optional (print-plus nil))
    (sys:with-stack-array (string (max (abs width) 256) :type 'sys:art-string :fill-pointer 0)
      (multiple-value-bind (ignore decimal-exponent n-digits)
	  (if (zerop integer)
	      (values nil 0 0)
	      (si:fixed-width-decimal-digits integer exponent
					     (- decimal-places)
					     t nil string))
	(cts:print-f-string stream string n-digits sign decimal-exponent width decimal-places print-plus decimal-point-p))))
1;;;
;;;0	1Utilities to do printing for C's 0%e1 or 0%E1 format effector.
;;;
0(defun print-e-string (stream string n-digits decimal-point-p decimal-exponent significant-digits exponent-char)
  (let* ((printed-exponent (1- decimal-exponent))
	 (abs-printed-exponent (abs printed-exponent))
	 (exp-size (cond ((< abs-printed-exponent 10) 1)
			 ((< abs-printed-exponent 100) 2)
			 (t 3))))
    (send stream :string-out string 0 1)
    (when (or decimal-point-p (not ( significant-digits 1)))
       (send stream :tyo #\.))
    (when (< 1 n-digits)
       (send stream :string-out string 1 n-digits))
    (loop repeat (- significant-digits n-digits)
	  do (send stream :tyo #\0))
    (send stream :tyo exponent-char)
    (send stream :tyo (if (minusp printed-exponent) #\- #\+))
    (print-n-pad-chars #\0 (- 3 exp-size) stream)
    (si:print-integer abs-printed-exponent 10. stream)))


(defun print-e-format (stream integer exponent sign width pad-char decimal-point-p precision
		       &optional (print-plus nil) (exponent-char #\E))
   1;;        left justification is denoted by a negative width value
0   (let* ((abs-width (abs width))
	  1;;        0precision 1specifies the number of digits to the right of the decimal point.  This routine assumes 0precision
	  1;;        is always  zero.  There is always only one digit to the left of the decimal point in C 0e1 or 0E1 format.
0	  (significant-digits (+ precision 1)))
      (flet ((do-space-padding (num-pad-chars)
	        (when (and (not (minusp width)) (char-equal pad-char #\Space))
		   (print-n-blanks num-pad-chars stream)))
	     (do-zero-padding (num-pad-chars)
	        (when (and (not (minusp width)) (not (char-equal pad-char #\Space)))
		   (print-n-pad-chars #\0 num-pad-chars stream))))
	 (cond ((zerop integer)
		(let* ((print-decimal-point-p (or decimal-point-p (> precision 0)))
		       1;;        The 041 below accounts for 0e1 or 0E, +1 or0 -1, and two exponent digits.
0		       (num-pad-chars (- abs-width significant-digits 4
					 (if print-decimal-point-p 1 0)
					 (if (eq print-plus ':nothing) 0 1))))
		   (do-space-padding num-pad-chars)
		   (unless (eq print-plus ':nothing)
		      (send stream :tyo (if print-plus #\+ #\SPACE)))
		   (do-zero-padding num-pad-chars)
		   (send stream :tyo #\0)
		   (when print-decimal-point-p (send stream :tyo #\.))
		   (loop repeat precision do (send stream :tyo #\0))
		   (send stream :tyo exponent-char)
		   (send stream :tyo #\+)
		   (loop repeat 2 do (send stream :tyo #\0))
		   (when (minusp width)
		      (print-n-blanks num-pad-chars stream))))
	       (t (sys:with-stack-array (string significant-digits :type 'sys:art-string :fill-pointer 0)
		     (multiple-value-bind (ignore decimal-exponent n-digits)
			   (si:fixed-width-decimal-digits integer exponent significant-digits nil nil string)
			(let* ((exponent-width (if (< -100 decimal-exponent 100) 2 3))
			       (print-decimal-point-p (or decimal-point-p (or (> n-digits 1) (> precision 0))))
			       1;;        The 021 below accounts for 0e1 or 0E1 and its0 +1 or0 -1.
0			       (num-pad-chars (- abs-width significant-digits exponent-width 2
						 (if print-decimal-point-p 1 0)
						 (if (and (eq print-plus ':nothing) (not (minusp sign))) 0 1))))
			   (do-space-padding num-pad-chars)
			   (cond ((minusp sign)
				  (send stream :tyo #\-))
				 ((eq print-plus ':nothing))
				 (print-plus
				  (send stream :tyo #\+))
				 (t (send stream :tyo #\SPACE)))
			   (do-zero-padding num-pad-chars)
			   (print-e-string
			      stream string n-digits decimal-point-p decimal-exponent significant-digits exponent-char)
			   (when (minusp width)
			      (print-n-blanks num-pad-chars stream))))))))))
1;;;
;;;0	1Utilities to implement C's %g format effector.  Neither FORTRAN nor Pascal nor Ada labor under the need to support this
;;; folly.  Hence, 0print-g-format1 is not part of the Compiler Tools Runtime.
;;;
0(defun print-g-format (stream integer exponent sign e-width f-width decimal-places conversion-specifier pad-char decimal-point-p
		       &optional (print-plus nil))
   (let ((number-of-significant-digits (cond
					  ((null decimal-places) 6)
					  ((= decimal-places 0) 1)
					  (t decimal-places))))
      (sys:with-stack-array (string (max (abs e-width) (abs f-width) 256) :type 'sys:art-string :fill-pointer 0)
	 (multiple-value-bind (ignore decimal-exponent n-digits)
	       (if (zerop integer)
		   (values nil 0 0)
		   (si:fixed-width-decimal-digits integer exponent
						  (if (< exponent (- (integer-length integer)))
						      1;;
0						      1;;        If the exponent is negative, don't use the asked for significant
0						      1;;        number of digits.  If the significant number of digits is too
0						      1;;        small, e.g. 1, 0si:fixed-width-decimal-digits 1will return 0.
0						      -14
						      (- number-of-significant-digits))
						  t nil string))
	    1;;
0	    1;;        Note that both paths through the if will usually end up invoking 0si:fixed-width-decimal-digits 1again.
0	    1;;        This is necessary in order to ensure that a properly rounded result is printed.  Note that the test
0	    1;;        below for 0 1corresponds to a printed 0decimal-exponent 1of 0e-051 or smaller.
0	    1;;
0	    (if (or ( decimal-exponent -4) (> decimal-exponent number-of-significant-digits))
		(print-e-format stream integer exponent sign f-width pad-char decimal-point-p number-of-significant-digits
				print-plus
				(if (char= conversion-specifier #\g) #\e #\E))
		(print-f-format stream integer exponent sign f-width
				(if (>= decimal-exponent n-digits)
				    0
				    (cond
				       ((< decimal-exponent 0)
					(min (+ n-digits (- decimal-exponent))
					     (- number-of-significant-digits 1)))
				       ((= decimal-exponent 0)
					(min n-digits (- number-of-significant-digits 1)))
				       (t	1;  0(> decimal-exponent 0)
					(min (- n-digits decimal-exponent)
					     (- number-of-significant-digits decimal-exponent)))))
				decimal-point-p
				print-plus))))))
1;;;
;;;0	1Print in the f, e or g formats. It simply meets the interface to the double printing routines in CTS.
;;;
0(defun print-double
       (stream flag-value width precision short-specifier conversion-specifier pad-char arg-list)
  (ignore short-specifier)
  
  (let* ((precision-or-default (if precision
				   (if (< precision 0) 6 precision)	1; negative precision  precision missing
0				   6))
	 (x-high (funcall arg-list))
	 (x-low (funcall arg-list))
	 (print-plus (or (and flag-value
			      (cond ((string-member #\+ flag-value) #\+)
				    ((string-member #\space flag-value) #\space)))
			 ':nothing))
	 1;; specify left justification by the sign of the width
0	 (interface-f-width (if (and flag-value (string-member #\- flag-value ))
				(- width) width))
	 (interface-e-width (if (and flag-value (string-member #\- flag-value ))
				(- (max (+ precision-or-default 7) width)) (max (+ precision-or-default 7) width)))
	 (decimal-point-p (and flag-value (string-member #\# flag-value))))
    
    (check-type x-low (integer)) (check-type x-high (integer))
1    
0    
    (multiple-value-bind (integer exponent sign)
	(si:double-integer-decode-float-components x-high x-low)

      (check-type integer (integer)) (check-type exponent (integer))
      
      (cond
	
	((char-equal conversion-specifier #\f)	1; Assumes %F is filtered out before.
0	 (print-f-format stream integer exponent sign
			 interface-f-width precision-or-default decimal-point-p print-plus))
	
	((char-equal conversion-specifier #\e)	1; 0char-equal 1allows %e or %E effectors
0	 (print-e-format stream integer exponent sign interface-f-width
			 pad-char decimal-point-p precision-or-default
			 print-plus conversion-specifier)) 
	
	((char-equal conversion-specifier #\g)	1; 0char-equal 1allows %g or %G effectors
0	 (print-g-format stream integer exponent sign interface-e-width interface-f-width precision conversion-specifier
			 pad-char decimal-point-p print-plus)))))
  nil)

(defun print-unsigned-char
       (stream flag-value width precision short-specifier conversion-specifier pad-char arg-list)
  (ignore conversion-specifier short-specifier precision pad-char)
  (let ((x (funcall arg-list)))
    
    (check-type x (integer))
    (setq x (ldb (byte 8 0) x))   1; get the unsigned char
0    
    (let* ((spaces-left  (max 0 (- width 1)))
	   (left-justify (and flag-value (string-member #\- flag-value ))))
      
      (unless left-justify (print-n-blanks spaces-left stream))
      (send stream :tyo  (code-char x))
      (when left-justify (print-n-blanks spaces-left stream))))
  nil)


(defun print-string
       (stream flag-value width precision short-specifier conversion-specifier pad-char arg-list)
  (ignore short-specifier conversion-specifier pad-char)
  (let ((a (funcall arg-list))
	(o (funcall arg-list)))
    
    1;; 0str-length1 validates the a:o pointer, so no need to check it here
0    (let* ((string-length (or precision (str-length a o)))
	   (spaces  	  (max 0 (- width string-length)))
	   (left-justify  (and flag-value (string-member #\- flag-value))))
      
      (unless left-justify (print-n-blanks spaces stream))
      (loop for i from o below (+ o string-length)
	    do (send stream :tyo  (code-char (si:octet-aref-8 a i))))      
      (when left-justify (print-n-blanks spaces stream))))
  
  nil)

(defun print-pointer (stream flag-value width precision short-specifier conversion-specifier pad-char
		      arg-list)
  (ignore short-specifier conversion-specifier precision pad-char)
  (let ((a (funcall arg-list))
	(o (funcall arg-list)))
    
    (let* ((pointer (format nil "~A:~D" a o))
	   (string-length (array-total-size pointer))
	   (spaces  	  (max 0 (- width string-length)))
	   (left-justify  (and flag-value (string-member #\- flag-value))))
      
      (unless left-justify (print-n-blanks spaces stream))
      (send stream :string-out pointer)      
      (when left-justify (print-n-blanks spaces stream)))))


(defun print-number-of-chars (stream flag-value width precision short-specifier conversion-specifier pad-char
			      arg-list)

  (ignore stream flag-value width precision short-specifier conversion-specifier pad-char arg-list)
  (let ((a (funcall arg-list))
	(o (funcall arg-list)))
    (setf (si:octet-aref a o) (send stream :count))))

1;;; Format internal tests

0;(printf-internal zl:standard-output
;		 "%%d (1234567890)=%d, %%+d (1234567890)=%+d"
;		 `(1234567890 1234567890 ))
;
;
;
;(printf-internal zl:standard-output
;		 "%%20d (1234567890)=%20d, %%-20d (1234567890)=%-20d, %%+20d (1234567890)=%+20d"
;		 `(1234567890 1234567890 1234567890))
;
;(printf-internal zl:standard-output
;		 "%%20.15d (1234567890)=%20.15d, %%-20.15d (1234567890)=%-20.15d, %%+20.15d (1234567890)=%+20.15d"
;		 `(1234567890 1234567890 1234567890))
;
;(printf-internal zl:standard-output
;		 "%%*.*d (1234567890)=%*.*d, %%-*.*d (1234567890)=%-*.*d, %%+*.*d (1234567890)=%+*.*d"
;		 `(20 15 1234567890 20 15 1234567890 20 15 1234567890 1))
;
;
;(printf-internal zl:standard-output
;		 "%f" (zl:nreverse (multiple-value-list (si:dfloat-components 12345.0d0))))
;
;(printf-internal zl:standard-output
;		 "%5.10f" (zl:nreverse (multiple-value-list (si:dfloat-components 12345.0d0))))
;
;(printf-internal zl:standard-output
;		 "%10.0E" (zl:nreverse (multiple-value-list (si:dfloat-components 12345.0d0))))
;
;
;(printf-internal zl:standard-output "%s" (list (let ((a (zl:make-array 5 :initial-value #x0f0fffff)))
;						 (setf (aref a 4) 0) a) 0))

;(printf-internal zl:standard-output
;		 "%20e" (zl:nreverse (multiple-value-list (si:dfloat-components 12345.0d0))))

1;;; Bug here, anything larger than two decimal digits loses
; 0(printf-internal zl:standard-output "%f" (multiple-value-list (si:dfloat-components 1.2e2)))
