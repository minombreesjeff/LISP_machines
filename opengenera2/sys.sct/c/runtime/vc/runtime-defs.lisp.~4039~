;; -*- Mode: LISP; Package: c-system; Lowercase: T; Base: 10; Syntax: Common-Lisp -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;
;;; Created Wednesday the tenth of September, 1986; 5:02:26 pm by DySak on Nene at SCRC
;;;
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; This is the list of the c-user package and all packages defined by
;;; c-system:package-declare-with-no-superiors.  It is used by things
;;; like meta-. to search for all occurences a name regardless of its
;;; package0.
1;;;
0(defvar *c-packages* `(,(pkg-find-package "C-USER")))

(defun validate-c-package (symbol)
  (and (symbolp symbol)
       (zl:memq (symbol-package symbol) *c-packages*)))

(defmacro c-system:package-declare-with-no-superiors (name) ; &body defpackage-options)
  `(cts:m-.-able-definitions ,name c-system:package-declare-with-no-superiors
     (defpackage ,name (:use))			; ,@defpackage-options)
     (let ((pkg (pkg-find-package ',name)))
       (push pkg *c-packages*)
       (push pkg si:*reasonable-packages*))))

;;;
;;;      This is the package of macro definitions, excluding the keyword parsing
;;; macros, which support the runtime environment for C code.
;;;

;;;(defconst *C-init-to-zero* nil)			; controls init of C variables to
;;;						; the null value of the type, or "Undefined"
;;;
;;;(defconst *word-size* 32.)
;;;
;;;(defvar *C-open-files*)				; a list of open files, for autoclose
;;;
;;;(defvar *C-input*)				; the "standard" C input and output
;;;(defvar *C-output*)
;;;(defvar *C-stream-alist*)			; an alist of stream names and streams
;;;(defvar *io-unit-sequence-number*)		; a number, starting at 1, of the unnamed
;;;						; files opened by a C program
;;;
;;;(defvar *C-start-time*)			; the time at which execution began, for clock
;;;(defvar *C-program-name*)			; the name of the main program being executed
;;;
;;;(defvar *C-program-names* nil)		; a list of all main programs compiled
;;;
;;;;;;
;;;;;; def vars and consts for running C programs
;;;;;;
;;;(defconst *C-stack-increment-size* 8200.)	; the intial size and increment of the stack
;;;
;;;(defvar *C-stack*)				; an array
;;;(defvar *C-stack-offset*)			; the logical fill-pointer for the array
;;;
;;;(defvar *units-used-so-far*)			; accumulated units
;;;(defvar *units-being-traversed*)		; if unit gets added to this list twice,
;;;						; there are circular dependencies
;;;
;;;(defconst *C-unputtable-string*
;;;	  (make-instance 'undefined-value
;;;			 :string
;;;			 "An un-put-able value was written, and then read back in"))
				    
;;;
;;; declare a user package with no superiors
;;;
;;; (package-declare-with-no-superiors c-user)
;;;

(defvar *default-C-package* "C-USER")
1;;;
;;;0	1The basic idea behind this special is to serve as a switch which causes compiler debugging and runtime information as
;;; opposed to just runtime information to appear in a user's world upon bin file loading when the Symbolics C development
;;; system is loaded and when the bin file itself contains the necessary debugging information.
;;;
;;;0	1This variable is setq'd to (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")t1 when the development system is loaded.
;;;
0(defvar *c-development-system-loaded-p* nil)
1;;;
;;; PURPOSE: A routine to do the locf job for the time being.
;;; NOTES:
;;;
0(defun si:octet-locf(array-object array-byte-offset)
   (locf (aref array-object (ldb (byte 30 2) array-byte-offset))))
1;;; PURPOSE:    locf methods
0(deflocf si:octet-aref si:octet-locf)
(deflocf si:octet-aref-16 si:octet-locf)
(deflocf si:octet-aset-8 si:octet-locf)
1;;; Do not accumulate who-calls information for the octet instructions, it could be rather
;;; extensive
0#+3600
(eval-when (load)
  si:(progn 
       (push 'octet-aref-8 *microcoded-functions-not-for-who-calls*)
       (push 'octet-aref-16 *microcoded-functions-not-for-who-calls*)
       (push 'octet-aref *microcoded-functions-not-for-who-calls*)
       (push 'octet-aset-8 *microcoded-functions-not-for-who-calls*)
       (push 'octet-aset-16 *microcoded-functions-not-for-who-calls*)
       (push 'octet-aset *microcoded-functions-not-for-who-calls*)
       (setup-*consider-opcode-for-who-calls-p*)))
1;;;
;;;0	1Define this since this is the bread and butter of name table lookup in the C system.  This allows us to bypass keyword
;;; checking for each call to 0string=1.
;;;
0(defsubst fast-string= (x y)
  (sys:%string= x 0 y 0 nil))
#|==============================================================================================================================
			  The following are very 36xx architecture dependent.  C'est la vie, for now.
==============================================================================================================================|#
1;;;
0(defconstant *bytes-per-word* 4. "The number of \"effective\" bytes per word (as far as C is concerned) for a 36xx.")
1;;;
0(defconstant *bits-per-byte* 8. "The number of \"effective\" bits per byte (as far as C is concerned) for a 36xx.")
#|==============================================================================================================================
					       Specials used at bin loading time
==============================================================================================================================|#

1;;; Bound to an array, at dump time. It contains all the pointed-to entities that needed
;;; to be broken away from the pointer type.
0(defvar *pointed-to-entities* nil)

1;;; See the comments on the special variable 0c-sys::*pointed-to-entities*1.
;;; A list of all the objects, that are known not to yield a circularity.
0(defvar *examined-objects* nil)

1;;; Bound at bin dumping time to the list of exporting gdds referenced by this file.
;;; The position of the gdd in the list is used as the unique-index field of an xfile-ref.
;;; It is also used for the reverse operation at bin loading time.
0(defvar *referenced-gdds*)
(defvar *defparameter-builtin-type-constructors*)

(defmacro defparameter-builtin-types (&body body)
  (loop for type-name in body
	as global-name =
	   (intern (string-append "*" (string type-name) "-TYPE*"))
	collect `(defparameter ,global-name nil) into defparameters
	finally (return
		  `(progn 'compile
			  (eval-when (compile load)
			    (setq *defparameter-builtin-type-constructors* ',defparameters))))))

(defmacro create-builtin-type-globals ()
  (declare (special *defparameter-builtin-type-constructors*))
  `(progn
     (if *c-development-system-loaded-p*
	 (format t "WARNING: you have C development loaded and are redefining builtin type definitions,~%~
                    Unless you know what you're doing, load sys:c;vc;types.bin to get the real definitions.~%"))
     ,@*defparameter-builtin-type-constructors*))
 

(defparameter-builtin-types c-void c-lispobj c-signed-char c-short c-int c-long c-char
			c-unsigned-short c-unsigned-int c-unsigned-long c-float c-double
			c-long-double c-boolean lisp-boolean c-null-pointer nil c-zero-bit-field
			c-implied-int c-float-parameter)

(defparameter *c-unsigned-bit-field-types* (make-array 33 :initial-element nil))
(defparameter *c-signed-bit-field-types* (make-array 33 :initial-element nil))

(create-builtin-type-globals)
;;;
;;; macro used to catch errors in stdio functions.
;;;
1;; handler to enter the debugger
0(defun maybe-go-into-debugger (error)
  (dbg:with-erring-frame (fp error)
    (dbg:debugger-top-level error fp "of an error in the program" nil)))

(defvar *error* nil)

;; macro used to catch errors in stdio functions1 2only1.
0(defmacro c-condition-bind (error-values-to-return body)
  `(condition-case (error)
       (condition-bind-if *enter-debugger-on-error* (((sys:error) 'maybe-go-into-debugger))
	 ,body)
     ((sys:network-error fs:file-error) (progn (setq *error* error) ,error-values-to-return))
     (error ,error-values-to-return)))
1;;;
;;; This defining form and accompanying property list code is used to create
;;; a c-runtime-routine (i.e. a Lisp routine which uses C as its associated debugger
;;; for use by the hybrid debugger).  Such routines may be found, for example, in 
;;; stdio.lisp and stdarg.lisp where routines such as c-user::|printf| are defined.
;;;

0(defmacro defun-c-runtime-routine
	  (function-name argument-list &body body)
  `(progn
     (si:record-source-file-name ',function-name 'defun-c-runtime-routine)
     (defun ,function-name ,argument-list
       (declare (sys:function-parent ,function-name defun-c-runtime-routine)
		(dbg:function-language-index #.dbg:%debugger-language-hybrid)
		(dbg:associated-debugger     #.dbg:%debugger-language-c))
       ,@body)))

(defun (:property defun-c-runtime-routine zwei:kill-definition) (function-spec)
  (fundefine function-spec)
  function-spec)

(defprop defun-c-runtime-routine zwei:show-effect-of-function-definition
	 zwei:show-effect-handler)

(defprop defun-c-runtime-routine "C Runtime Routine" si:definition-type-name)

(defprop defun-c-runtime-routine compiler:only-at-top-level compiler:style-checker)



