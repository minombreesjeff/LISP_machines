;;; -*- Mode: LISP; Package: C-SYSTEM; Syntax: Common-Lisp -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;	Created on Monday the third of August, 1987 at 9:39:23 pm by DySak on Nene at SCRC.
;;;

#|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

		    This file contains the Lisp routines used to implement the C <string.h> library routines.

			As of 8/03/87 at 21:38:25, the required arsenal of support is still incomplete.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|#
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;
;;; PURPOSE:0	1Utility routine to move words of memory from one place to another through the use of a loop.
;;; ASSUMES:0	1If its called, all the checks done in the 0c-word-move 1routine have been done.
;;; COMMENTS:0	1C style error handling must still be incorporated into this routine.
;;;
0(defun c-word-move-using-loop (target-array target-word-index source-array source-word-index number-of-words)
  (let ((source-reg source-array)
	(target-reg target-array))
    (declare (sys:array-register source-reg target-reg))
    (loop for source-index from source-word-index
	  for target-index from target-word-index
	  for cnt from 1 to number-of-words
	  do (setf (aref target-reg target-index) (aref source-reg source-index)))))

1;;;
;;; PURPOSE:0	1A library utility callable by the C byte-move library utility for moving words around.  This is also
;;;0	1called by the compiler directly for structure assigns where the length of the structure is greater than two words.
;;; NOTES:0	1Borrowed from Ada word move with changes made to reflect the differing requirements imposed by C.  For example,
;;;0	1in Ada, length to be moved is expressed in bits.  In C the length to be moved is expressed in bytes. In Ada, the first
;;;0	1array is the source and the second array is the target.  In C, the first array is the target and the second array is the
;;;0	1source.  In Ada, the indices into the source and target objects are in terms of words.  In C, they are in terms of
;;;0	1bytes.  Finally, in Ada, the source "pointer" is supposed to be returned.  In C, the target pointer is returned.
;;;
0(defun c-word-move (target-array target-word-index source-array source-word-index number-of-words)
  (cond
    ((= number-of-words 0))
1    ;;        Deal with potential overlap.  We use a copy forward so the only problem is when the source and target are in the
    ;;        same array and the source "sub-array" overlaps the target "sub-array" at the source's high-end.  Note that there
    ;;        is no problem with a copy forward when the source's low-end overlaps that the target "sub-array".  The recursive
0    1;;        calls go on to catch any potential out of range problem as indicated by the subsequent cond test.
0    ((and (eq source-array target-array) ( source-word-index target-word-index (+ source-word-index number-of-words)))
     (let ((temp-array (make-array number-of-words)))
       (c-word-move temp-array 0. source-array source-word-index number-of-words)
       (c-word-move target-array target-word-index temp-array 0. number-of-words)))
    ((or 1;;        Unfortunately, we're still not out of the woods wrt overlap since the system utility which does the block
       0  1;;        copy "quickly" doesn't work even though the "overlap" is in the right direction for a forward copy.  So we've
       0  1;;        got to use the loop copy word by word technique here as well.
0	 (and (eq source-array target-array) ( target-word-index source-word-index (+ target-word-index number-of-words)))
	 1;;        This check safeguards the gc-block-copy below.  When the specified number of words cannot be copied from the
	 ;;        source or to the target call, move the words in a loop.  The loop should eventually error out with an
	 ;;        index out of range, signaling a condition which is assumed to be handled by the runtime environment.
0	 (> (+ source-word-index number-of-words) (array-total-size source-array))
	 (> (+ target-word-index number-of-words) (array-total-size target-array)))
     (let ((source-register source-array)
	   (target-register target-array))
       (declare (sys:array-register source-register target-register))
       (loop for source-index from source-word-index
	     for target-index from target-word-index
	     for cnt from 1 to number-of-words
	     do (setf (aref target-register target-index) (aref source-register source-index)))))
    1;;        It is now deemed safe to blat away.
0    (t (#+3600 sys:%block-gc-copy #+IMACH si:%block-scavenge-copy
	  (locf (aref source-array source-word-index))
	  (locf (aref target-array target-word-index))
	  number-of-words)))
  (values target-array target-word-index))

1;;;
;;;0 1PURPOSE:0	1Internal utilities called by compiler generated code to do a word move from a structure to a structure.
;;; ASSUMES:0	1The compiler generates calls to the locative specific entry points only when it can determine at compile time
;;;0	1that the object pointed to has the proper extent.
;;; COMMENTS:0	1C style error handling must still be incorporated into the routine which deal with arrays.
;;; NOTES:0	1See the compiler routine 0DO-ASSIGN1 for more details.
;;;
0(defun c-locative-locative-word-move (target-locative source-locative number-of-words)
  (#+3600 sys:%block-gc-copy #+IMACH si:%block-scavenge-copy
     source-locative target-locative number-of-words)
  (values))

(defun c-locative-array-word-move
       (target-locative source-array source-byte-index number-of-words)
  (when ( (ldb (byte 2 0) source-byte-index) 0)
    (error
      "C-LOCATIVE-ARRAY-WORD-MOVE called with a source address which was not word aligned."))
  (let ((source-word-index (floor source-byte-index *bytes-per-word*)))
    (when (> (+ source-word-index number-of-words) (array-total-size source-array))
      (error "C-LOCATIVE-ARRAY-WORD-MOVE called to move too many words from the move source ~
	      object."))
    (#+3600 sys:%block-gc-copy #+IMACH si:%block-scavenge-copy
       (locf (aref source-array source-word-index)) target-locative number-of-words))
  (values))

(defun c-array-locative-word-move
       (target-array target-byte-index source-locative number-of-words)
  (when ( (ldb (byte 2 0) target-byte-index) 0)
    (error
      "C-ARRAY-LOCATIVE-WORD-MOVE called with a target address which was not word aligned."))
  (let ((target-word-index (floor target-byte-index *bytes-per-word*)))
    (when (> (+ target-word-index number-of-words) (array-total-size target-array))
      (error "C-ARRAY-LOCATIVE-WORD-MOVE called to move too many words to the move target ~
	      object."))
    (#+3600 sys:%block-gc-copy #+IMACH si:%block-scavenge-copy
       source-locative (locf (aref target-array target-word-index)) number-of-words))
  (values))

(defun c-array-array-word-move (target-array target-byte-index source-array source-byte-index number-of-words)
  (c-word-move target-array (floor target-byte-index *bytes-per-word*)
	       source-array (floor source-byte-index *bytes-per-word*) number-of-words))

1;;;
;;; PURPOSE:0	1A library utility callable by the C (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")memcpy1 and 2memmove1 library routines for moving bytes around.
;;; COMMENTS:0	1C style error handling must still be incorporated into this routine.
;;; NOTES:0	1Borrowed from Ada bit move with changes made to reflect the differing requirements imposed by C.  For example,
;;;0	1in Ada, length to be moved is expressed in bits.  In C the length to be moved is expressed in bytes. In Ada, the first
;;;0	1array is the source and the second array is the target.  In C, the first array is the target and the second array is the
;;;0	1source.  In Ada, the indices into the source and target objects are in terms of words.  In C, they are in terms of
;;;0	1bytes.  Finally, in Ada, the source "pointer" is supposed to be returned.  In C, the target pointer is returned.
;;;
0(defun c-byte-move (target-array target-byte-index source-array source-byte-index number-of-bytes)
  (declare (values target-array target-byte-index))
  (cond
    ((= number-of-bytes 0))
1    ;;        Deal with potential overlap.  We use a copy forward so the only problem is when the source and target are in the
    ;;        same array and the source "sub-array" overlaps the target "sub-array" at the source's high-end.  Note that there
    ;;        is no problem with a copy forward when the source's low-end overlaps that the target "sub-array".  The recursive
0    1;;        calls go on to catch any potential out of range problem as indicated by the subsequent cond test.
0    ((and (eq source-array target-array) ( source-byte-index target-byte-index (+ source-byte-index number-of-bytes)))
     (let ((temp-array (make-array (ceiling number-of-bytes *bytes-per-word*))))
       (c-byte-move temp-array 0. source-array source-byte-index number-of-bytes)
       (c-byte-move target-array target-byte-index temp-array 0. number-of-bytes)))
    1;;        At this point, we either have an overlap which will not result in lost data due to a copy forward, or we have
0    1;;        distinct array objects.
0    (t
     (multiple-value-bind (target-word-index target-byte-offset)
	 (floor target-byte-index *bytes-per-word*)
       (multiple-value-bind (source-word-index source-byte-offset)
	   (floor source-byte-index *bytes-per-word*)
	 1;;        Yow!  Are we into internal functions yet?
0	 (labels (1;;        Utility to perform initial or clean-up moves of one to three bytes inclusive.
0		  (move-partial-word (number-of-bytes target-word-index target-byte-offset source-word-index source-byte-offset)
		    (declare (sys:downward-function))
		    (let* ((byte-size  (* number-of-bytes *bits-per-byte*))
			   (target-loc (locf (aref target-array target-word-index)))
			   (target-word (location-contents target-loc)))
		      (setf (location-contents target-loc)
			    (dpb (ldb (byte byte-size (* source-byte-offset *bits-per-byte*))
				      (aref source-array source-word-index))
				 (byte byte-size (* target-byte-offset *bits-per-byte*))
				 (if (integerp target-word) target-word 0)))))
		  1;;        Utility called when the byte offsets into the first words of the source and target array match
		  ;;        exactly.  In this case, we can move any word fragments at the beginning and end of the arrays
0		  1;;        using a single 2ldb1/2dpb1 and use word moves for copying the word moves in between.
0		  (byte-move-with-same-initial-offsets (initial-byte-offset)
		    (declare (sys:downward-function))
		    (let ((byte-count 0)
			  (number-of-words-moved 0))
		      (unless (= initial-byte-offset 0)		1;; take care of an initial partial word
0			(setq byte-count (min (- *bytes-per-word* initial-byte-offset) number-of-bytes)
			      number-of-words-moved 1)
			(move-partial-word byte-count target-word-index initial-byte-offset source-word-index initial-byte-offset))
		      (let ((new-move-length (- number-of-bytes byte-count)))
			1;;        In this section, side-effect 0byte-count1 to hold the leftover number of bytes to be moved.
0			(if (< new-move-length *bytes-per-word*)
			    (setq byte-count new-move-length)
			    (multiple-value-bind (word-move-length remaining-bytes)
				(floor new-move-length *bytes-per-word*)
			      (c-word-move target-array (+ target-word-index number-of-words-moved)
					   source-array (+ source-word-index number-of-words-moved) word-move-length)
			      (setq byte-count remaining-bytes
				    number-of-words-moved (+ number-of-words-moved word-move-length)))))
		      (unless (= byte-count 0)			1;; take care of a trailing partial word
0			(move-partial-word byte-count
					   (+ target-word-index number-of-words-moved) 0.
					   (+ source-word-index number-of-words-moved) 0.))))
1		  ;;        The following six utilities trade space for time or so we hope.  They are intended to cover the
0		  1;;        only kinds of partial word moves required when the source and target arrays are not "nicely"
0		  1;;        aligned with respect to each other.  The last two digits at the ends of the names indicate the
0		  1;;        byte offset in the source and the byte offset in the target, respectively.
0		  (move-1-byte-0-3 (target-locative source-word)
		    (let ((target-word (location-contents target-locative)))
		      (setf (location-contents target-locative)
			    (dpb (ldb (byte 8 0) source-word) (byte 8 24) (if (integerp target-word) target-word 0)))))
		  (move-3-bytes-0-1 (target-locative source-word)
		    (let ((target-word (location-contents target-locative)))
		      (setf (location-contents target-locative)
			    (dpb (ldb (byte 24 0) source-word) (byte 24 8) (if (integerp target-word) target-word 0)))))
		  (move-1-byte-3-0 (target-locative source-word)
		    (let ((target-word (location-contents target-locative)))
		      (setf (location-contents target-locative)
			    (dpb (ldb (byte 8 24) source-word) (byte 8 0) (if (integerp target-word) target-word 0)))))
		  (move-3-bytes-1-0 (target-locative source-word)
		    (let ((target-word (location-contents target-locative)))
		      (setf (location-contents target-locative)
			    (dpb (ldb (byte 24 8) source-word) (byte 24 0) (if (integerp target-word) target-word 0)))))
		  (move-2-bytes-0-2 (target-locative source-word)
		    (let ((target-word (location-contents target-locative)))
		      (setf (location-contents target-locative)
			    (dpb (ldb (byte 16 0) source-word) (byte 16 16) (if (integerp target-word) target-word 0)))))
		  (move-2-bytes-2-0 (target-locative source-word)
		    (let ((target-word (location-contents target-locative)))
		      (setf (location-contents target-locative)
			    (dpb (ldb (byte 16 16) source-word) (byte 16 0) (if (integerp target-word) target-word 0)))))
1		  ;;        There might be a faster way to achieve what following routine tries to achieve, but I (DySak), could
		  ;;        could not think of one.  This basically works on the notion that when the source or target array
0		  1;;        has a word aligned byte offset and the other array does not, the copy can be achieved for any
0		  1;;        four bytes by using two 2ldb1/2dpb1 operations.
0		  (byte-move-with-one-word-aligned-offset (first-chunk-move second-chunk-move number-of-bytes
							   source-byte-index target-byte-index initial-byte-offset)
		    (declare (sys:downward-function))
		    (let ((source-register source-array)
			  (target-register target-array)
			  (byte-chunk-size-1 (- *bytes-per-word* initial-byte-offset))
			  (byte-chunk-size-2 initial-byte-offset))
		      (declare (sys:array-register source-register target-register))
		      (loop with bytes-left = number-of-bytes and still-moving = t
			    while still-moving
			    do (cond
				 (( bytes-left byte-chunk-size-1)
				  (funcall first-chunk-move
					   (locf (aref target-register (floor target-byte-index *bytes-per-word*)))
					   (aref source-register (floor source-byte-index *bytes-per-word*)))
				  (incf source-byte-index byte-chunk-size-1)
				  (incf target-byte-index byte-chunk-size-1)
				  (decf bytes-left byte-chunk-size-1))
				 (t (setq still-moving nil)))
			       (cond
				 ((and still-moving ( bytes-left byte-chunk-size-2))
				  (funcall second-chunk-move
					   (locf (aref target-register (floor target-byte-index *bytes-per-word*)))
					   (aref source-register (floor source-byte-index *bytes-per-word*)))
				  (incf source-byte-index byte-chunk-size-2)
				  (incf target-byte-index byte-chunk-size-2)
				  (decf bytes-left byte-chunk-size-2))
				 (t (setq still-moving nil)))
			    finally (when (> bytes-left 0)
				      (multiple-value-bind (target-word-index target-byte-offset)
					  (floor target-byte-index *bytes-per-word*)
					(multiple-value-bind (source-word-index source-byte-offset)
					    (floor source-byte-index *bytes-per-word*)
					  (move-partial-word bytes-left
							     target-word-index target-byte-offset
							     source-word-index source-byte-offset)))))))
		  (move-if-one-word-aligned-offset (number-of-bytes
						    source-byte-index source-byte-offset target-byte-index target-byte-offset)
		    (declare (sys:downward-function))
		    (cond
		      ((= source-byte-offset 0)
		       (cond
			 ((= target-byte-offset 1)
			  (byte-move-with-one-word-aligned-offset #'move-3-bytes-0-1 #'move-1-byte-3-0 number-of-bytes
							     source-byte-index target-byte-index target-byte-offset))
			 ((= target-byte-offset 2)
			  (byte-move-with-one-word-aligned-offset #'move-2-bytes-0-2 #'move-2-bytes-2-0 number-of-bytes
							     source-byte-index target-byte-index target-byte-offset))
			 ((= target-byte-offset 3)
			  (byte-move-with-one-word-aligned-offset #'move-1-byte-0-3 #'move-3-bytes-1-0 number-of-bytes
							     source-byte-index target-byte-index target-byte-offset))
			 (t (error "Internal error in C-BYTE-MOVE.")))
		       t)
		      ((= target-byte-offset 0)
		       (cond
			 ((= source-byte-offset 1)
			  (byte-move-with-one-word-aligned-offset #'move-3-bytes-1-0 #'move-1-byte-0-3 number-of-bytes
							     source-byte-index target-byte-index source-byte-offset))
			 ((= source-byte-offset 2)
			  (byte-move-with-one-word-aligned-offset #'move-2-bytes-2-0 #'move-2-bytes-0-2 number-of-bytes
							     source-byte-index target-byte-index source-byte-offset))
			 ((= source-byte-offset 3)
			  (byte-move-with-one-word-aligned-offset #'move-1-byte-3-0 #'move-3-bytes-0-1 number-of-bytes
							     source-byte-index target-byte-index source-byte-offset))
			 (t (error "Internal error in C-BYTE-MOVE.")))
		       t)
		      (t nil))))
	   1;;        Finally, here's the real guts of 0c-byte-move1.
0	   (cond
	     ((= source-byte-offset target-byte-offset)
	      (byte-move-with-same-initial-offsets source-byte-offset))
	     ((move-if-one-word-aligned-offset
		number-of-bytes source-byte-index source-byte-offset target-byte-index target-byte-offset))
	     (t (let ((min-move-len (min number-of-bytes
					 (- *bytes-per-word* source-byte-offset)
					 (- *bytes-per-word* target-byte-offset))))
		  1;;        0min-move-len1 can't be zero, unless we've blown 0move-if-one-word-aligned-offset1.
0		  (move-partial-word min-move-len target-word-index target-byte-offset source-word-index source-byte-offset)
		  (let* ((new-move-len (- number-of-bytes min-move-len))
			 (new-source-index (+ source-byte-index min-move-len))
			 (new-target-index (+ target-byte-index min-move-len)))
		    (unless (or (= new-move-len 0)
				1;;        The 0move-partial-word 1above should result in one word aligned offset.
0				(move-if-one-word-aligned-offset
				  new-move-len
				  new-source-index (mod new-source-index *bytes-per-word*)
				  new-target-index (mod new-target-index *bytes-per-word*)))
		      (error "Internal error in C-BYTE-MOVE")))))))))))
  (values target-array target-byte-index))
