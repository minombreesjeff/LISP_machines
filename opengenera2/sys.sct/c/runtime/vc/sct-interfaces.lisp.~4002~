;;; -*- Mode: LISP; Package: c-system; Lowercase: T; Base: 10 -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;
;;; Created on Saturday the sixth of June, 1987 at 5:07:27 pm by DySak on Nene at SCRC
;;;
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;
;;;0	1The definition for the 0c-system::c-module1 type may be found in the core system.  The 0:compile 1methods are here instead of
;;; in the development system because they are used in other places besides just compiling.  In particular, Bill York found that
;;; they are invoked during the :Distribute Systems operation.
;;;
;;;
;;; PURPOSE:0	1Supply a 0:compile 1method for a C source file.  This is the method that is invoked to compile a module in a
;;;0	1defsystem or defsubsystem with 0(:type :c)1.
;;; NOTES:0	1This was copied from 0(FLAVOR:METHOD :COMPILE SCT:LISP-MODULE)1.  It was changed to use (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")cl:apply1 instead of
;;;0	2zl:lexpr-funcall1 as is recommended by the documentation and of course changed to call the compile function for C rather
;;;0	1than the one for Pascal.
;;;
0(defmethod (:compile sct:c-module) (system-op &rest keys &key recompile no-compile &allow-other-keys)
  1;;
  ;;        Only compile when the system operation is :COMPILE.
0  1;;
0  (when (and (not no-compile) (eq system-op :compile))
    (let ((cts::*encached-include-files-are-current-p* t))
      (declare (special cts::*encached-include-files-are-current-p*))
      (cl:apply #'sct:default-compile
		self system-op recompile
		#'(lambda (source bin module &rest ignore)
		    (let (1;;
0			  1;;        A kludge to prevent undefined function warnings when compiling the system.
0			  1;;
0			  (compile-function 'c-system::compile-c-file-internal)
			  1;;
			  ;;        Bind PACKAGE to the default package in case the override mechanism supplies NIL.
0			  1;;
0			  (*package* (pkg-find-package (or (sct:system-default-package sct:*system*) "C-USER")))
			  (cts::*encached-include-files-are-current-p* t))
1		      ;;
		      ;;        Since the lambda is not called at the time of (i.e in the context of the 2cl:apply1 of
0		      1;;        2#'sct:default-compile1, we must bind 2cts::*encached-include-files-are-current-p*1 0and
		      1;;        2cts::*compile-from-file*0 1within the lambda.
0		      1;;
0		      (declare (special cts::*encached-include-files-are-current-p*))
		      (funcall compile-function source bin (sct:package-for-module module) nil)))
		'("Compile" "Compiling" "Compiled")
		keys))))
1;;;
;;;0	1Encache the include file -- otherwise, this really is like sct:no-load-or-compile-module
;;;
0(defmethod (:compile sct:c-include-module) (system-op &rest keys &key no-compile recompile &allow-other-keys)
  1;;
  ;;        Only compile when the system operation is :COMPILE.
0  1;;
0  (when (and (not no-compile) (eq system-op :compile))
    (let ((cts::*compile-from-file* t)
	  (cts::*encached-include-files-are-current-p* nil))
      (declare (special cts::*encached-include-files-are-current-p* cts::*compile-from-file*))
      (cl:apply #'sct:default-compile
		self system-op recompile
		#'(lambda (source ignore ignore &rest ignore)
		    (let (1;;
0			  1;;        A kludge to prevent undefined function warnings when compiling the system.
0			  1;;
0			  (compile-function 'cts:get-include-stream)
			  1;;
			  ;;        Bind PACKAGE to the default package in case the override mechanism supplies NIL
0			  1;;
0			  (*package* (pkg-find-package
				       (or (sct:system-default-package sct:*system*)
					   "C-USER")))
			  (cts::*compile-from-file* t)
1			  ;;
			  ;;        Never use a Zmacs buffer version of the include
0			  1;;
0			  (cts::*encached-include-files-are-current-p* nil))
1		      ;;
		      ;;        Since the lambda is not called at the time of (i.e in the context of the 2cl:apply1 of
0		      1;;        2#'sct:default-compile1, we must bind 2cts::*encached-include-files-are-current-p*1 0and
		      1;;        2cts::*compile-from-file*0 1within the lambda.
0		      1;;
0		      (declare (special cts::*encached-include-files-are-current-p*
					cts::*compile-from-file*
					cts::*include-file-cache-lock*))
		      (with-open-stream (stream (si:with-lock-held
						      (cts::*include-file-cache-lock* :whostate "Include Cache Lock")
						   (funcall compile-function source)))
			(values source
				(send (or (send-if-handles stream :pathname) source) :truename)
				source))))
		'("Include" "Including" "Included")
		keys))))
