;;; -*- Syntax: Zetalisp; Mode: LISP; Package: SYSTEM-INTERNALS; BASE: 8 -*-

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Routines derived from their namesakes in the system. They have been modified
;;; to observe C semantics

;;; Modified to throw out upon underflow and overflow

0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(DEFUN c-sys::XR-READ-FLONUM (STRING TYPE)
  (LET ((*POWER-10* 0)
	(*INDEX* 0)
	(NEGATIVE NIL)
	(*HIGH-PART* 0)
	(*LOW-PART* 0))
; Should (MACROLET ((SKIP-CHAR () ...)) and then (FLET ((XR-ACCUMULATE-DIGITS....))
    (IF *READ-SUPPRESS* NIL			;Don't get flonum overflow errors
	(LET* ((*COUNT* (STRING-LENGTH STRING))
	       (STRING-LENGTH *COUNT*)
	       (CHAR (AREF STRING *INDEX*))
	       (BITS (RDTBL-BITS READTABLE (CHAR-CODE CHAR))))
	  ;; Check for plus or minus
	  (WHEN (XR-CHAR-CLASS-BIT-TEST BITS #/+ #/-)
	    (SKIP-CHAR)
	    (SETQ NEGATIVE (XR-CHAR-CLASS-BIT-TEST BITS #/-)))
	  ;; Skip leading zeros
	  (DO ()
	      ((NOT (CHAR= (AREF STRING *INDEX*) #/0)))
	    (SKIP-CHAR))
	  (COND ((XR-CHAR-CLASS-TEST (CHAR-CODE (AREF STRING *INDEX*)) #/.)
		 ;; We hit a decimal point, keep stripping 0's
		 (SKIP-CHAR)
		 (DO ()
		     ((OR (< *COUNT* 2)			;Leave one digit at least
			  (NOT (CHAR= (AREF STRING *INDEX*) #/0))))	;or non-zero digit
		   (SKIP-CHAR)
		   (SETQ *POWER-10* (1+ *POWER-10*)))
		 (XR-ACCUMULATE-DIGITS STRING T))
		;; Accumulate digits up to the point or exponent (these are free)
		(T (XR-ACCUMULATE-DIGITS STRING NIL)
		   (COND
		     ((XR-CHAR-CLASS-TEST (CHAR-CODE (AREF STRING *INDEX*)) #/.)	;Decimal point
		      (SKIP-CHAR)
		      ;; Skip trailing zeros after the point.  this avoids having a
		      ;; one in the lsb of 2.0 due to dividing 20. by 10.
		      (LET ((IDX (STRING-SEARCH-NOT-CHAR #/0 STRING *INDEX*)))
			(COND ((NULL IDX) (SETQ *COUNT* 0))	;Nothing but zeros there
			      ((NOT (MEMQ (AREF STRING IDX) '(#/1 #/2 #/3 #/4 #/5
							      #/6 #/7 #/8 #/9)))
			       (SETQ *INDEX* IDX		;No digits there except zeros
				     *COUNT* (- STRING-LENGTH *INDEX*)))
			      (T				;Real digits present, scan normally
			       (XR-ACCUMULATE-DIGITS STRING T))))))))
	  ;; Here we have read something up to exponent if it exists, or end of string
	  (COND ((> *COUNT* 0)
		 (SKIP-CHAR)				;Skip the exponent character
		 (SETQ *POWER-10*
		       (- *POWER-10*
			  (XR-READ-INTEGER-INTERNAL STRING *INDEX* STRING-LENGTH 10.)))))
	  (CONDITION-CASE (ERROR)
	      (LET ((RESULT
		      (WITHOUT-FLOATING-UNDERFLOW-TRAPS
			(FUNCALL
			  (SELECTQ TYPE
			    (:DOUBLE-FLOAT #'DFLOAT-AND-SCALE)
			    (:SINGLE-FLOAT #'FLOAT-AND-SCALE)
			    (OTHERWISE
			     (SELECTQ CL:*READ-DEFAULT-FLOAT-FORMAT*
			       ((CL:DOUBLE-FLOAT CL:LONG-FLOAT) #'DFLOAT-AND-SCALE)
			       (OTHERWISE #'FLOAT-AND-SCALE))))
			  NEGATIVE
			  (+ (ASH *HIGH-PART* 32.)
			     (ASH (LDB (BYTE 1 31.) *LOW-PART*) 31.)	;in case needed in cold load
			     (LDB (BYTE 31. 0) *LOW-PART*))
			  (- *POWER-10*)))))
		(IF (AND (ZEROP RESULT)
			 (NOT (AND (ZEROP *LOW-PART*) (ZEROP *HIGH-PART*))))
		    (throw 'c-sys::conversion-error :underflow)
		    RESULT))
	    (FLOATING-EXPONENT-OVERFLOW
	      (throw 'c-sys::conversion-error :overflow))
	    (ARITHMETIC-ERROR (READ-ERROR NIL "~A" ERROR)))))))
