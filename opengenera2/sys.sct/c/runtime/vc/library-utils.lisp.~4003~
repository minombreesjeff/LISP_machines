;;; -*- Mode: LISP; Package: C-SYSTEM; Lowercase: T; Base: 10; Syntax: Common-lisp -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;
;;;	 Created on Wednesday the twenty-ninth of October, 1986 at 10:27:52 am by DySak on
;;; Nene at SCRC.
;;;
#|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

L I S P   U T I L I T I E S   T O   S U P P O R T   T H E   C   R U N T I M E   L I B R A R Y

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|#


#|==============================================================================================================================
			    L I S P   A N D   C   S T R I N G   H A N D L I N G   U T I L I T I E S
==============================================================================================================================|#
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;
;;;      "two-word-pointer" modifier in function name added in preparation for
;;; one-word-pointer model.
;;;
0(defun copy-c-two-word-pointer-string-into-lisp-string (c-string-object c-string-byte-offset)
  (declare (values lisp-string))
  (when c-string-object
    (do* ((current-lisp-string-size *default-initial-c-string-to-lisp-string-size*)
	  (lisp-string (make-array current-lisp-string-size
				   :element-type 'string-char
				   :fill-pointer 0
				   :adjustable t))
	  (lisp-char-offset 0 (+ lisp-char-offset 1))
	  (c-byte-offset c-string-byte-offset (+ c-byte-offset 1))
	  (c-byte (si:octet-aref-8 c-string-object c-byte-offset)
		  (si:octet-aref-8 c-string-object c-byte-offset)))
	 ((= c-byte 0)
	  (setf (array-leader lisp-string 0) lisp-char-offset)
	  lisp-string)
      (when (>= lisp-char-offset current-lisp-string-size)
	;;
	;;      We may wish to tune the new lisp-string-size at some later date (after
	;; 10/29/86 12:02:47).
	;;
	(setf current-lisp-string-size (+ current-lisp-string-size
					  *default-initial-c-string-to-lisp-string-size*)
	      lisp-string (adjust-array lisp-string current-lisp-string-size)))
      (setf (aref lisp-string lisp-char-offset) (int-char c-byte)))))

1;;; Same as the above function, except that it assumes that a lisp string is provided as the target.
0(defun move-c-string-into-lisp-string (c-string-object c-string-byte-offset lisp-string)
  (declare (values lisp-string))
  (when c-string-object
    (setf (fill-pointer lisp-string) 0)
    (do* ((current-lisp-string-size (zl:array-length lisp-string))
	  (lisp-char-offset 0 (+ lisp-char-offset 1))
	  (c-byte-offset c-string-byte-offset (+ c-byte-offset 1))
	  (c-byte (si:octet-aref-8 c-string-object c-byte-offset)
		  (si:octet-aref-8 c-string-object c-byte-offset)))
	 ((= c-byte 0)
	  (setf (array-leader lisp-string 0) lisp-char-offset)
	  lisp-string)
      (when (>= lisp-char-offset current-lisp-string-size)
	(setf current-lisp-string-size (+ current-lisp-string-size (zl:array-length lisp-string))
	      lisp-string (adjust-array lisp-string current-lisp-string-size)))
      (setf (aref lisp-string lisp-char-offset) (int-char c-byte)))))

#|==============================================================================================================================
				 R U N T I M E   L I B R A R Y   E R R O R   U T I L I T I E S
==============================================================================================================================|#

;;;
;;;      This is currently (10/29/86 12:26:41) a stub.
;;;

(defun signal-c-runtime-internal-error (c-error-indicator)
  (format *error-output*
	  "~&**** C runtime internal error:  ~A"
	  (nth c-error-indicator *c-signal-names*)))

;;;
;;;      This is currently (10/29/86 12:29:08) a stub.
;;;

(defun signal-c-runtime-error (c-error-indicator)
  (format *error-output*
	  "~&**** C runtime error:  ~A"
	  (nth c-error-indicator *c-signal-names*)))
