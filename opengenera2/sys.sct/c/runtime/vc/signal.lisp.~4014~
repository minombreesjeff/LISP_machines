;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: C-SYSTEM; Lowercase: Yes -*-

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; error flavor that represents the condition that
;; is raised when raise is called.
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defflavor c-signal
	((condition-raised 0))
	(error)
  :initable-instance-variables
  :readable-instance-variables
  :writable-instance-variables)

1;; constants from the signal.h file
0(defconstant SIGABRT 1)
(defconstant SIGFPE 2)
(defconstant SIGILL 3)
(defconstant SIGINT 4)
(defconstant SIGSEGV 5)
(defconstant SIGTERM 6)

(defparameter *c-condition-names* (make-array 7 :initial-contents '("NULL" "SIGABRT" "SIGFPE" "SIGILL" "SIGINT" "SIGSEGV"
								    "SIGTERM")))
1;; this is the placeholder for the frame where a raise is called.
0(defvar *c-error-frame* nil)

1;; whether or not in a signal handler to begin with. See c-sys::execute.
0(defvar *in-signal-handler* nil)

1;; the registery of signals.
0(defvar *signal-array* nil)

(defun initialize-signal-array ()
  (if *signal-array*
      *signal-array*
      (setq *signal-array* (make-array 7 :initial-element `(,(sys:fdefinition-location 'c-user::|_sig_dfl|) nil)))))


1;; The default action when a signal is raised.
;; I hate the fact that Case works off of symbols in this
;; situation. To see what the numbers below mean see the
;; defconstants above. Suck raw eggs while you're at it.
0(defun-c-runtime-routine c-user::|_sig_dfl| (condition)
  (initialize-signal-array)
  (select condition
    ((SIGABRT SIGTERM SIGILL) (throw 'abnormal-completion nil))
    ((SIGFPE SIGINT SIGSEGV) (if *c-error-frame* 1;; we assume that *c-error-frame* is usually bound to a frame, case 1 is
0				                 1;; the only one we know where it isn't.
0				 (dbg:debugger-top-level (make-instance 'c-signal :condition-raised condition)
							 *c-error-frame*
							 "a signal was raised" nil)
				 (if (cdr (aref *signal-array* condition))
				     (unwind-protect
					 (dbg:with-erring-frame (fp (cdr (aref *signal-array* condition)))
					   (dbg:debugger-top-level
					     (cdr (aref *signal-array* condition))
					     (dbg:frame-next-open-frame fp) "of an error in the program" nil))
				       (setf (cdr (aref *signal-array* condition)) nil))
				     (break))))
    (t (error "~%Inappropriate signal ~A raised~%" condition))))

(defun-c-runtime-routine c-user::|_sig_err| (condition)
  (ignore condition)
  (error "~%_sig_err has been called~%"))

(defun-c-runtime-routine c-user::|_sig_ign| (condition)
  (ignore condition)
  nil)
1;; required method for reporting signals.
0(defmethod (dbg:report c-signal) (stream)
  (format stream " A ~A signal was raised.~%" (aref *c-condition-names* condition-raised)))
(2 0 (NIL 0) (SAGE:SANS-SERIF-BODY SAGE::TYPEWRITER :NORMAL) "CPTFONT")(defmethod (sys:proceed0 c-signal2 :new-0value)
	   2(&optional (sub (prompt-and-read :number
0					    2"0Value2 to use instead: ")))
0  2"Supply a0n appropriate value to return from handling the condition2."
0  sub)

1;; the utility routine that gets called to handle a signal.
0(defun handle-signal (condition-flavor-instance)
  (initialize-signal-array)
  (let ((*in-signal-handler* t))
    (typecase condition-flavor-instance
      (sys:abort
	(setf (cdr (aref *signal-array* SIGABRT)) condition-flavor-instance)
	(let ((function-to-call (caar (aref *signal-array* SIGABRT))))
	  (setf (car (aref *signal-array* SIGABRT)) (sys:fdefinition-location 'c-user::|_sig_dfl|))
	  (funcall function-to-call SIGABRT)	;; this should never return, just leave the county...
	  (throw 'abnormal-completion nil)))
      (sys:floating-point-exception
	(setf (cdr (aref *signal-array* SIGFPE)) condition-flavor-instance)
	(let ((function-to-call
		(caar (aref *signal-array* SIGFPE))))
	  (setf (car (aref *signal-array* SIGFPE)) (sys:fdefinition-location 'c-user::|_sig_dfl|))
	  (funcall function-to-call SIGFPE)
	  (sys:proceed condition-flavor-instance :new-value
			   (or (funcall function-to-call (c-signal-condition-raised condition-flavor-instance)) 0))))
      (otherwise
	(let ((function-to-call
		(caar (aref *signal-array*
			    (c-signal-condition-raised condition-flavor-instance)))))
	  (setf (car (aref *signal-array* (c-signal-condition-raised condition-flavor-instance)))
		(sys:fdefinition-location 'c-user::|_sig_dfl|))
	  (sys:proceed condition-flavor-instance :new-value
		       (or (funcall function-to-call (c-signal-condition-raised condition-flavor-instance)) 0)))))))
1;; the c-interface to raise a signal.
0(defun-c-runtime-routine c-user::|raise| (signal-to-raise)
  (initialize-signal-array)
  1;; save away the previous frame.
0  (let ((*c-error-frame* (si:frame-previous-frame (si:%stack-frame-pointer))))
    1;; The error state where there is no signal to raise.
0    (unless (and (< signal-to-raise (cl:length *signal-array*)) ( signal-to-raise 0))
      (return-from c-user::|raise| 1))
  
    (if *in-signal-handler*
	(let ((function-to-call (caar (aref *signal-array* signal-to-raise))))
	  (setf (car (aref *signal-array* signal-to-raise)) (sys:fdefinition-location 'c-user::|_sig_dfl|))
	  (funcall function-to-call))
	(if (= signal-to-raise SIGABRT)
	    (signal 'sys:abort)
	    (signal (make-instance 'c-signal :condition-raised signal-to-raise))))
    0))
1;; register a signal. Either return the former value of the signal
;; or _sig_err.
0(defun-c-runtime-routine c-user::|signal| (signal function-locf function-offset)
  (declare (special c-user::|errno|))
  (initialize-signal-array)
  1;; check for a legal signal number.
0  (if (and (< signal (cl:length *signal-array*)) (>= signal 0))
      (let ((old-signal (car (aref *signal-array* signal))))
	(setf (car (aref *signal-array* signal)) function-locf)
	(values old-signal function-offset))
      (progn
	(setf (aref c-user::|errno| 0) 1)
	(values (sys:fdefinition-location 'c-user::|_sig_err|) 0))))

