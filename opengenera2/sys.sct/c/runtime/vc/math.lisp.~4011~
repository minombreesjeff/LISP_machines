;;; -*- Mode: LISP; Package: C-SYSTEM; Syntax: Common-Lisp; Base: 10 -*-

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; constants that are defined in math.h
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defconstant EDOM 1)
(defconstant ERANGE 2)
(defconstant HUGE_VAL 1.7976931348623157d308)
1;; these are the functions that needed to be different from the
;; vanilla lisp routines.
0si::
(defdouble double-fceiling (:double) :double double-fceiling-components)

(defun si::double-fceiling-components cli::(double-high double-low)
  (si:with-double-names cli::((double (double-high double-low)))
    cli::(integer-quotient-double-1-double-arg (ceiling unboxed-double unboxed-double quotient)
					       double)))

(defun c-sys::fabs (double-high double-low)
  (si:with-double-names (double)
    (si:double-abs double)))


(si:defdouble c-sys::double-modf (:double) :double c-sys::double-modf-components)
(defun c-sys::double-modf-components (double-high double-low double-array double-byte-offset)
  (c-sys::validate-pointer double-array double-byte-offset)
  
  (si:with-double-names (double)
    (si:double-let* ((dtrunc (si:double-ftrunc double)))
      (si:double-let* ((dfract (si:double-- double dtrunc)))
	(sys:octet-aset dtrunc-high double-array double-byte-offset)
	(sys:octet-aset dtrunc-low double-array (+ double-byte-offset 4))
	(values dfract-high dfract-low)))))

(defun frexp (num-high num-low int-array int-byte-offset)
  (validate-pointer int-array int-byte-offset)

  (multiple-value-bind (fraction-high fraction-low exponent sign)
      (si:double-decode-float-components num-high num-low)
    sign
    (sys:octet-aset exponent int-array int-byte-offset)
    (values fraction-high fraction-low)))
;;;
;;; NOTES:  Different from the macro-ized routines below because of the different error
;;;	handling required for SYS:FLOATING-EXPONENT-OVERFLOW.  SYS:FLOATING-EXPONENT-OVERFLOW
;;;	is unfortunately what is signaled for pow(10.0, -HUGE_VAL).  The C runtime library is
;;;	expected to treat this as a floating point (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")underflow0 and accordingly return a double
;;;	precision zero.
;;; 
(defun-c-runtime-routine c-user::|pow| (x-high x-low y-high y-low)
   (declare (special c-user::|errno|))
   (si:with-double-names (x y)
      (condition-case (error)
	    (cond
	       ((si:double-= (si:double-ftrunc y) y)
		(let ((integer-y (si:double-to-integer y)))
		   (cond ((and ( integer-y 0)
			       (si:double-= x 0.0d0))
			  ;; x is zero, y is  0
			  (setf (aref c-user::|errno| 0) EDOM)
			  (values 0 0))
			 (t
			  (si:double-expt-integer x integer-y)))))
	       ((plusp x-high)			;x > 0
		(si:double-expt x y))
	       (t
		;; x is negative, y is not an integer
		(setf (aref c-user::|errno| 0) EDOM)
		(values 0 0)))
	 (sys:float-divide-by-zero
	    (setf (aref c-user::|errno| 0) ERANGE)
	    (values 0 0))
	 (sys:floating-exponent-underflow
	    (setf (aref c-user::|errno| 0) ERANGE)
	    (values 0 0))
	 (sys:floating-exponent-overflow
	    (setf (aref c-user::|errno| 0) ERANGE)
	    (si:double-components (if (si:double-< y 0.0d0)
				      0.0d0
				      HUGE_VAL)))
	 (sys:float-invalid-operation
	    (setf (aref c-user::|errno| 0) EDOM)
	    (values 0 0))
	 (error
	    (setf (aref c-user::|errno| 0) EDOM)
	    (values 0 0)))))


(defun c-sys::double-log-components (which-log x-high x-low)
   (declare (values log-high log-low) (special c-user::|errno|) (sys:downward-funarg which-log))
   (si:with-double-names (x)
      (condition-case (error)
	    (multiple-value-bind (return-high return-low)
		  (funcall which-log x-high x-low)
	       (values return-high return-low))
	 (sys:non-positive-log (let ((x-is-zero (si:double-= x 0.0d0)))
				  (setf (aref c-user::|errno| 0) (if x-is-zero ERANGE EDOM))
				  (si:double-components (if x-is-zero (- HUGE_VAL) 0.0d0))))
	 (sys:float-divide-by-zero (setf (aref c-user::|errno| 0) ERANGE)
							      (values 0 0))
	 (sys:floating-exponent-underflow (setf (aref c-user::|errno| 0) ERANGE)
					  (values 0 0))
	 (sys:floating-exponent-overflow (setf (aref c-user::|errno| 0) ERANGE)
					 (si:double-components HUGE_VAL))
	 (sys:float-invalid-operation (setf (aref c-user::|errno| 0) EDOM)
				      (values 0 0))
	 (error (setf (aref c-user::|errno| 0) EDOM)
		(values 0 0)))))

(defun-c-runtime-routine c-user::|log| (x-high x-low)
   (double-log-components #'si:dlog-components x-high x-low))

(defun-c-runtime-routine c-user::|log10| (x-high x-low)
   (double-log-components #'si:dlog10-components x-high x-low))

		 
1;; this routine is brain-damaged because I didn't take the time
;; to get the macro below absolutely correct.
0(defun-c-runtime-routine c-user::|ldexp| (num-high num-low exp)
  (declare (special c-user::|errno|))
  (condition-case (error)
       (multiple-value-bind (return-high return-low)
	   (sys:%double-floating-scale num-high num-low exp)
	 (values return-high return-low))
     (sys:float-divide-by-zero (setf (aref c-user::|errno| 0) ERANGE)
							  (values 0 0))
     (sys:floating-exponent-underflow (setf (aref c-user::|errno| 0) ERANGE)
				      (values 0 0))
     (sys:floating-exponent-overflow (setf (aref c-user::|errno| 0) ERANGE)
				     (si:double-components HUGE_VAL))
     (sys:float-invalid-operation (setf (aref c-user::|errno| 0) EDOM)
				  (values 0 0))
     (error (setf (aref c-user::|errno| 0) EDOM)
	    (values 0 0))))

(defmacro def-c-math-routines (list)
  `(progn 'compile
	  ,@(loop for (i . j) in list
		  collect `(defun-c-runtime-routine
			     ,(first j)
			     ,(if (= (cadr j) 2)
				  '(num-high num-low)
				  '(num1-high num1-low num2-high num2-low))
			     (declare (special c-user::|errno|))
			     (condition-case (error)
				  (,i ,@(if (= (cadr j) 2)
					   '(num-high num-low)
					   '(num1-high num1-low num2-high num2-low)))
				(sys:float-divide-by-zero (setf (aref c-user::|errno| 0) ERANGE)
							  (values 0 0))
				(sys:floating-exponent-underflow (setf (aref c-user::|errno| 0) ERANGE)
							     (values 0 0))
				(sys:floating-exponent-overflow (setf (aref c-user::|errno| 0) ERANGE)
							     (si:double-components HUGE_VAL))
				(sys:float-invalid-operation (setf (aref c-user::|errno| 0) EDOM)
							     (values 0 0))
				(error (setf (aref c-user::|errno| 0) EDOM)
				       (values 0 0)))))))

(def-c-math-routines
  ((si:dacos-components c-user::|(3 0 (NIL 0) (SAGE:SANS-SERIF-BODY SAGE::TYPEWRITER :NORMAL) "CPTFONT")acos0| 2)
    (si:dasin-components c-user::|3asin0| 2)
    (si:datan2-components c-user::|3ata0n| 2)
    (si:datan2-components c-user::|3atan20| 4)
    (si:dcos-components c-user::|3cos0| 2)
    (si:dsin-components c-user::|3sin0| 2)
    (si:dtan-components c-user::|3tan0| 2)
    (si:dcosh-components c-user::|3cosh0| 2)
    (si:dsinh-components c-user::|3sinh0| 2)
    (si:dtanh-components c-user::|3tanh0| 2)
    (si:dexp-components c-user::|3exp0| 2)
    (c-sys::frexp c-user::|3frexp0| 4)
    (c-sys::double-modf-components c-user::|3modf0| 4)
    (si:dsqrt-components c-user::|3sqrt0| 2)
    (si:double-fceiling-components c-user::|3ceil0| 2)
    (c-sys::fabs3 0c-user::|3fabs0| 2)
    (si:double-ffloor-components c-user::|3floor0| 2)
    (si:double-mod-components c-user::|3fmod0| 4)))
