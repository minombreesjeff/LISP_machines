;;; -*- Mode: LISP; Package: C-SYSTEM; Lowercase: T; Base: 10; Syntax: Common-lisp -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;
;;;	 Created on Wednesday the twenty-ninth of October, 1986 at 4:24:27 pm by DySak on Nene
;;; at SCRC.
;;;
#|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   L I S P   P O R T I O N   F O R   C   R U N T I M E   L I B R A R Y   < C T Y P E . H >

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|#

;;;
;;;	 The following are defconstants for a reason.  They are used as masks to determine
;;; whether or not a C D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")char0 (i.e. integer) satisfies a particular character attribute.  The
;;; Lisp compiler is smart enough to merge these masks when more than one is required (see
;;; for example, the routine (:c-routine c-user::isalpha nil)).
;;;
;;;	 Developers are likely to get screwed by trying to just redefine the value of such a
;;; constant and then recompiling its callers.  The right thing to do is to eat up another bit
;;; in the mask and make any fixes which need to be made by changing the callers of the bad
;;; mask to reference the new mask.  Fix the source just before a complete recompile of the
;;; system and compile on a clean machine.
;;;

(defconstant *c-digit-character*			#o01)
(defconstant *c-upper-case-alphabetic-character*	#o02)
(defconstant *c-lower-case-alphabetic-character*	#o04)
(defconstant *c-punctuation-character*			#o10)
(defconstant *c-space-character*			#o20)
(defconstant *c-hexadecimal-digit-character*		#o40)

;;;
;;;	 The following array supplies attributes for the characters in the Symbolics standard
;;; character set so that the following routine coding paradigm can be used.
;;;
;;;
;;;

(defvar *c-character-attributes*
	(make-array 142
		    :element-type 'fixnum
		    :initial-contents `(

 ;; #o000  #o017
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

 ;; #o020  #o037
 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

 ;; #o040  #o047
 ,*c-space-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ;; #o050  #o057
 ,*c-punctuation-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ;; #o060  #o067
 ,(logior *c-digit-character* *c-hexadecimal-digit-character*)
 ,(logior *c-digit-character* *c-hexadecimal-digit-character*)
 ,(logior *c-digit-character* *c-hexadecimal-digit-character*)
 ,(logior *c-digit-character* *c-hexadecimal-digit-character*)
 ,(logior *c-digit-character* *c-hexadecimal-digit-character*)
 ,(logior *c-digit-character* *c-hexadecimal-digit-character*)
 ,(logior *c-digit-character* *c-hexadecimal-digit-character*)
 ,(logior *c-digit-character* *c-hexadecimal-digit-character*)
 ;; #o070  #o077
 ,(logior *c-digit-character* *c-hexadecimal-digit-character*)
 ,(logior *c-digit-character* *c-hexadecimal-digit-character*)
 ,*c-punctuation-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ;; #o100  #o107
 ,*c-punctuation-character*
 ,(logior *c-upper-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,(logior *c-upper-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,(logior *c-upper-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,(logior *c-upper-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,(logior *c-upper-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,(logior *c-upper-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,*c-upper-case-alphabetic-character*
 ;; #o110  #o117
 ,*c-upper-case-alphabetic-character* ,*c-upper-case-alphabetic-character*
 ,*c-upper-case-alphabetic-character* ,*c-upper-case-alphabetic-character*
 ,*c-upper-case-alphabetic-character* ,*c-upper-case-alphabetic-character*
 ,*c-upper-case-alphabetic-character* ,*c-upper-case-alphabetic-character*
 ;; #o120  #o127
 ,*c-upper-case-alphabetic-character* ,*c-upper-case-alphabetic-character*
 ,*c-upper-case-alphabetic-character* ,*c-upper-case-alphabetic-character*
 ,*c-upper-case-alphabetic-character* ,*c-upper-case-alphabetic-character*
 ,*c-upper-case-alphabetic-character* ,*c-upper-case-alphabetic-character*
 ;; #o130  #o137
 ,*c-upper-case-alphabetic-character* ,*c-upper-case-alphabetic-character*
 ,*c-upper-case-alphabetic-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ;; #o140  #o147
 ,*c-punctuation-character*
 ,(logior *c-lower-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,(logior *c-lower-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,(logior *c-lower-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,(logior *c-lower-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,(logior *c-lower-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,(logior *c-lower-case-alphabetic-character* *c-hexadecimal-digit-character*)
 ,*c-lower-case-alphabetic-character*
 ;; #o150  #o157
 ,*c-lower-case-alphabetic-character* ,*c-lower-case-alphabetic-character*
 ,*c-lower-case-alphabetic-character* ,*c-lower-case-alphabetic-character*
 ,*c-lower-case-alphabetic-character* ,*c-lower-case-alphabetic-character*
 ,*c-lower-case-alphabetic-character* ,*c-lower-case-alphabetic-character*
 ;; #o160  #o167
 ,*c-lower-case-alphabetic-character* ,*c-lower-case-alphabetic-character*
 ,*c-lower-case-alphabetic-character* ,*c-lower-case-alphabetic-character*
 ,*c-lower-case-alphabetic-character* ,*c-lower-case-alphabetic-character*
 ,*c-lower-case-alphabetic-character* ,*c-lower-case-alphabetic-character*
 ;; #o170  #o177
 ,*c-lower-case-alphabetic-character* ,*c-lower-case-alphabetic-character*
 ,*c-lower-case-alphabetic-character* ,*c-punctuation-character*
 ,*c-punctuation-character* ,*c-punctuation-character*
 ,*c-punctuation-character* 0

 ;; #o200  #o207
 0 0 0 0 0 0 0 0
 ;; #o210  #o215
 0
 ,*c-space-character*
 ,*c-space-character*
 ,*c-space-character*
 ,*c-space-character*
 ,*c-space-character*)))

;;;
;;;	 Is you an alphabetic or is you a decimal digit?  Surprisingly enough, underscore is
;;; not considered an alphabetic character, at least according to the BSD 4.2 <ctype.h>.
;;; So..., underscore is not considered an alphabetic character by Symbolics C.
;;;

(defun-c-runtime-routine c-user::|isalnum| (c-char)
  (cond
    ((or (< c-char #o060) (> c-char #o172)) 0)			;; < '0' or > 'z'
    (t (logand (logior *c-upper-case-alphabetic-character*
		       *c-lower-case-alphabetic-character*
		       *c-digit-character*)
	       (aref *c-character-attributes* c-char)))))
;;;
;;;	 Is you an alphabetic?  See comment on C-USER::|isalnum| for a
;;; discussion about the underscore character.
;;;

(defun-c-runtime-routine c-user::|isalpha| (c-char)
  (cond
    ((or (< c-char #o101) (> c-char #o172)) 0)			;; < 'A' or > 'z'
    (t (logand (logior *c-upper-case-alphabetic-character*
		       *c-lower-case-alphabetic-character*)
	       (aref *c-character-attributes* c-char)))))

;;;
;;;	 Is you a control character?  Ideally, since we use the Symbolics standard character
;;; set, characters whose subindices are less than #o200 (the Symbolics NULL character) would
;;; in fact be printing characters as implied in Appendix A, Book 5 of the Genera 7.0
;;; documentation set.  It is likely that this will break programs ported from a UNIX
;;; environment to a 36xx.  So..., characters whose subindices are less than #o040 (the space
;;; character) and greater than #o176 (the tilde character) are considered control characters.
;;;

(defun-c-runtime-routine c-user::|iscntrl| (c-char)
  (cond
    ((minusp c-char) 0)
    ((or (< c-char #o040) (> c-char #o176)) 1)			;; < ' ' or > '~'
    (t 0)))

;;;
;;;	 Is you a decimal digit?  The draft ANSI C standard actually has a kind of bonehead
;;; definition for 1isdigit0 is supposed to be.
;;;

(defun-c-runtime-routine c-user::|isdigit| (c-char)
  (cond
    ((or (< c-char #o060) (> c-char #o071)) 0)			;; < '0' or > '9'
    (t 1)))

;;;
;;;      Is you not a control character and is you not the space character?  See comments for
;;; the function C-USER::|iscntrl| for a discussion of control characters.
;;;

(defun-c-runtime-routine c-user::|isgraph| (c-char)
  (cond
    ((or (< c-char #o041) (> c-char #o176)) 0)			;; < '!' or > '~'
    (t 1)))

;;;
;;;	 Is you a lower case alphabetic?
;;;

(defun-c-runtime-routine c-user::|islower| (c-char)
  (cond
    ((or (< c-char #o141) (> c-char #o172)) 0)			;; < 'a' or > 'z'
    (t 1)))

;;;
;;;	 Is you not a control character?  See comments for the function
;;; C-USER::|iscntrl| for a discussion of control characters and printing characters.
;;;

(defun-c-runtime-routine c-user::|isprint| (c-char)
  (cond
    ((or (< c-char #o040) (> c-char #o176)) 0)			;; < ' ' or > '~'
    (t 1)))

;;;
;;;     Is you a punctuation character?  If so, you must be a printing character, you must not
;;; be the space character, you must not be an alphabetic character, and you must not be a
;;; decimal digit.
;;;

(defun-c-runtime-routine c-user::|ispunct| (c-char)
  (cond
    ((or (< c-char #o041) (> c-char #o176)) 0)			;; < '!' or > '~'
    (t (logand *c-punctuation-character*
	       (aref *c-character-attributes* c-char)))))

;;;
;;;      Is you a space character?  Of course if you is '\f' (ASCII form feed, Symbolics
;;; page), '\n' (ASCII new-line, Symbolics return), '\r' (ASCII return, Symbolics line), '\t'
;;; (ASCII horizontal tab, Symbolics tab), or '\v' (ASCII vertical tab, Symbolics refresh) you
;;; is also a space character.
;;;

(defun-c-runtime-routine c-user::|isspace| (c-char)
  (cond
    ((or (< c-char #o040) (> c-char #o215)) 0)			;; < '!' or > '~'
    (t (logand *c-space-character*
	       (aref *c-character-attributes* c-char)))))

;;;
;;;	 Is you an upper case alphabetic?
;;;

(defun-c-runtime-routine c-user::|isupper| (c-char)
  (cond
    ((or (< c-char #o101) (> c-char #o132)) 0)			;; < 'A' or > 'Z'
    (t 1)))

;;;
;;;      Is you a hexadecimal digit?
;;;

(defun-c-runtime-routine c-user::|isxdigit| (c-char)
  (cond
    ((or (< c-char #o060) (> c-char #o146)) 0)			;; < '0' or > 'F'
    (t (logand *c-hexadecimal-digit-character*
	       (aref *c-character-attributes* c-char)))))

;;;
;;;	Is you an octal digit?  Supplied by Symbolics C gratis.  Not requried by the draft
;;; ANSI C standard.
;;;

(defun-c-runtime-routine c-user::|_isodigit| (c-char)
  (cond
    ((or (< c-char #o060) (> c-char #o067)) 0)			;; < '0' or > '7'
    (t 1)))

;;;
;;;     May you be a lower case alphabetic if thou art an upper case alphabetic.
;;;

(defun-c-runtime-routine c-user::|tolower| (c-char)
  (cond
    ((or (< c-char #o101) (> c-char #o132)) c-char)			;; < 'A' or > 'Z'
    (t (+ c-char #o040))))

;;;
;;;     May you be a upper case alphabetic if thou art an lower case alphabetic.
;;;

(defun-c-runtime-routine c-user::|toupper| (c-char)
  (cond
    ((or (< c-char #o141) (> c-char #o172)) c-char)			;; < 'a' or > 'z'
    (t (- c-char #o040))))
