;;; -*- Mode: LISP; Package: C-SYSTEM; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; clock_t is the number of microseconds since boot time (or somthing
;; like that)

;; time_t is a lispobj which is just the universal-time as represented
;; on the system.

;; tm is represented by the structure below.

;; These are the legal directives in the strftime function. 
;; All others are illegal and will throw you into the debugger.
0(defconstant strftime-specifiers "aAbBcdHIjmMpSUwWxXyYZ%")

1;; this is the struct that is used to represent time in the
;; time.h file.
0(defstruct (time-type :array (:conc-name tm-) :size-symbol :alterant)
  (sec 0)					1;; [0, 59]
0  (min 0)					1;; [0, 59]
0  (hour 0)					1;; [0, 23]
0  (mday 0)					1;; [1, 31]
0  (month  0)				1;; [0, 1011]
0  (year 0)					1;; years since 1900
0  (week_day 0)				1;; days since Sunday
0  (year_day 0)				1;; days since January 1 [0, 365]
0  (isdst t)				1;; daylight savings time or not
0  (time_zone time:*timezone*))		1;; the timezone.

0(defconstant strftime-specifier-functions
	     `((#\a . print-abbrev-weekday)
	       (#\A . print-full-weekday)
	       (#\b . print-abbrev-month)
	       (#\B . print-full-month)
	       (#\c . print-date-and-time)
	       (#\d . print-day-of-month)
	       
	       (#\H . print-24-hour)
	       (#\I . print-twelve-hour)
	       (#\j . print-day-of-year)
	       
	       (#\m . print-month)
	       (#\M . print-minute)
	       
	       (#\p . print-am-or-pm)
	       
	       (#\S . print-second)
	       
	       (#\U . print-week-number-Sunday-first)
	       (#\w . print-weekday)
	       (#\W . print-week-number-Monday-first)
	       (#\x . print-date)
	       (#\X . print-time)
	       (#\y . print-year-number)	1;; without the 19
0	       (#\Y . print-year-number-with-century)
	       (#\Z . print-time-zone)))

1;; in each of the functions below print-, time is defined
;; by the defstruct given above.
0(defun print-abbrev-weekday (stream time)
  (send stream :string-out (time::day-of-the-week-string (mod (1- (tm-week_day time)) 7) ':short)))

(defun print-full-weekday (stream time)
  (send stream :string-out (time::day-of-the-week-string (mod (1- (tm-week_day time)) 7) ':long)))	1;; gosh should we support German as weel

0(defun print-abbrev-month (stream time)
  (send stream :string-out (time::month-string (+ 1 (tm-month time)) ':short)))

(defun print-full-month (stream time)
  (send stream :string-out (time::month-string (+ 1 (tm-month time)) ':long)))

(defun print-date-and-time (stream time)
  (strftime-internal-1 stream "%a %b %d %H:%M:%S %Y" time))

(defun print-day-of-month (stream time)
  (send stream :string-out (format nil "~2,'0D" (tm-mday time))))

(defun print-24-hour (stream time)
  (send stream :string-out (format nil "~2,'0D" (tm-hour time))))

(defun print-twelve-hour (stream time)
  (send stream :string-out (format nil "~2,'0D" (mod (tm-hour time) 12))))

(defun print-day-of-year (stream time)
  1;;        Day of year in a time-time is 0 through 365.
0  1;;        When printed using %j, it supposed to be 1 through 366.
0  (send stream :string-out (format nil "~D" (+ (tm-year_day time) 1))))

(defun print-month (stream time)
  (send stream :string-out (format nil "~2,'0D" (+ (tm-month time) 1))))

(defun print-minute (stream time)
  (send stream :string-out (format nil "~2,'0D" (tm-min time))))

(defun print-am-or-pm (stream time)
  (send stream :string-out (if (< (tm-hour time) 12)
			       "AM"
			       "PM")))

(defun print-second (stream time)
  (send stream :string-out (format nil "~2,'0D" (tm-sec time))))

(defun dow-on-jan-one (time zero-is-monday-p)
  (multiple-value-bind (seconds minutes hours day month year day-of-week daylight-savings-p timezone)
	(decode-universal-time (encode-universal-time 0 0 0 1 1 (+ (tm-year time) 1900.)))
     (ignore seconds minutes hours day month year daylight-savings-p timezone)
     1;;
0     1;;        Adjust this for [Mon:Sun] encoded as [0:6] or [Sun:Sat] as [0:6] as required.
0     1;;
0     (mod (+ day-of-week (if zero-is-monday-p 0 1)) 7)))
			    
(defun print-week-number-Sunday-first (stream time)
  (let ((dow-beg-year (dow-on-jan-one time nil)))
    (send stream :string-out (format nil "~D" (floor (+ (tm-year_day time) dow-beg-year) 7)))))

(defun print-weekday (stream time)
  (send stream :string-out (format nil "~D" (tm-week_day time))))

(defun print-week-number-Monday-first (stream time)
  (let ((dow-beg-year (dow-on-jan-one time t)))
    (send stream :string-out (format nil "~D" (floor (+ (tm-year_day time) dow-beg-year) 7)))))

(defun print-date (stream time)
  (strftime-internal-1 stream "%a %b %d, %Y" time))

(defun print-time (stream time)
  (strftime-internal-1 stream "%H:%M:%S" time))

(defun print-year-number (stream time)	1;; without the 19 (stream time)
0  (send stream :string-out (format nil "~D" (tm-year time))))

(defun print-year-number-with-century (stream time)
  (send stream :string-out (format nil "~D" (+ (tm-year time) 1900))))

(defun print-time-zone (stream time)
  (send stream :string-out (format nil "~D" (tm-time_zone time))))

(defun-c-runtime-routine c-user::|strftime| (string string-offset maxsize format format-offset time time-offset)
  (let* ((format (copy-c-two-word-pointer-string-into-lisp-string format format-offset))
	 (temp-c-string (make-array (ceiling maxsize *bytes-per-word*)))
	 (stream (make-instance 'c-string-stream :stream temp-c-string :stream-offset 0)))
    (condition-case (error)
	 (condition-bind-if *enter-debugger-on-error* (((sys:error) 'maybe-go-into-debugger))
	   (strftime-internal stream format time time-offset)
	   1;;
0	   1;;        The terminating null character of the C string
0	   1;;        is never written by 0strftime-internal1.
0	   1;;
0	   (send stream :tyo #\ ))
       (sys:error (return-from c-user::|strftime| (setq *error* 0))))
    (let ((characters-written-to-stream (send stream :stream-offset)))
      (cond
	((> characters-written-to-stream maxsize) 0)
	(t (c-byte-move string string-offset temp-c-string 0
			characters-written-to-stream)
	   1;;
0	   1;;        The returned count should not include the null terminating character
0	   1;;
0	   (- characters-written-to-stream 1))))))

(defun strftime-internal-1 (stream format time)
  (catch 'bad-format
    (loop with limit = (string-length format)
	  with curr-index = 0
	  for next-% = (sys:%string-search-char #\% format curr-index limit)
	  while next-%
	  do (when ( next-% curr-index)
	       1;; print out the intervening characters, if any
0	       (send stream :string-out format curr-index next-%))
	     (check-format-index (incf next-%) limit format)
	     1;; Now process the format directive, and update the 0curr-index
	     (if (char-equal (aref format next-%) #\%)
		 (progn
		   (send stream :tyo #\%)
		   (setq curr-index (1+ next-%)))
		 (setq curr-index (process-strftime-directive
				    stream format
				    time
				    next-% limit)))
	  finally
	    (send stream :string-out format curr-index))))

(defun strftime-internal (stream format time-a time-o)
  (strftime-internal-1 stream format
		       (make-array 10 :displaced-to time-a
				      :displaced-index-offset (rot time-o -2))))

(defun process-strftime-directive (stream format time index limit)
  (let (strftime-specifier)
    (cond
      ((string-member (aref format index) strftime-specifiers)
       (setq strftime-specifier (aref format index))
       (check-format-index index limit format))
      (t
	(zl:ferror "Illegal syntax in format specification:/"~A(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")~A0/""
		 (nsubstring format 0 index) (nsubstring format index limit))))
    
    1;; Dispatch based upon the strftime specifier
0    
    (funcall (cdr (zl:assq strftime-specifier strftime-specifier-functions))
		   stream time)
    (incf index)))

(defun-c-runtime-routine c-user::|clock| ()
  (si:dfloat-components (time:microsecond-time)))

(defun-c-runtime-routine c-user::|time| (time-a time-o)
  (let ((return-a time-a)
	(return-o time-o))
    (multiple-value-bind (time-to-return-1 time-to-return-2)
	(si:dfloat-components (zl:dfloat (time:get-universal-time)))
      (unless return-a
	(setq return-a (make-array 2))
	(setq return-o 0))
      (setf (sys:octet-aref return-a return-o) time-to-return-1)
      (setf (sys:octet-aref return-a (+ return-o 4)) time-to-return-2)
      (values time-to-return-1 time-to-return-2))))

(defun-c-runtime-routine c-user::|mktime| (tm-a tm-o)
  (let* ((time (make-array time-type-size :displaced-to tm-a :displaced-index-offset (rot tm-o -2)))
	 (seconds (tm-sec time))
	 (minutes (tm-min time))
	 (hours (tm-hour time))
	 (day (tm-mday time))
	 (month (+ (tm-month time) 1))
	 (year (+ (tm-year time) 1900)))
    (si:dfloat-components
      (zl:dfloat
	(condition-case (error)
	      (condition-bind-if *enter-debugger-on-error*
				 (((sys:error) 'maybe-go-into-debugger))
		 (let ((encoded-time
			 (encode-universal-time seconds minutes hours day month year)))
		    1;;
0		    1;;        As far as I (DySak) can tell, the standard says you can take in
0		    1;;        garbage values and, having successfully constructed some kind of
		    ;;        time, plug in corrected values to time.
0		    1;;        
0		    (multiple-value-bind (nsec nmin nhrs nday nmon nyr dow dstp zone)
			  (decode-universal-time encoded-time)
		       (alter-time-type time
					sec  nsec
					min  nmin
					hour nhrs
					mday nday
					month (1- nmon)
					year  (- nyr 1900)
					week_day (mod (+ dow 1) 7)
					isdst (if dstp 1 0)
					time_zone zone)
		       (set-year_day time encoded-time)
		       encoded-time)))
	   (sys:fatal-error -1))))))

(defun-c-runtime-routine c-user::|difftime| (tm1-high tm1-low tm2-high tm2-low)
  (si:with-double-names (tm1 tm2)
    (si:double-- tm1 tm2)))

(defun-c-runtime-routine c-user::|asctime| (tm-a tm-o)
  (let* ((return-array (make-array 7))		1;; the standard says that it takes 26 chars
0	 (stream (make-instance 'c-string-stream :stream return-array :stream-offset 0)))
    ;;
    ;;        The new line character in the format string is not an accident.
    ;;        It really is required by the (Draft) ANSI standard.
    ;;
    (strftime-internal stream "%a %b %d %H:%M:%S %Y
" tm-a tm-o)
    (values return-array 0)))

(defun-c-runtime-routine c-user::|ctime| (u-a u-o)
  (multiple-value-call #'c-user::|asctime| (c-user::|localtime| u-a u-o)))

(defun convert-c-time-format (seconds minutes hour day month year
			      day-of-the-week daylight-savings-p time_zone)
  (values (make-time-type :sec seconds
			  :min minutes
			  :hour hour
			  :mday day
			  1;;
0			  1;;        Transform [1-12] months to [0-11] months.
0			  1;;
0			  :month (- month 1)
			  :year (- year 1900)
			  1;;
0			  1;;        Transform [0-6] Monday based to [0-6] Sunday based.
0			  1;;
0			  :week_day (mod (+ day-of-the-week 1) 7)
			  :isdst (if daylight-savings-p 1 0)
			  :time_zone time_zone)
	  0))

(defun set-year_day (time-type universal-time)
  1;;
0  1;;        The god awful contortion required to compute the desired year_day.
0  1;;        Basically the difference between the universal times yields some
0  1;;        number of seconds since midnite of January 1 of the year in question.
0  1;;        Dividing by the number of seconds in a day should give the desired
0  1;;        day of the year since January 1 of the year in question.
0  1;;
0  (setf (tm-year_day time-type)
	(floor (- universal-time
		  (encode-universal-time
		    0 0 0 1 1 (+ (tm-year time-type) 1900)))
	       86400))
  (values time-type 0))

(defun-c-runtime-routine c-user::|gmtime| (tm-a tm-o)
  (let* ((tm-high (si:octet-aref tm-a tm-o))
	(tm-low (si:octet-aref tm-a (+ tm-o 4)))
	(universal-time 
	  (si:with-double-names (tm)
	    (si:double-to-integer tm))))
    (set-year_day
      (multiple-value-call #'convert-c-time-format (decode-universal-time
						     universal-time 0))
      universal-time)))

(defun-c-runtime-routine c-user::|localtime| (tm-a tm-o)
  (let* ((tm-high (si:octet-aref tm-a tm-o))
	(tm-low (si:octet-aref tm-a (+ tm-o 4)))
	(universal-time 
	  (si:with-double-names (tm)
	    (si:double-to-integer tm))))
    (set-year_day
      (multiple-value-call #'convert-c-time-format (decode-universal-time
						     universal-time))
      universal-time)))

