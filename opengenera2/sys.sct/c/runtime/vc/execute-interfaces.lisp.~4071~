;;; -*- Mode: LISP; Package: c-system; Lowercase: T; Base: 10 -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;
;;; Created on Sunday the seventh of June, 1987 at 4:16:59 pm by DySak on Nene at SCRC
;;;

;;;
;;;	This file contains routines associated with the execution of C functions created by
;;; compilation using the C compiler.
;;;
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;
;;; PURPOSE:0	1Holds a list of all the symbols corresponding to the globally visible (non file only scope) compiled C functions.
;;;
0(defvar *c-external-function-names*)
1;;;
;;; PURPOSE:0	1The initial size and increment of the execution time stack.
;;; NOTES:0	1I (DySak) have not idea what is magic about 8200.  This was copied from 0*pascal-stack-increment-size*1 with a
;;;0	1name change to be more explicit about what it actually encompasses.
;;;
0(defparameter *c-execution-time-stack-initial-and-increment-size* 8200.)
1;;;
;;;0	1These define some constant arrays useful during the initialization process
;;;
0(defparameter *array-of-fifty-zeroes* (make-array 50 :initial-element 0))
(defparameter *array-of-fifty-floating-point-zeroes* (make-array 50 :initial-element 0.0))
(defparameter *array-of-fifty-nulls* (make-array 100 :initial-contents
						 '(nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0
						   nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0
						   nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0
						   nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0
						   nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0 nil 0)))
1;;;
;;; PURPOSE:0	1Perform the initialization of any of the arrays generated for global data just before running the specified C
;;;0	1function.
;;;
0(defun initialize-c-globals (arrays initializations)
  (declare (values))
  (labels ((create-array-copy (array)
	     (declare (sys:downward-function))
	     (let* ((array-size (array-total-size array))
		    (copied-array (make-array array-size)))
	       (c-word-move copied-array 0 array 0 array-size)
	       copied-array))
	   (do-value (array offset initialization)
	     (declare (sys:downward-function))
	     (cond
	       ((consp initialization)
		(case (first initialization)
		  (:values    (setq offset (do-list array offset (rest initialization))))
		  (:block     (setq offset (do-block array offset (second initialization) (third initialization))))
		  (:rep-zero  (setq offset (do-rep array offset (second initialization) *array-of-fifty-zeroes* 1)))
		  (:rep-fzero (setq offset
				    (do-rep array offset (second initialization) *array-of-fifty-floating-point-zeroes* 1)))
		  (:rep-null  (setq offset (do-rep array offset (second initialization) *array-of-fifty-nulls* 2)))
		  (sys:fdefinition-location (setf (aref array offset) (eval initialization))
					    (incf offset))
		  (otherwise  (error "An unrecognized C global data initializaton construct was encountered.~@
				      ~A~@
				      Please report this error to Symbolics, Inc." initialization))))
	       ((and initialization (symbolp initialization))	1; address of data
0		(setf (aref array offset) (symbol-value initialization))
		(incf offset))
	       ((arrayp initialization)
		(setf (aref array offset) (create-array-copy initialization))
		(incf offset))
	       (t (setf (aref array offset) initialization)
		  (incf offset)))
	     offset)
	   1;;
0	   (do-list (array offset initializations)
	     (declare (sys:downward-function))
	     (loop for initialization in initializations
		   do (setq offset (do-value array offset initialization)))
	     offset)
	   1;;
0	   (do-block (array offset block-array relocation-offsets)
	     (declare (sys:downward-function))
	     (let ((number-of-words-to-move (array-total-size block-array)))
	       (c-word-move array offset block-array 0 number-of-words-to-move)
	       (loop for relocation-offset in relocation-offsets
		     do (let* ((relocation-index (+ offset relocation-offset))
			       (relocation-object (aref array relocation-index)))
			  (cond
			    ((symbolp relocation-object)
			     (setf (aref array relocation-index) (symbol-value relocation-object)))
			    ((arrayp relocation-object)
			     (setf (aref array relocation-index) (create-array-copy relocation-object)))
			    (t (error "Non-relocatable object found during global initialization")))))
	       (+ number-of-words-to-move offset)))
	   1;;
0	   (do-rep (array offset count block-array multiplier)
	     (declare (sys:downward-function))
	     (loop with block-array-size = (array-total-size block-array) and number-of-words = (* count multiplier)
		   with counter = number-of-words
		   while (> counter 0)
		   do (let ((move-size (min number-of-words block-array-size)))
			(c-word-move array offset block-array 0 move-size)
			(incf offset move-size)
			(decf counter move-size))
		   finally (return offset))))
  (loop for array in arrays
	for initialization in initializations
	do (do-value array 0 initialization))
  (values)))
1;;;
0(defun collect-names-and-array-sizes-and-initializations-and-descriptors (pathnames)
  (declare (values descriptors names array-sizes initializations))	1; Yow!
0  (let ((names nil)
	(array-sizes nil)
	(initializations nil)
	(to-be-processed-descriptors nil)
	(processed-descriptors nil)
	(descriptor-being-processed nil)
	(missing-object-list nil))
    (flet (1;;
0	   1;;        Utility to sanity check a descriptor and then place it on the list
0	   1;;        of descriptors to be processed when it passes muster.
0	   1;;
0	   (process-external-descriptor (descriptor object-kind object-identifying-key)
	     (declare (values) (sys:downward-function))
	     (when (null descriptor)
	       (error "Unable to find execution time information for C ~A ~A." object-kind object-identifying-key))
	     (when (and (not (member descriptor processed-descriptors)) (not (member descriptor to-be-processed-descriptors)))
	       (push descriptor to-be-processed-descriptors))))
      1;;
      ;;        This loop is the heart of the link process.
0      1;;
0      (loop for pathname in pathnames do
	1;;
	;;        Prime the loop which walks the runtime descriptors.
0	1;;        No check of the return value of (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")find-routine-runtime-info0 1need be here since with only the parameter
0	1;;        0function-spec1, 2find-routine-runtime-info1 will 2ferror1 if the desired information is not present.
0	1;;
0	(process-external-descriptor (gethash pathname *c-debug-info-descriptor-table*) "file" pathname)
	(loop until (null to-be-processed-descriptors)
	      do (setq descriptor-being-processed (pop to-be-processed-descriptors))
		 (when (null descriptor-being-processed)
		   (error "Unable to find execution time information for C function ~A." pathname))
1		 ;;
		 ;;        Collect the special names of static storage duration data, the size of the arrays to be allocated
0		 1;;0	1 for the static storage duration data, and their initializations.
0		 1;;
0		 (loop for (name array-size init-list) in
			   (static-objects-names-sizes-and-initializations descriptor-being-processed)
		       do (push name names)
			  (push array-size array-sizes)
			  (push init-list initializations))
1		 ;;
		 ;;        Collect the descriptors to be processed for any externally referenced functions.
0		 1;;
0		 (loop for external-function in (referenced-external-functions descriptor-being-processed)
		       as  runtime-info = (find-routine-runtime-info external-function)
		       when (not (null runtime-info))
			 do (let* ((external-function-pathname (descriptor-pathname runtime-info))
				   (external-function-descriptor
				     (gethash external-function-pathname *c-debug-info-descriptor-table*)))
			      (process-external-descriptor external-function-descriptor
							   "function"
							   external-function)))
		 1;;
		 ;;        Collect the descriptors to be processed for any externally referenced objects.  Note that the list of
		 ;;        descriptors for the functions collected is not sufficient in the case of C as it is for Pascal since
		 ;;        one can have modules (i.e. files) in C which define only data and no functions.
0		 1;;
0		 (loop for external-object in (referenced-external-objects descriptor-being-processed)
		       as  external-object-pathname = (get external-object ':c-descriptor-pathname)
		       if (null external-object-pathname)
			 do (unless (member external-object missing-object-list)
			      (format *error-output*
				      "~&Unable to find execution time information for C object ~A." external-object)
			      (push external-object missing-object-list))
		       else
			 do (process-external-descriptor (gethash external-object-pathname *c-debug-info-descriptor-table*)
							 "object"
							 external-object))
		 (push descriptor-being-processed processed-descriptors)))
      (values processed-descriptors names array-sizes initializations))))
1;;; The list of instructions for which special action is taken when they provoke an
;;; error.

0(defconstant octet-aref-instructions `sys:(octet-aref octet-aref-16 octet-aref-8))
(defconstant octet-aset-instructions `sys:(octet-aset octet-aset-16 octet-aset-8))
(defparameter octet-instructions (append octet-aref-instructions octet-aset-instructions))

1;;; Part of the black art for entering the debugger with the right stack trace
0(eval-when (load)
  (loop for ins in octet-instructions
	do (setf (gethash ins dbg:*uninteresting-functions*) ins)))
;;; Temporary until we change the microcode to use ILLEGAL-SUBSCRIPT.
(defun (:property dbg:bad-byte-index dbg:decode) (&rest args)
  (apply (get 'dbg:illegal-subscript 'dbg:decode) args))

1;;; The following flavors are used by to report errors detected when using the C octet
;;; instructions
0(defflavor octet-arg-type-error
	    ((instruction nil)
	     (arguments nil))
  (dbg:error)
  (:initable-instance-variables))

(defflavor octet-subscript-error
	    ((instruction nil)
	     (arguments nil))
  (dbg:error)
  (:initable-instance-variables))

(defflavor octet-result-type-error
	((instruction nil)
	 (arguments nil))
	(dbg:error)
  (:initable-instance-variables))
1;;;
;;;0	1LDB's of words which are not numbers in C land are transformed into this error.
;;;
0(defflavor c-ldb-internal-error
	((instruction nil)
	 (arguments nil))
	(dbg:error)
  (:initable-instance-variables))
1;;;
;;; Check the alignment for the octet instructions. They may show up as subscript errors
;;; because the offset is rotated to compute the word offset.
0(defun aligned-offset-p (instruction offset)
  (case instruction
    ((si:octet-aref si:octet-aset) (zerop (ldb (byte 2 0) offset)))

    ((si:octet-aref-16 si:octet-aset-16) (zerop (ldb (byte 1 0) offset)))

    (t 1;; Byte aref is always aligned
0      t)))    
(defmethod (dbg:report octet-subscript-error)(stream)
  (let ((arguments arguments))
    (when (zl:memq instruction octet-aset-instructions)
      1;; Ignore the aset value
0      (pop arguments))
    (let* ((a (first arguments))
	   (o (second  arguments)))
      (format stream "~A"
	      (string-append
		(if (aligned-offset-p instruction o)
		    (format nil "An attempt was made to reference(~A:~A) an object ~
                 outside its allocated extent (~A bytes)" a o (* (zl:array-length a) 4))
		    (format nil
			    "The pointer was not aligned (offset = ~A) for the ~A bit value being accessed"
			    o (case instruction
				((si:octet-aref si:octet-aset) 32)
				((si:octet-aref-16 si:octet-aset-16) 16))))		      
		(if (zl:memq instruction octet-aset-instructions)
		    ", during an assignment." ""))))))

1;;; Determine the reason for the failure; the following cases are currently
;;; recognized:
;;;     1) Dereferencing a NULL pointer (doublet nil, 0)
;;;     2) An undefined pointer         (nil, nil)
;;;0     13) An incremented/decremented pointer (or bad array subscript computation)
;;;        that has exceeded the bounds of the object
;;;        the first argument is a lisp array, the second argument is the out of bounds
;;;        index
;;;     4) A nil index value: attempt to index an array with an uninitialized subscript
;;;        value, when the array is the AR, it must an array (assuming no CG bugs).
0(defmethod (dbg:report octet-arg-type-error)(stream)
  (format
    stream "~A"
    (string-append
      (let* ((arguments arguments)  1; Do not modify the arguments iv
0	     (aset-value (when (zl:memq instruction octet-aset-instructions) (pop arguments)))
	     (a (first arguments))
	     (o (second arguments)))

	(cond
	  ((zl:typep a :array)
	   (cond
	      ((not (zl:memq (array-element-type a) `cl-user::(fixnum t)))
	       "The array supplied to the octet instruction was not an art-q or fixnum array")
	      ((zl:fixnump o)
	       (if (zl:memq instruction octet-aset-instructions)
		   (if (and aset-value (eq aset-value 'undefined))
		       (format
			 nil "An attempt was made to use an illegal value (~A) on the right hand side"
			 aset-value)
		       "An attempt was made to use an uninitialized value")
		   1;;
		   ;;        An octet aref.  The assumption made here is that everything is cool as far as the subscript bound
0		   1;;        was concerned.  Otherwise, we would be in the octet-subscript-error report method.  Therefore it
0		   1;;        was the word extracted by the octet aref trap routine which did not contain an integer to which an
0		   1;;        2ldb1 could be applied.
0		   1;;
0		   (string-append
		      "An attempt was made to access "
		      (cond
			((eq instruction 'sys:octet-aref-8) "an 8 bit integer ")
			((eq instruction 'sys:octet-aref-16) "a 16 bit integer ")
			(t "an integer value "))
		      "from a word which was not an integer.")))
	      ((not (null o))
	       (format nil "An attempt was made to use a bad index value ~A" o))
	      (t "An attempt was made to use an uninitialized value as an array index")))

	  ((and (null a) (eq o 0))
	   "An attempt was made to dereference a NULL pointer")

	  ((or (and (null a) (null o))
	       (and (eq a cts:*undefined-string*) (eq o cts:*undefined-string*)))
	   "An attempt was made to dereference an uninitialized pointer")

	  (t (format nil "An attempt was made to dereference an illegal pointer value (~A:~A)"
		     a o))))
      
      (if (zl:memq instruction octet-aset-instructions) ", during an assignment." ""))))
1;;;
0(defmethod (dbg:report octet-result-type-error) (stream)
   (format stream "~A"
	   (string-append
	      "An attempt was made to access "
	      (cond
		 ((eq instruction 'sys:octet-aref-8) "an 8 bit integer ")
		 ((eq instruction 'sys:octet-aref-16) "a 16 bit integer ")
		 (t "an integer value "))
	      "from a word which was not an integer.")))
1;;;
0(defmethod (dbg:report c-ldb-internal-error) (stream)
   (format stream "~A"
	   (string-append
	      "An attempt was made to access "
	      1;;
0	      1;;        The second argument is the byte selector, but it's not acceptable as an argument to the byte-size
0	      1;;        function.  We must do our own decoding of the 10 bit byte spec (see 2sys:ldb-escape1) in order to
0	      1;;        compute the size of the integer field extract.
0	      1;;
0	      (let ((byte-size (1+ (ldb (byte 5 5) (second arguments)))))
		 (cond
		    ((= byte-size 8) "an 8 bit integer ")
		    ((= byte-size 16) "a 16 bit integer ")
		    (t "an integer value ")))
	      "from a word which was not an integer.")))
1;;; Find the frame that contains the erring octet-instruction. Note that this function
;;; is only invoked when the error is detected in the octet escape functions, and hence
;;; should always succeed in finding the calling frame.
0#+3600
(defun find-octet-erring-frame(ifp)
  (loop for fp = (dbg:frame-previous-frame ifp) then (dbg:frame-previous-frame fp)
	 while fp
	 as fun = (dbg:frame-real-function fp)
	 as inst = (l-lisp-compiler:default-disassemble-function
			 ':get-instruction (si:compiled-function-cca fun)
		     (1- (or (dbg:frame-relative-exit-pc fp) 0)))
	 as name =  l-lisp-compiler:(aref *instruction-name*
					  (get-universal-opcode c-sys::inst))
	 when (member name octet-instructions)
	   return fp))
1;;; This is the handler that is invoked when the condition handler detects a type violation
;;; of the arguments to the octet instructions.

;;; Note that the method of entering the debugger is rather convoluted. In particular, the
;;; the frame that is passed into 0dbg:debugger-top-level1 is the one preceding the one that 
;;; actually provoked the error. This is necessary if the debugger is not to be confused.
;;; The preceding frame is used to determine the pc for the current frame, and the pc in turn
;;; is used to determine the lisp variables(v0..vn) that are visible in that frame. 
;;; Thus the strategy used here is to enter the debugger one frame earlier and make the 
;;; octet function (for the simulated instruction case) frame be uninteresting.
;;; The above strategy is clearly a workaround until we can get enough SWM time to figure 
;;; out what we are doing wrong, or whether this is just a contract for the debugger.

0#+3600
(defun check-for-octet (error)
  (dbg:with-erring-frame (fp error)
    (let* ((erring-fun-and-args (dbg:get-frame-function-and-args fp))
	   (fname (first erring-fun-and-args))
	   (octet-fp nil)
	   (condition-type (typecase error
			      (dbg:wrong-type-argument-trap 'octet-arg-type-error)
			      (dbg:wrong-internal-type-trap 'octet-result-type-error)
			      (otherwise 'octet-subscript-error))))
      1;; Determine whether we have an octet escape function.
0      (if (and (member fname octet-instructions) (setq octet-fp (find-octet-erring-frame fp)))
	  1;; yes we have one, find the procedure that called it
0	  (dbg:debugger-top-level
	    (make-condition condition-type :instruction fname
			    :arguments (cdr erring-fun-and-args))
	    (dbg:frame-next-open-frame octet-fp) "of an error in the program" nil)
	  1;; A ucode trap, determine whether it was an octet instruction
0	  (let* ((inst (dbg:instruction-function
			  (dbg:pc-instruction (send error :macro-pc)))))
	    (when (or (member inst octet-instructions)
		      (and (eq inst 'sys:ldb-internal)
			   (eq (second (si:debugging-info-user-entry
					 (dbg:frame-function fp)
					 'si:definition-type))
			       ':c-function)
			   (cl:setq condition-type 'c-ldb-internal-error)))
	      (dbg:debugger-top-level
		(make-condition condition-type :instruction inst
				:arguments (send-if-handles error :argument-values))
		(dbg:frame-next-open-frame fp)
		"of an error in the program" nil)))))))

#+IMACH
(defun check-for-octet (error)
   (dbg:with-erring-frame (fp error)
      (let* ((erring-fun-and-args (dbg:get-frame-function-and-args fp))
	     (fname (first erring-fun-and-args))
	     (condition-type (typecase error
				(dbg:wrong-type-argument-trap 'octet-arg-type-error)
				(otherwise 'octet-subscript-error))))
	 ;;
	 ;;        Determine whether we have an octet escape function.
	 ;;
	 (if (and (member fname octet-instructions))
	     (dbg:debugger-top-level
		(make-condition condition-type
				:instruction fname
				:arguments   (cdr erring-fun-and-args))
		(dbg:frame-next-open-frame fp)
		"of an error in the program"
		nil)
	     ;;
	     ;;        Otherwise see if the erring instruction might be an ldb in C code.
	     ;;
	     (let* ((the-pc (send error :macro-pc))
		    (inst (dbg:pc-info the-pc)))
		(when (and (eq inst 'ldb)
			   (eq (second (si:debugging-info-user-entry
					 (dbg:frame-function fp)
					 'si:definition-type))
			       ':c-function)
			   (cl:setq condition-type 'c-ldb-internal-error))
		   (dbg:debugger-top-level
		      (make-condition condition-type
				      :instruction inst
				      ;;
				      ;;        The let below simulates the information
				      ;;        which would have been returned by the
				      ;;        :argument-values method on the 36xx.
				      ;;
				      :arguments (let ((instruction
							 (dbg:packed-instruction-from-pc
							   the-pc)))
						   (list nil
							 (ldb sys:%%packed-instruction-10-bit-operand
							      instruction))))
		      (dbg:frame-next-open-frame fp)
		      "of an error in the program"
		      nil)))))))
1;;;
;;; PURPOSE:0	1Support reporting of calls to undefined C 2static1 functions.
;;;
0(defflavor undefined-static-c-function
	()
	(dbg:undefined-function))

(defmethod (dbg:report undefined-static-c-function) (stream)
   (format stream "The static C function ~A from file ~A is undefined."
	   (second sys:function-name)
	   (send (third sys:function-name) :string-for-printing)))
1;;;
;;; PURPOSE:0	1Try to handle calls to static functions in a "graceful" way.
;;; ASSUMES:0	error1 is an instance of 0dbg:bad-data-type-in-memory-trap1.
;;;
0(defun check-for-undefined-static-function (error)
   (dbg:with-erring-frame (fp error)
      (let (function-name)
	 (when (and (eq (send error :data-type) sys:dtp-null)
		    (typep (setq function-name (sys:%find-structure-header (send error :address)))
			   'c-sys::c-function-structure))
	    (dbg:debugger-top-level
	       (make-condition 'undefined-static-c-function
			       :function-name (c-sys::c-function-structure-function-spec function-name))
	       (dbg:frame-next-open-frame fp)
	       "of an error in the program" nil)))))
1;;;
;;;0	1A hashtable whose key is a C function-spec and whose values are 0names-and-arrays-and-initializations-structure1s.
;;; These are the results of the link command.
;;;
0(defvar *names-and-arrays-and-initializations-hashtable* (make-hash-table :test 'equal :size 50))
1;;;
;;;0	1A hash tick to be associated with each 0names-and-arrays-and-initializations-structure1.  The idea of the tick is as
;;; follows.  Each operation on an entry in the 0*names-and-arrays-and-initializations-hashtable*1 causes the tick to be
;;; and associated with the 0names-and-arrays-and-initializations-structure1.  A tick of 0 means the structure is invalid.
;;; Upon completion of execution, normal or otherwise of a C program, at attempt is made to return the allocated arrays to
;;; the structure in the hash table.  If the tick associated with the structure no longer matches, then a change was made and
;;; the arrays are not returned.  The idea of this hair is to take care of the following situation.  Two copies of a the same
;;; C program are executing, and both land in the debugger.  The user performs an incremental to the program to fix the problem
;;; causing the file tick in the structure to be set to 0.  Aborting one of the running programs, the user reexecutes the
;;; program.  The file tick of 0 causes the structure to be recomputed and associated with a new tick.  When aborting the
;;; second executing C program, the invalidated arrays are never returned to the hash table for reuse since the execution
;;; tick obtained at program start up time and the execution tick in the structure at program termination time are different.
;;; Even though 0 represents an invalidated entry value, we can start the tick at 0 since it is always incremented before
;;; saving into the structure.
;;;
0(defvar *names-and-arrays-and-initializations-tick* 0)
1;;;
;;; The relevant information for a C program which has been linked0 1by a call to collect-names-and-arrays-and-initializations.
;;;
0(defstruct (names-and-arrays-and-initializations-structure :alterant)
  names array-sizes inits descriptors tick arrays)
1;;;
;;; PURPOSE:0	1The C function which "performs the work" for the Make C Main Program command.
;;;
0(defun link (function-spec)
  (cond ((fdefinedp function-spec)
	 (multiple-value-bind (descriptors names array-sizes initializations)
	     (collect-names-and-array-sizes-and-initializations-and-descriptors
	       (ncons (descriptor-pathname (find-routine-runtime-info function-spec t))))
	   (flet ((modify-table-function (key value found)
		    (declare (sys:downward-function))
		    (ignore key)
		    (cond
		      (found (alter-names-and-arrays-and-initializations-structure value
			       names names
			       array-sizes array-sizes
			       inits initializations
			       descriptors descriptors
			       tick (incf *names-and-arrays-and-initializations-tick*)
			       arrays nil)
			     value)
		      (t (make-names-and-arrays-and-initializations-structure
			   :names names
			   :array-sizes array-sizes
			   :inits initializations
			   :descriptors descriptors
			   :tick (incf *names-and-arrays-and-initializations-tick*)
			   :arrays nil)))))
	     (modify-hash *names-and-arrays-and-initializations-hashtable* function-spec #'modify-table-function))))
	(t (error "The C function ~A is not defined" function-spec))))
1;;;
;;; PURPOSE:0	1A function to invalidate an entry in the 0*names-and-arrays-and-initializations-hashtable*1 cache.
;;;
0(defun invalidate-names-and-arrays-and-initializations-cache (global-descriptor)
  (declare (values))
  (flet ((modify-table-function (key value)
	   (declare (sys:downward-function))
	   (ignore key)
	   (when (and (not (null value))
		      (member global-descriptor (names-and-arrays-and-initializations-structure-descriptors value)))
	     (alter-names-and-arrays-and-initializations-structure value
	       names nil
	       array-sizes nil
	       inits nil
	       descriptors nil
	       tick 0
	       arrays nil))))
    (when (not (null global-descriptor))
      (maphash #'modify-table-function *names-and-arrays-and-initializations-hashtable*))))
1;;;
;;; PURPOSE:0	1Return a list of arrays to the cache of such arrays, if possible.
;;; NOTES:0	1See the comments on 0*names-and-arrays-and-initializations-tick* 1above for the rationale for the tick checking
;;;0	1used to determine if the arrays should be returned to the cache.
;;;
0(defun return-arrays-to-execution-cache (function-spec arrays link-tick)
  (flet ((modify-table-function (key value found)
	   (declare (sys:downward-function))
	   (ignore key found)
	   (when (and (not (null value)) (= (names-and-arrays-and-initializations-structure-tick value) link-tick))
	     (setf (names-and-arrays-and-initializations-structure-arrays value)
		   (cons arrays (names-and-arrays-and-initializations-structure-arrays value))))
	   value))
    (modify-hash *names-and-arrays-and-initializations-hashtable* function-spec #'modify-table-function)))
1;;;
;;; PURPOSE:0	1Find a copy of the data for executing a program in the cache, if it is there.
;;;
0(defun find-names-and-arrays-and-initializations (function-spec)
  (declare (values names arrays initializations link-tick))
  (let ((execution-arrays nil)
	(link-tick nil)
	(array-sizes nil)
	(names nil)
	(initializations nil)
	(entry (gethash function-spec *names-and-arrays-and-initializations-hashtable*)))
    1;;
0    1;;        See the comments on 0*names-and-arrays-and-initializations-tick* 1above for the rationale for this do.  Note
0    1;;        that we count on a number getting us out of the do or the 0nil1 "value" of the failed 0when1 test to continue.
0    1;;
0    (do ()
	((without-interrupts
	   (when (and (not (null entry)) ( (names-and-arrays-and-initializations-structure-tick entry) 0))
	     (let ((routine-descriptor
		     (gethash (descriptor-pathname (find-routine-runtime-info function-spec t))
			      *c-debug-info-descriptor-table*)))
	        (cond
		   ((member routine-descriptor (names-and-arrays-and-initializations-structure-descriptors entry))
		    (setq execution-arrays (first (names-and-arrays-and-initializations-structure-arrays entry)))
		    (setf (names-and-arrays-and-initializations-structure-arrays entry)
			  (rest (names-and-arrays-and-initializations-structure-arrays entry)))
		    (setq array-sizes (names-and-arrays-and-initializations-structure-array-sizes entry))
		    (setq names (names-and-arrays-and-initializations-structure-names entry))
		    (setq initializations (names-and-arrays-and-initializations-structure-inits entry))
		    (setq link-tick (names-and-arrays-and-initializations-structure-tick entry)))
		   1;;
0		   1;;        The cache info is no good when the runtime info descriptor is not on the list of descriptors
0		   1;;        in the cache entry.  This could happen, e.g. if one used the physical pathname in one case
0		   1;;        and a logical pathname in another case where its not possible to get an appropriate back
0		   1;;        translation of the function.
0		   1;;
0		   (t nil))))))
      (link function-spec)			1; Ample time here for the user to screw her/imself.
0      (setq entry (gethash function-spec *names-and-arrays-and-initializations-hashtable*)))
    1;;
0    1;;        Now walk through the array-sizes, zeroing out any arrays being reused.
0    1;;
0    (labels ((zero-array (size array)			1; Utility to zero arrays.
0	       (declare (values array) (sys:downward-function))
	       (case size
		 (0 nil)
		 (1 (setf (aref array 0) 0))
		 (2 (setf (aref array 0) 0) (setf (aref array 1) 0))
		 (otherwise
		    (do ((zero-target-index 0 (+ zero-target-index 50))
			 (number-of-zeroes size (- number-of-zeroes 50)))
			((> number-of-zeroes 0))
		      (#+3600 sys:%block-gc-copy #+IMACH si:%block-scavenge-copy
			 (locf (aref *array-of-fifty-zeroes* 0))
			 (locf (aref array zero-target-index))
			 (min number-of-zeroes 50)))))
	       array)
	     (check-array (size array)			1; Utility to sanity check the array.
0	       (declare (values array) (sys:downward-function))
	       (cond ((not (null array))
		      (cond
			(( size (array-total-size array))
			 (format *error-output* "Unable to reuse previous global data allocation for execution.")
			 (make-array size :initial-element 0))
			(t (zero-array size array))))
		     (t (make-array size :initial-element 0)))))
      (loop for array-size in array-sizes
	    collect (check-array array-size (pop execution-arrays)) into return-arrays
	    finally (return (values names return-arrays initializations link-tick))))))
1;;;
;;;0	1A macro to serve as a repository of all the special variables defined in the runtime library which should be bound for
;;; the execution of a C program.
;;;
0(defmacro with-runtime-library-execution-bindings (&body body)
   `(let ((c-user::|_stdin|   (make-standard-c-file (or input *standard-input*)))
	  (c-user::|_stdout|  (make-standard-c-file (or output *standard-output*)))
	  (c-user::|_stderr|  (make-standard-c-file (or error-output *error-output*)))
	  (*tmp-name-counter* 0)
	  (*random-array*     nil)
	  (*fgetc-buffer* nil)
	  (*signal-array* nil)
	  (*no-echo* nil)
	  (*strtok-string*    (ncons nil))
	  1;; Allocate a stack array suitable for use in the with-lexer form so that it is consed just once
0	  1;; The number 32 is chosen since that is the longest sequence of digits (binary) that would be decoded
0	  1;; by the with-lexer form for %d and %f
0	  (*string-temporary* (sys:make-stack-array 32 :element-type 'character))
	  1;; Preallocate the space used to hold the translated lisp format string
0	  (*format-string*    (sys:make-stack-array 128 :element-type 'string-char :fill-pointer 0 :adjustable t)))
      ,@body))
;;;    
(defun execute (main-program-name &key
		arguments
		program-name
		user-file-pathname-defaults
		temporary-file-pathname-defaults
		enter-debugger-on-error
		input 
		output
		error-output
		streams
		(trap-underflow t)
		(stack-size
		  *c-execution-time-stack-initial-and-increment-size*)
		save-environment
		reload)
  (declare (special c-user::|_stdin|
		    c-user::|_stdout|
		    c-user::|_stderr|
		    *tmp-name-counter*
		    cts:*evaluation-context*))
  (ignore  streams trap-underflow
	   program-name
	   stack-size save-environment reload)	1; for now
0  (sys:with-data-stack
    (let ((*c-open-files* nil)
	  (*atexit-list* nil)
	  (cts:*evaluation-context* nil)
	  (*longjmp-catch-number* si:*largest-fixnum*)
	  (*in-signal-handler* nil)
	  (*user-file-pathname-defaults* (or user-file-pathname-defaults
					     (loop for dotted-pair in fs:*default-pathname-defaults*
						   when (null (car dotted-pair))
						     return (send (send (cdr dotted-pair)
									:new-pathname :name :wild :type :wild :version :newest)
								  :string-for-printing))))
	  (*temporary-file-pathname-defaults* (or temporary-file-pathname-defaults "sys:c;tmp;"))
	  (*enter-debugger-on-error* enter-debugger-on-error))
      (unwind-protect
	  (if (fdefinedp main-program-name)
	      (catch 'normal-completion
		(catch 'abnormal-completion
2	0	  (catch-error-restart ((sys:error sys:abort)
					"Terminate C execution of ~A" main-program-name)
		    (let ((my-error-restarts dbg:*restart-handlers*))

		  (multiple-value-bind (progv-names progv-values initializations link-tick)
		      (find-names-and-arrays-and-initializations main-program-name)
		    (unwind-protect
			(progv progv-names progv-values
			  (initialize-c-globals progv-values initializations)
			  (with-runtime-library-execution-bindings
			      (condition-bind-default
				(((dbg:wrong-type-argument-trap
				    #+3600 dbg:wrong-internal-type-trap
				    dbg:subscript-out-of-bounds-trap)
				  'check-for-octet)
				 (c-signal 'handle-signal)
				 ((sys:abort sys:floating-point-exception)
				   (lambda (condition)
				     ;; See if this abort would terminate C execution
				     ;; or be caught by an interior program
				     (loop for l on dbg:*restart-handlers* do
				       (cond ((eq l my-error-restarts) (return (handle-signal condition)))
					     ((send (car l) :handle-condition-p condition)
					      (return nil))))))
				 (dbg:bad-data-type-in-memory-trap 'check-for-undefined-static-function))
				(unwind-protect
				      (if (null arguments)
					  (funcall (fdefinition main-program-name))
					  (apply (fdefinition main-program-name)
						 (first arguments) (rest arguments)))
				   (loop for exitor in *atexit-list* do (funcall (location-contents exitor)))))))
		      (return-arrays-to-execution-cache main-program-name progv-values link-tick)))))))
	      (error "The C function ~A is not defined" main-program-name))
	(loop for file in *c-open-files* do (send file :close))))))

1;;;
;;;0	1As it was for FORTRAN, Pascal, and Ada, so too shall it be for C.
;;;
0(deff xqt 'execute)
