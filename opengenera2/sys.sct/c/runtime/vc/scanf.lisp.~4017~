;; -*- Mode: LISP; Syntax: Common-lisp; Package: C-SYSTEM; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; TBD...
;;; %n both here and in printf

;;; Scanf directive syntax
;;; %[*][width][target-size-flags][conversion_specifier]
;;; conversion_specifier  d  i  o  u  x  e  f  g  s  [  c  p  n  %
;;;

0(defconstant null-char (code-char 0))
;;;
(defconstant white-space-char '(#\Space #\Tab #\Line #\Page #\Return))
(defparameter white-space-string (make-array (length white-space-char)
					     :element-type 'character
					     :initial-contents white-space-char))

(defparameter white-space-char-code `(,(char-code #\Space)
				     ,(char-code #\Tab)
				     ,(char-code #\Line)
				     ,(char-code #\Refresh)
				     ,(char-code #\Page)
				     ,(char-code #\Return)))

(defmacro next-in-arg-list()
  `(if arg-list (pop arg-list) (zl:ferror "Too few arguments to format directive")))

(defparameter scanf-specifier-functions
	     `((#\d . read-integer)
	       (#\i . read-integer)
	       (#\o . read-integer)
	       (#\u . read-integer)
	       
	       (#\x . read-integer) (#\X . read-integer)
	       
	       (#\f . read-float)
	       
	       (#\e . read-float) (#\E . read-float)
	       
	       (#\g . read-float) (#\G . read-float)
	       
	       (#\c . read-characters)
	       (#\s . read-non-white-characters)
	       (#\[ . read-characters-in-set)
	       (#\% . read-percent)
	       
	       (#\p . read-pointer)
	       
	       (#\n . assign-characters-consumed)))

(defparameter strtod-lexer (lexer::def-simple-lexer "[+-]?çä(.)?ç([Ee][+-]?çä)?"))
(defparameter scanf-lexers
	     `((#\d . ,(lexer::def-simple-lexer "[+-]?çä"))
	       (#\i . ,(lexer::def-simple-lexer
			      "[+-]?(0([07])([xX][ç(AF)(af)]ä))([19]ç)"))
	       (#\o . ,(lexer::def-simple-lexer "([07])"))
	       (#\u . ,(lexer::def-simple-lexer "çä"))
	       
	       (#\x . ,(lexer::def-simple-lexer "(0[xX])?[ç(AF)(af)]ä"))

	       (#\X . ,(lexer::def-simple-lexer "(0[xX])?[ç(AF)(af)]ä"))
	       
	       (#\f . ,strtod-lexer)
	       
	       (#\e . ,strtod-lexer)	       
	       (#\E . ,strtod-lexer)
	       
	       (#\g . ,strtod-lexer)
	       (#\G . ,strtod-lexer)
	       
	       (#\c . nil)
	       
	       (#\s . nil)
	       
	       (#\p . nil)
	       
	       (#\n . nil)

	       (#\[ . nil)))

(defmacro get-scanf-lexer (spec) `(cdr (zl:assq ,spec scanf-lexers)))

(defconstant EOF -1)

(defconstant scanf-specifiers  		"diouxXeEfgGs[cpn%")

(defmacro scanf-tyi()
  `(let ((ch (send stream :tyi)))
    (when (eq ch EOF) (throw 'finish-scanf EOF))
    ch))

1;;; Not quite right, C defintion of space, ie space, form-feed, 
0(defun skip-whitespace(stream)
  (loop for ch = (scanf-tyi)
	while (zl:memq ch white-space-char-code)
	finally (send stream :untyi ch)))

1;;; This is the top level driver that interprets the format string.
;;; There are two kinds of failures recognized by the ANSI spec:
;;; 0	11) Insufficient input (return eof)
;;; 0	12) match failure (deducible from the number of items assigned)
;;;
0(defun scanf-internal (stream format arg-list)
  (let ((total-items 0))
    
    (catch 'finish-scanf
      (loop with limit = (string-length format)
	    for i from 0 below limit
	    as format-char = (aref format i) as items = 0
	    do (case format-char
		 (#\space (skip-whitespace stream))
		 
		 (#\%
		  (check-format-index (incf i) limit format)
		  (multiple-value-setq (i arg-list items)
		    (process-scanf-directive stream format arg-list i limit))
		  (incf total-items items))
		 
		 (otherwise
		   (let ((char (scanf-tyi)))
		     (unless (char-equal (code-char char) format-char)
		       (send stream :untyi char)
		       (throw 'finish-scanf nil)))))))
    
    (if (zerop total-items)
	(if (send stream :eof) EOF 0)
	total-items)))

(defun process-scanf-directive (stream format arg-list index limit)
  (let (dont-assign  field-width short-specifier conversion-specifier)
    
    (cond-every
      
      ((char-equal (aref format index) #\*)
       (setq dont-assign t)
       (check-format-index (incf index) limit format))
      
      ((digit-char-p (aref format index))
       (multiple-value-setq (field-width index)
	 (parse-integer format :start index :junk-allowed t))
       (check-format-index index limit format))
      
      ((string-member (aref format index) short-specifier-values)
       (setq short-specifier (aref format index))
       (check-format-index (incf index) limit format))

      ((string-member (aref format index) scanf-specifiers)
       (setq conversion-specifier (aref format index))
       (when (char-equal (aref format index)#\[)
1	 ;; This indicates the start of a character set, and needs special handling
0	 (check-format-index (incf index) limit format)
1	 ;; Parse the escapes for the ] character specially
0	 (let ((include-] (char-equal (aref format index)#\])))
	   1;; Misuse 0short-specifier1 to convey negation of the character set
0	   (setq short-specifier (char-equal (aref format index)#\^))
	   (when include-] (check-format-index (incf index) limit format))
	   (when short-specifier
	     (check-format-index (incf index) limit format)
	     (when (char-equal (aref format index)#\])
	       (setq include-] t)
	       (check-format-index (incf index) limit format)))
1	   ;; Now get all the characters until the ]
0	   (loop with start-index = (if include-] (- index 1) index)
		 while (not (char-equal (aref format index) #\]))
		 do (check-format-index (incf index) limit format)
		 finally (setq short-specifier (cons
						 (nsubstring format start-index index)
						 short-specifier)))))))
    
    (unless conversion-specifier
      (zl:ferror "Illegal syntax in format specification:\"~A(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")~A0\""
		 (nsubstring format 0 index) (nsubstring format index limit)))
    
    1;; Sanity check the numeric argument directives
0    (unless (null field-width) (check-type field-width (integer 0 field-width-limit)))
    
    1;; Dispatch based upon the conversion specifier
0    
    (multiple-value-bind (new-arg-list args-assigned)
	(funcall (cdr (zl:assq conversion-specifier scanf-specifier-functions))
		 stream dont-assign field-width short-specifier conversion-specifier
		 arg-list)
      (values index new-arg-list args-assigned))))

(defvar *string-temporary* nil)

(defmacro with-lexer((lexer) &body body)
  `(let ((i 0)
	 (value 0)
	 (eof-p nil)
	 (field (if (< (string-length *string-temporary*) field-width)
		    (setq *string-temporary* (make-array field-width :element-type 'character))
		    (loop for i from 0 below (string-length *string-temporary*)
			  do (setf (aref *string-temporary* i) #\space)
			  finally (return *string-temporary*)))))
     (flet ((nextchar ()
	      (declare (sys:downward-function))
	      (and (< i field-width)
		   (let ((char (send stream :tyi)))
		     (if (eq char EOF)
			 (progn
			   (setf eof-p t)
			   nil)
			 (setf (aref field i) (code-char char))
			 (incf i)
			 char)))))
       (skip-whitespace stream)
       (multiple-value-bind (match-p ignore length)
	   (lexer::match-compiled-regex #'nextchar ,lexer)
	 (unless match-p
	   1;; Unget the offending character0 if not eof
	   (unless eof-p
	     (send stream :untyi (char-code (aref field (- i 1)))))
	   (throw 'finish-scanf nil))
	 1;; return the input that was not consumed
0	 (loop for k downfrom (- i 1)
	       repeat (- i length)
	       do (send stream :untyi (char-code (aref field k))))
	 ,@body))))
  

(defmacro assign-single()
  `(let ((a (next-in-arg-list))
	 (o (next-in-arg-list)))
     (validate-pointer a o)
     (if (and short-specifier (char-equal #\h short-specifier))
	 (setf (si:octet-aref-16 a o) value)
	 (setf (si:octet-aref a o) value))
     (values arg-list 1)))
  
(defun read-integer
       (stream dont-assign field-width short-specifier conversion-specifier arg-list)

  (setq field-width (or field-width field-width-limit))
  (with-lexer ((get-scanf-lexer conversion-specifier))
    1;; The recognized string may be an octal, hex or decimal string (in the case of %i)
0    1;; determine what it really was, by looking at the first (up to three) characters
0    (let ((negative nil)
	  (pos  0)
	  (base (case conversion-specifier
		  ((#\x #\X) 16.)
		   (#\o 8.)
		   (t 10.))))
      (cond-every
	((char-equal (aref field pos) #\-)
	 (setq negative t)
	 (incf pos))
	
	((char-equal (aref field pos) #\+)
	 (incf pos))
	
	((char-equal (aref field pos) #\0)
1	 ;; Octal or hex
0	 (if (char-equal (aref field (+ pos 1)) #\x)
	     (setq base 16
		   pos (+ pos 2))
	     (setq base 8))))
      (setq value (cl:parse-integer field :radix base :start pos :end length))
      (when negative (setq value (- value)))
      (unless (zl:fixnump value) (zl:ferror "input value is too large"))
      (if dont-assign
	  (values arg-list 0)
	  (assign-single)))))

(defun read-float
       (stream dont-assign field-width short-specifier conversion-specifier arg-list)

  (setq field-width (or field-width field-width-limit))
  (with-lexer ((get-scanf-lexer conversion-specifier))
      1;; We have an integer, decimal float, or an e float. Convert an integer into
0      1;; float syntax.
0    (let ((long-float (and short-specifier (char-equal #\l short-specifier))))
      (unless (or (string-member #\. field) (string-member #\E field)
		  (string-member #\e field))
	(setf (aref field length) #\.))
      
      (setq value
	    (catch 'conversion-error
	      (c-sys::xr-read-flonum
		field (when long-float :double-float))))

      (cond
	((eq value :overflow) (zl:ferror "Overflow when attempting to scanf a float"))
	((eq value :underflow) (zl:ferror "Underflow when attempting to scanf a float"))
	(t (if dont-assign
	       (values arg-list 0)
	       (let ((a (next-in-arg-list))
		     (o (next-in-arg-list)))
		 (validate-pointer a o) (validate-pointer a (+ o 4))
		 (if long-float
		     (multiple-value-bind (value-high  value-low )
			 (si:dfloat-components value)
		       (setf (si:octet-aref a o) value-high)
		       (setf (si:octet-aref a (+ o 4)) value-low))
		     (setf (si:octet-aref a o) value))
		 (values arg-list 1))))))))


1;;; The comment about the "-" character in the ANSI spec (page 120) is incomprehensible
;;; and hence has not been implemented.
0(defun read-characters-in-set (stream dont-assign field-width negate char-set arg-list)
  1;; Kludge to permit the same argument interface
0  (psetq negate (cdr negate)
	char-set (car negate))
  (setq field-width (or field-width field-width-limit))
  (if dont-assign
      (loop for  ch = (send stream :tyi)
	    for count from 0 below field-width
	    while (and (neq ch EOF)
		       (if (string-member (code-char ch) char-set)
			   (not negate)
			   negate))
	    finally (return (values arg-list 0)))
      (loop with a = (next-in-arg-list) with o = (next-in-arg-list)
	    for count from 0 below field-width
	    for ch = (send stream :tyi)
	    while (and (neq ch EOF)
		       (if (string-member (code-char ch) char-set)
			   (not negate)
			   negate))	
	    do (validate-pointer a o)
	       (setf (si:octet-aref-8 a o) ch)
	       (incf o)
	    finally (when (neq ch EOF)
		      (send stream :untyi ch))
		    (validate-pointer a o)
		    (setf (si:octet-aref-8 a o) 0)
		    (return (values arg-list 1)))))

1;;; Simply read characters into a string, no null character is appended.
0(defun read-characters (stream dont-assign field-width  ignore ignore arg-list)
  (setq field-width (or field-width 1))
  (if dont-assign
      (loop for count from 0 below field-width
	    while (neq (send stream :tyi) EOF)
	    finally (return (values arg-list 0)))
      (loop with a = (next-in-arg-list) with o = (next-in-arg-list)
	    for count from 0 below field-width
	    for ch = (send stream :tyi)
	    while (neq ch EOF)
	    do (validate-pointer a o)
	       (setf (si:octet-aref-8 a o) ch)
	       (incf o)
	    finally (return (values arg-list 1)))))

1;;; Is the read supposed to terminate when a "null" character is encountered ? ANSI
;;; is unclear on this.
0(defun read-non-white-characters (stream dont-assign field-width negate char-set arg-list)
  (ignore negate char-set)
  (skip-whitespace stream)
  (read-characters-in-set stream dont-assign field-width (cons white-space-string t) char-set
			  arg-list))


(defun read-percent (stream ignore ignore ignore ignore arg-list)
  (unless (eq (scanf-tyi) (char-code #\%)) (throw 'finish-scanf nil))
  (values arg-list 0))


(defun read-pointer (&rest ignore)
  (zl:ferror "%p specification is not supported"))


(defun assign-characters-consumed(stream dont-assign ignore ignore ignore arg-list)
  (unless dont-assign
    (let ((a (next-in-arg-list))
	  (o (next-in-arg-list)))
      (setf (si:octet-aref a o) (send stream :count))))
  (values arg-list 0))

  
;(defun test-scanf-%()
;  (sys:with-stack-array (test 10)
;    (printf-internal zl:standard-output "%%" nil)
;    (format t "~% scanf return: ~D" 1(0scanf-internal zl:standard-input1 0"%%"1 0nil))))
;  
;(defun test-scanf-[()
;  (sys:with-stack-array (test 10)
;    (printf-internal zl:standard-output "%%[az]%%" nil)
;    1(0scanf-internal zl:standard-input1 0"%10[az]"1 0(list test 0))
;    (printf-internal zl:standard-output "  number = %s" (list test 0))
;    (format t "~%")
;
;    (printf-internal zl:standard-output "%%[^az]%%" nil)
;    1(0scanf-internal zl:standard-input1 0"%10[^az]"1 0(list test 0))
;    (printf-internal zl:standard-output "  number = %s" (list test 0))
;    (format t "~%")
;    
;    (printf-internal zl:standard-output "%%[]az]%%" nil)
;    1(0scanf-internal zl:standard-input1 0"%10[]az]"1 0(list test 0))
;    (printf-internal zl:standard-output "  number = %s" (list test 0))
;    (format t "~%")
;    
;    (printf-internal zl:standard-output "%%[^]az]%%" nil)
;    1(0scanf-internal zl:standard-input1 0"%10[^]az]"1 0(list test 0))
;    (printf-internal zl:standard-output "  number = %s" (list test 0))
;    
;))
;
;(defun test-scanf-s()
;  (sys:with-stack-array (test 10)
;    (printf-internal zl:standard-output "%%s" nil)
;    1(0scanf-internal zl:standard-input1 0"%10s"1 0(list test 0))
;    (printf-internal zl:standard-output "  number = %s" (list test 0))))
;
;
;(defun test-scanf-d()
;  (sys:with-stack-array (test 10)
;    (printf-internal zl:standard-output "%%1d%%1d" nil)
;    1(0scanf-internal zl:standard-input1 0"%1d%1d"1 0(list test 0 test 4))
;    (printf-internal zl:standard-output "  number = %d %d" (list (aref test 0) (aref test 1)))
;
;    (printf-internal zl:standard-output "%%hd %%hd" nil)
;    1(0scanf-internal zl:standard-input1 0"%hd %hd"1 0(list test 0 test 2))
;    (printf-internal zl:standard-output "  number = %hd %hd" (list (si:octet-aref-16 test 0)
;								 (si:octet-aref-16 test 2)))))
;
;
;(defun test-scanf-i()
;  (sys:with-stack-array (test 10)
;
;    (printf-internal zl:standard-output "%%hi %%hi" nil)
;    1(0scanf-internal zl:standard-input1 0"%hi %hi"1 0(list test 0 test 2))
;    (printf-internal zl:standard-output "  number = %hi %hi" (list (si:octet-aref-16 test 0)
;								 (si:octet-aref-16 test 2)))
;
;    (printf-internal zl:standard-output "Enter two  octal numbers%%" nil)
;    1(0scanf-internal zl:standard-input1 0"%hi %hi"1 0(list test 0 test 2))
;    (printf-internal zl:standard-output "  number = %ho %ho" (list (si:octet-aref-16 test 0)
;								 (si:octet-aref-16 test 2)))
;
;    (printf-internal zl:standard-output "Enter two  hex numbers%%" nil)
;    1(0scanf-internal zl:standard-input1 0"%hi %hi"1 0(list test 0 test 2))
;    (printf-internal zl:standard-output "  number = %hx %hx" (list (si:octet-aref-16 test 0)
;								 (si:octet-aref-16 test 2)))))
;
;
;2;;; Bug here, anything larger than two decimal digits loses1, Bob ?
0;2(printf-internal zl:standard-output "%f" (multiple-value-list (si:dfloat-components 1.2e2)))
0;
;(defun test-scanf-efg()
;  (sys:with-stack-array (test 10)
;
;    (printf-internal zl:standard-output "%%lf %%f" nil)
;    1(0scanf-internal zl:standard-input1 0"%lf %f"1 0(list test 0 test 8))
;    (printf-internal zl:standard-output "  number = %20f %20f"
;		     (append (list (si:octet-aref-32 test 0) (si:octet-aref-32 test 4))
;			    (multiple-value-list (si:dfloat-components (si:octet-aref-32 test 8)))))))
;
;
;
