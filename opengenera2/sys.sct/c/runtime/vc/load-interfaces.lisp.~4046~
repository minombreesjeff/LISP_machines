;;; -*- Mode: LISP; Package: c-system; Lowercase: T; Base: 10 -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;
;;; Created on Sunday the seventh of June, 1987 at 3:49:59 pm by DySak on Nene at SCRC
;;;

;;;
;;;	This file contains routines associated with the loading of binary files created by
;;; compilation using the C compiler.
;;;
(defvar *c-object-package*)
(defvar *unresolved-loaded-pointers*)
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Keep statistics on how worthwhile all this is.
0(defvar *match-count* 0)	1; The number of structurally equivalent objects returned
0(defvar *total-lookups* 0)	1; The number of objects looked up


;;; All canonical objects are keyed by their name string, if they have one, otherwise they
;;; are keyed by the constructor function (we may need to change this if it proves to be
;;; unsatisfactory). Each entry in the hash table is a list of objects that match the
;;; key. The 0structurally-equivalent-p1 predicate is used to determine of the objects in
;;; this list actually matches the object that needs to be constructed. 

;;; Named canonical objects are looked up via their name. Note that the lookup is an eq
;;; rather than a string lookup, since the string is guaranteed to be canonicalized.
0(defvar *named-canonical-objects* (make-hash-table :test 'eq :size 2048 ))

1;;; Unnamed canonical objects are looked up by a distinguishing field in the object.
0(defvar *unnamed-canonical-objects* (make-hash-table :test 'equal  :size 1024))
1;;; A list of object exporting gdds.
0(defvar *exporting-gdds* nil) 
1;;; The representation of an xref.
0(zl:defstruct (xfile-ref (:type fixnum) (:conc-name "XREF-"))
  ((unique-index #o0020)	1; The index into the list of shared file ids
0   (object-index #o2020)	1; The index identifying a particular object
0   ))
1;;;
;;; Resolve the unique-id to an abbreviated index that will actually be used by external references.
;;;
0(defun resolve-unique-id-to-gdd(uid)
   (when *c-development-system-loaded-p*
      (let ((gdd   	(gethash (canonicalize-pathname-for-c-system-databases
			       (unique-id-pathname uid))
			     *c-debug-info-descriptor-table*)))
	 1;;
0	 1;;        Perform consistency checks to ensure that the exporting and importing files agree
0	 1;;
0	 (cond-every
	   ((null gdd)
	    (error "This file contains references that need the ~A file loaded so that they may be resolved."
		   (unique-id-pathname uid)))
     
	   (( (unique-id-time uid) (compilation-time gdd))
	    (error "The file being loaded has references to the file ~A as compiled at ~A,~
		   ~%however, the currently loaded version of the file was compiled at ~A."
		   (unique-id-pathname uid)
		   (time:print-universal-time (unique-id-time uid) nil)
		   (time:print-universal-time (compilation-time gdd) nil))))

	 (setq *referenced-gdds* (append *referenced-gdds* (ncons gdd))))))
1;;;
;;; This is the function that is invoked at bin load to resolve a cross file reference to the
;;; real object. The cross file reference consists of a unique-index into a local table that
;;; is used to resolve the index to a unique id and an object index.
;;;
0(defun resolve-xref(xref)
   (when *c-development-system-loaded-p*
      (nth (xref-object-index xref) (exported-objects (nth (xref-unique-index xref) *referenced-gdds*)))))
1;;; A table containing all the externally visible names in the loaded C world. This table
;;; exists primarily to provide cross-checking of externally visible entities across
;;; files. The table is indexed by the 0string1 representing the name of the externally
;;; visible entity. Conceptally, this table is simply an efficient way to look up an externally
;;; visible symbol, the alternative being to search the symbol tables of every file loaded
;;; in the system.

;;; Each entry in the table is a list0 1of entries that may have that string for an
;;; identifier. Each entry in the list is a cons cell; the car
;;; holds the entity (it must be a debug entity), the cdr holds the list of pathnames that
;;; defined the entity. It is desirable that the debug entities be the canonical entity
;;; (obtained via a call to "obtain-canonical-object"), so that checks for type equivalence
;;; can be made efficiently. 

;;;   Entries are made into this table in one of two ways:
;;; 1) At the end of a compilation, all externally visible entities that were defined
;;;    in the course of the compilation have their definition entered into the table.
;;;
;;; 2) When a file is loaded, all externally visible entities in the file are entered into
;;;    this table.
;;;
;;;   Whenver an entity is entered into a table, its current definition is checked against
;;; all previous uses of that definition. If the current definition is found to contradict
;;; a previous definition, an error message is issued.
;;;
;;; Entries are deleted from this table, whenever an entire buffer or a file is recompiled,
;;; and new entries are made into the table. In adddition, it may be necessary to provide a
;;; kill definition facility, analagous to the current one in lisp, that can remove a single
;;; definition from this table, and the symbol table for an individual file. Dysak???
;;;

0(defvar *global-name-table* (make-hash-table :size 2048 :test 'cl:string= :number-of-values 1))

(defun rem-external-entity (name name-symbol current-pathname)
  (multiple-value-bind (entries found-p)
      (gethash name *global-name-table*)
    (if (null found-p)
	(setf (gethash name *global-name-table*) entries)
	(loop with runtime-name-kludge = 'runtime-name
	      with new-entries = entries
	      for entry in entries
	      when (eq (funcall runtime-name-kludge (car entry)) name-symbol)
		do (setf (cdr entry) (zl:delq current-pathname (cdr entry)))
		   (when (null (cdr entry))
		     (setq new-entries (zl:delq entry entries)))
	      finally
		(return 
		  (if (or (null new-entries) (null entries))
		      (progn (remhash name *global-name-table*) nil)
		      (setf (gethash name *global-name-table*) entries)))))))
(defgeneric same-type-p(type1 type2)
  "returns true if type1 and type2 are equivalent"
  (declare (values boolean)))

(defgeneric type-differences (type1 type2 &optional (ignore-incomplete-types t))
  "returns a list constituting a type derivation path leading up to the conflict"
  (declare (values derivation-path)))

(defgeneric same-type-ignoring-incomplete-types-p (type1 type2)
  "returns true if type1 and type2 are equivalent, except for subtypes that are incomplete"
  (declare (values boolean)))

1;;; The external entity can be either a var, or a routine
0(defun put-external-entity(name canonical-debug-entity current-pathname)
    (declare (special *warn-about-declaration-mismatches-across-files*))
  (loop with runtime-name-kludge = 'runtime-name
	with name-symbol = (funcall runtime-name-kludge canonical-debug-entity)
	with canonical-debug-entity-type =
	  (or (send-if-handles canonical-debug-entity :var-type)
	      (send canonical-debug-entity :routine-type))
	with entries = (rem-external-entity name name-symbol current-pathname)
	and entry-made-p = nil
	for entry in entries
	as entity = (car entry)
	as pathnames = (zl:delq current-pathname (cdr entry))
	as entry-type = (or (send-if-handles entity :var-type) (send entity :routine-type))
	when (eq (funcall runtime-name-kludge entity) name-symbol)
	  do (setf (cdr entry) pathnames)
	     (if (or (eq canonical-debug-entity-type entry-type)
		     (same-type-p canonical-debug-entity-type entry-type))
		 1;; Put it on the list
0		 (progn
		   (setf (cdr entry) (push current-pathname pathnames))
		   (setq entry-made-p t))
		 (when (and *warn-about-declaration-mismatches-across-files*
			    pathnames
			    (not (same-type-ignoring-incomplete-types-p canonical-debug-entity-type entry-type)))
		   (let ((length (length pathnames)))
		     (format *error-output* "~&Warning: The current declaration of ~'p~\presentation\~ ~
		       conflicts with ~:[~;a ~]previous declaration~P of ~'i~\presentation\~, ~
 		       obtained from file~P ~{~A~^, ~}. ~
			~%The type derivation path leading to a difference follows:~%"
			     canonical-debug-entity (= length 1)  length 
			     entity length pathnames)
		     (loop with diff = (type-differences canonical-debug-entity-type entry-type)
			   for (t1 . t2) in diff
			   for count from 0
			   do (ignore t2)
			      (unless (zerop count) (format *error-output* "  "))
			      (format *error-output* "~'i~\presentation\~"  t1)
			   finally
			     (format *error-output* " which conflicts with ~'i~\presentation\~" (cdr (car (last diff)))))
		     (format *error-output* "~%Mouse the types to further explore the conflicts."))))
	finally
	  (unless entry-made-p
	    (push (cons canonical-debug-entity (list current-pathname)) entries)
	    (setf (gethash name *global-name-table*) entries))))
1;;; Note the external entities that must be checked for consisteny across files.
;;; Only two kinds of entities have visibility across files:
;;;0	1a) external variables (debug-c-global-user-variable)
;;;     b) external functions (c-routine-debug-descriptor) 
;;;     c) prototypes (debug-c-routine-variable)

;;; The types of objects that are part of the global name table.
0(defparameter *external-entities* `(debug-c-global-user-variable debug-c-routine-variable))
1;;; This is the utility that removes entries from the global name table that do are
;;; no longer part of the new list of bindings. Entries are added to the global name
;;; table as individal descriptors are created.
0(defun remove-global-name-table-entries (nbindings obindings pathname)
  (flet ((mem-binding (k e) (string= k (send e :name))))
    (loop with runtime-name-kludge = 'runtime-name
	  with last-pos = nbindings
	  for obinding in obindings
	  as name = (and (member (zl:typep obinding) *external-entities*)
			 (send obinding :name))
	  as found-pos = (and name (or (zl:mem #'mem-binding name last-pos)
				       (zl:mem #'mem-binding name nbindings)))
	  when name
	    do (if found-pos
		   (setq last-pos (cdr found-pos))
		   (rem-external-entity name (funcall runtime-name-kludge obinding) pathname)))))

(defun add-global-name-table-entries (nbindings pathname)
  (loop with object-class = 'object-class
	for nbinding in nbindings
	as name = (and (member (zl:typep nbinding) *external-entities*)
		       (neq (funcall object-class nbinding) :static)
		       (send nbinding :name))
	when name do (put-external-entity name nbinding pathname)))
(defgeneric structurally-equivalent-p(type-object constructor ivs)
  "returns true if the object as defined by the constructor function, and the ivs is equivalent to the type object"
  (declare (values boolean)))
1;;; This function invoked upon a bin file is being loaded, to create a new object.
;;; The function either decides that there is a structurally equivalent object that
;;; already exists, returns it, or creates one using the constructor function.
;;; The first argument is guaranteed to be the name, if it will be used as a key.
;;; A key point to note in the test for structural equivalence, is that since all the
;;; nested structurally equivalent components have already been established, we 
;;; need only check for "eqness" rather that "equalness".

0(defun lookup-canonical-object(constructor-function ivs)
  (declare (special *objects-with-name-keys*))
  (let* ((has-name-key-p (zl:memq constructor-function *objects-with-name-keys*))
	 (table (if has-name-key-p *named-canonical-objects* *unnamed-canonical-objects*))
	 1;; Make 0get-static-id-string1 not appear explicitly as a function, so that
0	 1;; there are no complaints when loading runtime-only systems
0	 (runtime-only-kludge 'get-static-id-string)
	 (key   (if has-name-key-p (funcall runtime-only-kludge (first ivs)) (first ivs)))
	 (objects (gethash key table)))
    (incf *total-lookups*)
    (values (loop with args = (cdr ivs)
		  for o in objects
		  when (structurally-equivalent-p o constructor-function args)
		    return (progn (incf *match-count*) o))
	    table
	    objects
	    (and has-name-key-p key))))

(defun obtain-canonical-object (constructor-function &rest ivs)
  (declare (special *objects-with-name-keys*))
  (when *c-development-system-loaded-p*
    (multiple-value-bind (extant-object table objects canonical-name-string)
	(lookup-canonical-object constructor-function ivs)
      (let ((entity (or extant-object
1			;; Otherwise build one
0			(if canonical-name-string
			    (let ((o (apply constructor-function canonical-name-string (cdr ivs))))
			      (setf (gethash canonical-name-string table) (push o objects))
			      o)
			    (let ((o (apply constructor-function ivs)))
			      (setf (gethash (first ivs) table) (push o objects))
			      o)))))
	1;; Note all pointers with unresolved pointed-to-types for later resolution.
0	1;; Unresolved pointers are represented as indices into the array of
	;; *pointed-to-entities* 
0	(when (and (null extant-object)
		   (zl:memq constructor-function
			    '(ct-named-c-pointer-type-fasd ct-unnamed-c-pointer-type-fasd))
		   (typep (send entity :pointed-to-type) 'integer))
	  (push entity *unresolved-loaded-pointers*))
	entity))))

(defun allocate-object (constructor-function &rest ivs)
  (when *c-development-system-loaded-p*
    (apply constructor-function ivs)))
(defun compiler:load-c-binary-file (plist stream)
   (ignore plist)				1; for now
0   (let* ((*c-object-package* (pkg-find-package
				(or (getf (location-contents plist) :package) :c-user)))
	  (*c-descriptor-load-kludge* nil)   ; 1Setqed by a form in the bin file
0	  (*unresolved-loaded-pointers* nil) 1; Set by the after init methods on pointers
0	  (*pointed-to-entities* nil)	1; Setqed by a form in the bin file
0	  (*examined-objects* nil)
	  (*referenced-gdds* nil))	1; Used by the same-type-p 
0     (declare (special *examined-objects* *referenced-gdds*))
     (unwind-protect 
	 (si:bin-load-top-level stream)
       (loop for p in *unresolved-loaded-pointers*
	     as index = (send p :pointed-to-type)
	     do 1;; Remove forward reference pointer entries from the table, since they are
0		1;; only canonical within a load operation, not across multiple load
		;; operations.
0	 (modify-hash *unnamed-canonical-objects* index
		      (lambda (key value found-p)
			(ignore key)
			(when found-p (zl:delq p value))))
	 (send p :set-pointed-to-type (when *pointed-to-entities*
					(aref *pointed-to-entities* index))))
       (when (and (null *pointed-to-entities*) *c-descriptor-load-kludge*)
	 (remhash (descriptor-pathname *c-descriptor-load-kludge*)
		  *c-debug-info-descriptor-table*)))
     
       1;; Update the global name table
0       (when (and *c-development-system-loaded-p* *c-descriptor-load-kludge*)
	 (let ((pathname (descriptor-pathname *c-descriptor-load-kludge*)))
	   (add-global-name-table-entries (bindings *c-descriptor-load-kludge*) pathname)
	   
	   1;; If the file shares objects, register it in the 0*exporting-gdds*
	   (when (exported-objects *c-descriptor-load-kludge*)
	     (loop with get-name-kludge = 'get-name
		   with exported-objects = (exported-objects *c-descriptor-load-kludge*)
		   with table = (make-hash-table :test 'eq :size (length exported-objects))
		   for o in exported-objects
		   do (modify-hash table (funcall get-name-kludge o)
				 (lambda (ignore value ignore)
				   (loop for extant in value
					 when (eq (zl:typep extant) (zl:typep o))
					   do (error "Pre-defined objects with the same name may not have the same type")
					 finally
					   (return (push o value)))))
		   finally
		     (setf (export-table *c-descriptor-load-kludge*) table)
		     (loop for entry on *exporting-gdds*
			   when (eq (descriptor-pathname (car entry)) pathname)
			     do (setf (car entry) *c-descriptor-load-kludge*)
				(return nil)
			   finally (push *c-descriptor-load-kludge* *exporting-gdds*))))))))
