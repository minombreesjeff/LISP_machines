;;; -*- Mode: lisp; Syntax: common-lisp; Package: c-system; Base: 10 -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;
;;;	 Created on Friday the ninth of October, 1987 at 9:30:05 pm by DySak on Nene at SCRC.
;;;
#|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

					 M I S C E L L A N E O U S   U T I L I T I E S

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|#
;;;
;;; PURPOSE:	Create a C string from a Lisp string.
;;; ARGUMENTS:  The Lisp string.
;;; RETURNS:	An art-q array of length (floor (+ lisp-string-size 4) 4) all of whose
;;;	elements are actually fixnums.
;;;
(defun copy-lisp-string-into-c-two-word-pointer-string (lisp-string)
  (if lisp-string
      (do* ((lisp-string-size (length lisp-string))
	    ;;
	    ;;      The floor size computation below is designed to account for the null
	    ;; character which we have to append to the resulting C string.
	    ;;
	    (c-string-object (make-array (floor (+ lisp-string-size 4) 4)
					 :element-type t
					 :initial-element 0
					 :adjustable nil))
	    (char-offset 0 (+ char-offset 1)))
	   ((= char-offset lisp-string-size)
	    ;;
	    ;;      bash in the null character ('\0')
	    ;;
	    (sys:octet-aset-8 0 c-string-object char-offset)
	    (values c-string-object 0))
	(sys:octet-aset-8 (sys:char-subindex (aref lisp-string char-offset))
		      c-string-object
		      char-offset))
      (values nil 0)))
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;
;;; PURPOSE:0	1To define a canonical form for pathnames which are used in the various data bases kept by Symbolics C.  So far,
;;;0	1this means force the version of the pathname to be nil.
;;; COMMENTS:0	1This is quite right yet.  It needs to support VC pathnames.
;;;
0(defun canonicalize-pathname-for-c-system-databases (pathname)
   (declare (values canonicalized-pathname is-logical-pathname-p))
   (when (not (typep pathname 'fs:pathname))
      (return-from canonicalize-pathname-for-c-system-databases (values pathname nil)))
   (when (not (typep pathname 'fs:logical-pathname))
      1;;
0      1;;        This stuff was imported from 0zwei:buffer-logical-pathname1 by DySak on 11/01/87 at 19:23:47.  The comments in
      ;;        this block were only edited to fit the style in which the rest of the code in this buffer was written.  If
      ;;        you don't understand the comments, don't worry.  I (DySak) didn't bother to either.  In fact the business
      ;;        with VC files may be totally bogus for this particular application.
0      1;;
0      (block find-logical-pathname
	 (loop for (logical-host . logical-pathnames) in (send pathname :get 'fs:back-translation-alist)
	       do (ignore logical-host)
		  (loop for logical-pathname in logical-pathnames
			when (eq (send logical-pathname :translated-pathname) pathname)
			  do (setq pathname logical-pathname)
			     (return-from find-logical-pathname)))
	 (let* ((system (sct:patchable-system-from-pathname (send pathname :generic-pathname)))
		(default-logical-pathname
		   1;;
		   ;;        Get a logical pathname which we can use to back-translate physical pathnames.  Prefer the
0		   1;;        system's default-pathname to the journal directory, since journal files might be on different
0		   1;;        host from the source files.
0		   1;;
0		   (and system (or (sct:system-default-pathname system) (sct:system-journal-directory system)))))
	   (when default-logical-pathname
	      (let ((logical-pathname (send default-logical-pathname :back-translated-pathname pathname)))
		 (when (and (typep logical-pathname 'fs:logical-pathname)
			    (eq (send logical-pathname :translated-pathname) pathname))
		    (setq pathname logical-pathname)
		    (return-from find-logical-pathname)))
1	      ;;
	      ;;        OK, we do it the hard way.  This really should avoid patchable components, but there is no
	      ;;        :include-components :subsystems-only.
	      ;;
0	      (let ((all-files (sct:get-all-system-input-files system :include-components t))
		    1;;
		    ;;        these are non-vc pathnames since we gave no vc branch.
0		    1;;
0		    (flat-pathname (send pathname :new-pathname :vc-branch nil :vc-version nil)))
		(loop for file in all-files
		      as translated-pathname = (and (cl:pathnamep file) (send file :translated-pathname))
		      when (and translated-pathname (eq translated-pathname flat-pathname))
			do (setq pathname (send file :new-pathname
						:vc-branch (fs:pathname-vc-branch pathname)
						:vc-version (fs:pathname-vc-version pathname)))
			   (return-from find-logical-pathname)))))))
   (let ((version (send pathname :version)))
      1;;
0      (cond
	((and (symbolp version) (eq :version :oldest))
	 (setq version (send (send pathname :truename) :version)))
	((integerp version) nil)
	1;;        Map nil, :unspecific, :newest, :wild into nil
0	(t (setq version nil)))
      (let ((return-pathname (send pathname :new-version version)))
	(values return-pathname t))))
;;;
;;;	Utilities to make C argc/argv style arguments.
;;;
(defun copy-into-c-args (c-args)
  ;;
  ;; 1 for the function name itself which others put in.
  ;;
  (let ((argc (1+ (length c-args))))
    (values argc
	    (loop with index
		  with argv
		  initially (setq index 2
				  ;;
				  ;; 1 for the null pointer required for argv[argc].
				  ;; Note:  argc is really (1+ (length c-args)),
				  ;;        not (2+ (length c-args)).
				  ;;
				  argv (make-array (* 2 (1+ argc))))
		  for command-token in c-args
		  do (setf (aref argv index)
			   (copy-lisp-string-into-c-two-word-pointer-string command-token))
		     (setf (aref argv (incf index)) 0)
		     (incf index)
		  finally (setf (aref argv index) nil)
			  (setf (aref argv (incf index)) 0)
			  (return argv)))))

(defun build-expanded-argument-list (program-name arguments)
   (declare (values argc-argv-style-argument-list))
   (when arguments
      (multiple-value-bind (argc argv)
	    (copy-into-c-args arguments)
	 (setf (aref argv 0)
	       (copy-lisp-string-into-c-two-word-pointer-string program-name))
	 (setf (aref argv 1) 0)
	 `(,argc ,argv 0))))
