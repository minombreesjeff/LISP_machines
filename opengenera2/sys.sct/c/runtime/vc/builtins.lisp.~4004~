;;; -*- Mode: LISP; Package: C-SYS; Lowercase: T; Base: 10; Syntax: Common-lisp -*-

;;;>
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

;;;
;;;	Created on Wednesday the twenty-ninth of July, 1987 at 8:03:02 pm by DySak on Nene at SCRC.
;;;
#|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		     This file contains the built-in routines called at runtime by compiler generated code.
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|#
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;
;;; ASSUMES:0	1The sign position is one relative rather than zero relative.
;;;
0(defun sign-extend-bit-field (field sign-position)
  (let ((mask (- (lsh 1 (- sign-position 1)) 1)))
    (logxor mask (- mask (ldb (byte sign-position 0) field)))))
(defun c-rest-arg-copy (stack-array stack-array-word-offset rest-arg-list)
  (loop for entry in rest-arg-list
	do (setf (aref stack-array stack-array-word-offset) entry)
	   (incf stack-array-word-offset)))
1;;;
;;; ASSUMES:0	unsigned-int-1 1and 0unsigned-int-21 are both 0integerp.
1;;; TBDEES:0	1The compiler can generate calls to this directly when it knows it has fixnums in hand.  This was not yet done as
;;;0	1of 11/11/87 at 19:11:41.
;;;
0(defun unsigned-integer-compare (unsigned-int-1 unsigned-int-2)
   (declare (values lt-eq-gt-0))
   (let ((unsigned-int-1 (sys:%logldb (byte 32 0) unsigned-int-1))
	 (unsigned-int-2 (sys:%logldb (byte 32 0) unsigned-int-2)))
     (if (minusp (logxor unsigned-int-1 unsigned-int-2))
	 1;;
0	 1;;        When the signs different, they numbers can't be =.  So, whichever is negative is the greater of the two.
0	 1;;
0	 (if (minusp unsigned-int-1) 1 -1)
	 (- unsigned-int-1 unsigned-int-2))))
;;;
;;; ASSUMES: dividend and divisor are both integerp.
;;;
(defun unsigned-integer-divide (dividend divisor)
  (declare (values quotient))
  (values (sys:%divide-bignum-step (sys:%logldb sys:%%q-fixnum dividend)
				   0
				   (sys:%logldb sys:%%q-fixnum divisor))))
;;;
;;; ASSUMES: dividend and divisor are both integerp.
;;;
(defun unsigned-integer-remainder (dividend divisor)
  (declare (values remainder))
  (multiple-value-bind (quotient remainder)
      (sys:%divide-bignum-step (sys:%logldb sys:%%q-fixnum dividend)
			       0
			       (sys:%logldb sys:%%q-fixnum divisor))
    (declare (ignore quotient))
    remainder))
