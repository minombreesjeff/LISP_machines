D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (:SWISS :BOLD :SMALL) "HL10B");;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: COMPRESSION -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;;; Support for a buffered, encapsulating compressing stream:  Input (decompressing) side.

0(defmethod (2 0 (NIL 0) (:FIX :BOLD :NORMAL) "CPTFONTCB")(FINALIZE-INPUT BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 ()
  1;; Call this when you need to deallocate everything without necessarily sending a :CLOSE.
0  1;; This is useful for, e.g., reading from a tape stream.
0  (deallocate-carefully t t decompression-code-block   code-block   code-block-resource-descriptor)
  (deallocate-carefully t t decompression-code-buffer  code-buffer  code-buffer-resource-descriptor)
  (deallocate-carefully t t decompression-token-buffer stack        stack-resource-descriptor)
  (deallocate-carefully t t decompression-prefix-table prefix-table prefix-table-resource-descriptor)
  (deallocate-carefully t t decompression-suffix-table suffix-table suffix-table-resource-descriptor)
  (deallocate-carefully t t decompression-public-buffer  public-buffer  public-buffer-resource-descriptor)
  (deallocate-carefully t t decompression-private-buffer private-buffer private-buffer-resource-descriptor)
  )

(defmethod 2(:CLOSE BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (&optional abortp)
  (finalize-input self)
  (close si:stream :abort abortp))  

(defmethod 2(:DISCARD-INPUT-BUFFER BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (the-buffer)
  the-buffer
  nil)

(defflavor 2BUFFERED-DECOMPRESSING-INPUT-STREAM0 ()
	   (buffered-decompressing-input-mixin
	    si:buffered-input-stream))

(define-decompress-next-input-buffer 2BUFFERED-DECOMPRESSING-INPUT-STREAM0)

(defmethod 2(:ELEMENT-TYPE BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 ()
  uncompressed-stream-element-type)

(defmethod 2(:BYTE-SIZE BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 ()
  1;; Dealing with this case makes me wish I'd included a real byte-size
0  1;; originally, as well as an element-type.  I guess if there's ever a good
0  1;; reason for incrementing the protocol version, putting a byte size of
0  1;; some sort into the preamble would be a good idea.  Then this method
0  1;; could just read that.
0  1;;
0  1;; Note that any case in which we have no idea returns 8, not NIL or
0  1;; :DEFAULT.  I hope this is reasonable.  I suspect that any case in which
0  1;; the input data was not a subtype of CHARACTER or UNSIGNED-BYTE is
0  1;; sufficiently degenerate that it's not a problem anyway.  SIGNED-BYTEs
0  1;; spring to mind as something some wiseacre might use...
0  (cond ((subtypep uncompressed-stream-element-type 'character)
	 nil)					1; Characters don't have a byte size.
0	((subtypep uncompressed-stream-element-type 'unsigned-byte)
	 1;; Shamelessly stolen from FS:BYTE-SIZE-FROM-ELEMENT-TYPE.
0	 (block byte-size
	   (when (listp uncompressed-stream-element-type)
	     (case (first uncompressed-stream-element-type)
	       (unsigned-byte			1; E.g., (UNSIGNED-BYTE n).
0		 (unless (eq (second uncompressed-stream-element-type) 'cl:*)
		   (return-from byte-size
		     (second uncompressed-stream-element-type))))
	       (integer				1; See if we're really saying (UNSIGNED-BYTE n).
0		 (when (and (eql     (second uncompressed-stream-element-type) 0)
			    (zl:fixp (third  uncompressed-stream-element-type))
			    (plusp   (third  uncompressed-stream-element-type)))
		   (return-from byte-size
		     (integer-length (third  uncompressed-stream-element-type)))))))
	   8))					1; We have no idea; lie creatively.
0	(t 8)))

(compile-flavor-methods buffered-decompressing-input-stream)

1;;; End of file.
