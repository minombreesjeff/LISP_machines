D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (:SWISS :BOLD :SMALL) "HL10B");;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: COMPRESSION; -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;;; User interface for the compression substrate.
;;;; The two user-visible interfaces are the Compress File and the Decompress File CP commands.

0(defparameter (2 0 (NIL 0) (:FIX :BOLD :NORMAL) "CPTFONTCB")*DEBUGGING-COMPRESS-FILE*0 nil
  "If non-NIL, causes COMPRESS-OR-DECOMPRESS-FILE to emit some debugging information.")

1;;; Soon to be the general-case version.
0(defun 2COMPRESS-OR-DECOMPRESS-FILE0 (mode from-pathname to-pathname
				    &key
				    translation-strategy
				    (preamble-type :symbolics)
				    (copy-author t)
				    (copy-creation-date t)
				    (create-directories :query)
				    (report-stream nil)
				    (preserve-dates nil))
  (zl:check-arg mode (member mode '(:compress :decompress)) "one of :COMPRESS or :DECOMPRESS")
  (setf from-pathname (fs:merge-pathnames from-pathname))
  (setf to-pathname (fs:parse-pathname to-pathname nil from-pathname))	1; Don't merge yet...
0  1;; Unfortunately, if we are trying to copy and name/type/version
0  1;; preserve, we must find the link-opaque truename in order to get the
0  1;; target name, and we cannot get it from the open stream if a link was
0  1;; involved.
0  (if (and (member (send from-pathname :version) '(:newest :oldest))
	   (or (eq (send to-pathname :version) :wild)
	       (not (or (send to-pathname :name)
			(send to-pathname :type)
			(send to-pathname :version)))))
      (setf from-pathname (fs:link-opaque-truename from-pathname t)))
  (setf to-pathname (fs:merge-pathnames to-pathname from-pathname :newest))
  1;; Wild-merging feature: copying A.B to C.* should give C.B.
0  (if (send to-pathname :wild-p)
      (setf to-pathname (send from-pathname
			      :translate-wild-pathname to-pathname from-pathname)))
  (let ((public-buffer-element-type nil))	1; Fill it in later.
0    1;; We cannot trust the f-a-p's to do canonical type processing yet, because there wasn't time to
0    1;; finish that job in rel7.
0    1;; The right modularity would be for those f-a-p's (unix,vms) that need
0    1;; canonical type heuristication to do it.
0    1;; Some f-a-p's already do, but it isn't proved that they all do yet.
0    (multiple-value-bind (ct-et ct-et-definitive)
	(fs:default-element-type-from-canonical-type (send from-pathname :canonical-type))
      (when ct-et-definitive (setf public-buffer-element-type ct-et))
      (when *debugging-compress-file*
	(if ct-et-definitive
	    (format t "~&Defaulting element type to ~S from canonical type ~S."
		    :default
		    (send from-pathname :canonical-type))
	    (format t "~&Defaulting element type via :DEFAULT to open."))))
    (error-restart ((error) "Retry ~(~A~)ing ~A to ~A." mode from-pathname to-pathname)
      (with-open-file (istream from-pathname
			       :direction :input
			       :element-type (ecase mode
					       (:compress :default)
					       (:decompress '(unsigned-byte 8)))
			       :preserve-dates preserve-dates)
	1;; After opening the input file, figure out what element type to use for
0	1;; the copy, if we don't already know.
0	(let ((original-input-element-type (fs:%file-stream-file-element-type istream)))
	  (when (eq original-input-element-type 'cl:character)
	    1;; If we get a CHARACTER stream, 'decapsulate' it and
0	    1;; set the element type to STRING-CHAR, so the compression will
0	    1;; be much more efficient by not decoding and re-encoding epsilons.
0	    1;; NB!  This assumes there's only one kind of character encoding in
0	    1;; the world; this'll have to be redone, with help at the access-path
0	    1;; level, when any of the X3J13-proposed things become real.
0	    (when (operation-handled-p istream 'si:unencapsulate-stream)
	      (when *debugging-compress-file*
		(format t "~&Decapsulating ~S" istream))
	      (setf istream (si:unencapsulate-stream istream))
	      (when *debugging-compress-file*
		(format t "~& -> ~S~&" istream))
	      (setf public-buffer-element-type 'cl:string-char)
	      (when *debugging-compress-file*
		(format t "~&Setting ~S to ~S~&" 'public-buffer-element-type public-buffer-element-type))))
	  (setf from-pathname (or (send-if-handles istream :truename) from-pathname))
	  (unless public-buffer-element-type
	    (setf public-buffer-element-type (cl:stream-element-type istream))
	    (when *debugging-compress-file*
	      (format t "~&~S still NIL, so setting it to ~S~&"
		      'public-buffer-element-type public-buffer-element-type)))
	  (when copy-author
	    (setf copy-author
		  (or (send-if-handles istream :author)
		      (zl:get
			(condition-case ()	1; Try to get props.
0			     (fs:file-properties from-pathname)
			   (error '(nil)))
			:author))))
	  (when report-stream
	    (format report-stream "~&~:(~A~)ing ~A into ~A" mode from-pathname to-pathname))
	  (fs:with-copyf-create-directories (create-directories)
	    (let ((if-exists-version
		    (if (eq (send to-pathname :version) :newest)
			:new-version
			:supersede))
		  (estimated-length (or (send-if-handles istream :length) 0)))
	      (flet ((finish-up (ostream)	1; Can't use lexical capture 'cause doesn't exist yet...
0		       (when (or copy-creation-date copy-author)	
			 (send ostream :eof)	1; Make sure the data is all in the file.
0			 (when copy-creation-date
			   (setf copy-creation-date
				 (send-if-handles istream :creation-date)))
			 (fs:copy-author-and-creation-date ostream copy-author copy-creation-date
							   (or report-stream *error-output*)))
		       (close istream)		1; So copy A.B.1  A.B.1 can :SUPERSEDE right.
0		       (close ostream)
		       (setf to-pathname
			     (or (send-if-handles ostream :truename) to-pathname))
		       (when report-stream
			 (format report-stream "~&~:(~A~)ed ~A to ~A"
				 mode from-pathname to-pathname)))
		     (maybe-debug (ostream)
		       (when *debugging-compress-file*
			 (format t "~&Input stream-element-type ~S, output stream-element-type ~S.~&"
				 (cl:stream-element-type istream)
				 (cl:stream-element-type ostream)))))
		(ecase mode
		  (:compress
		    (let ((element-type nil)
			  (translate? nil))
		      (ecase preamble-type
			(:symbolics
			  (unless (eq translation-strategy :derive-from-preamble-type)
			    (format t "~&The :Translation Strategy keyword is ignored for preamble type Symbolics.~&")))
			(:unix
			  (when (eq translation-strategy :derive-from-preamble-type)
			    (setf translation-strategy :query))
			  (multiple-value-setq (element-type translate?)
			    (text-or-binary? translation-strategy from-pathname))
			  element-type))	1; Ignored.
0		      (with-open-file (ostream to-pathname
					       :direction :output
					       :element-type '(cl:unsigned-byte 8)
					       :if-exists if-exists-version
					       :estimated-length estimated-length)
			(maybe-debug ostream)
			(let ((compression-stream
				(make-instance 'compression:buffered-compressing-output-stream
					       :stream ostream
					       :uncompressed-stream-element-type original-input-element-type
					       :public-buffer-element-type public-buffer-element-type
					       :preamble-type preamble-type
					       :unix-translation-in-effect? translate?
					       )))
			  (stream-copy-until-eof istream compression-stream)
			  (compression::finalize-output compression-stream nil)
			  (finish-up ostream)))))
		  (:decompress
		    (let ((decompression-stream
			    (make-instance 'compression:buffered-decompressing-input-stream
					   :stream istream)))
		      (when (eq (bc-compression-type decompression-stream) :unix)
			1;; Now that we know we're using UNIX decompression, figure out whether or not to do character set translation.
0			(multiple-value-bind (element-type translate?)
			    (text-or-binary? translation-strategy from-pathname)
			  element-type		1; Ignored.
0			  (when translate?
			    1;; Bash the decompressor so it starts translating at this point.  No decompressed
0			    1;; characters have been read so far.  We do it this way because we don't know until
0			    1;; the file is opened whether it's written using Symbolics- or UNIX-style
0			    1;; compression, and we don't want to have to reopen the file once we've figured
0			    1;; this out.
0			    (setf (bc-unix-translation-in-effect? decompression-stream) t))))
		      (with-open-file (ostream to-pathname
					       :direction :output
					       :element-type
					       (let ((set (cl:stream-element-type decompression-stream)))
						 (if (eq set 'cl:character)
						     'cl:string-char
						     set))
					       :if-exists if-exists-version
					       :estimated-length (* estimated-length 2))
			(maybe-debug ostream)
			(stream-copy-until-eof decompression-stream ostream)
			(compression::finalize-input decompression-stream)
			(finish-up ostream))))))))))))
  to-pathname)

(defun 2CP-COMPRESSION-COMMAND-BODY 0(mode &key files to-file
				    translation-strategy
				    copy-properties create-directories
				    preamble-type query preserve-dates)	1; PRESERVE-DATES not yet accessible to the CP command.
0  (zl:check-arg mode (member mode '(:compress :decompress)) "one of :COMPRESS or :DECOMPRESS")
  (let ((copy-author (not (null (member :author copy-properties))))
	(copy-creation-date (not (null (member :creation-date copy-properties))))
	(mode-string (format nil "~(~A~)" mode)))
    (when (eq query :ask)
      (setf query (if (fquery nil (format nil "Ask before ~Aing each file? " mode-string)) :yes :no)))
    (unless (listp files)
      (setf files (list files)))		1; Compatibility kludge.
0    (flet ((do-compression-or-decompression (mode from-file to-file)
	     (when (or (eq query :no)
		       (fquery nil (format nil "~:(~A~) file ~A into ~A? " mode-string
			       from-file to-file)))
	       (let ((report-stream (when (eq query :no) *standard-output*)))
		 (condition-case (err)
		      (compress-or-decompress-file mode from-file to-file
						   :translation-strategy translation-strategy
						   :preamble-type preamble-type
						   :copy-author copy-author
						   :copy-creation-date copy-creation-date
						   :create-directories create-directories
						   :preserve-dates preserve-dates
						   :report-stream report-stream)
		    (fs:file-operation-failure
		      (format *error-output* "~& Could not ~A ~A:~%  ~~A~"
			      mode-string from-file err)))))))
      (dolist (from-file files)
	(if (send from-file :wild-p)
	    (let ((files (condition-case (err)
			      (cdr (fs:directory-link-opaque-dirlist
				     from-file :sorted))	1; Need slow.
0			    (fs:file-operation-failure
			      (format *error-output* "~&Error: ~~A~" err)))))
	      (if files
		  (loop with merged-to = (fs:merge-pathnames
					   to-file
					   (fs:default-pathname from-file nil nil :wild)
					   :wild)
			for plist in files
			for (file) = plist
			for truename = (or (zl:get plist :truename) file)
			if (zl:get plist :directory) do nil
			else if (zl:get plist :link-to) do nil	1; This involves hair and design.
0			else
			  do (do-compression-or-decompression
			       mode
			       truename
			       (send from-file :translate-wild-pathname
				     merged-to file))
			finally (return t))
		  (format *error-output* "~&~A matches no files.  None compressed." from-file)))
	    (do-compression-or-decompression mode from-file to-file))))))

(defparameter 2*LIKELY-UNIX-BINARY-FORMATS*
0	      1;; Additions to this list are strongly encouraged.
0	      '("TAR"
		"ARC" "ZOO" "LZH" "ZIP"		1; File archives.
0		"MID"				1; Midi files.
0		"GIF" "IFF" "TIF" "TIFF" "GEM" "NEO" "SPC"	1; Images.
0		"LIB" "OLB"			1; Object Code libraries.
0		"GL"				1; Animation files.
0		"JPG" "JPEG" "AU" "MOOV" "MOV" "AVI" "RA"
		))

(defun 2ATOMIZE-PATHNAME 0(pathname)
  1;; Only looks at the name and type of the pathname; its host, directory,
0  1;; or version tells us nothing about whether it's binary or not.
0  1;; Returns NIL if no name or type.
0  (let* ((name-and-type-whole
	   (string-append (or (send pathname :name) "")
			  " "
			  (or (send pathname :type) "")))
	 (name-and-type (string-trim '(#\Space) name-and-type-whole))
	 (limit (string-length name-and-type)))
    (unless (zerop limit)
      (let ((atomization (make-string limit)))
	(loop for index from 0 below limit
	      for character = (aref name-and-type index)
	      do (setf (aref atomization index)
		       (if (alpha-char-p character)
			   character
			   #\Space)))
	(string-trim '(#\Space) atomization)))))

(defun 2LIST-ATOMIZE-PATHNAME 0(pathname)
  1;; Returns a list of pathname atoms, with the rightmost atom being
0  1;; first in the list.  More useful than the simple atomized pathname,
0  1;; because this also compensates for multiple contiguous spaces caused
0  1;; by multiple contiguous non-alphas in the input pathname.
0  (let ((name (atomize-pathname pathname)))
    (when name		    1; Depends on being space-trimmed at both ends.
0      (let ((result nil))
	(loop with left = 0
	      for right = (string-search-char
			    #\Space name
			    :start left)
	      do (cond (right
			(push (substring name left right)
			      result)
			(setf left (string-search-not-char
				     #\Space name
				     :start right)))
		       (t
			(push (substring name left)
			      result)
			(loop-finish))))
	result))))

(defun 2HEURISTICATE-UNIX-TEXT-OR-BINARY-FROM-PATHNAME 0(pathname)
  1;; Breaks the pathname (including type) into "atoms" consisting of contiguous
0  1;; sequences of alphabetic characters, strips off any Z atom, and then checks
0  1;; whether the rightmost remaining atom is in the list of files likely to be binary
0  1;; files.  Best heuristic I could think of with a chance of user customizability.
0  1;; Canonical types won't do this right, because of file-naming variability (e.g.,
0  1;; is the file named .Z or -Z or neither?  What about the next atom leftward?),
0  1;; and because the existing canonical types are too wimpy and I don't want to
0  1;; figure out what to do about them for non-UNIX hosts.
0  1;;
0  1;; Returns NIL (if we don't know at all), :TEXT (if we think it's text), or :BINARY
0  1;; (if we think it's binary).  Be aware that any of these are still just guesses.
0  (let ((name-list (list-atomize-pathname pathname)))
    1;; No name at all shouldn't happen, but don't blow up if so.
0    (when name-list
      1;; Ignore whether it claims to be LZW-compressed, since we're being
0      1;; called in a context where we KNOW it's compressed, and we want to
0      1;; know about the file that was compressed (we know the actual data
0      1;; is compressed---it's the data inside we care about).
0      (when (string-equal (first name-list) "Z")
	(setf name-list (cdr name-list)))
      1;; Now see if the remaining rightmost pathname atom is a suspicious one.
0      (if (member (first name-list)
		  *likely-unix-binary-formats*
		  :test #'string-equal)
	  :binary
	  :text))))

(defun (3 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")TEXT-OR-BINARY?0 (mode pathname)
  (declare (values open-with-this-element-type translate-characters?))
  (ecase mode
    (:text
      (values 'cl:string-char
	      t))
    (:binary
      (values '(cl:unsigned-byte 8)
	      nil))
    (:query
      (setf mode (fquery '(:choices (((:text "Text.") #\T #\C)	1; Text or Character.
0				     ((:binary "Binary.") #\B))
			   :list-choices nil
			   :no-input-save t)
			 "Text or binary mode for ~A? "
			 pathname))
      (text-or-binary? mode pathname))
    (:heuristicate
      (let ((guess (heuristicate-unix-text-or-binary-from-pathname pathname)))
	(ecase guess
	  (:text (text-or-binary? :text pathname))
	  (:binary (text-or-binary? :binary pathname))
	  ((nil) (text-or-binary? :query pathname)))))))

(cp:define-command (3COM-COMPRESS-FILE0 :command-table "File")
    ((files '((cl:sequence fs:pathname))
	    :confirm t
	    :documentation "File(s) to be compressed")
     (to-file #-ignore '((fs:pathname) :dont-merge-default t)
	      1;; This new UI behavior is still a matter of controversy.
0	      #+ignore '((fs:pathname) :default-name :wild :default-type :wild :default-version :wild)
	      :default #-ignore (fs:default-pathname
				  (if (listp files) (first files) files) nil nil :wild)
	      #+ignore (if (listp files) (first files) files)
	      :confirm t
	      :prompt "to"
	      :documentation "Destination directory or file")
     &key
     (copy-properties '((cl:sequence
			  ((cl:member :author :creation-date)
			   :description "file property")))
		      :default '(:author :creation-date)
		      :documentation "Properties of the file to be duplicated")
     (create-directories '((scl:alist-member
			     :alist (("Yes" :value t
				      :documentation "Automatically create it")
				     ("Error" :value nil
				      :documentation "Signal an error")
				     ("Query" :value :query
				      :documentation "Ask what to do then"))))
			 :default :query
			 :documentation
			 "What to do if a destination directory does not exist")
     (preamble-type '((scl:alist-member
			:alist (("Symbolics" :value :symbolics
				 :documentation "Use Symbolics-style preamble")
				("UNIX" :value :unix
				 :documentation "Use UNIX-style preamble")))
		      :description "a preamble type")
		    :default :symbolics
		    :documentation "Type of preamble to use")
     (translation-strategy '((scl:alist-member
			       :alist (("Text" :value :text
					:documentation "Text (do character set translation)")
				       ("Binary" :value :binary
					:documentation "Binary (don't do character set translation)")
				       ("Query" :value :query
					:documentation "Ask for each file")
				       ("Heuristicate" :value :documentation "Choose based on pathname (query if unsure)"))))
			   :default :derive-from-preamble-type
			   :display-default nil
			   :documentation
			   "Whether or not to perform character set translation")
     (query '((cl:member :yes :no :ask))
	    :mentioned-default :yes
	    :default :no
	    :documentation "Whether to ask before compressing each file"))
   1;; Actually do some work.
0   (cp-compression-command-body :compress
				:files files
				:to-file to-file
				:copy-properties copy-properties
				:create-directories create-directories
				:preamble-type preamble-type
				:translation-strategy translation-strategy
				:query query))

(cp:define-command (3COM-DECOMPRESS-FILE0 :command-table "File")
    ((files '((cl:sequence fs:pathname))
	    :confirm t
	    :documentation "File(s) to be decompressed")
     (to-file #-ignore '((fs:pathname) :dont-merge-default t)
	      1;; This new UI behavior is still a matter of controversy.
0	      #+ignore '((fs:pathname) :default-name :wild :default-type :wild :default-version :wild)
	      :default #-ignore (fs:default-pathname
				  (if (listp files) (first files) files) nil nil :wild)
	      #+ignore (if (listp files) (first files) files)
	      :confirm t
	      :prompt "to"
	      :documentation "Destination directory or file")
     &key
     (copy-properties '((cl:sequence
			  ((cl:member :author :creation-date)
			   :description "file property")))
		      :default '(:author :creation-date)
		      :documentation "Properties of the file to be duplicated")
     (create-directories '((scl:alist-member
			     :alist (("Yes" :value t
				      :documentation "Automatically create it")
				     ("Error" :value nil
				      :documentation "Signal an error")
				     ("Query" :value :query
				      :documentation "Ask what to do then"))))
			 :default :query
			 :documentation
			 "What to do if a destination directory does not exist")
     (translation-strategy '((scl:alist-member
			       :alist (("Text" :value :text
					:documentation "Text (do character set translation)")
				       ("Binary" :value :binary
					:documentation "Binary (don't do character set translation)")
				       ("Query" :value :query
					:documentation "Ask for each file")
				       ("Heuristicate" :value :heuristicate
					:documentation "Choose based on pathname (query if unsure)"))))
			   :default :query
			   :documentation
			   "Whether or not to perform character set translation")
     (query '((cl:member :yes :no :ask))
	    :mentioned-default :yes
	    :default :no
	    :documentation "Whether to ask before decompressing each file"))
   1;; Actually do some work.
0   (cp-compression-command-body :decompress
				:files files
				:to-file to-file
				:copy-properties copy-properties
				:create-directories create-directories
				:translation-strategy translation-strategy
				:query query
				))

1;;; End of file.
