D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (:SWISS :BOLD :SMALL) "HL10B");;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: COMPRESSION -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;;; Support for a buffered, encapsulating compressing stream:  Output (compressing) side.

0(defmethod (2 0 (NIL 0) (:FIX :BOLD :NORMAL) "CPTFONTCB")(:NEW-OUTPUT-BUFFER BUFFERED-COMPRESSING-OUTPUT-MIXIN)0 ()
  (when public-buffer
    (error "You asked for a new output buffer, but you've already got ~S."
	   public-buffer))
  (when private-buffer
    (error "You asked for a new output buffer, which means that the private~@
            output buffer I'm using should already have been discarded, but it wasn't.~@
            This is an internal error in the compression substrate."))
  (multiple-value-setq (public-buffer public-buffer-resource-descriptor)
    (allocate-resource 'compression-public-buffer
		       public-buffer-element-type
		       number-of-public-bytes-per-private-byte-shift))
  (multiple-value-setq (private-buffer private-buffer-resource-descriptor)
    (allocate-resource 'compression-private-buffer
		       public-buffer))
  (values public-buffer
	  0
	  (private-buffer-indexpublic-buffer-index
	    *buffered-compressing-stream-output-buffer-size*)))

(defmethod 2(:DISCARD-OUTPUT-BUFFER BUFFERED-COMPRESSING-OUTPUT-MIXIN)0 (the-buffer)
  (unless (eq the-buffer public-buffer)
    (error "You asked to deallocate ~S, but I last gave you ~S."
	   the-buffer
	   public-buffer))
  (deallocate-carefully nil t compression-public-buffer  public-buffer  public-buffer-resource-descriptor)
  (deallocate-carefully nil t compression-private-buffer private-buffer private-buffer-resource-descriptor)
  nil)

(defmethod 2(:SEND-OUTPUT-BUFFER BUFFERED-COMPRESSING-OUTPUT-MIXIN)0 (passed-public-buffer passed-buffer-limit
											 &optional ignore)
  1;; Error check.
0  (unless (eq passed-public-buffer
	      public-buffer)
    (error "I last gave you ~S via :NEW-OUTPUT-BUFFER,~@
            but now you're trying to palm off ~S on me."
	   public-buffer passed-public-buffer))
  1;; Per-call initialization.
0  (setf private-buffer-index 0)			1; So TYI will start at the beginning of PRIVATE-BUFFER ...
0  (setf private-buffer-limit			1; ... and go to PRIVATE-BUFFER-LIMIT.
0	(public-buffer-indexprivate-buffer-index passed-buffer-limit))
  (with-fast-hash hash-table			1; Make use of the hash table by the macros see a decoded array.
0    (let ((private-buffer private-buffer))
      (declare (sys:array-register private-buffer))
      1;; If this is the first time we've been called for the stream, spit out some magic bytes and set up some compression state variables.
0      (unless emitted-preamble
	(write-compress-preamble self si:stream)
	(with-output-buffer
	  (let ((first-character (tyi private-buffer private-buffer-index private-buffer-limit)))
	    (encode-first-byte first-character si:stream))
	  (setf emitted-preamble t)))
      1;; Now spit out a buffer of data.
0      (with-output-buffer
 	(encode-data private-buffer private-buffer-index private-buffer-limit si:stream))))
  1;; Clean up after ourselves.  Closing in ABORT mode might also call :DISCARD-OUTPUT-BUFFER for us.
0  (send self :discard-output-buffer passed-public-buffer))

(defmethod 2(EMIT-FINAL-OUTPUT BUFFERED-COMPRESSING-OUTPUT-MIXIN)0 (abort-p)
  1;; Make sure every last bit gets sent out.  The checksum is actually written by ENCODE-DONE.
0  1;;
0  1;; Must NOT be called from inside :SEND-OUTPUT-BUFFER, since we make our own call to WITH-OUTPUT-BUFFER.
0  (unless abort-p				1; Don't bother writing the postamble if we're aborting anyway.
0    1;; If the input file was zero length, none of the various machinery will ever have been called,
0    1;; which means we won't have emitted any bytes yet, not even preamble.  In that case, it's
0    1;; essential that we not emit any postamble, either, for three reasons:
0    1;;  
0    1;;  
0    1;;  
0    1;; It makes no sense to fix things so we emit a preamble and postamble for a zero-byte input:
0    1;; better that it's obvious to a user that a truly zero-byte file was written (hence, read).
0    1;;
0    1;; Make sure all the output is really there before writing the postamble.
0    (send self :force-output)
    1;; Now write the postamble.
0    (when emitted-preamble
      (with-output-buffer
	(encode-done si:stream))
      (setq emitted-preamble nil))))

(defmethod 2(DEALLOCATE-EVERYTHING BUFFERED-COMPRESSING-OUTPUT-MIXIN)0 (abort-p)
  1;; Deallocate everything.  (Exiting the WITH-OUTPUT-BUFFER should have ensured that the buffer was discarded,
0  1;; hence won't still be allocated, but we'll check anyway to avoid any weird leaks.)
0  abort-p					1; Ignored.
0  (deallocate-carefully t t compression-hash-table     hash-table     hash-table-resource-descriptor)
  (deallocate-carefully t t compression-public-buffer  public-buffer  public-buffer-resource-descriptor)
  (deallocate-carefully t t compression-private-buffer private-buffer private-buffer-resource-descriptor)
  )

(defmethod 2(FINALIZE-OUTPUT BUFFERED-COMPRESSING-OUTPUT-MIXIN)0 (&optional abort-p)
  1;; Does about the same work as sending :CLOSE (runs what the before and after methods run),
0  1;; but doesn't actually close.  Use this if you're writing to some stream you can't close, like
0  1;; a tape stream to which more files will be written.
0  (emit-final-output self abort-p)
  (deallocate-everything self abort-p))

(defmethod 2(:CLOSE BUFFERED-COMPRESSING-OUTPUT-MIXIN :BEFORE)0 (&optional abort-p)
  (emit-final-output self abort-p))

(defmethod 2(:CLOSE BUFFERED-COMPRESSING-OUTPUT-MIXIN :AFTER)0 (&optional abort-p)
  (deallocate-everything self abort-p))

(defmethod 2(:CLOSE-WITH-REASON BUFFERED-COMPRESSING-OUTPUT-MIXIN :BEFORE)0 (ignore &optional abort-p)
  1;; SI:BASIC-BUFFERED-OUTPUT-STREAM, a required flavor, defines this, so I guess
0  1;; we'd better define it, too.  Alas, the purpose of :CLOSE-WITH-REASON appears
0  1;; to be undocumented, but it appears to be used by various network streams,
0  1;; probably so servers can reject with reason.
0  (emit-final-output self abort-p))

1;;;; Instantiable flavors.

0(defflavor 2BUFFERED-COMPRESSING-OUTPUT-STREAM
0	1;; This is NOT an SI:CHARACTER-STREAM.
0	()
	(buffered-compressing-output-mixin
	 si:buffered-output-stream))

(compile-flavor-methods buffered-compressing-output-stream)

1;;; End of file.
