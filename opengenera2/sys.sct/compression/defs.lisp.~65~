D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (:SWISS :BOLD :SMALL) "HL10B");;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: COMPRESSION -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;;; General definitions.

;;;; Stuff common to both sides:  Constants used for defaulting for the flavor methods.

0(defparameter (2 0 (NIL 0) (:FIX :BOLD :NORMAL) "CPTFONTCB")*DEFAULT-COMPRESSION-COMPRESSED-BYTE-SIZE* 08
  "The width of the compressed stream after compression, in bits.")

(defparameter 2*DEFAULT-COMPRESSION-SMALLEST-CODE-SIZE* 09
  "The width of the smallest size of code we'll emit, in bits.")

(defparameter 2*DEFAULT-COMPRESSION-LARGEST-CODE-SIZE* 016	1; I think old UNIX programs and maybe ARC use 12, new UNIX and us, 16.
0  "The width of the largest size of code we'll emit, in bits.")

(defparameter 2*DEFAULT-COMPRESSION-NUMBER-OF-HASH-TABLE-ENTRIES* 079999
  "The number of entries in the compression hash table.  79999 is a
   prime somewhat bigger than 2^16, and must be bigger than
   2^*DEFAULT-COMPRESSION-LARGEST-CODE-SIZE*.")

(defparameter 2*DEFAULT-COMPRESSION-CREATE-RESET-CODE?* 0t
  "Whether or not we create a reset code.")

(defparameter 2*DEFAULT-COMPRESSION-EMIT-RESET-CODE-BEFORE-FIRST-BYTE?* 0nil  1; UNIX compress doesn't (and may get confused?), ARC does.
0  "Whether or not we emit a reset code before the first byte of compressed
   data, after the preamble, if any.  Depends on there being a reset code
   to emit.")

(defparameter 2*DEFAULT-COMPRESSION-FLUSH-BUFFER-ON-CODE-SIZE-CHANGES?* 0t
  "Whether or not we flush output codes (not bytes!) mod 8 until we hit
   a mod 8 boundary.  This preserves compatibility with the UNIX `compress'
   program, which uses a buffering scheme that results in emitting some
   extra garbage codes when a code size takes place, so that it doesn't
   have to get fancy with buffer management across code size changes.")

(defparameter 2*DEFAULT-COMPRESSION-FLUSH-BUFFER-AT-VERY-END?* 0nil
  "Whether or not to flush the buffer at the very end of the output.
   See *DEFAULT-COMPRESSION-FLUSH-BUFFER-ON-CODE-SIZE-CHANGES?*.
   UNIX `compress' apparently does not do this.")

(defparameter 2*DEFAULT-COMPRESSION-RESET-CODE* 0256
  "The actual code that causes a reset of the hash table.")

(defparameter 2*DEFAULT-COMPRESSION-EXTRA-CODES* 00
  "The number of extra codes (not including a possible reset code) which
   we can emit.  For example, if this is 1, we may use the code immediately
   above the reset code to convey something to the decompressor, such as
   an end-of-input status.")

(defparameter 2*DEFAULT-COMPRESSION-CHECKSUM-ALGORITHM* 0nil
  "Some object representing the algorithm to be used to compute the checksum,
   or NIL if no checksumming is being performed.")

(defparameter 2*DEFAULT-COMPRESSION-MAJOR-VERSION-NUMBER* 00
  "The current major version number of the compression code.  This is set
   by hand, so it is NOT the same as the version number maintained by SCT!
   It is expected that this number will change with incompatible changes
   to the compressor.")

(defparameter 2*DEFAULT-COMPRESSION-MINOR-VERSION-NUMBER* 00
  "The current minor version number of the compression code.  This is set
   by hand, so it is NOT the same as the version number maintained by SCT!
   It is expected that this number will change on `significant' but still
   compatible changes to the compressor.")

(defparameter 2*DEFAULT-COMPRESSION-PREAMBLE-TYPE* 0:symbolics
  "Can be one of :UNIX or :SYMBOLICS.  If :UNIX, we write a UNIX-style
   three-byte preamble with no other information.  If :SYMBOLICS, we
   write a Symbolics-style preamble with version information, the
   original element-type of the stream, and so forth.")

(defparameter 2*DEFAULT-COMPRESSION-UNIX-TRANSLATION-IN-EFFECT?* 0nil
  "If non-NIL, we will translate characters as if were were going to a UNIX.
   It is recommended that the relevant IV of the compressing flavor be set
   to T to cause this translation to happen iff we are also writing a UNIX-style
   compression preamble (and presumably thus UNIX-style compression).")

1;;;; Stuff common to both sides:  A shared flavor and some substs.

;;; Note that there are several IV's defined by the compressing and decompressing
;;; sides that don't appear here.  That's because the decompressor generally wants
;;; to leave them unbound, so a failure to set them by reading the preamble will
;;; cause a blowout, while the compressor generally wants to bind them, to make
;;; it easier to use.

0(defflavor 2BASIC-BUFFERED-COMPRESSING-MIXIN
0	1;; Compressing and decompressing common basis.
0	(1;; Handling the element-type of the original, decompressed stream.  There are some issues here, as follows.
0	 1;; We always make the compressed stream be an 8B stream, element-type '(UNSIGNED-BYTE 8).  However,
0	 1;; the caller may have a different sort of buffer, such as 'STRING-CHAR.  It needs to tell us what sort of
0	 1;; buffer its stream will expect when it calls :NEW-OUTPUT-BUFFER, and that's what PUBLIC-BUFFER-ELEMENT-TYPE
0	 1;; is for.  On the other hand, the caller should also know what the original element-type of the decompressed data
0	 1;; was, and that's not necessarily the same thing:  For example, the original data might have been styled characters
0	 1;; with type 'CHARACTER.  Such data just can't be emitted, even as the 32-bit-wide words it is represented as,
0	 1;; because the style bits are world-load dependent.  The caller must first epsilonify the stream into 'STRING-CHAR,
0	 1;; then hand that stream to us.  However, the decompressing side has no way to know that this stream was originally
0	 1;; a string of type 'CHARARACTER and not 'STRING-CHAR unless we tell it, by embedding the value of
0	 1;; UNCOMPRESSED-STREAM-ELEMENT-TYPE in the preamble we write.  Thus, in the example above, the caller who is
0	 1;; reading styled characters will epsilonify them, then call us with :PUBLIC-BUFFER-ELEMENT-TYPE = 'STRING-CHAR,
0	 1;; UNCOMPRESSED-STREAM-ELEMENT-TYPE = 'CHARACTER.  The type 'CHARACTER lands in the preamble, and the
0	 1;; buffer we hand the caller is of type 'STRING-CHAR.  Neither of these are defaulted, because I want whoever
0	 1;; writes an instantiator of this instance to have to think about the issues and pick appropriately; they are required
0	 1;; init keywords.
0	 (public-buffer-element-type)
	 uncompressed-stream-element-type	1; Required init for compressor, set by MAKE-INSTANCE by decompressor.
0	 1;; Buffer management.  These are the buffers dealt with when the stream protocol sends us a :NEW-OUTPUT-BUFFER
0	 1;; message.  They are OUTPUT buffers to the stream protocol, but INPUT buffers to the compressing stuff, which
0	 1;; writes into an output buffer that is NOT an IV and is instead bound from a call to :GET-OUTPUT-BUFFER on SI:STREAM.
0	 1;; The PUBLIC-BUFFER is the one we return to the caller, and is always of the element-type specified
0	 1;; by PUBLIC-BUFFER-ELEMENT-TYPE.  The PRIVATE-BUFFER is the buffer we use internally to dump the
0	 1;; compressed data into, and is always of element-type '(UNSIGNED-BYTE 8).  The private buffer is an indirect array
0	 1;; that points at the public buffer.  Even if UNCOMPRESSED-STREAM-ELEMENT-TYPE is of type '(UNSIGNED-BYTE 8),
0	 1;; we do this, because otherwise the two buffers would actually be disjoint, and we wouldn't wind up updating the public
0	 1;; buffer when we dumped stuff in the private buffer.  We also keep around some resource descriptors solely as an
0	 1;; efficiency hack, since DEALLOCATE-RESOURCE runs faster if we know them.
0	 (public-buffer)
	 (public-buffer-resource-descriptor)
	 (private-buffer)
	 (private-buffer-resource-descriptor)
	 1;; Dealing with handling 16B and wider streams directly.  This is the number of public "bytes" per private
0	 1;; byte, minus one, so it's suitable for use with LSH (rather than multiplying or dividing).  This means that,
0	 1;; if the public & private widths are both 8B, this should be 0 (if the public is any character type, we'll also
0	 1;; be 0).  If the public type is 16B, this should be 1.  This gets set by the MAKE-INSTANCE method, not the user.
0	 (number-of-public-bytes-per-private-byte-shift 0)
	 1;; Codes sizes and only some of the many parameters.
0	 (code-size-min				1; Starting number of index bits.  We start out with a table of ...
0	   *default-compression-smallest-code-size*) 1; ... less than 2^CODE-SIZE-MIN keys.
0	 (code-size-max				1; The maximum size we'll allow the index to grow.  When it exceeds this, we flush the table.
0	   *default-compression-largest-code-size*)
	 (create-reset-code?			1; If true, the table will have a reset code.  (Can we flush the table without it?)
0	   *default-compression-create-reset-code?*)
	 (extra-codes				1; Whether or not there are any other codes (e.g., END-OF-INPUT) in addition to the RESET-CODE.
0	   *default-compression-extra-codes*))
	()
  :abstract-flavor
  (:initable-instance-variables
   public-buffer-element-type uncompressed-stream-element-type
   code-size-min code-size-max create-reset-code? extra-codes))

1;;; Some useful substs for dealing with mismatches between private and public byte sizes.

0(defsubst-in-flavor 2(INITIALIZE-SHIFT BASIC-BUFFERED-COMPRESSING-MIXIN)0 ()
  1;; Initializes the IV that tells us whether we have to do any shifting to get the arithmetic
0  1;; right when converting between private and public indices.  This matters when the public
0  1;; buffer is wider than the private buffer, e.g., a 16B.  Depends on IV being initialized to 0.
0  (when (subtypep public-buffer-element-type 'unsigned-byte)	1; Depends on above test succeeding.
0    (setf number-of-public-bytes-per-private-byte-shift
	  (1- (truncate (/ (fs:byte-size-from-element-type public-buffer-element-type) 8))))))

(defsubst 2PRIVATE-BUFFER-VALUEPUBLIC-BUFFER-VALUE 0(private-size publicprivate-shift)
  1;; If the public buffer is wider, we must divide (right shift)
0  1;; to get our returned buffer length in its units.
0  (lsh private-size
       (- publicprivate-shift)))

(defsubst 2PUBLIC-BUFFER-VALUEPRIVATE-BUFFER-VALUE 0(public-size publicprivate-shift)
  1;; If the public buffer is wider, we must multiply (left shift)
0  1;; to get its returned buffer length in our units.
0  (lsh public-size
       publicprivate-shift))

1;;; These two must come after the DEFFLAVOR above.
0(defsubst-in-flavor 2(PRIVATE-BUFFER-INDEXPUBLIC-BUFFER-INDEX BASIC-BUFFERED-COMPRESSING-MIXIN) 0(private-size)
  (private-buffer-valuepublic-buffer-value
    private-size
    number-of-public-bytes-per-private-byte-shift))

(defsubst-in-flavor 2(PUBLIC-BUFFER-INDEXPRIVATE-BUFFER-INDEX BASIC-BUFFERED-COMPRESSING-MIXIN) 0(public-size)
  (public-buffer-valueprivate-buffer-value
    public-size
    number-of-public-bytes-per-private-byte-shift))

1;;;; Output (compressing) side.

0(defflavor 2BUFFERED-COMPRESSING-OUTPUT-MIXIN
0	(1;; Version number information, for the decompressor.
0	 (major-version-number *default-compression-major-version-number*)
	 (minor-version-number *default-compression-minor-version-number*)
	 1;; Preamble hacking.
0	 (preamble-type				1; The type of preamble to emit.
0	   *default-compression-preamble-type*)
	 (emitted-preamble)			1; NIL if we haven't spit it out yet.
0	 1;; Handling the checksum.
0	 (checksum-algorithm			1; Algorithm we're using to compute the checksum.
0	   *default-compression-checksum-algorithm*)
	 (checksum 0)				1; Checksum currently being computed.
0	 1;; A little buffer management.
0	 (private-buffer-index)			1; The current position in the private buffer.
0	 (private-buffer-limit)			1; The highest position in the private buffer.
0	 1;; Keeping track of bits of some pending code that's been partially emitted to the output buffer, but can't be completely
0	 1;; emitted because the remaining bits of the code don't make up a whole byte.
0	 (excess 0)				1; Excess bits that have to be tossed on to the stream the next time we send a byte.
0	 (nbits 0)				1; How many excess bits there are in EXCESS.
0	 1;; Stuff used by the hash-table-searching macros.
0	 (current-string)			1; ???  (A misnomer.  It's always a single number, corresponding to a byte of the input.)
0	 (address)				1; ???  (I think this is used in optimizing probes into the hash table.)
0	 (table-size				1; How big HASH-TABLE is, in entries, not actual words.
0	   *default-compression-number-of-hash-table-entries*)
	 (hash-table-real-size)			1; For a hash table for which every entry takes two words (e.g., not packed, because ...
0						1; ... we're using codes above 12 bits such that two of them won't fit in a machine word ...
						; ... with another byte), this is the number of array elements we actually need to store ...
						; ... the hash table.  Since we allow greater than 12 bits and don't care about packing ...
						; ... efficiency of the table, this is always twice the value of TABLE-SIZE.
0	 (hash-table)				1; Stores the string hash table used to compress.
0	 (hash-table-resource-descriptor)	1; The descriptor returned by ALLOCATE-RESOURCE, for quicker deallocation.
0	 1;; Handling the actual codes we're emitting.
0	 (compressed-byte-size			1; The width of the resulting compressed stream.
0	   *default-compression-compressed-byte-size*)	1; [More things should use this instead of just 8.]
0	 (code-size)				1; The current number of bits in the index.  This grows monotonically from ...
						; ... CODE-SIZE-MIN to CODE-SIZE-MAX.  Once it pegs aginst CODE-SIZE-MAX, we ...
						; ... flush the table and start over with CODE-SIZE-MIN bits (a small code again).
0	 (code-limit)				1; When NEXT-CODE exceeds this, we'll have to go to a larger key or flush the table.
0	 (next-code)				1; The next code in the table available to be allocated, I think.
0	 (emit-reset-code-before-first-byte?
	   *default-compression-emit-reset-code-before-first-byte?*)
	 (flush-buffer-on-code-size-changes?	1; UNIX compress will emit up to 8 garbage codes (not bytes!) after a code size ...
0	   *default-compression-flush-buffer-on-code-size-changes?*)	1; ... change, because it uses an internal buffer for speed ...
0						1; ... and doesn't worry about tossing a few bytes of junk into the output when a size ...
0						1; ... change happens.  If this is T, we will do the same, for compatibility.
0	 (flush-buffer-at-very-end?		1; Whether to flush the buffer at the end as if we changed code size.
0	   *default-compression-flush-buffer-at-very-end?*)
	 (number-of-codes-emitted 0)		1; A simple count of the number of codes (not bytes!) emitted, for use by ...
0						1; ... FLUSH-OUTPUT-BUFFER if FLUSH-BUFFER-ON-CODE-SIZE-CHANGES? is T.
0	 (reset-code)				1; The code emitted to cause the table to be flushed.  (Don't know about index size changes.)
0	 (unix-translation-in-effect?
	   *default-compression-unix-translation-in-effect?*)
	 )
	(basic-buffered-compressing-mixin
	 si:indirect-stream-mixin)
  :abstract-flavor
  (:required-flavors si:basic-buffered-output-stream)
  (:required-init-keywords :public-buffer-element-type :uncompressed-stream-element-type)
  1;; You can change the behavior by changing the initable IV's below.  Not all of them may work:
0  1;; In particular, the fact that BYTE-SIZE = 8 is probably too hardwired into the code for
0  1;; a change here to take effect.  The others should be okay, though beware of changing
0  1;; them in inconsistent ways (e.g., CODE-SIZE-MAX bigger than the hash table, various
0  1;; flags to emit reset codes if no reset code supplied, etc).  I suppose I could write a checker
0  1;; in the MAKE-INSTANCE to check for silly settings.
0  (:initable-instance-variables
   major-version-number minor-version-number preamble-type
   compressed-byte-size reset-code checksum-algorithm emit-reset-code-before-first-byte?
   flush-buffer-on-code-size-changes? flush-buffer-at-very-end? unix-translation-in-effect?))

(defmethod 2(MAKE-INSTANCE BUFFERED-COMPRESSING-OUTPUT-MIXIN)0 (&rest ignore)
  (declare (values void))
  1;; Do some error-checking for silly settings.  This is certainly not all the ways you can get it wrong.
0  1;; We do it here because that catches it before we even bother writing a preamble.
0  (when (eql public-buffer-element-type 'character)
    1;; If the user specifies a correct PUBLIC-BUFFER-ELEMENT-TYPE (e.g., not 'CHARACTER),
0    1;; but fails to actually translate from some styled stream, we won't catch it, because we're
0    1;; only looking at the buffer type desired here.  However, there will be a blowout elsewhere
0    1;; when we attempt to stuff a 'CHARACTER into the 'STRING-CHAR buffer the user specified.
0    (error "Sorry, you have to thin a fat stream before you can write to anywhere~@
            not in the local machine's virtual memory.  This is because style bits~@
            are world-load dependent, hence even writing the underlying 32-bit-wide~@
            word for each character will never work."))
  (unless (or (subtypep public-buffer-element-type 'string-char)	1; E.g., not 'CHARACTER.
0	      (and (subtypep public-buffer-element-type 'unsigned-byte)
		   (zerop (mod (fs:byte-size-from-element-type public-buffer-element-type) 8))))
    (error "Sorry, element type ~S is not supported." public-buffer-element-type))
  (when (and unix-translation-in-effect?
	     (not (subtypep uncompressed-stream-element-type 'character)))
    (cerror "Go ahead and translate anyway"
	    "You are trying to translate to the UNIX character set before compressing,~@
             but you have also specified that the original data to be compressed is~@
             of element-type ~S, which is not a character-based element-type.  This~@
             is probably wrong, and will provoke a warning like this one from the~@
             decompressor when it encounters this situation."
	    uncompressed-stream-element-type))
  1;; Okay, we're done checking for silliness.  Now set up some state.
0  (initialize-shift)
  (setf code-size code-size-min)		1; The table index (the "code") starts out with this many bits and grows.
0  (setf code-limit (lsh 1 code-size))
  (setf next-code (+ (lsh 1 compressed-byte-size)
		     (if create-reset-code?	1; Um.  I think this isn't quite right.  I think this says, "If there isn't a reset code, ...
0			 (1+ extra-codes)	1; ... then there aren't any extra codes, either," which probably isn't what we want.
0			 0)))			1; So this 0 should be just EXTRA-CODES maybe?
0  (setf reset-code (if create-reset-code?
		       (lsh 1 compressed-byte-size)
		       nil))
  (setf hash-table-real-size (* 2 table-size))
  (multiple-value-setq (hash-table hash-table-resource-descriptor)
    (allocate-resource 'compression-hash-table hash-table-real-size))
  (values))

1;;;; Input (decompressing) side.

0(defparameter 2*DEFAULT-DECOMPRESSION-MAXIMUM-INPUT-TOKEN-SIZE* 01024
  "We don't expect any compressed string to be larger than this.
   Use to size our pushdown stack.  Value from UNIX `compress'.
   If this becomes problematic, we can probably manage the stack
   as a growable vector, or increase this constant.")

(defparameter 2*DEFAULT-DECOMPRESSION-DATA-EXPANSION-FACTOR* 05
  "The amount we expect that compressed data might grow to become
   decompressed data.  If the data expands more than this, we're
   okay, because we'll just expand our buffer by a factor of two
   every time we find it's too small, but this allows us to size
   our buffer approximately right at the beginning to avoid a few
   expansions.")

(defflavor 2BUFFERED-DECOMPRESSING-INPUT-MIXIN
0	((nbits					1; The size of the codes we're currently reading, in bits.
0	   1;; Bound in case we try to read a zero-length file.  This is sufficient to allow
0	   1;; the :NEXT-INPUT-BUFFER method to run without an explosion and return zero bytes.
0	   *default-compression-smallest-code-size*)
	 code-limit				1; When NEXT-CODE is equal to this, it's time to make the code size one bit larger.
0	 maxmaxcode				1; When CODE-LIMIT is equal to this, it's time to flush the table & start over.
0	 code-buffer				1; Input bytes before being recombined into codes.
0						1; Used when we cross stream buffer boundaries.
0	 code-buffer-resource-descriptor
	 code-buffer-offset			1; How far into the buffer we've gotten during recombination.
0	 code-block				1; The resulting codes, up to 16 bits wide.
0	 code-block-resource-descriptor
	 stack					1; Stack used to reverse the reversed strings the algorithm generates.
0	 stack-resource-descriptor
	 stack-limit				1; How big the stack is.
0	 prefix-table				1; Table of string prefixes.
0	 prefix-table-resource-descriptor
	 suffix-table				1; Table of string suffixes.
0	 suffix-table-resource-descriptor
	 next-code				1; Next code we expect to be defined.  The KKK special case leapfrogs this, ...
0						1; ... which is how we know that we're in this special case.
0	 (private-buffer-length nil)		1; The length of the private output buffer.
0	 1;; Cached results of using SYS:SETUP-1D-ARRAY on PRIVATE-BUFFER, necessary becuase of lexical scoping of
0	 1;; SYS:ARRAY-REGISTER declarations vs flow of control when the private buffer might change size.  See further
0	 1;; comments at (DEFMACRO-IN-FLAVOR COPY-PORTION-RAW BUFFERED-DECOMPRESSING-STREAM-MIXIN).  These
0	 1;; are the second, third, and fourth values of the SYS:SETUP-1D-ARRAY call.
0	 (private-buffer-cached-control-word)
	 (private-buffer-cached-array-base)
	 (private-buffer-cached-array-limit)
	 1;; More state variables for the decompressor.
0	 old-code				1; Holds the code for the K symbol in the KKK special case.
0	 finchar				1; Holds the final K in the KKK example from the LZW paper's algorithm.
0	 (maximum-input-token-size		1; The largest we expect any compressed string to be.  It would be nice to make this variable.
0	   *default-decompression-maximum-input-token-size*)
	 (reset-code
	   *default-compression-reset-code*)
	 (unix-translation-in-effect?
	   *default-compression-unix-translation-in-effect?*)
	 (forced-preamble-type)			1; Leave this NIL unless you're supplying a :STREAM that can't rewind (e.g., a tape).
0						1; In that case, you'd better already know whether the file on the tape is compressed, ...
0						1; ... and what sort of compression is in use (currently, :UNIX or :SYMBOLICS).  If you ...
0						1; ... specify this, we will compare the preamble we read to make sure it agrees, but ...
0						1; ... we won't ever rewind and try again if it doesn't---instead, we'll get an error.
0	 compression-type			1; So a user of this instance can tell what sort of compression the underlying file was made with.
0						1; Set but never actually read by the compression substrate.
0	 1;; Handling the case where the public element type is wider (e.g., 16B, 32B) than the private element type,
0	 1;; and the very last public word of the buffer we return isn't completely filled in.  In that case, we have to
0	 1;; return one fewer words, and remember the filled-in bytes so we can make them the first bytes of the
0	 1;; next buffer we return.  I can't be bothered making such a tiny array a resource.  It wouldn't even need to
0	 1;; be an array if I restricted this to nothing wider than 16B, since there could only be one byte left over.
0	 (pending-bytes 0)			1; How many pending bytes there are.
0	 (pending-byte-tank)			1; Turned into an array of the leftover bytes upon demand.
0	 1;; These aren't yet used by the decompressor, but are set by reading the preamble.
0	 1;; When the decompressor becomes more sophisticated, it will use these to reconfigure.
0	 1;; They're left unbound here to ensure that, if preamble reader fails to set them, we'll get a blowout.
0	 major-version-number
	 minor-version-number
	 emit-reset-code-before-first-byte?
	 flush-buffer-on-code-size-changes?
	 flush-buffer-at-very-end?
	 checksum-algorithm
	 (checksum 0))				1; I think we can assume this should start out numeric.
0	(basic-buffered-compressing-mixin
	 si:indirect-stream-mixin)
  :abstract-flavor
  1;; If we ever decide to grub around in the input buffer instead of using :SET-POINTER,
0  1;; SI:BASIC-BUFFERED-INPUT-STREAM will probably need to become a required flavor.
0  1;; Perhaps we should require at least SI:STREAM, but we'll be lenient.
0;   (:required-flavors si:basic-buffered-input-stream)
  1;; :STREAM is required because we're not based on SI:INDIRECT-STREAM-MIXIN.
0  1;; [&&& We are NOW!  But it seems that this is still not required by that.--- Foner 15-Jul-90.]
0  1;; :PUBLIC-BUFFER-ELEMENT-TYPE is not, because we can compute it from the preamble.
0  1;; However, the user is allowed to override this computation.
0  (:required-init-keywords :stream)
  1;; NOTE:  If any of the IV's below are also set by reading the preamble, any attempt to init
0  1;; them will lose, because the values will be bashed by the preamble.  You can't tell a priori
0  1;; whether this will happen (hence, I can't just eliminate such IV's from the list below) because
0  1;; a UNIX preamble will only set a subset of the IV's that a Symbolics preamble will set.  You won't
0  1;; get any warning if some parameter you set gets reset by reading the preamble; the only way to
0  1;; be safe is to create the instance (which reads the preamble) and then examine whichever IV's
0  1;; you care about to make sure they're still set the way you wanted them.  Note that insisting that
0  1;; they be set some other way than the way the preamble specified is probably a good way to ensure
0  1;; that the decompressor gets hopelessly confused and probably crashes.
0  (:initable-instance-variables
   emit-reset-code-before-first-byte? flush-buffer-on-code-size-changes?
   flush-buffer-at-very-end? reset-code checksum-algorithm
   forced-preamble-type major-version-number minor-version-number
   unix-translation-in-effect?)
  (:readable-instance-variables
   compression-type unix-translation-in-effect?)
  (:writable-instance-variables
   1;; You may only change this after reading the preamble and BEFORE reading any decompressed bytes!
0   unix-translation-in-effect?)
  (:conc-name "BC-"))

(defmethod 2(MAKE-INSTANCE BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (&rest ignore)
  1;; This is not an :AFTER method, because we want it to run first, so it reads the preamble.
0  1;; If somebody defines a MAKE-INSTANCE :AFTER method in some flavor built on this one,
0  1;; the preamble will already be read, allowing the :AFTER method to make use of that info.
0  1;; This means you can't inhibit reading the preamble by defining your own methods; too bad.
0  (declare (values void))
  1;; NOTE:  Most of the error-checking for strange parameters happens in CONFIGURE-FROM-PREAMBLE
0  1;; and its drones, since we get most of our parameter settings from there.  Any error checking
0  1;; that happens in this (the MAKE-INSTANCE) method should be error checking that is dependent on
0  1;; settings the user might supply.  Since the preamble-reader bashes any IV's the user may happen
0  1;; to have inited that it finds in the preamble, there isn't a hole where the user can specify some
0  1;; setting that the preamble-reader thinks is okay but the setting turns out different here.
0  1;;
0  1;; Ask the compressed data what sort of compression parameters were used.
0  1;; Note that this will consult the FORCED-PREAMBLE-TYPE if it's non-NIL, and that
0  1;; the file had better agree if that's the case.
0  (configure-from-preamble self)
  1;; Figure out what element type to use for buffers and so forth.
0  (unless public-buffer-element-type
    1;; The user didn't specify an element-type for the buffer he wants.  Therefore, we'll figure
0    1;; out an appropriate one from the preamble, and will assume that our caller will use our
0    1;; computation in deciding what sort of buffer to create.  The user had better to be able
0    1;; to deal with, e.g., a 16B stream, if the original, uncompressed data was 16B.
0    (cond ((subtypep uncompressed-stream-element-type 'character)
	   1;; This is some sort of character stream.  Provide characters as output.
0	   1;; Caller may have to un-epsilonify.
0	   (setf public-buffer-element-type 'string-char))
	  ((subtypep uncompressed-stream-element-type 'unsigned-byte)
	   1;; This is some sort of binary stream, which guarantees that sending
0	   1;; ourselves a :BYTE-SIZE message will yield (UNSIGNED-BYTE 8) at worst
0	   1;; (if we have no idea), or some more appropriate size if we know it.
0	   (setf public-buffer-element-type
		 (list 'unsigned-byte
		       (send self :byte-size))))
	  (t
	   (error "Sorry, the compressed file claims it was originally of element type~@
                   ~S, but I don't know what sort of buffer type to use for that element type."
		  uncompressed-stream-element-type))))
  1;; Allocate the resources we'll need.
0  (multiple-value-setq (code-block code-block-resource-descriptor)
    (allocate-resource 'decompression-code-block))
  (multiple-value-setq (code-buffer code-buffer-resource-descriptor)
    (allocate-resource 'decompression-code-buffer))
  (multiple-value-setq (stack stack-resource-descriptor)
    (allocate-resource 'decompression-token-buffer))
  (multiple-value-setq (prefix-table prefix-table-resource-descriptor)
    (allocate-resource 'decompression-prefix-table))
  (multiple-value-setq (suffix-table suffix-table-resource-descriptor)
    (allocate-resource 'decompression-suffix-table))
  1;; Initialize scalars, vectors...
0  (initialize-shift)
  (setf code-buffer-offset 0)
  (setf stack-limit maximum-input-token-size)
  (fill prefix-table 0 :end 256)
  (dotimes (code 256)
    (setf (aref suffix-table code) code))
  (setf next-code (+ extra-codes			1; New.  --- Foner.  (Should clean up this logic.)
0		     (if create-reset-code?
			(1+ reset-code)		1; +++ COMPRESS-BLOCK-CLEAR-CODE is 256 anyway, so this is written oddly...
0			256)))			1; +++ Should read RESET-CODE, not 256.
0  (setf old-code nil)
  (setf finchar nil)
  (values))

1;;; End of file.
