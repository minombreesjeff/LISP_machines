D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (:SWISS :BOLD :SMALL) "HL10B");;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: COMPRESSION -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;;; Macros to build a :NEXT-INPUT-METHOD.

;;; All of the macros in this file are used only as support for the final macro,
;;; DEFINE-DECOMPRESS-NEXT-INPUT-BUFFER.  That macro expands into a huge
;;; amount of code:  A DEFUN-IN-FLAVOR for a number of functions called
;;; DECOMPRESS-NEXT-INPUT-BUFFER-9, DECOMPRESS-NEXT-INPUT-BUFFER-10,
;;; etc, and the toplevel method, a :NEXT-INPUT-BUFFER method for the flavor
;;; name supplied to the macro.  All the other macros are just support that
;;; build the body of the DEFUN-IN-FLAVORs.  Absolutely *nothing* except
;;; DEFINE-DECOMPRESS-NEXT-INPUT-BUFFER should be called by anything
;;; outside this file.
0
1;;;; Snarfing codes out of some block of codes, either a block in CODE-BLOCK
;;;; or a block in the original input buffer, depending on whether the whole
;;;; block was already in the input buffer or had to be built out of two or
;;;; more successive input buffers.

0(defmacro-in-flavor (2 0 (NIL 0) (:FIX :BOLD :NORMAL) "CPTFONTCB")(EXTRACT-CODES BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (nbits code-block in-buffer in-start)
  1;; This expands into a zillion DPB's and SYS:DPBS (whichever is more efficient) that
0  1;; sets successive (wide) words in CODE-BLOCK from 8-bit bytes in IN-BUFFER.  The
0  1;; width of the codes is specified by NBITS, and the starting position in IN-BUFFER is IN-START.
0  (let ((temps '#(#:b0 #:b1 #:b2 #:b3 #:b4 #:b5 #:b6 #:b7
		  #:b8 #:b9 #:b10 #:b11 #:b12 #:b13 #:b14 #:b15)))
    (flet ((mapn (from to fcn)
	     (let ((result (make-list (- to from))))
	       (dotimes (i (- to from))
		 (setf (elt result i) (funcall fcn (+ i from))))
	       result)))
      `(let* ((ptr ,in-start)
	      ,@(mapn 0 nbits
		      #'(lambda (n)
			  `(,(aref temps n)
			    (prog1 (aref ,in-buffer ptr)
				   (incf ptr))))))
	 ,@(mapn 0 8
		 #'(lambda (offset)
		     `(setf (aref ,code-block ,offset)
			    ,(let* ((first-bit (* offset nbits))
				    (last-bit (+ first-bit nbits -1)))
			       (multiple-value-bind (first-byte first-offset)
				   (floor first-bit 8)
				 (multiple-value-bind (last-byte last-offset)
				     (floor last-bit 8)
				   (if (= 1 (- last-byte first-byte))
				       `(dpb ,(aref temps last-byte)
					     (byte ',(1+ last-offset) ',(- 8 first-offset))
					     ,(if (= first-offset 0)
						  (aref temps first-byte)
						  `(ldb (byte ',(- 8 first-offset) ',first-offset)
							,(aref temps first-byte))))
				       `(sys:dpbs ,(aref temps last-byte)
						  (byte ',(1+ last-offset) ',(- 16 first-offset))
						  ,(aref temps (1- last-byte))
						  (byte 8 ',(- 8 first-offset))
						  ,(if (= first-offset 0)
						       (aref temps first-byte)
						       `(ldb (byte ',(- 8 first-offset) ',first-offset)
							     ,(aref temps first-byte)))))))))))))))

1;;;; Copying portions of arrays, possibly with UNIX character set translation.

;;; The macros below implement a fast way of doing copies where we have already cached
;;; the results of a SYS:SETUP-1D-ARRAY for the TO-ARRAY.  We use this for the private buffer,
;;; where its size may change at various weird times, and the expense of decoding the array
;;; only where the size won't change is too high.  (This happens because the size change can
;;; happen in a lexically inconvenient place for an array-register declaration to be useful.
;;; While we'd like to declare the array register only once, the size of the array may change
;;; inside the :NEXT-INPUT-BUFFER method, maybe even more than once.  While the array
;;; would wind up getting re-decoded at the next access, it's too confusing to make the
;;; array that is declared have a different name from the array that is an IV, just to allow
;;; us to update the IV and the declared array simultaneously when the size changed.  If they
;;; had the same name, this would be even worse, because then we *couldn't* update the IV
;;; when the size changed, and everything work malfunction.  So we decode the array when
;;; we make it and when we change its size, and then used the cached, decoded value without
;;; having to play scoping games or keep re-decoding it inside inner loops.)
;;;
;;; They do this by accepting a keyword arg, :USE-PRIVATE-BUFFER-CACHE.  If this is supplied,
;;; the macros will use SYS:FAST-AREF-1 with the control word, base, and limit specified by the IV's;
;;; otherwise, they'll use ordinary AREF.

0(defmacro-in-flavor 2(WITH-CACHED-ARRAY-REGISTER BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (buffer array-control &body body)
  1;; Since this is special-purpose for use with the decompressor only, this checks BUFFER
0  1;; to make sure it's actually PRIVATE-BUFFER.  ARRAY-CONTROL is passed in because the
0  1;; body will need it later to give to the SYS:FAST-ASET-1.
0  (unless (eq buffer 'private-buffer)
    (error "You can only use ~S with ~S,~@
            since we're caching only that buffer's array registers."
	   'with-cached-array-register 'private-buffer))
  (let ((array (gensym))
	(array-base    (gensym))
	(array-limit   (gensym)))
    `(let ((,array private-buffer)
	   (,array-control private-buffer-cached-control-word)
	   (,array-base    private-buffer-cached-array-base)
	   (,array-limit   private-buffer-cached-array-limit))
       (ignore ,array ,array-control ,array-base ,array-limit)
       ,@body)))

(defmacro-in-flavor 2(COPY-PORTION-INTERNAL BUFFERED-DECOMPRESSING-INPUT-MIXIN)
0		    (n-bytes from-start to-array to-start use-private-buffer-cache from-value-form)
  1;; The internal guts.  Uses FROM-VALUE-FORM to actually figure out what value to
0  1;; set each element of TO-ARRAY to, thus it doesn't need FROM-ARRAY.
0  (if use-private-buffer-cache
      1;; Must be using PRIVATE-BUFFER.  Uses pre-decoded array values.
0      `(with-cached-array-register
	 ,to-array				1; Make sure we're being called on PRIVATE-BUFFER!
0	 control-word				1; This is the name of variable we'll use for SYS:FAST-ASET-1's control word.
0	 (dotimes (j ,n-bytes)
	   (ignore j)
	   (sys:fast-aset-1 ,from-value-form
			    ,to-start
			    control-word)
	   (incf ,from-start)
	   (incf ,to-start)))
      1;; Can be using any buffer.  We assume it's been decoded via (DECLARE (SYS:ARRAY-REGISTER ...))
0      1;; for speed, but it doesn't have to be.
0      `(dotimes (j ,n-bytes)
	 (ignore j)
	 (setf (aref ,to-array ,to-start)
	       ,from-value-form)
	 (incf ,from-start)
	 (incf ,to-start))))

(defmacro-in-flavor 2(COPY-PORTION-RAW BUFFERED-DECOMPRESSING-INPUT-MIXIN)
0		    (n-bytes from-array from-start to-array to-start &key use-private-buffer-cache)
  1;; Use this copying to any old buffer.  You will get increased speed by specifying
0  1;; USE-PRIVATE-BUFFER-CACHE, but you MUST be using PRIVATE-BUFFER as TO-ARRAY,
0  1;; since that's the array that's cached (the macro will explode during compilation if
0  1;; you're not).
0  `(copy-portion-internal
     ,n-bytes ,from-start ,to-array ,to-start ,use-private-buffer-cache
     (aref ,from-array ,from-start)))

(defmacro-in-flavor 2(COPY-PORTION-MAYBE-TRANSLATING BUFFERED-DECOMPRESSING-INPUT-MIXIN)
0		    (n-bytes from-array from-start to-array to-start &key use-private-buffer-cache)
  1;; Use this ONLY when copying to the PRIVATE-BUFFER, because it will do character set translation
0  1;; if the appropriate IV is set.  You will get increased speed by specifying USE-PRIVATE-BUFFER-CACHE,
0  1;; but you MUST be using PRIVATE-BUFFER as TO-ARRAY, since that's the array that's cached (the
0  1;; macro will explode during compilation if you're not).
0  `(cond (unix-translation-in-effect?		1; These have gotta be characters.
0	  (let ((translation-table si:*unix-translation-table*))
	    (declare (sys:array-register translation-table))
	    (copy-portion-internal
	      ,n-bytes ,from-start ,to-array ,to-start ,use-private-buffer-cache
	      (aref translation-table (aref ,from-array ,from-start)))))
	 (t
	  (copy-portion-raw
	    ,n-bytes ,from-array ,from-start ,to-array ,to-start
	    :use-private-buffer-cache use-private-buffer-cache))))

(defmacro-in-flavor 2(CACHE-PRIVATE-BUFFER-ARRAY-REGISTER-SETUP BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (buffer)
  1;; Should only be called on some array that is about to be used as PRIVATE-BUFFER.
0  1;; This isn't always exactly what PRIVATE-BUFFER is set to at the moment, in the case
0  1;; of when we're resizing buffers, which is why we take the actual name of the array
0  1;; that will shortly become PRIVATE-BUFFER as an arg.
0  1;;
0  1;; Sets up the cached control word so we don't have to use a lexically-declared
0  1;; array register declaration.  See the comments at COPY-PORTION-RAW.
0  `(multiple-value-setq (nil			1; We don't need the actual array again.
0			  private-buffer-cached-control-word
			  private-buffer-cached-array-base
			  private-buffer-cached-array-limit)
     (sys:setup-1d-array ,buffer)))

1;;;; Creating and resizing the output buffers (public and private) that we dump the
;;;; decompressed results into.

0(defmacro-in-flavor 2(MAKE-OUTPUT-BUFFERS BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 ()
  1;; Makes the public and private output buffers we need, by allocating them from a resource.
0  1;; The :DISCARD-INPUT-BUFFER method is a no-op and we only discard them on a close.
0  1;; If they're still around (our flow of control is a little convoluted), we use them instead
0  1;; of allocating more.
0  `(progn
     (unless private-buffer-length
       (error "We should have been able to make output buffers here,~@
               but ~S wasn't set yet."
	      'private-buffer-length))
     (unless public-buffer
       (multiple-value-setq (public-buffer public-buffer-resource-descriptor)
	 (allocate-resource 'decompression-public-buffer
			    (private-buffer-indexpublic-buffer-index
			      private-buffer-length)
			    public-buffer-element-type)))
     (unless private-buffer
       (multiple-value-setq (private-buffer private-buffer-resource-descriptor)
	 (allocate-resource 'decompression-private-buffer
			    private-buffer-length
			    public-buffer))
       (cache-private-buffer-array-register-setup private-buffer))))

(defmacro-in-flavor 2(REPLACING-OUTPUT-BUFFERS BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 ((old-buffer old-descriptor
										    new-buffer new-descriptor
										    resource &rest resource-args)
										   &body body)
  `(multiple-value-bind (,new-buffer ,new-descriptor)
       (allocate-resource ',resource ,@resource-args)
     ,@body
     (deallocate-carefully nil t ,resource ,old-buffer ,old-descriptor)
     (setf ,old-buffer ,new-buffer)
     (setf ,old-descriptor ,new-descriptor)))

(defmacro-in-flavor 2(GROW-OUTPUT-BUFFERS BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 ()
  1;; We can't actually use ADJUST-ARRAY to change the size of the public and private buffers,
0  1;; because the resource knows them already, and adjusting them might leave us with arrays
0  1;; that aren't EQ to the old arrays.  But we can't free them and allocate more, not because
0  1;; of timing screws (which a WITHOUT-INTERRUPTS could fix), but because that would leave
0  1;; around arrays which really are still pointing into the arrays we're using, so some other
0  1;; process could come along and stick junk in them, which would side-effect us.  Instead,
0  1;; we allocate a new set of arrays (twice as large as the previous set), copy the data, and
0  1;; deallocate the old set.  This isn't as inefficient as it sounds---an ADJUST-ARRAY that forced
0  1;; the old array to move (as doubling its size surely would) would also force a copy behind
0  1;; our back.
0  `(let ((old-public-buffer-length (length public-buffer)))	1; Get every single word, in the public buffer's width.
0     1;; Double the size of the buffers we want.
0     (setf private-buffer-length (* 2 private-buffer-length))
     1;; Copy the old buffer, deallocate and reallocating resources and settings the IV's.
0     (replacing-output-buffers (public-buffer     public-buffer-resource-descriptor
			        new-public-buffer new-public-buffer-resource-descriptor
				decompression-public-buffer
				(private-buffer-indexpublic-buffer-index
				  private-buffer-length)
				public-buffer-element-type)
       (copy-array-portion public-buffer     0 old-public-buffer-length
			   new-public-buffer 0 old-public-buffer-length))
     1;; Make a new indirect buffer.
0     (replacing-output-buffers (private-buffer     private-buffer-resource-descriptor
				new-private-buffer new-private-buffer-resource-descriptor
				decompression-private-buffer
				private-buffer-length
				public-buffer)
       (cache-private-buffer-array-register-setup new-private-buffer))))

1;;;; Creating the real body of the DEFUN-IN-FLAVOR.

;;; Even more than the macros above, which are used below, the macros on this page
;;; really depend on each other and cannot be used in isolation.  They're separate macros
;;; so I don't have a five or six page macro, even with the stuff above as helpers, but
;;; they're only ever expanded once.

0(defmacro-in-flavor 2(ASSEMBLE-CODE-BLOCK BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (nbits)
  1;; Read from the input stream until we either:
0  1;;    Know we'll have enough byte to fill up a code buffer (in which case we return them directly
0  1;;    from the input buffer, without copying), OR
0  1;;    Know we'll have to read some more bytes to fill up a code buffer (in which case we actually
0  1;;    do copy bytes from the input buffer into the code buffer, then read another input buffer), OR
0  1;;    Know, whether before or after we've committed to actually copying bytes into the code buffer,
0  1;;    that we're going to run out of input.
0  1;;
0  1;; We copy the same number of bytes out of the input buffer as the size in bits of a code (whatever
0  1;; our current code size is), so, for example, if NBITS is 9, we'll read 9 bytes out of the input buffer
0  1;; into CODE-BUFFER.  Those 9 bytes (72 bits) will make up the next 8 codes, each of which is 9 bits.
0  1;; The code buffer just contains bytes; later on, we'll transform it into a code-block, containing codes.
0  1;; IN-BUFFER, IN-START, IN-END, and CODE-BUFFER-OFFSET are our returned "state variables", which tell
0  1;; the rest of this method how much input we read, and whether it's in CODE-BUFFER or still in IN-BUFFER
0  1;; (if there was enough in a single bufferful, obtained from :READ-INPUT-BUFFER, to fill up the code buffer).
0  1;; What we're really doing is reading input buffers and deciding whether or not a given input buffer contains
0  1;; enough codes to fill up a code buffer.  If it does, we can just return the input buffer.  If it doesn't, we have
0  1;; to copy some data out of the input buffer into the code buffer, then read another input buffer (or more!)
0  1;; until we've finished filling up the code buffer, and return that instead.  If we run out of input while filling
0  1;; up the code buffer (meaning we crossed a buffer boundary), then we return the empty-string triple instead.
0  1;; (On the other hand, if we know before we start filling a code buffer that we're going to run out of input,
0  1;; we can just return the input buffer that we've got, without bothering to fill up the code buffer).
0  1;; This means we only have to copy bytes if the current input buffer doesn't have enough to fill a code buffer
0  1;; and we know it's not the last input buffer, in which case we go ahead and build a code buffer out of successive
0  1;; input buffers.
0  1;;
0  1;; Thus, IN-BUFFER, as bound by the outer MULTIPLE-VALUE-BIND, is always either:
0  1;;    The IN-BUFFER obtained from :READ-INPUT-BUFFER (IN-START may have been udpated since :R-O-B called), OR
0  1;;    The empty string, always returned with 0 for the index and limit, if we ran out of input while attempting
0  1;;    to fill up the code buffer.
0  1;;
0  1;; The user of our four "state variables" decides whether to copy data out of IN-BUFFER or CODE-BUFFER
0  1;; by looking at CODE-BUFFER-OFFSET, to see if we updated it after copying into the code buffer.
0  1;;
0  1;; The only other way out of the loop is to exit from the :NEXT-INPUT-BUFFER block, which we do when
0  1;; we discover that there is no more input and the code buffer is also empty already.
0  1;;
0  1;; We also create the output buffers (public and private), if there's input to warrant it.  We do it here because
0  1;; we know how big the buffer is that we're getting the raw bytes from, so we can make some assumptions
0  1;; about how big the output buffers should be.  The private one is indirected to the public one, but their types differ.
0  1;; The public one is a convenient type for us, while the public one is a convenient type for our caller.  Their
0  1;; widths must match, because we always assume that the private buffer limit will match the public one.
0  1;; &&& [Is that last sentence still true now that we allow any multiple of 8 bits for the input width???]
0  1;;
0  1;; Note that the IN-START and IN-END indices are in terms of the private buffer's element-size, e.g., 8B bytes.
0  1;; This is because our internal buffer is always the size of the private buffer, so we don't have to worry about
0  1;; returning adjusted values for a 16B public buffer to our caller, who expects IN-BUFFer to always be an 8B.
0  1;;
0  `(loop
     (multiple-value-bind (in-buffer in-start in-end)	1; IN-START, IN-END are byte indices into IN-BUFFER.
0	 (send si:stream :read-input-buffer)	1; &&& ISM.
0       1;; See if we've reached the end of the input data.
0       (when (null in-buffer)			1; No more buffers of input available?
0	 (if (zerop code-buffer-offset)		1; Yes:  See if we're done grabbing codes out of our buffer.
0	     1;; We never read any codes this iteration, and there's no more input, so we're done.  Exit the whole method.
0	     (return-from :next-input-buffer (values nil nil nil t))
	     1;; We must have read some codes in some prior iteration(s), but we just ran out of input
0	     1;; and we haven't finished filling up the code buffer.  Abandon the attempt, and return the
0	     1;; weird triple of '("" 0 0) to tell our caller that just a little input remains in IN-BUFFER,
0	     1;; but that CODE-BUFFER is incomplete.
0	     (return (values "" 0 0))))
       1;; There's still input data:  Make our private buffer into which we'll place decompressed output.
0       (when (null private-buffer-length)
	 1;; We've never before made a private buffer, so make a private and a public buffer and keep reusing them.
0	 1;; The private buffer is of a type that's convenient for us, while the public one is convenient for our caller.
0	 1;; We take care to do the arithmetic to return correct bounds to the caller if the public buffer isn't the
0	 1;; same width as the private buffer.  The private buffer is indirected to the public buffer.  The length is
0	 1;; rounded up to the next power of two to maximize the chances that we'll be able to reuse an existing
0	 1;; buffer in the resource.
0	 (setf private-buffer-length
	       (lsh 1 (integer-length (max maximum-input-token-size
					   (* *default-decompression-data-expansion-factor*
					      (- in-end in-start))))))
	 (make-output-buffers))
       1;; See if there's enough input data to fill up a code buffer.  Note that, if the code buffer has already been
0       1;; partially filled by some prior iteration of this loop, that we don't run this check, but just keep chugging
0       1;; along until it's either full or we run out of input.  But if we've never run around this loop, and we can
0       1;; see that there are enough bytes in the input buffer to fill up the (currently empty) code buffer, we just
0       1;; return the input buffer itself, saving the work of copying the appropriate bytes into the code buffer.
0       (when (and (zerop code-buffer-offset)
		  ( ,nbits (- in-end in-start)))
	 (return (values in-buffer in-start in-end)))
       1;; Fill the code buffer with as many bytes as we've got.  This is where we update CODE-BUFFER-OFFSET,
0       1;; which, if nonzero AND if IN-BUFFER isn't the empty string (the "abort" case above), tells our caller that
0       1;; the data it should be looking at is in CODE-BUFFER and not IN-BUFFER.
0       (let ((in-buffer in-buffer))
	 (declare (sys:array-register in-buffer))
	 (copy-portion-raw (min (- in-end in-start)
				(- ,nbits code-buffer-offset))
			   in-buffer in-start code-buffer code-buffer-offset))
       1;; If we've successfully filled up the code buffer, we're done.
0       (when (= code-buffer-offset ,nbits)
	 (return (values in-buffer in-start in-end)))
       1;; Haven't filled up the code buffer, so go try to read more input.
0       (send si:stream :advance-input-buffer in-start))))

(defmacro-in-flavor 2(WITH-NCODES-AND-DECLARATIONS BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (nbits &body body)
  1;; Make some array register declarations for speed (the first five of the six LET clauses below),
0  1;; then figure out how many codes we actually read from the bytes we read in ASSEMBLE-CODE-BLOCK.
0  1;; The number of codes read depends on the number of raw bytes we read into CODE-BUFFER and the size
0  1;; of a code at the moment.
0  `(let ((in-buffer in-buffer)
	 (stack stack)
	 (prefix-table prefix-table)
	 (suffix-table suffix-table)
	 (private-buffer-offset 0))
     (declare (sys:array-register in-buffer stack prefix-table suffix-table))
     (let ((ncodes
	     1;; Note that CODE-BUFFER-OFFSET will always be zero by the time we leave this COND.
0	     (cond ((zerop code-buffer-offset)
		    1;; We never bothered filling the code buffer, because there were enough bytes available
0		    1;; without crossing an input buffer boundary.  Just decompress right out of the input buffer.
0		    (extract-codes ,nbits code-block in-buffer in-start)
		    (incf in-start ,nbits)
		    8)				1; +++ It's not clear to me why we're returning 8 in this case.
0		   (t
		    1;; We filled up some part of a code buffer, though we may have run out of input before
0		    1;; filling it up all the way, if we had to fill the buffer in two successive reads.
0		    (extract-codes ,nbits code-block code-buffer 0)
		    (prog1 (if (= code-buffer-offset nbits)	1; Filled it up all the way.
0			       8
			       (floor (* code-buffer-offset 8) nbits))	1; Only partially full:  Only get the valid bytes.
0			   (setf code-buffer-offset 0))))))	1; Now act as though the code buffer is empty.
0       ,@body)))

(defmacro-in-flavor 2(RETURN-BUFFER-FROM-METHOD BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 ()
  1;; Handles the cliche case of returning from the method with a buffer, a start, and an end.
0  1;; Must be a little more complicated because, if we are returning some wide buffer (for the
0  1;; sake of argument, say 16B), we may have only put one byte into the last word, depending
0  1;; on where we stopped.  In that case, we have to back up our public buffer pointer to the
0  1;; last whole-word boundary, remember what byte(s) were were going to output, and tack
0  1;; them onto the next buffer we output.
0  `(progn
     1;; Just-in-case error checking.  Note that there's a screw case here.  Suppose we've stuck
0     1;; an odd number of bytes into the private buffer when writing to a 16B stream.  We'll pass
0     1;; through all this code, hanging onto the extra byte in the byte tank.  Now, suppose that the
0     1;; very first code the next time the :NEXT-INPUT-BUFFER method is called happened to be a
0     1;; reset code.  The :NEXT-INPUT-BUFFER method will return (through us) immediately, since
0     1;; that's what it's supposed to do when it gets a reset code.  However, since it has not yet
0     1;; written even a single byte into the private buffer, the extra byte is still sitting in the byte
0     1;; tank.  That would cause us to erroneously think there's some malfunction ('cause we're
0     1;; being called with a byte already in the byte tank, whereas we should be starting out empty
0     1;; and then filling the tank if there are an odd number of bytes in the private buffer).  So we
0     1;; check to make sure that at least one byte has been put into the private buffer before we
0     1;; check to make sure the byte tank is empty.  If at least one byte has been put in, then the
0     1;; tank should have been emptied first, and any bytes left must be because of some error.
0     1;; The only time this could possibly happen is when decompressing some wider-than-8B file
0     1;; (e.g., a binary) which is long enough to cause a reset code to be emitted, and even then,
0     1;; it has to happen right at a buffer boundary, which is fairly unlikely, but which actually
0     1;; happened halfway through the 8.0 beta tape.
0     (unless (or (zerop pending-bytes)		1; There aren't any pending bytes.
0		 (zerop private-buffer-offset))	1; We haven't stuck anything in the buffer, so pending bytes are okay.
0       (error "We shouldn't have any pending bytes right now, but we already have ~A."
	      pending-bytes))
     1;; Figure out whether only part of the very last word of the public buffer has been filled.
0     1;; This LET is essentially doing a MOD computation.
0     (let* ((public-offset
	      (private-buffer-indexpublic-buffer-index
		private-buffer-offset))
	    (reconstructed-private-offset
	      (public-buffer-indexprivate-buffer-index
		public-offset)))
       (unless (= private-buffer-offset reconstructed-private-offset)
	 1;; The last output word is only partially filled.  If we don't already have one,
0	 1;; create an array into which to stuff the bytes that it is only partially filled with,
0	 1;; then stuff those bytes into the array.
0	 (unless pending-byte-tank
	   (setf pending-byte-tank
		 (make-array (1- (public-buffer-indexprivate-buffer-index 1))	1; Can only be this many left over.
0			     :element-type '(unsigned-byte 8))))
	 (setf pending-bytes (- private-buffer-offset reconstructed-private-offset))
	 1;; It turns out that this LOOP will be faster than COPY-ARRAY-PORTION until we copy 15 bytes---any 128B-wide arrays out there?
0	 (loop for private-index from reconstructed-private-offset below private-buffer-offset
	       for pending-index from 0 below pending-bytes
	       do (setf (aref pending-byte-tank pending-index)
			(aref private-buffer    private-index))))
       1;; It's now safe to return all words except the last, which gets tossed.
0       (return-from :next-input-buffer
	 (values public-buffer
		 0
		 public-offset)))))

(defmacro-in-flavor 2(INTERPRET-CODES-MAIN-LOOP BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 ()
  1;; Loop for as many codes as there are in either the IN-BUFFER or the CODE-BUFFER.
0  1;; Loop terminates early if one of the codes forces a change in code sizes.
0  `(dotimes (i ncodes)				1; [This is "Next Code" from the LZW paper.]
0     (let ((code (aref code-block i)))
       1;; If this is a reset code, we need to clear the table and start back at the minimum-size code.
0       (when (and create-reset-code?
		  (= code reset-code))
	 (fill prefix-table 0 :end 256)
	 (setf next-code 256)			1; +++ Means UNIX block-compress mode can't have an EOI or any extra codes.  Hmm.
0	 (setf nbits code-size-min)
	 (setf code-limit (ash 1 code-size-min))
	 1;; Don't do any more work, since we just changed code sizes.  Instead, force another :NEXT-INPUT-BUFFER.
0	 (send si:stream :advance-input-buffer in-start)	1; &&& ISM.
0	 (return-buffer-from-method))
       1;; This wasn't a reset code.  Start reading a string, stuffing it onto the stack so we can reverse it.
0       1;; The stack grows downward, towards 0, from STACK-LIMIT.
0       (let ((stack-pointer stack-limit)
	     (incode code))			1; Used for the KKK special case.
0	 (when ( code next-code)		1; This is a code we haven't seen before, meaning it's the KKK special case.
0	   (setf (aref stack (decf stack-pointer)) finchar)	1; Push the last character of the string on the stack (e.g., K).
0	   (setf code old-code))		1; We'll have to emit K before the K to add to the KKK being decoded.
0	 1;; Stuff the string indicated by the code into the stack.
0	 (loop					1; [This is "Next Symbol" from the LZW paper.  E.g., CODE = code(K).]
0	   (when (< code 256)			1; This is a single character, not really a "code" at all, so we're done.
0	     (return))
	   (setf (aref stack (decf stack-pointer)) (aref suffix-table code))
	   (setf code (aref prefix-table code)))
	 1;; Push the last character of the string onto the stack.
0	 (setf (aref stack (decf stack-pointer))
	       (setf finchar (aref suffix-table code)))
	 1;; Now copy the stack into the output buffer of decompressed data.  Since we pushed data on
0	 1;; but are just copying it off from the bottom (no popping), this reverses the string.
0	 (let ((nbytes (- stack-limit stack-pointer)))
	   1;; First, if the buffer turned out to be too small, grow it and make sure later buffers are that size, too.
0	   (when (< private-buffer-length (+ private-buffer-offset nbytes))
	     (grow-output-buffers))
	   1;; Second, actually copy from the stack to the output buffer.
0	   1;; If the public buffer is wider than the private buffer, there may have been a partially-filled final word
0	   1;; in the public buffer that we couldn't emit, because it was only partially-filled.  If this is the case, we
0	   1;; should stick those un-emitted bytes into the current buffer we're about to emit, taking care to update
0	   1;; our pointer into that buffer (which COPY-PORTION-RAW will do for us).  Note that these bytes were originally
0	   1;; placed into an output buffer just waiting to be returned to our caller, so they've already had any character
0	   1;; set translation done to them, so we shouldn't try to translate them again.
0	   (unless (zerop pending-bytes)
	     (let ((tank-start 0))		1; Let COPY-PORTION-RAW update this, uselessly.
0	       (copy-portion-raw
		 pending-bytes pending-byte-tank tank-start private-buffer private-buffer-offset
		 :use-private-buffer-cache t))	1; Using pre-decoded array register for PRIVATE-BUFFER.
0	     (setf pending-bytes 0))
	   1;; Now it's safe to actually stick non-leftover output in the outgoing buffer.
0	   (copy-portion-maybe-translating nbytes stack stack-pointer private-buffer private-buffer-offset
					   :use-private-buffer-cache t))
	 (cond ((and (< next-code maxmaxcode)
		     old-code)
		1;; We're not just about to flush the table and start over (because the current code isn't the
0		1;; highest number in the largest permitted size of code), so update some state for the next code.
0		(setf (aref prefix-table next-code) old-code)
		(setf (aref suffix-table next-code) finchar)
		(setf old-code incode)		1; Remember the last code in case we hit a KKK symbol next.
0		(incf next-code)		1; This is the next code we expect.
0		(when (= next-code code-limit)
		  1;; The next code exceeds our current size, forcing us either to increment the size or flush & start over.
0		  (incf nbits)
		  (setf code-limit (ash code-limit 1))
		  1;; If the code is pegged against our upper bound for how large codes can get, we'll expect an imminent
0		  1;; reset code to be read from what the compressor produced.  For the moment, set CODE-LIMIT to something
0		  1;; invalid so we'll never change code sizes until the reset sets CODE-LIMIT back to the limit for the
0		  1;; smallest code size.  The only comparison against CODE-LIMIT is with = to NEXT-CODE (immediately above),
0		  1;; so this is safe.
0		  (when (= code-limit maxmaxcode)
		    (setf code-limit -1))
		  1;; Don't do any more work, since we just changed code sizes.  Instead, force another :NEXT-INPUT-BUFFER.
0		  (send si:stream :advance-input-buffer in-start)	1; &&& ISM.
0		  (return-buffer-from-method)))
	       (t
		1;; Either we're not about to flush the table, or we've only read one code (same thing).  Just update some state.
0		(setf old-code incode)))))))

(defmacro-in-flavor 2(INTERPRET-CODES-LOOP-END BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (nbits)
  1;; If there weren't enough bytes left to fill up a code buffer, handle the few remaining bytes here.
0  1;; We may or may not have started to fill up a code buffer, depending on whether we thought there'd
0  1;; be more input after crossing an input buffer boundary.
0  `(progn
     (when (< (- in-end in-start) ,nbits)
       1;; Right, not enough extra bytes to fill a code buffer.
0       (when (plusp in-end)
	 1;; Couldn't have returned the weird '("" 0 0) triple, so the data must be in CODE-BUFFER.
0	 (copy-portion-raw (- in-end in-start) in-buffer in-start code-buffer code-buffer-offset)
	 (send si:stream :advance-input-buffer in-start))	1; We didn't do this when we finished filling the code buffer. &&& ISM.
0       (return-buffer-from-method))
     1;; Must have returned the weird '("" 0 0) triple, so the data must be in IN-BUFFER.
0     (let ((in-buffer in-buffer))
       (declare (sys:array-register in-buffer))
       (extract-codes ,nbits code-block in-buffer in-start))
     (incf in-start ,nbits)
     (setf ncodes 8)))

(defmacro-in-flavor 2(INTERPRET-CODES BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (nbits)
  1;; Actually interpret the codes, adding strings to the tables or grabbing them back out.
0  1;; If the code size changes inside the loop, it terminates early, discarding the rest of
0  1;; the code buffer (which presumably contains garbage generated by the compressor
0  1;; to pad it out to the right length).  This forces our caller to call :NEXT-INPUT-BUFFER
0  1;; again, with the new code size in effect.  Note that the code size can either increment
0  1;; or get reset to the minimum size (if we got a reset code, which flushes the table).
0  `(loop
     (interpret-codes-main-loop)
     (interpret-codes-loop-end ,nbits)))

(defmacro-in-flavor 2(DECOMPRESS-NEXT-INPUT-BUFFER-BODY BUFFERED-DECOMPRESSING-INPUT-MIXIN)0 (nbits)
  1;; The guts of the :NEXT-INPUT-BUFFER methods that are created, one per number of bits in the code.
0  `(block :next-input-buffer
     (let ((code-buffer code-buffer)		1; 8B wide, and contains bytes from IN-BUFFER, iff we had to cross an input buffer boundary.
0	   (code-block  code-block))		1; 16B wide, and contains successive codes grabbed out of CODE-BUFFER.
0       (declare (sys:array-register code-buffer code-block))
       (multiple-value-bind (in-buffer in-start in-end)
	   (assemble-code-block ,nbits)
	 (with-ncodes-and-declarations
	   ,nbits
	   (interpret-codes ,nbits))))))

1;;;; Defining all the DEFUN-IN-FLAVOR forms and the actual :NEXT-INPUT-METHOD.
;;;; This is the only macro you should call from outside this file.

0(defmacro 2DEFINE-DECOMPRESS-NEXT-INPUT-BUFFER 0(flavor)
  1;; Note that this defines all the DEFUN-IN-FLAVORs before calling
0  1;; any of them (in the :NEXT-INPUT-BUFFER method), so we don't
0  1;; have to use a :FUNCTION declaration in the DEFFLAVOR for them.
0  (flet ((sym (nbits)
	   (intern (format nil "DECOMPRESS-NEXT-INPUT-BUFFER-~D" nbits))))
    `(progn
       ,@(loop for nbits from 9 to 16
	       collect `(defun-in-flavor (,(sym nbits) ,flavor) ()
			  (decompress-next-input-buffer-body ,nbits)))
       (defmethod (:next-input-buffer ,flavor) (&optional no-hang-p)
	 no-hang-p				1; Ignored.
0	 (case nbits
	   ,@(loop for nbits from 9 to 16
		   collect `((,nbits) (,(sym nbits)))))))))

1;;; End of file.
