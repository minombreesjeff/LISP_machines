D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (:SWISS :BOLD :SMALL) "HL10B");;; -*- Mode: Lisp; Syntax: Common-Lisp; Package: COMPRESSION -*-
0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;>

1;;;; Both sides.

0(defsubst (2 0 (NIL 0) (:FIX :BOLD :NORMAL) "CPTFONTCB")MAKE-DIRECT-BUFFER 0(size element-type)
  (make-array size
	      :element-type element-type
	      :area sys:permanent-storage-area))

(defsubst 2MATCH-DISPLACED-BUFFER 0(object size displaced-to)
  (and (if ( (array-rank displaced-to) 1)
	   (error "You can't make a private buffer that points at ~:[multi~;zero-~]dimensional array ~S!"
		  (zerop (array-rank displaced-to))
		  displaced-to)			1; Just in case we really get a bozo calling us.
0	   t)					1; Keep the AND puttering along...
0       (= size (array-total-size object))	1; Make sure nobody changed their mind about how big it should be.
0       (eq displaced-to (si:array-indirect-to object))))	1; Make sure it's pointing to the same array it was before.

0(defsubst 2MAKE-DISPLACED-BUFFER 0(size displaced-to)
  (make-array size
	      :element-type '(unsigned-byte 8)
	      :displaced-to displaced-to
	      :area sys:permanent-storage-area))

(defmacro 2DEALLOCATE-CAREFULLY 0(nonexistent-okay-p object-and-descriptor-must-match-p resource object descriptor)
  1;; Used for easily deallocating all the resources we play around with.
0  1;; If the object might never have been allocated in the first place, call with NONEXISTENT-OKAY-P non-NIL.
0  1;; This is useful if either the flow of control may never have allocated the object, or if we're in (say)
0  1;; a :CLOSE :ABORT case, in which case somebody else may have already deallocated the object.
0  1;; If you care about whether the object exists but its descriptor was NIL, or vice versa, call with
0  1;; OBJECT-AND-DESCRIPTOR-MUST-MATCH-P non-NIL.
0  `(unless (and ,nonexistent-okay-p
		(null ,object)
		(null ,descriptor))
     (when (or (and ,object-and-descriptor-must-match-p
		    (or (null ,object)
			(null ,descriptor)))
	       (and ,object
		    (null ,descriptor))
	       (and ,descriptor
		    (null ,object)))		    
       (cerror "Continue anyway" "~S is ~S, but ~S is ~S.  This is an internal error."
	       ',object ,object
	       ',descriptor ,descriptor))
     (deallocate-resource ',resource
			  (shiftf ,object nil)
			  (shiftf ,descriptor nil))))

1;;;; Output side.

0(defresource 2COMPRESSION-HASH-TABLE 0(real-size)
  1;; REAL-SIZE is the number of elements to give to MAKE-ARRAY,
0  1;; corresponding to the HASH-TABLE-REAL-SIZE IV in
0  1;; BUFFERED-COMPRESSING-OUTPUT-MIXIN.  We assume that we
0  1;; are making only a few sizes of table, and probably only one size,
0  1;; so we don't get fancy with a matcher.
0  :constructor (make-array real-size		1; Stores numbers or NIL.
0			   :area sys:permanent-storage-area)
  :deinitializer (clear-a-hash-table object (array-total-size object)))

(defparameter 2*BUFFERED-COMPRESSING-STREAM-OUTPUT-BUFFER-SIZE* 08192	1; An arbitrary large number.
0  "Size of the output buffer used by buffered compressing streams.")

(defresource 2COMPRESSION-PUBLIC-BUFFER 0(element-type shift)
  :constructor (make-direct-buffer
		 (private-buffer-valuepublic-buffer-value
		   *buffered-compressing-stream-output-buffer-size*
		   shift)
		 element-type))

(defresource 2COMPRESSION-PRIVATE-BUFFER 0(displaced-to)
  :matcher     (match-displaced-buffer object *buffered-compressing-stream-output-buffer-size* displaced-to)
  :constructor (make-displaced-buffer         *buffered-compressing-stream-output-buffer-size* displaced-to))

1;;;; Input side.

0(defresource 2DECOMPRESSION-TOKEN-BUFFER0 ()
  :constructor (make-direct-buffer
		 *default-decompression-maximum-input-token-size*
		 '(unsigned-byte 8)))

(defresource 2DECOMPRESSION-PREFIX-TABLE0 ()
  :constructor (make-direct-buffer
		 (ash 1 *default-compression-largest-code-size*)
		 '(unsigned-byte 16)))

(defresource 2DECOMPRESSION-SUFFIX-TABLE0 ()
  :constructor (make-direct-buffer
		 (ash 1 *default-compression-largest-code-size*)
		 '(unsigned-byte 8)))

(defresource 2DECOMPRESSION-CODE-BUFFER 0()
  :constructor (make-direct-buffer
		 *default-compression-largest-code-size*
		 '(unsigned-byte 8)))

(defresource 2DECOMPRESSION-CODE-BLOCK 0()
  :constructor (make-direct-buffer
		 8
		 '(unsigned-byte 16)))		1; +++ Should really depend on the max code size, eh?

0(defresource 2DECOMPRESSION-PUBLIC-BUFFER 0(size element-type)
  :constructor (make-direct-buffer size element-type))

(defresource 2DECOMPRESSION-PRIVATE-BUFFER 0(size displaced-to)
  :matcher     (match-displaced-buffer object size displaced-to)
  :constructor (make-displaced-buffer         size displaced-to))

1;;; End of file.
