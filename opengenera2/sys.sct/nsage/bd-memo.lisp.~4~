;;; -*- Syntax: Common-lisp; Mode: LISP; Base: 10; Package: NSAGE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;;
;;;============================================================
;;; The Memo Specifications
;;;============================================================
;;;

(define-document-type D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")'memo0)

;;;Environment defs

(define-sage-environment 1MemoDateEnv0 generic generic
			 '((USE Description)
			   (leftmargin "+8")
			   (indent "-8")
			   (below 1)))
(define-sage-environment 1ToEnv 0generic generic
			 '((USE description)
			   (below 1)
			   (leftmargin "+8")
			   (indent "-8")))
(define-sage-environment 1MemoCCEnv 0generic generic
			 '((USE description)
			   (below 1)
			   (leftmargin "+8")
			   (indent "-8")))
(define-sage-environment 1FromEnv 0generic generic
			 '((USE description)
			   (below 1)
			   (leftmargin "+8")
			   (indent "-8")))
(define-sage-environment 1ReEnv 0generic generic
			 '((USE description)
			   (below 1)
			   (leftmargin "+8")
			   (indent "-8")))

;;;Generic Memo book design

(define-book-design 1memo-generic0 ()
  (use generic-generic)
  (modify (1Hd1
0	    (pagebreak off)))
  (first
    (init initialize-memo-generic)))
(note-book-design-specifics 'memo :generic 'memo-generic)

;;;what we want in here is to fix the order in which the memo
;;;commands get formatted - that is, regardless of how the author
;;;includes them in the record, they get formatted as specified in 
;;;this function.  The order should be:
;;;   Date
;;;   To
;;;   cc
;;;   From
;;;   Re

;;;Also, emit a bar after all commands have been 
;;;formatted and before text begins.
(defun initialize-memo-generic ()
  (macrolet ((in (&body body)
	       `(making-sage-directives () (idirs ,@body))))
    (sage-command () 'style '((date "March 1952")))
    (sage-command () 'style '((hyphenation T) (hyphenbreak T)))
    (sage-command () 'pageheading
		  `((immediate nil)
		    (left ())
		    (right ())
		    (center ,(in-environment (() center)	;center field doesn't work
			       (in-environment (() largestyle)
				 (write-string "Memorandum"))))))
    (sage-command () 'pageheading
		  `((nil nil)
		    (left ())
		    (right ())
		    (center ,(in (value page)))))))

;;;LGP2 Memo book design

(define-book-design 1memo-lgp20 ()
  (use generic-lgp2)
  (use memo-generic)
  (first
    (envr (text
	    (Paper-Width "8.5in")
	    (LeftMargin "8picas")
	    (RightMargin "8picas")
	    (TopMargin "8picas")
	    (BottomMargin "6picas")))
    (envr (Text
	    (Indent "0")
	    (Use BodyStyle)
	    (Spaces Compact)
	    (Font BodyFont)
	    (FaceCode R)
	    (Justification off)
	    (Hyphenation On)
	    (Spaces Compact)))))
(note-book-design-specifics 'memo :lgp2 'memo-lgp2)

;;;Screen Memo book design

(define-book-design 1memo-screen0 ()
  (use generic-screen)
  (use memo-generic))
(note-book-design-specifics 'memo :screen 'memo-screen)

;;;Command defs

(define-sage-command 1memodate 0(&optional (memodate :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text MemoDate)0 ()
  (splice-contents-list self environment
      (making-sage-directives ()
	(in-environment (() MemoDateEnv)
	  (in-environment (() b)
	    (write-string "Date: "))
	  (sage-command () 'tab-to-tab-stop)
	  (if (null memodate)
	      ;; this should really use the prevailing value of @Style(Date) but
	      ;; I'm too lazy to figure out how to get that right this second.
	      (format-date-in-style (time:get-universal-time) "March 8, 1952")
	      (princ memodate)))))
  (splice-box-out self)) 

;;;We want to be able to enter multiple recipients, one per line.
;;;In the current scheme you can enter multiple recipients on
;;;one line, separated by commas.  Problem is with the avv menu and
;;;with our use of description in the toenv environment.  Same with From.
(define-sage-command 1To 0((to :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text To)0 ()
  (splice-contents-list self environment
			(making-sage-directives ()
			  (in-environment (() ToEnv)
			    (in-environment (() b)
			      (write-string "To: "))
			    (sage-command () 'tab-to-tab-stop)
			    (princ to))))
  (splice-box-out self)) 

(define-sage-command 1CC 0((cc :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text CC)0 ()
  (splice-contents-list self environment
			(making-sage-directives ()
			  (when cc
			    (in-environment (() MemoCCEnv)
			      (in-environment (() b)
				(write-string "cc: "))
			      (sage-command () 'tab-to-tab-stop)
			      (princ cc)))))
  (splice-box-out self))

(define-sage-command 1From 0((from :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text0 1From)0 ()
  (splice-contents-list self environment
			(making-sage-directives ()
			  (in-environment (() FromEnv)
			    (in-environment (() b)
			      (write-string "From: "))
			    (sage-command () 'tab-to-tab-stop)
			    (princ from))))
  (splice-box-out self))

(define-sage-command 1re 0((subject :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text Re)0 ()
  (splice-contents-list self environment
			(making-sage-directives ()
			  (when subject
			    (in-environment (() ReEnv)
			      (in-environment (() b)
				(write-string "Re: "))
			      (sage-command () 'tab-to-tab-stop)
			      (princ subject)))))
  (splice-box-out self))

