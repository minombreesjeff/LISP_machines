;;; -*- Syntax: Common-lisp; Mode: Lisp; Package: NSAGE; Base: 10; Lowercase: T -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

(defun flavors-defined-in-loaded-system (system-name)
  (let* ((patch-system (sct:get-patchable-system-named system-name))
	 (version-list (sct:patch-version-list patch-system))
	 (pathns (append
		   (sct:find-system-version-files
		     system-name (sct:patch-version patch-system) :inputs-and-outputs
		     :no-sources T)
		   (loop for version in version-list
			 collect (sct:patch-system-pathname
				   (sct:patch-name patch-system)
				   :patch-file
				   (sct:patch-version patch-system)
				   (sct:version-number version)
				   si:*default-binary-file-type*))))
	 (defs-seen ())
	 (defs-by-pathn
	   (loop for pathn in pathns
		 for generic-pathn = (send pathn :generic-pathname)
		 for defns = (send generic-pathn :get 'si:definitions)
		 for flavor-defns = (loop for fl in (rest (assoc 'defflavor defns))
					  unless (member fl defs-seen)
					    do (push fl defs-seen)
					    and collect fl)
		 when flavor-defns
		   collect (cons pathn flavor-defns))))
    (values defs-seen defs-by-pathn)))

(defun check-system-cometh (system-name cometh-pathname)
  (multiple-value-bind (fls-compiled fls-not-compiled cometh-truename)
      (with-open-file (f cometh-pathname)
	(let ((generic-pathname (send (fs:parse-pathname cometh-pathname) :generic-pathname)))
	  (fs:read-attribute-list generic-pathname f)
	  (multiple-value-bind (vars vals)
	      (fs:file-attribute-bindings generic-pathname)
	    (progv vars vals
		   (loop with (fls-compiled fls-not-compiled)
			 with cometh-truename = (send f :truename)
			 for form = (read f () nil)
			 while form
			 when (consp form)
			   do (compiler:matchp form
				(('compile-flavor-methods . fls)
				 (setq fls-compiled (nconc fls-compiled (copy-list fls))))
				(('zl:comment ':dont-compile-flavor-methods . fls)
				 (setq fls-not-compiled
				       (nconc fls-not-compiled (copy-list fls)))))
			 finally (return (values fls-compiled fls-not-compiled
						 cometh-truename)))))))
    (multiple-value-bind (defs-seen defs-by-pathn)
	(flavors-defined-in-loaded-system system-name)
      (format T "~&For ~a:~2%" cometh-truename)
      (let ((found-some-losers))
	(let ((losers-by-pathn
		(loop for (pathn . fls) in defs-by-pathn
		      for losers = (loop for fl in fls
					 unless (or (member fl fls-compiled)
						    (member fl fls-not-compiled))
					   collect fl)
		      when losers collect (cons pathn losers))))
	  (when losers-by-pathn
	    (setq found-some-losers t)
	    (loop for (pathn . losers) in losers-by-pathn
		  do (format T "~&The file ~a ~
			     ~%defined flavors which are neither compiled nor not-compiled: ~
			     ~%   ~~s~"
			     pathn losers))))
	(flet ((check (list text)
		 (let ((losers (loop for fl in list
				     unless (member fl defs-seen)
				       collect fl)))
		   (when losers
		     (setq found-some-losers t)
		     (format T "~&These flavors are \"~a\" but not loaded by ~a:~%   ~~s~"
			     text system-name losers)))))
	  (check fls-compiled "compiled")
	  (check fls-not-compiled "not compiled"))
	(unless found-some-losers
	  (format t "~&No problems encountered."))))))

(defun check-sage-cometh ()
  (check-system-cometh "nsage" "sys: nsage; cometh.lisp.newest"))

;;; polish off the sage system.

;;sage-defs.  the environment setting up stuff has tons of ones whose names are unknown
(compile-flavor-methods
  phony-function-spec
  environment
  window-output-device
  dex-output-device
  record-group
  sage-reference
  ;; sage-macro-definition
  ;; sage-keyword-macro-definition
  ;; sage-positional-macro-definition
  formatter-cant-deal-with-printer
  doubly-linked-list-head
  basic-gbox string-gbox unexpanded-reference-gbox
  envr-entry-gbox envr-exit-gbox
  presentation-entry-gbox presentation-exit-gbox
  record-entry-gbox record-exit-gbox
  field-start-gbox field-end-gbox
  picture-gbox
  command-gbox
  space-gbox tab-character-gbox newline-gbox paragraph-break-gbox
  pseudo-paragraph-break-gbox
  cursor-motion-gbox
  box-support-gbox
  cursor-saving-entry-gbox cursor-saving-exit-gbox
  counter-command-gbox rfstr-support-gbox

  line-hbox fake-line-hbox unexpanded-reference-line-hbox
  zwei:markup-structure-text-node		;---should be elsewhere
  sage-text-structure
  doc-record					;---instantiable?
  lisp-record concept-record record-field

  editor-symbols-character-set)

;;; compile-flavor-methods in sage-defs.  First five are here because loading
;;; the database calls their constructors, and a constructor is not defined
;;; until flavor methods are compiled.
(zl:comment :dont-compile-flavor-methods
	    sage-envr
	    sage-command
	    sage-macro-call
	    sage-text-structure
	    sage-picture
	    )

;;defs-formatter
(compile-flavor-methods
  ambient-counters
  )

;;streams
(compile-flavor-methods
  si:input-character-stream-from-tributaries
  si:input-stream-from-tributaries
  )

;;envr
(compile-flavor-methods
  box-environment
  counter
  sage-attribute-error
  sage-attribute-name-error
  sage-attribute-value-error
  sage-name-error
  sage-environment-name-error
  sage-command-name-error
  sage-counter-name-error
  )

;;sab-file
(compile-flavor-methods
  sab-error
  sab-type-invalid
  sab-code-invalid
  )

;;parser
(compile-flavor-methods
  sage-parse-error
  sage-default-parse-error
  missing-end-of-directive
  unmatched-end
  sage-scribe-mismatch
  short-scribe-in-sage
  short-sage-in-scribe
  long-scribe-in-sage
  long-sage-in-scribe
  nested-sage-records
  text-between-sage-fields
  long-form-mismatch
  unterminated-comment
  bad-arglist
  )

;;forout
(compile-flavor-methods
  sage-directive-stream
  )

;; compile-flavor-methods in parser, because the parser is used during database loading
(zl:comment :dont-compile-flavor-methods
	    sage-lexer
	    )

;;sage-zwei
#||
(compile-flavor-methods
  zwei:title-diagram
  )
||#

;;formatter
(compile-flavor-methods
  line-too-long
  source-of-formatted-sage-lines		;abstract
  source-of-formatted-sage-record-lines
  source-of-formatted-sage-text-lines
  source-of-formatted-sage-gboxed-lines
  tiny-environment
  tiny-fill-mode-environment
  tiny-script-environment
  tiny-box-environment
  )

;;counter
(compile-flavor-methods
  index-database
  index-database-entry)

;; Document examiner
ddex::
(zl:comment :dont-compile-flavor-methods
	    doc-ex
	    dex-viewer-pane
	    dex-viewing-context
	    dynamic-window-state
	    dex-viewer-contents
	    dex-bookmarks-contents
	    dex-candidates-contents
	    dex-item
	    dex-gray-bar-hbox
	    )

;; Random flavors
(zl:comment :dont-compile-flavor-methods
	    documentation-info			;SAGE-PROPS
	    clump-box				;FORPAGE
	    column-box
	    page-box
	    page-headings
	    heading-state
	    lookup-record-not-found		;RECORD
	    sct:sage-module			;SCT-INTERFACE
	    )

;; Abstract flavors and mixins
(zl:comment :dont-compile-flavor-methods
	    output-device
	    basic-hardcopy-output-device
	    basic-window-output-device
	    doubly-linked-list-mixin
	    font-environment
	    mouse-sensitivity-environment
	    formatting-environment
	    physical-attributes
	    essential-counter
	    sage-directive
	    sage-directive-inferiors-mixin
	    zwei:markup-structure-node		;---instantiable?
	    lisp-record-type-mixin
	    concept-record-type-mixin
	    si:input-tributary-mixin
	    )
