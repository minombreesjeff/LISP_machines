;;; -*- Syntax: Common-lisp; Mode: LISP; Base: 10; Package: NSAGE; Lowercase: t -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

(defmethod D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(identity-stream-height output-device)0 (paper-height)
  (ignore paper-height)
  nil)

(defmethod 1(identity-stream-height basic-window-output-device)0 (paper-height)
  (/ paper-height *microns-per-screen-pixel*))

(defun 1sage-displayer0 (device title line-source-function &rest args &aux device-type)
  (when (null device)
    (setq device (prompt-for-device)))
  (when device
    ;;---aborting out of device selection should signal so that topic doesn't go into DEX
    ;;---It's not clear that terminal-io is the right thing here.  It used to be 
    ;;computed with (si:follow-syn-stream standard-output), but that was wrong, too.
    (setq device-type (sage-type-of-printer device))
    (with-sage-device (device device-type
			      :hardcopy-options `(:title ,(or title
							      "Document Formatter Output")))
      (with-document-and-device-types ()
	(with-ambient-counters
	  (let ((source (apply line-source-function args))
		(heading-state (make-heading-state)))
	    (loop for previous-page = nil then page
		  for page = (take-page source heading-state previous-page)
		  with first-time = t
		  with leftover-presentations = nil
		  while page
		  do
	      (setf (page-box-presentation-stack-leftover-presentations page)
		    leftover-presentations)
	      (setq leftover-presentations nil)
	      (let* ((page-envr (page-box-page-environment page))
		     (paper-height (send page-envr :paper-height))
		     (stream-height (identity-stream-height
				      *current-sage-device* paper-height))
		     (*fake-string-special-hack-spaces* nil))
		(with-sage-device-stream-prepared (stream
						    :stream-height stream-height
						    :paper-height paper-height)
		  (when first-time
		    (setq first-time nil)
		    (when (eq device-type :screen) (fresh-line stream)))

		  (when (and previous-page page)
		    (eject-page *current-sage-device* stream))
		  (flet ((do-it (stream &optional set-cursorpos?)
			   (display-page page stream :set-cursorpos? set-cursorpos?)))
		    (setq leftover-presentations
			  (cond ((eq device-type :screen)
				 (multiple-value-bind (x y) (send stream :read-cursorpos)
				   (multiple-value-bind (x y)
				       (graphics:untransform-distance
					 x y
					 (graphics:stream-transform stream))
				     (ignore x)
				     (graphics:with-graphics-translation (stream 0 y)
				       (do-it stream t)))))
				(t (do-it stream nil))))))))))))))

(defun DISPLAY-ON-DEVICE (line-source-function &rest args)
  ;;New formatter
  ;;view-template-name
  (with-document-and-device-types ()
    (with-presentation-stack ()
      (with-ambient-counters 
	(apply 'sage-displayer *current-sage-device* "Formatted Directives"
	       line-source-function args)))))

;;;Issue: "interactiveness".  Sometimes there is a user sitting there
;;;to decide about problems, sometimes you want to just keep going quietly, sometimes you
;;;want to create a new thing instead.  Depends on use (parsing, lookup, reading into buffer).
;;;This function tries to deal with spec first as a lisp topic and if that fails, then
;;;assumes it is supposed to be a doc topic.  Means that you have to turn off warnings
;;;so as not to be constantly warning about valid things that are supposed to be in DOC:.
;;;---Perhaps the whole idea of the doc: package can go away now that phony-function-specs
;;;are available for handling any unknown thing.
(defun MAYBE-CONVERT-STRING-TO-SPEC (spec &optional soft-p)
  (setq spec (string-thin spec :remove-bits t :error-if :fat))
  (or (let ((*warn-user* nil))			;don't ever warn
	(catch ':no-such-record
	  (validate-lisp-topic spec soft-p)))
      spec))

;;;We are removing info, so it has to be there already
(defun REMOVE-CALLER (key value exists-p caller-info)
  (if exists-p
      (if (member caller-info value :test #'equal)
	  (setq value (delete caller-info value :test #'equal))
	  (progn
	    (when *debugging-sage*
	      (format *error-output* "~&Trying to remove ~S, which is not in caller list for ~S"
		      caller-info key))
	    value))
      (when *debugging-sage*
	(format *error-output*
		"~&Trying to remove caller info from ~S, which is not in table" key))))


;;;This is how we determine what is old and what is new.  Have to do that in order
;;;to replace any information that has changed since the last compile or load.
(defun LIST-INTERSECTION-AND-DIFFERENCES (old new &optional (predicate 'eq))
  (declare (values common old-only new-only))
  (cond ((not (and old new))			;if either of them is nil
	 (values nil old new))			;no overlap possible
	((equal old new)			;---??predicate? happen to be "the same"
	 old)					;return one of them, no difs
	(t
	 (loop with common
	       with new-only = (copy-tree new)	;Start with original lists and eradicate
	       with old-only = (copy-tree old)	;things from those lists
	       for ele in old
	       do
	       (when (member ele new :test predicate)
		 (push ele common)		;it is in both old and new
		 (setq new-only (delete ele new-only :test predicate))	;from old, can't be new-only
		 (setq old-only (delete ele old-only :test predicate)))	;in new, can't be old-only
	       finally
	       (return (values common old-only new-only))))))
