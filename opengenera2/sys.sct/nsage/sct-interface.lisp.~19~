;;; -*- Mode: LISP; Syntax: Zetalisp; Package: SCT; Base: 10; Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#||

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB");;--- Obsolete - this is part of SCT now

0;; Sage record files
(define-module-type :sage :sage-binary nil)

(defmethod (distribution-defaults sage-module) (system)
  (declare (values distribute-sources distribute-binaries source-category))
  (values (system-distribute-sources system)
	  nil
	  (system-source-category system)))

(defmethod (distribution-pathname sage-module) (pathname &key compress &allow-other-keys)
  (if compress
      (sage::compressed-database-file
	pathname :system-name (system-name *system*) :major-version *version*)
      pathname))

(defmethod (:compile sage-module) (system-op &rest keys
					     &key recompile no-compile &allow-other-keys)
  (unless no-compile
    (when (eq system-op :compile)
      ;; Only compile when the system operation is :COMPILE
      (lexpr-funcall #'default-read		;NSage doesn't compile anything anymore
		     self system-op recompile
		     #'(named-lambda sage-compile-driver
				     (sab ignore ignore &rest ignore)
			 ;; All we need to do here is get the proper version number
			 (with-open-file (stream sab :direction :probe :if-does-not-exist :error)
			   (values (send stream :pathname)
				   (send stream :truename))))
		     '("/"Compile/" documentation in"
		       "/"Compiling/" documentation in"
		       "/"Compiled/" documentation in")
		     keys))))

(defmethod (:load sage-module) (system-op &rest keys
					  &key compress reload never-load
					  &allow-other-keys)
  (unless (or never-load (and compress (neq system-op :compile)))
    (lexpr-funcall #'default-read
		   self system-op reload
		   #'(named-lambda sage-load-driver
				   (sab ignore ignore &rest ignore)
		       (sage:load-index-info sab))
		   '("Load documentation in"
		     "Loading documentation in"
		     "Loaded documentation in")
		   keys)))

;; Hardcopying .SAR files is ridiculous...
(defmethod (:hardcopy sage-module) (system-op &rest keys)
  (ignore system-op keys)
  nil)

(compile-flavor-methods sage-module)
||#
