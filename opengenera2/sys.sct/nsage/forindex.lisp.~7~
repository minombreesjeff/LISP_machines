;;; -*- Mode: LISP; Syntax: Common-lisp; Package: SAGE; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;
;;; Translations of the intensely complicated Scribe macros that
;;; implement parts of our book design:
;;; D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")in-SymIndex0 1in-SymIndexB
0;;; 1in-DefThingX0 1in-DefThingY0 1in-DefMethodX0 1in-DefInitOptionsX
0;;;
;;; They are to be used within (making-sage-directives () ---)
;;;

#||
;; Convert Scribe's many nesting chars to parens so Zmacs can help
;; me understand these complex macros
(zwei:defcom 1com-replace-losers0 "Replace losers" ()
  (zwei:region (bp1 bp2)
    (zwei:charmap (bp1 bp2)
      (let ((replacement
	      (selector (zwei:charmap-char) char-equal
		(#\/ #\=)
		((#\[ #\< #\{) #\( )
		((#\] #\> #\}) #\) ))))
	(when replacement
	      (let ((bp (zwei:charmap-bp-before)))
		;; This setf is sub-zwei-primitive
		(setf (aref (zwei:bp-line bp) (zwei:bp-index bp))
		      replacement))))))
  ;; Must redisplay completely since we don't bother with munging above.
  zwei:dis-all)
||#

(defvar 1*enable-multilevel-indexing*0 nil)

(defun 1in-SymIndex0 (&key pkg sym key type)
  (when *enable-multilevel-indexing*
    (if (equalp type '("property"))
	(in-symindex-property pkg sym key type)
	(in-symindex-not-property pkg sym key type))))

(defun 1in-symindex-property0 (pkg sym key type)
  (in-environment (T transparent)
    (cond ((null pkg)
	   (idirs 
	     (when type
	       (indexentry
		 :entry ("properties")
		 :key ("properties 1"))
	       (indexentry
		 :entry ((spaces 3) (L sym))
		 :key ("properties 2 " (or key sym))
		 :number T))))
	  (T (idirs
	       (when type
		 (indexentry :entry ("properties")
			     :key ("properties 1"))
		 (indexentry
		   :entry ((spaces 3) (L pkg sym))
		   :key ("properties 2 " pkg (or key sym))
		   :number T))
	       (indexentry
		 :entry ((L pkg sym)
			 (when type "," (spaces 2) type))
		 :key (pkg (or key sym))
		 :number T))))
    (idirs
      (indexentry
	:entry ((L sym)
		(when type
		  ",  " type
		  (when pkg " (in package " (L pkg) ")")))
	:key ((or key sym)
	      " "
	      (when type type " ")
	      (when pkg pkg))
	:number T))))

(defun 1in-symindex-not-property0 (pkg sym key type)
  (in-environment (T transparent)
    (cond ((null pkg)
	   (idirs
	     (when type
	       (indexentry
		 :entry (type "s")
		 :key (type "s 1")))
	     (indexentry
	       :entry ((spaces 3) (L sym))
	       :key (type "s 2 " (or key sym))
	       :number T)))
	  (T
	   (idirs
	     (when type
	       (indexentry
		 :entry (type "s")
		 :key (type "s 1"))
	       (indexentry
		 :entry ((spaces 3) (L pkg sym))
		 :key (type "s 2 " pkg (or key sym))
		 :number T)
	       (indexentry
		 :entry ((L pkg sym) (when type ",  " type))
		 :key (pkg (or key sym))
		 :number T)
	       ))))
    (idirs
      (indexentry
	:entry ((L sym)
		(when type "," (spaces 2) type)
		(when pkg
		  " (in package " (L pkg) ")"))
	:key ((or key sym) " "
	      (when type type " ")
	      pkg)
	:number T))))

(defun 1in-SymIndexB0 (&key sym type noise fname key)
  (when *enable-multilevel-indexing*
    (if (equalp type '("property"))
	(in-symindexB-property sym type noise fname key)
	(in-symindexB-not-property sym type noise fname key))))

(defun 1in-symindexB-property0 (sym type noise fname key)
  (in-environment (T transparent)
    (idirs
      (indexentry
	:entry ((L sym) ", " type " " noise " " (L fname))
	:key (key " " type " "fname)
	:number T)
      (indexentry
	:entry ("properties")
	:key ("properties 1"))
      (indexentry 
	:entry ((spaces 3) (L sym) " " noise " " (L fname))
	:key ("properties 2 " key " " fname)
	:number T)
      (indexentry
	:entry ((L fname) " properties")
	:key (fname " properties 1"))
      (indexentry
	:entry ((spaces 3) (L sym))
	:key (fname " properties 2 " key)
	:number T))))

(defun 1in-symindexB-not-property0 (sym type noise fname key)
  (in-environment (T transparent)
    (idirs
      (indexentry
	:entry ((L sym) ", " type " " noise " " (L fname))
	:key (key " " type " " fname)
	:number T)
      (indexentry
	:entry (type "s")
	:key (type "s 1"))
      (indexentry
	:entry ((spaces 3) (L sym) " " noise " " (L fname))
	:key (type "s 2 " key " " fname)
	:number T)
      (indexentry
	:entry ((L fname) " " type "s")
	:key (fname " " type "s 1"))
      (indexentry
	:entry ((spaces 3) (L sym))
	:key (fname " " type "s 2 " key)
	:number T))))

#|
(2 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")@Form((3 0 (NIL 0) (NIL :BOLD :SMALL) "TVFONTCB")DefThingX2/{@begin(transparent)@~
@begin[DefLine]@L[@imbed(pkg,def <@parm(3pkg2)>)@parm(3spec2)] @rfstr@parmquote(3type2)@~
@parm<3args2>@Symindex[@imbed<pkg,def "pkg=@parmquote(pkg),">sym=@parmquote(spec),@imbed<key,def "key=@parmquote(key),">type=@parmquote(type)]@end[DefLine]@end(transparent)@Expand[@Kcrlf[]]})
0 |#

(defmacro 1in-defline-internal0 (topic &body idirs-body)
  `(in-defline-internal-1
     ,topic
     (making-sage-directives () (idirs ,@idirs-body))))

(defun 1in-defline-internal-10 (topic directives)
  (in-environment (T defline-internal)
    (sage-command T 'defline-section
		  (list topic directives)))
  (in-environment (T defline-internal-complement)
    (sage-contents-list T directives)))

(defun 1in-DefThingX0 (&key topic spec pkg type args key)
  (if (> (string-length (first type)) 20)
      (in-environment (T transparent)
	(in-environment (T defline
			   rightmargin +2inches)
	  (in-defline-internal
	    topic
	    (L (when pkg pkg) spec))
	  (idirs
	    " "
	    (command rfstr (list type))
	    args)
	  (in-SymIndex :pkg pkg :sym spec :key key :type type)))
      (in-environment (T transparent)
	(in-environment (T defline)
	  (in-defline-internal
	    topic
	    (L (when pkg pkg) spec))
	  (idirs
	    " "
	    (command rfstr (list type))
	    args)
	  (in-SymIndex :pkg pkg :sym spec :key key :type type))))) 

#|
2@Comment{This is exactly the same as Defthingx except it does not
produce index entries.}
@Form(3DefThingY2/{@begin(transparent)@~
@begin[DefLine]@L[@imbed(pkg,def <@parm(3pkg2)>)@parm(3spec2)] @rfstr@parmquote(3type2)@~
@parm<3args2>@end[DefLine]@end(transparent)})
0 |#
(defun 1in-DefThingY0 (&key topic spec pkg type args key fname noise)
  (ignore key fname noise)
  (in-environment (T transparent)
    (in-environment (T defline)
      (in-defline-internal
	topic
	(L (when pkg pkg) spec))
      (idirs " "
	     (command rfstr (list type))
	     args))))

#|
2@Form(3DefInitOptionsX2/{@begin[DefLine]@L@parmquote(3spec2)  @~
@rfstr@parmquote(3type2) @parm<3args2>  @~
@SymIndexB[sym=@parmquote(3spec2),type=@parmquote(3type2),key=@parmquote(3key2),fname=@parmquote(3fname2),noise=@parmquote(3noise2)] @r[(for] @L@parmquote(3fname2)@r[)]@end[DefLine]@Expand[@Kcrlf[]]})

0 |#

(defun 1in-DefInitOptionsX0 (&key topic spec type args key fname noise)
  (in-environment (T defline)
    (in-defline-internal topic (L spec))
    (idirs
      "  "
      (command rfstr (list type))
      " " args "  "
      (lisp (in-SymIndexB :sym spec :type type :key key :fname fname :noise noise))
      " " (R "(for") " " (L fname) (R ")"))))

#|
2@Form(3DefMethodX2/{@begin[DefLine]@L@parmquote(3spec2)  @~
@rfstr@parmquote(3type2)@~
@SymIndexB[sym=@parmquote(3spec2),type=@parmquote(3type2),key=@parmquote(3key2),fname=@parmquote(3fname2),noise=@parmquote(3noise2)]@imbed(args,def [@parm<3args2>  ])@r[of] @L@parmquote(3fname2)@end[DefLine]@Expand[@Kcrlf[]]})
0 |#
(defun 1in-DefMethodX0 (&key topic spec type key fname noise args)
  (in-environment (T defline)
    (in-defline-internal topic (L spec))
    (idirs
      "  "
      (command rfstr (list type))
      (lisp (in-SymIndexB :sym spec :type type :key key :fname fname :noise noise))
      (when args args "  ")
      (R "of")
      " "
      (L fname))))
