;;; -*- Mode: LISP; Syntax: Common-lisp; Package: NSAGE; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defmacro with-presentation-stack-new ((stream &key (length 10)
					       incoming-stack when-leftover) &body body)
  `(with-presentation-stack-internal-new ,stream ,length ,incoming-stack ,when-leftover
					 (dw:named-continuation with-presentation-stack-new
								(,stream)
					   ,@body)))

(defun with-presentation-stack-internal-new (stream length incoming-stack when-leftover continuation)
  (sys:with-stack-array (*presentation-stack* length :fill-pointer 0 :element-type t)
    (sys:with-stack-array (*presentations* length :fill-pointer 0 :element-type t)
      (ignore *presentations*)
      (loop for presentation-info in incoming-stack
	    do
	(apply #'handle-device-presentation *current-sage-device*
	       stream :start *presentation-stack* presentation-info))
      (unwind-protect
	  (funcall continuation stream)
	(loop for i below (fill-pointer *presentation-stack*)
	      with leftovers
	      do
	  (let ((presentation (aref *presentation-stack*
				    (1- (fill-pointer *presentation-stack*)))))
	    (when (null presentation)
	      ;; --- should really ask the device to pass this along.
	      (when (operation-handled-p stream :current-output-displayed-presentation)
		(setq presentation (send stream :current-output-displayed-presentation))))
	    (when presentation
	      (push `(:type ,(dw:presentation-type presentation)
		      :object ,(dw:presentation-object presentation)
		      :single-box ,(dw:displayed-presentation-single-box presentation))
		    leftovers))
	    (handle-device-presentation *current-sage-device*
					stream :end *presentation-stack*))
	      finally
		(when when-leftover
		  (funcall when-leftover leftovers)))))))
