;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; Support for @Style, and printing dates

;;---
;; ones that alter toplevel envr attributes
;; ones that just store some value
;; ones that do something else, like fiddle with page counter template


(defvar D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*style-command-parameters*0 (make-hash-table))
(defvar 1*sage-style-parameter-defaults*0 ())

(defsubst 1lookup-style-command-parameter0 (name)
  (gethash name *style-command-parameters*))

(defun 1map-over-style-command-parameters0 (function)
  (maphash
    (lambda (name parameter)
      (ignore name)
      (funcall function parameter))
    *style-command-parameters*))

(defvar 1*style-command-has-been-composed*0 nil)

(defflavor 1style-command-parameter
0	(name argtype default arg-processor)
	()
  :readable-instance-variables
  (:constructor 1make-style-command-parameter0 (name argtype default arg-processor)))

(defmethod 1(sys:print-self style-command-parameter)0 (stream &rest ignore)
  (si:printing-random-object (self stream :typep)
    (write name :stream stream)))

(defmacro 1define-style-command-argument0 (argname argtype &key default processor)
  (let (processor-definition)
    (when (consp processor)
      (destructuring-bind (lambda arglist &body body) processor
	(if (eq lambda 'lambda)
	    (let ((function-spec
		    ;; ---I should learn how to define new kinds of function specs
		    (intern (string-append argname " StyleCommandArgProcessor"))))
	      (setq processor-definition
		    `(defun ,function-spec ,arglist
		       (declare (sys:function-parent ,argname define-style-command-argument))
		       ,@body)
		    processor function-spec))
	    (error "the processor, if a list, must be of the form (LAMBDA ...), not ~s"
		   processor))))
    `(progn
       ,processor-definition
       (define-style-command-argument-1 ',argname ',argtype
	 ',processor :default ',default))))

(defun 1define-style-command-argument-10 (argname argtype processor &key default)
  (setf (lookup-style-command-parameter argname)
	(make-style-command-parameter argname argtype default processor))
  (when *style-command-has-been-composed*
    (compose-style-command))
  argname)

(defun 1compose-style-command0 ()
  (let ((defaults *sage-style-parameter-defaults*))
    (map-over-style-command-parameters
      (lambda (parameter)
	(let ((name (style-command-parameter-name parameter))
	      (default (style-command-parameter-default parameter)))
	  (setf (getf defaults name) default))))
    (compose-style-command-1)
    (setq *sage-style-parameter-defaults* (copy-list defaults))
    (setq *style-command-has-been-composed* T)))

(defun 1compose-style-command-10 ()
  (let ((command-arglist ()))
    (map-over-style-command-parameters
      (lambda (parameter)
	(let ((name (style-command-parameter-name parameter))
	      (argtype (style-command-parameter-argtype parameter)))
	  (push (list name argtype) command-arglist))))
    (setq command-arglist (sort command-arglist #'string-lessp :key #'first))
    (define-sage-command-1 'style (cons '&key command-arglist)
      `(:undisplayed? T))))

(defmethod 1(process-style-command-argument style-command-parameter)0 (value environment)
  (if arg-processor
      (funcall arg-processor self value environment)
      ;; the default is just to save it away.
      (let ((style-parameters (lookup-ambient-value 'style-parameters :error-p nil)))
	(pushnew (list name value) style-parameters
		 :replace T :key #'first)
	(set-ambient-value 'style-parameters style-parameters 'style-parameters))))

(defun 1intern-style-command-argument0 (parameter value environment)
  (ignore environment)
  ;; Just like default, except do string-upcase-and-intern before saving
  (let ((style-parameters (lookup-ambient-value 'style-parameters :error-p nil)))
    (pushnew (list (style-command-parameter-name parameter)
		   (string-upcase-and-intern value *sage-package*))
	     style-parameters
	     :replace T :key #'first)
    (set-ambient-value 'style-parameters style-parameters 'style-parameters)))

(defun 1lookup-style-parameter0 (style-parameter)
  (let ((pair (assoc style-parameter (lookup-ambient-value 'style-parameters :error-p nil))))
    (if pair
	(second pair)
	(values (getf *sage-style-parameter-defaults* style-parameter)))))

(defun 1process-attribute-style-command-argument0 (parameter-structure value environment)
  (unless (tiny-environment? environment)
    (let ((name (style-command-parameter-name parameter-structure)))
      ;; set the attribute in (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")environment0 and all its superiors, except the topmost one
      ;; maybe it should skip the topmost two (see 1make-toplevel-environment0)
      (labels ((set-in-envr (envr)
		 (if (null envr)
		     0
		     (let ((depth (set-in-envr (send envr :superior))))
		       (when ( depth 0)
			 (stack-let ((mods (list (list name value))))
			   (send envr :adjust mods)))
		       (1+ depth)))))
	(set-in-envr environment)))))

(defun 1process-pagenumber-style-command-argument0 (parameter-structure value environment)
  (ignore parameter-structure environment)
  (let ((page-counter (find-page-counter)))
    (send page-counter :set-attribute 'referenced value)))

(defun 1process-footnotes-style-command-argument0 (parameter-structure value environment)
  (ignore parameter-structure environment)
  (let ((footnote-counter (find-footnote-counter)))
    (setf (symbol-value-in-instance footnote-counter 'template-as-reference) value)
    (setf (symbol-value-in-instance footnote-counter 'template-as-number) value)))

(defun 1process-leading-style-command-argument0 (parameter-structure value environment)
  (ignore parameter-structure environment)
  (let ((points (/ (coerce-to-type 'vertical-distance value) *microns-per-point*)))
    (setf (symbol-value-in-instance *current-sage-device* 'leading) points)))

(defun 1process-ambient-style-command-argument0 (parameter-structure value environment)
  (ignore environment)
  (let ((name (style-command-parameter-name parameter-structure)))
    (set-ambient-value name value name)))

(compile-flavor-methods style-command-parameter)

(define-style-command-argument 1backgroundcolor0 :text
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1bibselect0 (cited complete)
  :default cited)
(define-style-command-argument 1bibsequence0 (alphabetic numeric)
  :default alphabetic)
(define-style-command-argument 1bindingmargin0 :horizontal-distance)
(define-style-command-argument 1bottommargin0 :vertical-distance
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1BoxFlushRight0 boolean
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1ChangeBarLocation0 (left right inside outside)
  :default outside)
(define-style-command-argument 1ChangeBarOffset0 :distance)
(define-style-command-argument 1ChangeBars0 :boolean)
(define-style-command-argument 1citationlength0 :positive-integer
  :default 3)
(define-style-command-argument 1citations0 (\1 \2 \3 \4 \5))
(define-style-command-argument 1citationseparator0 :text
  :default ",")
(define-style-command-argument 1citationtype0 (brackets parentheses plain superscripts)
  :default brackets)
(define-style-command-argument 1color0 :text)
(define-style-command-argument 1ColumnMargin0 :horizontal-distance
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1date0 :text
  :default "8 March 52")
(define-style-command-argument 1devicename0 :text)
(define-style-command-argument 1devicetitle0 :text)
(define-style-command-argument 1doublesided0 :boolean)
(define-style-command-argument 1endnotes0 :boolean)
;;exceptiondictionaries
(define-style-command-argument 1filedate0 :text
  :default "8 March 52 at 16:30")
(define-style-command-argument 1fontfamily0 :text)
(define-style-command-argument 1fontscale0 :text)
(define-style-command-argument 1footnotes0 :template
  :processor process-footnotes-style-command-argument)
(define-style-command-argument 1FootSepSize0 :horizontal-distance)
(define-style-command-argument 1hide-undefined-tags0 :boolean)
(define-style-command-argument 1hyphenation0 :boolean
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1hyphenbreak0 :boolean
  :processor process-attribute-style-command-argument)
;;hyphendictionaries, hyphenationdictionary
(define-style-command-argument 1HyphenString0 :text)
(define-style-command-argument 1indent0 :horizontal-distance
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1indentation0 :horizontal-distance	;synonym for indent
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1indexcap0 :boolean)
(define-style-command-argument 1indexstyle0 (multilevel permuted)
  :default multilevel)
(define-style-command-argument 1justification0 :boolean
  :processor process-ambient-style-command-argument)
(define-style-command-argument 1Leaders0 (old new)
  :default new)
(define-style-command-argument 1Leading0 :vertical-distance
  :processor process-leading-style-command-argument)
(define-style-command-argument 1leftmargin0 :horizontal-distance
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1linewidth0 :horizontal-distance
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1multiplebibliography0 :boolean)
(define-style-command-argument 1notes0 (footnote endnote inline))
(define-style-command-argument 1outline0 :boolean
  :default T)
(define-style-command-argument 1pagenumber0 :template
  :processor process-pagenumber-style-command-argument)
(define-style-command-argument 1paperlength0 :vertical-distance)
(define-style-command-argument 1paperwidth0 :horizontal-distance)
(define-style-command-argument 1references0 :text)
(define-style-command-argument 1rightmargin0 :horizontal-distance
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1scriptpush0 :boolean
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1singlesided0 :none)
(define-style-command-argument 1spaces0 (ignored compact kept nobreak)
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1spacing0 :vertical-distance
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1spectrum0 :text)
(define-style-command-argument 1spread0 :vertical-distance
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1stringmax0 :positive-integer)
(define-style-command-argument 1time0 :text
  :default "16:30")
(define-style-command-argument 1timestamp0 :text
  :default "8 March 52 at 16:30")
(define-style-command-argument 1topmargin0 :vertical-distance
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1underscorecharacter0 :text)
(define-style-command-argument 1VerticalJustification0 :boolean
  :processor process-ambient-style-command-argument)
(define-style-command-argument 1widestblank0 :horizontal-distance
  :processor process-attribute-style-command-argument)
(define-style-command-argument 1widowaction0 (force warn ignore))

(define-style-command-argument 1DictionaryTabs0 T
  :default none
  :processor intern-style-command-argument
  )

(compose-style-command)

;;; Given some representation of the date Saturday, March 8, 1952
;;; produce a function that, given a universal time, will print that time
;;; in similar format.

(defvar 1*known-styles-alist*0 nil)
(defvar 1*known-style-hash-table*0 (make-hash-table :test #'string-equal))
(eval-when (eval compile load)
(defvar 1*date-delimiters*0 '(#\@ #\Space #\Line #\Return #\Tab #\Page
			    #\/ #\? #\. #\, #\' #\" #\; #\\ #\| #\` #\] #\) #\(
			    #\[ #\} #\> #\{ #\< #\+ #\= #\_ #\- #\^ #\& #\$ #\# #\!
			    #\:))
)

;; Caches functions returned by 1construct-function-from-stylized-date-string
0(defvar 1*stylized-date-string-function-hash-table*0 (make-hash-table :test #'string=))

(defmacro 1define-stylized-format0 ((&rest match-string-keyword-pairs)
				  arglist
				  &body body)
  (let* ((match-strings (loop for m in match-string-keyword-pairs by #'cddr
			      collect m))
	 (function-name (sys:fintern "FORMAT-IN-STYLE-OF-~A"
				     (with-output-to-string (s)
				       (format-textual-list match-strings #'prin1
							    :stream s :conjunction "or"
							    :separator " ")))))
    (when (and (member '&key arglist)
	       (not (member '&allow-other-keys arglist)))
      (setq arglist (append arglist '(&allow-other-keys))))
    `(progn (defun ,function-name ,arglist
	      ,@body)
	    (note-styled-format ',function-name ',(copy-list match-string-keyword-pairs)))))

(defun 1note-styled-format0 (function-name match-string-keyword-pairs)
  (loop for (match-string type) on match-string-keyword-pairs by #'cddr
	do (pushnew `(,match-string ,type) *known-styles-alist*
		    :key #'car :test #'string-equal
		    :replace T))
  (loop for match-string in match-string-keyword-pairs by #'cddr
	do (setf (gethash match-string *known-style-hash-table*) function-name))
  ;; if one of these is patched, some cached function is likely wrong.  Flush them all.
  (clrhash *stylized-date-string-function-hash-table*))

;;; Returns a function you can call on a universal time.
(defun 1construct-function-from-stylized-date-string0 (string)
  (let ((clauses nil))
    (labels ((emit (form)
	       (push form clauses))
	     (wrap-character-style-stuff (pattern form)
	       (let* ((char (aref pattern 0))
		      (cs (si:char-style char)))
		 (if (neq cs (si:intern-character-style nil nil nil))
		     `(with-character-style (,cs stream :bind-line-height t)
			,form)
		     form)))

	     (string-all-caps-p (string)
	       (every #'upper-case-p string))
	     (string-initial-caps-p (string)
	       (upper-case-p (aref string 0)))
	     (wrap-capitalization-stuff (pattern form)
	       (cond ((string-all-caps-p pattern)
		      `(format stream "~:@(~A~)"
			       (with-output-to-string (stream) ,form)))
		     ((string-initial-caps-p pattern)
		      `(format stream "~:(~A~)"
			       (with-output-to-string (stream) ,form)))
		     ;; should we force lower-case?
		     (t
		      `(format stream "~(~A~)" (with-output-to-string (stream) ,form)))))

	     (wrap-and-emit-stuff (pattern form)
	       (emit
		 (wrap-character-style-stuff pattern
		   (wrap-capitalization-stuff pattern form)))))
		     
      (dw::do-delimited-substrings
	((string) (char start end))
	(let ((substring (substring string start end))
	      (style nil))
	  (flet ((do-it (substring)
		   (cond ((setq style (cadr (assoc substring *known-styles-alist*
						   :test #'string-equal)))
			  (wrap-and-emit-stuff
			    substring
			    `(,(gethash substring *known-style-hash-table*)
			      ,style stream)))
			 (t (emit `(write-string ,substring stream))))))
	    (unless (zerop (string-length substring))
	      ;; special case "30pm"
	      (cond ((and (not (alpha-char-p (aref substring 0)))
			  (string-search "30p" substring))
		     (let ((idx (+ 2 (string-search "30p" substring))))
		       (do-it (substring substring 0 idx))
		       (do-it (substring substring idx))))
		    (t (do-it substring))))))
	;; this seems to have most of the interesting characters in it...
	(#.*date-delimiters*
	 (push `(write-char ,char stream) clauses)))
    `(lambda (ut &optional (stream *standard-output*))
       (multiple-value-bind (nil minute hour day month year dow)
	   (decode-universal-time ut)
	 (ignore minute hour day month year dow)
	 (let ((am (< hour 12)))
	   (ignore am)
	   ,@(reverse clauses)))))))

(defun 1find-function-from-stylized-date-string0 (format)
  (or (gethash format *stylized-date-string-function-hash-table*)
      (let ((lambda-form (construct-function-from-stylized-date-string format)))
	(destructuring-bind (lambda arglist &body body) lambda-form
	  (assert (eq lambda 'lambda))
	  (let* ((function-name (intern (string-append 'format-date-in-style-of- format)))
		 (function `(defun ,function-name ,arglist ,@body)))
	    (compile (eval function))
	    (setf (gethash format *stylized-date-string-function-hash-table*)
		  function-name)
	    function-name)))))

(defun 1format-date-in-style0 (universal-time format &optional (stream *standard-output*))
  (let ((function (find-function-from-stylized-date-string format)))
    (if (null stream)
	(with-output-to-string (s)
	  (funcall function universal-time s))
	(funcall function universal-time stream))))

(defun 1format-date-in-lookup-style0 (universal-time style-name
				    &optional (stream *standard-output*))
  (let ((format (lookup-style-parameter style-name)))
    (if (null format)
	(format stream "~\\time\\" universal-time)
	(let ((function (find-function-from-stylized-date-string format)))
	  (if (null stream)
	      (with-output-to-string (s)
		(funcall function universal-time s))
	      (funcall function universal-time stream))))))

(define-stylized-format ("Sat" dow)
			(dow stream)
  (format stream (time:day-of-the-week-string dow :short)))

(define-stylized-format ("Saturday" dow)
			(dow stream)
  (format stream (time:day-of-the-week-string dow :long)))

(define-stylized-format ("March" month)
			(month stream)
  (format stream (time:month-string month :long)))

(define-stylized-format ("Mar" month)
			(month stream)
  (format stream (time:month-string month :short)))

(define-stylized-format ("3" month
			 "8" day
			 "30" minute)
			(number stream)
  (write number :stream stream))

(define-stylized-format ("03" month
			 "08" day
			 "16" hour)
			(number stream)
  (format stream "~2,'0D" number))

(defmacro with-am-hour (hour &body body)
  `(let ((,hour (mod ,hour 12)))
     (when (zerop ,hour) (setq ,hour 12))
     ,@body))

(define-stylized-format ("4" hour)
			(hour stream)
  (with-am-hour hour
    (write hour :stream stream)))


(define-stylized-format ("04" hour)
			(hour stream)
  (with-am-hour hour
    (format stream "~2,'0D" hour)))

(define-stylized-format ("four" hour)
			(hour stream)
  (with-am-hour hour
    (format stream "~R" hour)))

(define-stylized-format ("thirty" minute)
			(minute stream)
  (if (zerop minute)
      (format stream "hundred")
      (format stream "~R" minute)))

(define-stylized-format ("Third" month
			 "Eighth" day)
			(number stream)
  (format stream "~:R" number))

(define-stylized-format ("pm" am)
			(am stream)
  (format stream "~:[pm~;am~]" am))

(define-stylized-format ("afternoon" am)
			(am stream)
  (format stream "~:[afternoon~;morning~]" am))

(defun 1print-ordinal-number0 (number stream)
  (let ((remainder (rem number 10))
	(other-remainder (rem number 100)))
    (write number :stream stream)
    (cond ((and (= remainder 1)
		(not (= other-remainder 11)))
	   (write-string "st" stream))
	  ((and (= remainder 2)
		(not (= other-remainder 12)))
	   (write-string "nd" stream))
	  ((and (= remainder 3)
		(not (= other-remainder 13)))
	   (write-string "rd" stream))
	  (t (write-string "th" stream)))))

(define-stylized-format ("3rd" month
			 "8th" day
			 "52nd" year)
			(number stream)
  (print-ordinal-number number stream))

(define-stylized-format ("1952" year)
			(year stream)
  (cond (( year 100) (write year :stream stream))
	(t (write (+ year 1900) :stream stream))))

(define-stylized-format ("52" year)
			(year stream)
  (cond (( year 100) (write (- year 1900) :stream stream))
	(t (write year :stream stream))))


#+Franz
(defun 1print-today0 (&optional format)
  (flet ((doit (format)
	   (fresh-line)
	   (funcall (find-function-from-stylized-date-string format)
		    (get-universal-time))))
    (if format
	(doit format)
	(loop for format = (accept 'string :prompt "format")
	      do (doit format)))
    nil))
