;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: t -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

(defmacro D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")define-command-gbox-generic0 (g-f-name method-arglist &body default-case-body)
  (let ((form
	  `(defgeneric ,g-f-name (command-gbox ,@method-arglist)
	     (:method-combination command-name-case)
	     (:method (command-gbox :otherwise)
	      (declare (sys:function-parent ,g-f-name define-command-gbox-generic))
	      (ignore)
	      ,@default-case-body))))
    `(progn (incf *sage-command-generic-tick*)
	    ,form)))

(defmacro 1define-command-gbox-method0 ((g-f command-name) method-arglist &body body)
  `(progn
     (incf *sage-command-generic-tick*)
     (defmethod (,g-f command-gbox ,command-name) (,@method-arglist)
       ,(if (consp command-name)
	    `(progn ,@body)
	    `(with-sage-command-args (,command-name self)
	       ,@body)))))

(setf (get 'define-command-gbox-generic 'zwei:definition-function-spec-type) 'defun)
(setf (get 'define-command-gbox-method 'si:definition-type-name) "Command GBox Method")

(defun 1(:property define-command-gbox-method zwei:definition-function-spec-parser)
0       (bp-after-definer)
  (find-command-method-fspec bp-after-definer 'command-gbox))

(defstruct (1mouse-sensitive-gbox-group0 :list (:conc-name mouse-group-))
  sensitivity start-gbox end-gbox start-x end-x)
;;Recycle the slots.
(defsubst 1mouse-group-item-prettier-name0 (mouse-sensitive-gbox-group)
  (mouse-group-start-gbox mouse-sensitive-gbox-group))

(defmacro 1do-line-gboxes0 ((gbox-var first-gbox last-gbox) &body body)
  `(loop with .last-gbox. = ,last-gbox
	 for ,gbox-var = ,first-gbox then (box-next ,gbox-var)
	 do (progn ,@body)
	 until (eq ,gbox-var .last-gbox.)))

(defmacro 1do-line-gboxes-exclusive0 ((gbox-var first-gbox last-gbox) &body body)
  `(loop with .last-gbox. = ,last-gbox
	 for ,gbox-var = ,first-gbox then (box-next ,gbox-var)
	 while (neq ,gbox-var .last-gbox.)
	 do (progn ,@body)))

(defflavor 1doubly-linked-list-mixin0 ((prev) (next)) ()
  :initable-instance-variables
  (:ordered-instance-variables prev next)
  (:writable-instance-variables (box-prev prev) (box-next next))
  )

(defmethod 1(box-set-prev-and-next doubly-linked-list-mixin)0 (new-prev new-next)
  (setq prev new-prev
	next new-next))

(defun 1box-next-n0 (box n) (dotimes (ignore n) (setq box (and box (box-next box)))) box)
(defun 1box-prev-n0 (box n) (dotimes (ignore n) (setq box (and box (box-prev box)))) box)

(defmacro 1do-box-successors0 ((var init) &body body)
  `(loop for ,var = ,init then (box-next ,var) while ,var
	 do (progn ,@body)))

(defflavor 1doubly-linked-list-head
0	((prev nil) (next nil))
	(doubly-linked-list-mixin)
  (:constructor make-doubly-linked-list-head ()))

(defmacro 1with-temp-list-head0 ((head) &body body)
  `(let ((,head (make-doubly-linked-list-head)))
     ,@body
     (let ((real-head (box-next ,head)))
       (when real-head (setf (box-prev real-head) ()))
       real-head)))

(defflavor 1basic-gbox0 ((environment))
	   (doubly-linked-list-mixin)
  :settable-instance-variables
  :abstract-flavor)

(defflavor 1string-gbox0 (string start-index end-index width)
	   (basic-gbox)
  :settable-instance-variables
  (:constructor 1make-string-gbox0 (environment string start-index end-index))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1envr-entry-gbox0 (exit-gbox) (basic-gbox)
  :settable-instance-variables
  (:constructor 1make-envr-entry-gbox0 (environment))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1envr-exit-gbox0 (entry-gbox) (basic-gbox)
  :settable-instance-variables
  (:constructor 1make-envr-exit-gbox0 (environment))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1pseudo-paragraph-break-gbox0 (break-type	;NORMAL or LIMITED
					(indented t)
					(for-cursor-motion-only))
	   (basic-gbox)
  (:constructor 1make-pseudo-paragraph-break-gbox
0   (environment break-type &optional for-cursor-motion-only))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1presentation-entry-gbox
0	(exit-gbox
	 presentation-object
	 presentation-type
	 (presentation-options))
	(basic-gbox)
  :settable-instance-variables
  (:constructor 1make-presentation-entry-gbox
0   (environment presentation-object presentation-type &rest presentation-options))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1presentation-exit-gbox
0	(entry-gbox)
	(basic-gbox)
  :settable-instance-variables
  (:constructor 1make-presentation-exit-gbox0 (environment))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1record-entry-gbox
0	(exit-gbox
	 record
	 callers-view)				;What type of view from the caller
	(basic-gbox)
  :settable-instance-variables
  (:constructor 1make-record-entry-gbox
0   (environment record callers-view))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1record-exit-gbox
0	(entry-gbox)
	(basic-gbox)
  :settable-instance-variables
  (:constructor 1make-record-exit-gbox0 (environment))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1field-start-gbox
0	(type)
	(basic-gbox)
  :settable-instance-variables
  (:constructor 1make-field-start-gbox0 (environment type))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1field-end-gbox
0	(type)
	(basic-gbox)
  :settable-instance-variables
  (:constructor 1make-field-end-gbox0 (environment type))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1picture-gbox
0	(picture
	 (cached-height)
	 (cached-width)
	 (scale 1)
	 microns-per-device-pixel-at-format-time
	 (scale-type 'absolute)
	 (overflow-amount nil))
	(basic-gbox)
  (:constructor 1make-picture-gbox0 (environment picture &optional scale scale-type))
  :readable-instance-variables			;--- for debugging
  :writable-instance-variables
  :initable-instance-variables
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1command-gbox
0	(command-name parameter (width 0))
	(basic-gbox)
  (:constructor 1make-command-gbox0 (environment command-name &optional parameter))
  :settable-instance-variables
  (:writable-instance-variables (sage-command-parameter parameter))
  (:default-init-plist :area *sage-formatter-area*))

(defmethod 1(sys:print-self command-gbox)0 (stream &rest ignore)
  (si:printing-random-object (self stream)
    (format stream "@~a" command-name)))

(defflavor 1counter-command-gbox
0	((cloned-counter ()))
	(command-gbox)
 (:constructor 1make-counter-command-gbox-internal0 (environment command-name parameter))
 :writable-instance-variables
 (:default-init-plist :area *sage-formatter-area*))

(defmethod 1(make-counter-command-gbox command-gbox)0 ()
  (make-counter-command-gbox-internal environment command-name parameter))

(defflavor 1rfstr-support-gbox
0	(type					;one of rfstr, rmstr, or other-end
	 other-end)
	(basic-gbox)
  (:constructor 1make-rfstr-support-gbox0 (environment type))
  :writable-instance-variables
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1space-gbox0 (width) (basic-gbox)
  :settable-instance-variables
  (:constructor 1make-space-gbox0 (environment))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1tab-character-gbox0 () (space-gbox)
  (:constructor 1make-tab-character-gbox0 (environment))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1newline-gbox0 (hard-newline) (basic-gbox)
  :initable-instance-variables
  (:constructor 1make-newline-gbox0 (environment))
  (:default-init-plist :area *sage-formatter-area*))

(defmethod 1(:set-hard-newline newline-gbox)0 (value)
  (setq hard-newline value))

(defmethod 1(:hard-newline newline-gbox)0 ()
  (if (variable-boundp hard-newline)
      hard-newline
      (setq hard-newline ())))

(defun 1make-hard-newline-gbox0 (environment)
  (let ((newline (make-newline-gbox environment)))
    (send newline :set-hard-newline T)
    newline))

(defflavor 1paragraph-break-gbox0 (break-type	;normal or limited
				 (indented t))
	   (basic-gbox)
  (:constructor 1make-paragraph-break-gbox0 (environment break-type))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1unexpanded-reference-gbox0 (record-group view within-records prevailing-heading-generator)
	   (basic-gbox)
  (:gettable-instance-variables record-group)
  (:constructor 1make-unexpanded-reference-gbox0 (environment record-group view within-records &optional prevailing-heading-generator))
  (:default-init-plist :area *sage-formatter-area*))

;;; Kludge for starting wrapped lines in the right place.
(defflavor 1cursor-motion-gbox0 (x-position y-position)
	   (basic-gbox)
  (:constructor 1make-cursor-motion-gbox0 (environment x-position y-position))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1box-support-gbox
0	(type					;one of first or last
	 other-end
	 x
	 y
	 (additional-top-margin 0)
	 (additional-bottom-margin 0)
	 (additional-left-margin 0)
	 (additional-right-margin 0)
	 (box-origin nil)
	 (box-width nil))
	(basic-gbox)
  (:constructor 1make-box-support-gbox0 (environment type))
  :writable-instance-variables
  (:default-init-plist :area *sage-formatter-area*))

;;; These are used to get rfstr to work properly within a centered
;;; environment.
(defflavor 1cursor-saving-entry-gbox0 (saved-x-position
				     saved-y-position
				     exit-gbox)
	   (basic-gbox)
  (:constructor 1make-cursor-saving-entry-gbox0 (environment))
  :writable-instance-variables
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1cursor-saving-exit-gbox0 (entry-gbox)
	   (basic-gbox)
  (:constructor 1make-cursor-saving-exit-gbox0 (environment))
  :writable-instance-variables
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1line-hbox
0	(first-gbox newline-gbox height line-baseline extra-space-above extra-space-below
		    mouse-sensitive-groups
		    (property-list))
	(doubly-linked-list-mixin)
  :settable-instance-variables
  (:constructor 1make-line-hbox0 (first-gbox newline-gbox))
  (:default-init-plist :area *sage-formatter-area*))

;;This exists solely for accepting no-op annotation messages
(defflavor 1fake-line-hbox0 (height) ()
  :abstract-flavor)

(defflavor 1unexpanded-reference-line-hbox0 (gbox)
	   (doubly-linked-list-mixin)
  :settable-instance-variables
  (:constructor 1make-unexpanded-reference-line-hbox0 (gbox))
  (:default-init-plist :area *sage-formatter-area*))

(defvar 1*default-dex*0 ())
(defvar 1*list-of-dex-frames*0 ())

(defvar 1*dex-comtab*0 ())
(defvar 1*dex-long-name-comtab*0 ())
(defvar 1*dex-comtab-tick*0 0)

(sys:defvar-resettable 1*in-dex-background*0 nil nil)
(sys:defvar-resettable 1*inhibit-@modify-and-@define*0 nil)

(defmacro 1def-dex-com0 (char message doc-string . message-args)
  `(install-dex-command ',char ',message ',doc-string ',message-args))

(defmacro 1caching-based-on-tick0 ((tick-val tick-rememberer-var cache-var)
				 &body compute-value-to-cache
				 &environment env)
  (once-only (tick-val &environment env)
    `(if (or (not (variable-boundp ,tick-rememberer-var))
	     (neq ,tick-rememberer-var ,tick-val))
	 (prog1 (setq ,cache-var (progn ,@compute-value-to-cache))
		(setq ,tick-rememberer-var ,tick-val))
	 ,cache-var)))

(defparameter 1*one-newline*
0	  (make-string 1 :initial-element #\return :area sys:permanent-storage-area))
(defparameter 1*two-newlines*
0	  (make-string 2 :initial-element #\return :area sys:permanent-storage-area))

;;;For using inside methods for dex-items
(defmacro 1with-line-source-from0 ((hbox N) &body body)
  `(let ((.next-available-line. (send line-source :available-line-hbox)))
     (send line-source :take-it-from ,hbox)
     ,(unless (equal N 0)			;at compile time
	`(cond ((= ,N 0))
	       ((> ,N 0)			;move onwards from anchor line
		(loop repeat ,N
		      do (send self :take-line)))
	       (t (loop with line = (send self :take-line)	;move backwards from anchor
			repeat ,N
			do (setq line (box-prev line))
			finally (send line-source :take-it-from line)))))
     (multiple-value-prog1
       (progn ,@body)
       (send line-source :take-it-from .next-available-line.))))

;;; An instance of this flavor holds all the counters and values dynamically available
;;; during formatting.  Instead of a zillion special variables, we bind one
;;; special variable to an instance.
;;; Things defined with @Define and @String (for instance) are held in here too.
(defflavor 1ambient-counters
0	((counters ())
	 current-section-counter
	 (values ()))
	()
  )

;; List of system variables and accessor functions for use in Case statements.
(defvar1 *system-variables-alist*0 nil)

;; Function to define system variables and their zero argument accessor functions
(defun 1define-system-variable 0(name accessor)
  (check-type name string)
  (check-type accessor function)
  (let ((symbol (intern (string-upcase (string-trim '(#\space #\tab) name))
			(find-package "sage"))))
(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")    ;; Remember the symbol and accessor.  If the symbol was already
    ;; registered, replace the old accessor with the new one.
0    (pushnew (cons symbol accessor) *system-variables-alist*
	     :test #'eq :key #'first :replace t)))

;; Define a bunch of system variables
(define-system-variable "machine type" #'machine-type)
(define-system-variable
  "system type" #'(lambda () (format nil "~s" (send neti:*local-host* :system-type))))
(define-system-variable "user id" #'(lambda () neti:user-id))
(define-system-variable
  "year"  #'(lambda () (format nil "~a" (time:canonicalize-year (time:default-year)))))
(define-system-variable
  "day of week" #'(lambda () (multiple-value-bind (nil nil nil nil nil nil day-of-week)
				 (time:decode-universal-time (time:get-universal-time))
			       (time:day-of-the-week-string day-of-week))))

(Defun 1lookup-system-variable 0(name)
  (let ((accessor (cdr (assoc name *system-variables-alist*))))
    (when accessor
      (funcall accessor))))

;; This is the variable which is statically bound to hold state.
;; Static counters are used in a similar fashion to ambient
;; counters except that they can be bound outside of a formatting
;; session (e.g., prior to Format Pages in the Page Previewer.
(defvar 1*static-counters* 0(make-hash-table))

;; Table to store bindings made to Case selectors during Format
;; Pages using :Query option in Page Previewer
(defvar 1*format-pages-case-bindings* 0(make-hash-table))

;; This is the variable which dynamically bound to hold the state
(defvar 1*ambient-counters*0)

;; ...and this does the binding.  Probably you want to include this
;; near with-sage-device and keeping-sage-files and with-presentation-stack
;; and kludging-document-and-device-types and whatever else.
(defmacro 1with-ambient-counters0 (&body body)
  `(let ((*ambient-counters* (find-or-make-ambient-counters)))
     ,@body))

(defun 1find-or-make-ambient-counters0 ()
  (or (and (variable-boundp *ambient-counters*)
	   *ambient-counters*)
      (make-instance 'ambient-counters)))

(defsetf keyword-token-record-groups set-keyword-token-record-groups)

;;; Define this as a named structure so that backtraces, etc, don't try to print out
;;; all 40000 characters.
(defstruct (1keyword-token-string
0	     (:type :named-array-leader)
	     (:constructor make-keyword-token-string-internal)
	     (:make-array (:length length :type 'zl:art-string :fill-pointer 0
			   :area *sage-completion-area*))
	     (:initial-offset 2)
	     (:copier nil)
	     (:print-function (lambda (self stream depth)
				(ignore self depth)
				(sys:printing-random-object (self stream :no-pointer)
				  (format stream "String of sage tokens (length ~D)"
					  (string-length self))))))
  (length 0))

(defun 1make-keyword-token-string0 (&key (length 100))
  (let ((string (make-keyword-token-string-internal :length length)))
    (setf (fill-pointer string) 1)
    (setf (aref string 0) #\null)
    string))


;;; These next two called 1make-sage-token-string0, but that's not defined anywhere!
;;; Since they were just after the definition of 1make-keyword-token-string0, I'm
;;; betting that was what was intended, and this was just a patch-merging error.
;;; Elsewhere, these are set to a 1keyword-token-string0, so it seems pretty safe. --RWK
(defvar1 *keyword-token-characters*0 (make-keyword-token-string))
(defvar1 *more-keyword-token-characters*0 (make-keyword-token-string))
(defvar 1*unsorted-keyword-token-record-groups*0 (make-hash-table :test #'string-equal
								:area *sage-completion-area*))
(defconstant 1%%keyword-token-position0 (byte 20 0))
(defconstant 1%%keyword-token-length0 (byte 12 20))

;;; There was no 1defvar0 for this anywhere except NSage 21.55!  --RWK, Hornig
(defvar 1*sorted-keyword-token-indices*0 #())
(defvar 1*sorted-keyword-token-record-groups*0)

;; Used by the permuted index generator.  It is here because the permuter
;; is split between two files (old and new)

(defmacro 1do-combinations0 (((left right) list) &body body)
  `(do-combinations-1 ,list (named-lambda do-combinations (,left ,right) ,@body)))
(defun 1do-combinations-10 (list continuation)
  (declare (sys:downward-funarg continuation))
  (let ((length (length list)))
    (loop for left-i from length downto 1
	  for right-i from 0
	  do
      (funcall continuation (butlast list left-i) (nthcdr right-i list)))))
