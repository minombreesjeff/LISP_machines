;;; -*- Mode: LISP; Syntax: Common-lisp; Package: ZWEI; Base: 10; Lowercase: Yes -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;


;;; Quick and dirty conversion of the Zwei interface to the document
;;; examiner.

(defcom COM-SHOW-DOCUMENTATION
	"Looks up a topic from the documentation set and displays it on a typeout window.
It offers the current definition as a default, but prompts for a
definition, which can be supplied by mouse or minibuffer.  It accepts
only those topics for which documentation has been installed.

Some topic names are not unique.  (For example, something could be both
a function and a variable.)  In this case, it offers you a short menu
of choices and you pick the one you wanted.  When the topic name is
unique, it shows it without prompting you for the category.

With a numeric argument, it prompts for an output device.  The devices
include the screen and supported printers." ()
  (let* ((default (relevant-function-or-message-name (point)))
	 (default-record-group (sage:find-record-group-for-topic-and-type default 'function)))
    (let ((record-group (collect-record-group-from-user "Look up Documentation for"
							default-record-group)))
      (sage-displayer-interface record-group)))
  dis-none)

(defun find-record-group-and-show-documentation-for-topic-and-type (topic type symbol-type)
  (typein-line "Looking for documentation for ~S." topic)
  (let ((record-group (sage:find-record-group-for-topic-and-type topic type)))
    (if record-group
	(sage-displayer-interface record-group)
	(barf "~S is not a documented ~A." topic symbol-type))))

(defcom COM-SHOW-DOCUMENTATION-FUNCTION
	"Displays the documentation for the current function.

With a numeric argument, it prompts for an output device.  The devices
include the screen and supported printers." ()
  (let ((type 'function))
    (multiple-value-bind (symbol message-p)
	(condition-case ()
	     (relevant-function-or-message-name (point))
	   ;;adding stuff at end of unsectionized buffer blows out so just try this
	   (sys:unclaimed-message (sectionize-buffer *interval*)
				  (relevant-function-or-message-name (point))))
      (cond (symbol
	     ;; Punt dealing with generic functions or methods for now
	     (when message-p (setq type 'nsage::message))
	     (find-record-group-and-show-documentation-for-topic-and-type
	       symbol type "function"))
	    (t (com-show-documentation)))))	;no obvious function around, so prompt
  dis-none)

;;;This is very ungeneric code, cribbed from Zmacs approach for c-sh-V.
(defcom COM-SHOW-DOCUMENTATION-VARIABLE
	"Displays the documentation for the current variable.

With a numeric argument, it prompts for an output device.  The devices
include the screen and supported printers." ()
  (let ((symbol (nearest-thing)))
    (cond ((null symbol)
	   (barf))
	  ((or (lt:global-special-variable-p symbol)
	       (lt:named-constant-p symbol)
	       (boundp symbol))
	   (find-record-group-and-show-documentation-for-topic-and-type
	     symbol 'nsage::variable "variable"))
	  (t (barf "~S is not a defined variable" symbol))))
  dis-none)

(defcom COM-SHOW-DOCUMENTATION-FLAVOR
	"Displays the documentation for the current flavor.

With a numeric argument, it prompts for an output device.  The devices
include the screen and supported printers." ()
  (let ((symbol (nearest-thing)))
    (cond ((null symbol)
	   (barf))
	  ((get symbol 'si:flavor)
	   (find-record-group-and-show-documentation-for-topic-and-type
	     symbol 'nsage::flavor "flavor"))
	  (t (barf "~S is not a defined flavor" symbol))))
  dis-none)

(defun NEAREST-THING ()
  (let* ((bp1 (forward-atom (forward-char (point) 1 t) -1 t))
	 (bp2 (forward-atom bp1))
	 symbol)
    (if (null bp2) (barf))
    (condition-case (error)
        (setq symbol (symbol-from-string (string-interval bp1 bp2) nil nil t))
      (sys:read-error (barf)))
    symbol))

(defun SAGE-DISPLAYER-INTERFACE (record-group &optional device)
  (when (null device)
    (setq device (if *numeric-arg-p* (read-sage-output-device) :screen)))
  (when device
    (nsage::keeping-sage-files
      (unwind-protect-case ()
	  (nsage::sage-displayer device
				 (nsage::appropriate-title-rendering
				   record-group 'nsage::no-formatting)
				 #'nsage::formatted-sage-record-line-source
				 record-group)
	;; in either case, add a bookmark
	(:normal (nsage::add-bookmark-to-dex record-group))
	(:abort (nsage::add-bookmark-to-dex record-group))))))

(defcom COM-SHOW-TABLE-OF-CONTENTS
	"Displays the table of contents for a topic, prompting for the topic name.
The optional numeric argument specifies how many levels deep you want to see.
\(Remember that the topic itself counts for one level!)  The default is to
show all levels.  c-u hardcopies all levels of the table of contents." ()
  (let ((record-group (typein-line-accept-record-group
			:prompt "Show the table of contents for"
			:default (when (fdefinedp 'sage::record-group-at-point)
				   (sage::record-group-at-point nil)))))
    (sage:log-lookup-event record-group "Table of contents" t)
    (sage::view-table-of-contents-internal record-group nil nil *numeric-arg-p*))
  dis-none)

(defcom COM-WHAT-DOCUMENT
	"Finds the document(s) that contain(s) this record." ()
  (let ((record-group (collect-record-group-from-user "Find the documents that contain")))
    (what-document-internal record-group))
  dis-none)

(defun WHAT-DOCUMENT-INTERNAL (record-group)
  (let ((parents (find-topic-documents record-group))
	(title (nsage::appropriate-title-rendering record-group 'nsage::no-formatting)))
    (if parents
	(progn
	  (format t "~&~A appears in ~D document~:P:" title (length parents))
	  (loop for record-group in parents
		as structure = (nsage::document-p record-group)	;kludge?
		do
	    (cl:fresh-line)
	    (dw:with-output-as-presentation (:object record-group
					     :type 'nsage::record-group)
	      (format t "~A" (nsage::appropriate-title-rendering
			       record-group 'nsage::no-formatting)))
	    (format t " (Volume ~A)"
		    (nsage::registered-book-mnemonic structure)))
	  (terpri))
	(if (nsage::document-p record-group)
	    (format t "~&~A is itself a document.~%" title)
	    (format t "~&~A does not appear in any documents.~%" title)))))

(defun FIND-TOPIC-DOCUMENTS (record-group)
  (labels ((ftd (rg done-already)
	     (declare (sys:downward-function))
	     ;;If there's a recursive expansion loop, then there's a recursive caller loop.
	     ;;Don't get stuck in it.
	     (unless (memq rg done-already)
	       (let ((callers (sage::sage-who-calls-internal
				rg '(sage::expand sage::contents))))
		 ;; We have a list of records or compressed record groups.  Convert to a list
		 ;; of record groups.  Do this before touching anything that might expand
		 ;; the compressed record group while its in the list and before we get to it.
		 (loop for sublist on callers
		       as record = (car sublist)
		       do (setf (car sublist)
				(if (typep (follow-structure-forwarding record)
					   'sage:record-group)
				    record (sage::doc-record-record-group record))))
		 (loop for maybe-parent-rg in callers
		       if (sage::document-p maybe-parent-rg)
			 collect maybe-parent-rg
		       else nconc (stack-let ((done-so-far (cons rg done-already)))
				    (ftd maybe-parent-rg done-so-far)))))))
    (si:eliminate-duplicates (ftd record-group ()))))


;;; this function should return NIL when asked if a book is in itself.
sage::
(defun IN-THIS-BOOK-P (book record-group)
  (member book (zwei:find-topic-documents record-group)))

(defcom COM-DOCUMENT-LIST-CALLERS
	"Lists documentation records that directly contain or refer to a given topic.
A numeric argument selects the kind of caller.  The default is to list all
callers.
 1  List only callers that expand (contain the text of) the topic.
 2  List only callers that have cross-references to the topic." ()
  (let ((record-group (collect-record-group-from-user "List the records that use")))
    (sage::sage-who-calls
      record-group
      (if *numeric-arg-p*
	  (selector *numeric-arg* eql
	    (1 'sage::expand)
	    (2 'sage::crossreference)
	    (otherwise
	      (barf "Use the command without an argument to see all the references."))))))
  dis-none)

;;; Returns the function spec, property type, and external type.  If the
;;; caller specifices impossible-is-ok t, the "topic" returned may
;;; actually be a string.  The types can be NIL if IMPOSSIBLE-IS-OK is
;;; not NIL and the fspec isn't documented and doesn't have a record in
;;; a Zmacs buffer.  The fspec can be NIL if IMPOSSIBLE-IS-OK is not NIL
;;; and the user types "nil".
(defun COLLECT-RECORD-GROUP-FROM-USER (prompt &optional default impossible-is-ok
				       (completion-aarray sage:*topic-aarray*))
  (declare (values record-group-or-string))
  (if impossible-is-ok
      (typein-line-accept `((scl:type-or-string
			      ((sage:record-group :aarray ,completion-aarray))))
			  :prompt prompt
			  :additional-blip-chars '(#\sp)
			  :default default)
      (typein-line-accept-record-group :prompt prompt :default default
				       :aarray completion-aarray)))

(defcom COM-SHOW-CANDIDATES
	"Shows the candidates matching one or more words.
" ()
  (let* ((match-string (sage::tokenize-match-string
			 (collect-match-string "Index word(s) to look for")))
	 (matching-type 
	   (if (not *numeric-arg-p*)
	       'heuristic
	       (typein-line-accept
		 '((scl:alist-member
		     :alist
		     (("Heuristic" :value heuristic
		       :documentation "Shows candidates closely resembling the search spec.")
		      ("Exact" :value exact
		       :documentation "Shows candidates having words that exactly match the search spec.")
		      ("Initial" :value initial
		       :documentation "Shows candidates having words that contain the search tokens as initial substrings.")
		      ("Substring" :value substring
		       :documentation "Shows candidates having words that contain the search tokens as substrings.")))
		   :description "a search spec")
		 :prompt "Heuristic, Exact, Initial or Substring matching?"
		 :default 'heuristic)))
	 (multiple-word-order
	   (if (or (not *numeric-arg-p*)
		   (null (cl:rest match-string)))
	       'any
	       (typein-line-accept 
		 '((scl:alist-member
		     :alist
		     (("Any" :value any
		       :documentation "The words can be in any order")
		      ("Adjacent" :value adjacent
		       :documentation "The words must be in the given order, and adjacent"))))
		 :prompt "Word ordering (Any or Adjacent)?"
		 :default 'any)))
	 (condition (cl:ecase multiple-word-order
		      ;; Another possibility would be "same order" allowing intervening 
		      ;; words or "nearby" to allow intervening words but any order
		      (adjacent 'sage::adjacent)
		      (any 'sage::logical-and)))
	 (matching-function (cl:ecase matching-type
			      (exact #'cl:string-equal)
			      (substring #'scl:string-search)
			      (initial #'sage::initial-substring-match)
			      (heuristic #'sage::heuristic-match))))
    (nsage::doc-match-internal match-string
			       matching-function
			       'nsage::keyword-tokens
			       (cl:nstring-capitalize (string-append
						     matching-type " search "
						     multiple-word-order " order"))
			       condition
			       :device (if *numeric-arg-p* nil :screen)))
  dis-none)

(defun COLLECT-MATCH-STRING (prompt)
  (loop for spec = (typein-line-accept 'ddex::candidate-substring
				       :prompt prompt)
	while (string-equal spec "")
	do
	(beep)
	(format error-output "~&Currently there is no default.~@
                You need to supply something before pressing RETURN.")
	finally (return spec)))

;;;This does no error checking for "complete" environments.  It wouldn't know the
;;;difference if given real Sage structure and would blow it completely.  Will need
;;;to "flavorize" things so that editor can recognize whether there is raw text or
;;;Sage source code and make a decision about whether to wrap dummy structure around
;;;the real stream.
(defcom COM-FORMAT-REGION
	"Formats the contents of the region, displaying the result on the screen.

With a numeric argument, it prompts for an output device.  The devices
include the screen and supported printers.
With an argument of zero, it prints no page headings." ()
  (if (eq (send (send *interval* :get :major-mode) :major-mode-keyword)
	  :sage)
      (format *typeout-window*
	      "~&Format Region does not work on Sage Mode buffers.
It works on buffers with plain text or Scribe commands.  What
you probably want to do is parse and display one or more records,
or parse some records and use the Show Documentation command on
one of them.

~:[~3*The Writer Tools system is not loaded now, so you can't parse
any part of the buffer.  If a Sage binary (\"SAB\") file exists for
this buffer, you can use nsage::load-index-info to load the index
information from that file.  Once you have loaded the index
information, use Show Documentation on a record in the file.~
~;Use Parse And Show Region ~@[(~A) ~]to parse and display one or
more records in the buffer.  Use Parse Region ~@[(~A) ~]to parse
one or more records without displaying them.  To parse the whole
buffer, use Mark Whole ~@[(~A) ~]followed by Parse Region.
See the Writer Tools documentation for details.~]~@[

The Show Documentation command is bound to ~A.~]"
	      (sct:get-system-version 'writer-tools)
	      (key-for-command 'com-parse-and-show-region)
	      (key-for-command 'com-parse-region)
	      (key-for-command 'com-mark-whole)
	      (key-for-command 'com-show-documentation))
      (region (start end :enforce-single-section t)
	(format-stream (si:make-input-stream-from-tributaries
			 :characters T
			 :string "@begin(text)"
			 :stream (open-interval-stream start end t)
			 :string "@end(text)")
		       nil (open-interval-stream *interval*)
		       (format nil "Region from ~A" (send *interval* :name)))))
  dis-text)

(defcom COM-FORMAT-BUFFER 
	"Formats the contents of the current buffer, displaying the result on the screen.
With a numeric argument, it prompts for an output device.  The devices
include the screen and supported printers.
With an argument of zero, it prints no page headings." ()
  (if (eq (send (send *interval* :get :major-mode) :major-mode-keyword)
	  :sage)
      (format *typeout-window*
	      "~&Format Buffer does not work on Sage Mode buffers.
It works on buffers with plain text or Scribe commands.  What
you probably want to do is parse the buffer and then use the Show
Documentation command on the \"top-level\" record, if there is one.

~:[~2*The Writer Tools system is not loaded now, so you can't parse
the buffer.  If a Sage binary (\"SAB\") file exists for this buffer,
you can use nsage::load-index-info to load the index information
from that file.  Once you have loaded the index information, use
Show Documentation on the \"top-level\" record.~
~;To parse the buffer, first use Mark Whole ~@[(~A) ~]to mark the
buffer, then use Parse Region ~@[(~A) ~]to parse it.
See the Writer Tools documentation for details.~]~@[

The Show Documentation command is bound to ~A.~]"
	      (sct:get-system-version 'writer-tools)
	      (key-for-command 'com-mark-whole)
	      (key-for-command 'com-parse-region)
	      (key-for-command 'com-show-documentation))
      (let ((interval-stream (open-interval-stream *interval*)))
	(format-stream (si:make-input-stream-from-tributaries
			 :characters t
			 :string "@begin(text)"
			 :stream interval-stream
			 :string "@end(text)")
		       nil interval-stream (format nil "Buffer ~A" (send *interval* :name)))))
  dis-text)

(defcom COM-FORMAT-FILE
	"Formats the contents of a file, displaying the result on the screen.

With a numeric argument, it prompts for an output device.  The devices
include the screen and supported printers.
With an argument of zero, it prints no page headings." ()
  (let ((path (accept-defaulted-pathname "File to display formatted" (pathname-defaults))))
    (if (eq (send path :canonical-type) :sage-record)
	(format *typeout-window*
		"~&Format File does not work on Sage record files.
It works on files with plain text or Scribe commands.  What
you probably want to do is parse the file, load its index information,
and then use the Show Documentation command on the \"top-level\" record,
if there is one.

~:[~1*The Writer Tools system is not loaded now, so you can't parse
the file.  If a Sage binary version already exists for this file,
you can use nsage::load-index-info to load the index information from
that file.  Once you have loaded the index information, use Show
Documentation on the \"top-level\" record.~
~;You can use Parse Save And Load ~@[(~A) ~]to parse this file and load
the index information from the resulting Sage binary (\"SAB\") file.  If
a Sage binary version already exists for this file, you can use
nsage::load-index-info to load the index information from that file.
Once you have loaded the index information, use Show Documentation on
the \"top-level\" record.  See the Writer Tools documentation for details.~]~@[

The Show Documentation command is bound to ~A.~]"
		(sct:get-system-version 'writer-tools)
		(key-for-command 'com-parse-save-and-load)
		(key-for-command 'com-show-documentation))
	(format-file-internal path)))
  dis-text)

(defun format-file-internal (path)
  (with-open-file (in path)
    (format-stream (si:make-input-stream-from-tributaries
		     :characters t
		     :string "@begin(text)"
		     :stream in
		     :string "@end(text)")
		   nil in (string path))))

;;;These are general, not just for the Sage mode comtab.
(set-comtab *zmacs-comtab*
	    '(#\m-sh-A com-show-documentation-function
	      #\m-sh-V com-show-documentation-variable
	      #\m-sh-F com-show-documentation-flavor)
	    (make-command-alist
	      '(com-format-buffer)))
(set-comtab *standard-comtab*
	    '(#\m-sh-D com-show-documentation)	;official location for now
	    (make-command-alist
	      '(com-format-file
		com-format-region
		com-show-documentation
		com-show-candidates
		com-show-table-of-contents
		com-document-list-callers
		com-what-document
;		com-find-duplicate-cross-refs	;s.b. in writer-ui ???
		)))

nsage::
(defun installed-records-for-topic (topic)
  (loop for record-group in (find-record-group-for-topic-and-type topic nil)
	as installed-record = (find-record-for-lookup record-group)
	when installed-record collect it))

;;; Defines translators from 
;;; documentation-topic       editor-command
;;; documentation-topic-name  editor-command
;;; No longer defines translators on EXPRESSION
(defmacro D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")define-record-group-to-editor-command-translator
0	  ((command-name echo-name &key (command-table '*standard-comtab*) gesture)
	   (topic-var) &body body)
  (let ((record-group-translator-name (dw::fintern "RECORD-GROUP-TO-~S-TRANSLATOR"
						   command-name))
	(record-group-name-translator-name 
	  (dw::fintern "RECORD-GROUP-NAME-TO-~S-TRANSLATOR" command-name)))
    `(progn
       (define-presentation-to-editor-command-translator
	 ,record-group-translator-name
	 (nsage::record-group ,echo-name ,command-table
			      :gesture ,gesture)
	 (thing)
	 (flet ((do-it (,topic-var)
		  ,@body))
	   `(,#'do-it ,thing)))
       (define-presentation-to-editor-command-translator
	 ,record-group-name-translator-name
	 (nsage::record-group-name ,echo-name ,command-table
				   :gesture ,gesture
				   :do-not-compose t
				   :documentation ((thing)
						   (format nil "~A ~S"
							   ,echo-name (first thing)))
				   ;; really might want to deal with command-table...
				   :tester true)
	 (thing)
	 (flet ((do-it (thing)
		  (let ((,topic-var (nsage::convert-record-group-name-to-record-group-using-mouse
				      thing)))
		    (when ,topic-var
		      ,@body))))
	   `(,#'do-it ,thing)))
       )))

;;; Simple showing of documentation.
(define-record-group-to-editor-command-translator
  (show-documentation "Show Documentation" :gesture :select)
  (documentation-topic)
  (sage-displayer-interface documentation-topic))

(define-presentation-to-editor-command-translator
  1expression-to-show-documentation-translator
0  (sys:expression "Show Documentation" *standard-comtab*
		  :documentation ((thing)
				  (format nil "~A ~S" "Show Documentation" thing))
		  :do-not-compose t
		  :tester ((expression &key input-context)
			   (and (si:validate-function-spec expression)
				(dw:with-type-decoded (nil nil presentation-args)
				      (dw::presentation-input-context-presentation-type
					input-context)
				   (let ((allow-any-input (cl:getf presentation-args
								   :allow-any-input)))
				     (or allow-any-input
					 (nsage::installed-records-for-topic expression)
					 (documentation expression)
					 ))))))
  (expression)
  (flet ((do-it (expression)
	   (with-stack-list (list "" expression)
	     (multiple-value-bind (rg found-p)
		 (nsage::convert-record-group-name-to-record-group-using-mouse list)
	       (cond-every 
		 ((documentation expression)
		  (typeout-long-documentation expression))
		 (found-p
		   (when rg
		     (sage-displayer-interface rg))))))))
    `(,#'do-it ,expression)))

;;; Gee, it's a shame to waste that nice macro.
;;; I guess I'll have to make Show Overview, etc. available in ZWEI where
;;; they never were before.  :-)


;;;; command to expand parser macros

(defcom com-macro-expand-parser-expression
	"Macro-expands the keyword parser expression following Point.
Reads the expression following point, and expand the form itself but not
any of the subforms within it.  Types out the result on the typeout window.
With a numeric argument, also does macro expand of expression.
after the expression." ()
  (let ((stream (rest-of-interval-stream (point)))
	(sage::*keyword-defselect* 'editor-parser))
    (move-point-on-read-error (stream)
      (zl:grind-top-level (let ((expanded (sage::pattern-expand 'eb (read stream))))
			    (if *numeric-arg-p*
				(si:mexp-expand-form expanded nil :all-levels T)
			      expanded))
			  nil
			  cl:*standard-output*)))
  dis-none)
