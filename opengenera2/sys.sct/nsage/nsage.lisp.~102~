;;; -*- Syntax: Common-lisp; Mode: Lisp; Package: SCT; Base: 10; Lowercase: Yes -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

;;; These need to be here, instead of in SCT-INTERFACE, because these are needed
;;; to parse the DEFSYSTEM.  --RWK

(define-module-type :tex-hyphenation-tables nil :bin
  bin-load-module)

(defmethod (:compile tex-hyphenation-tables-module)
	   (system-op &rest keys
		      &key recompile no-compile &allow-other-keys)
  (unless no-compile
    (when (eq system-op :compile)
      ;; Only compile when the system operation is :COMPILE
      (lexpr-funcall #'default-compile
		     self system-op recompile
		     #'(named-lambda lisp-compile-driver
				     (source bin module &rest ignore)
			 (let-if (system-default-package *system*)
				 ;; Bind PACKAGE to the default package in case
				 ;; the override mechanism supplies NIL
				 ((package (pkg-find-package
					     (system-default-package *system*))))
			   (ignore module)
			   (sage::compile-tex-hyphenation-tables source bin)))
		     '("Compile" "Compiling" "Compiled")
		     keys))))

(defsystem NSAGE
    (:pretty-name "NSage"
     :default-pathname "sys: nsage;"
     :advertised-in (:herald)
     :maintaining-sites (:scrc)
     :bug-reports (:name "Document Examiner" :mailing-list "Bug-Document-Examiner"
			 :documentation "Report problems in the Document Examiner")
     :patches-reviewed "System-Changes"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional
     :before-patches-initializations sage::*sage-initializations*)

  ;; The package declaration is now in sys:sys;pkgdcl
  (:module defs-hardcopy "defs-hardcopy"
	   (:required-systems :hardcopy))	; ---update when :required-systems changes
  (:module-group defs
   (:serial "sage-defs"
    "defs-directives"
    defs-hardcopy
    "defs-io"
    "defs-formatter"
    "defs-record-types"
    "sage-props")
   (:in-order-to (:compile :load)))

  (:module sage-choose "sage-choose"		;support for getting topics to look up
	   (:package zwei)
	   (:in-order-to (:compile :load) (:load defs)))
  (:module streams "streams"			;tributary streams
	   (:package si)
	   (:in-order-to (:compile :load) (:load defs))
	   (:source-category :basic))
  (:module sage-showcase "forout"
	   (:in-order-to (:compile :load) (:load defs))
	   (:source-category :basic))
  (:module strings ("strings" "arglists")	;general-purpose text string handling stuff
	   ;; Needs D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")in-environment0, 1making-sage-directives0 --RWK
	   (:in-order-to (:compile) (:load defs sage-showcase))
	   (:in-order-to (:load) (:load defs)))
  (:module prune "pruner"			;prune on-line document set
	   (:in-order-to (:compile :load) (:load strings)))
  (:module envr "envr"				;environment flavor handling
	   (:in-order-to (:compile :load) (:load defs)))
  (:module builder "builder"			;parses stuff from record to internal rep
	   (:in-order-to :compile (:load envr))
	   (:in-order-to :load (:load strings envr)))
  (:module device-defs "device-defs"
	   (:source-category :basic))
  (:module devices ("devices" "new-output-device-protocol")
	   ;; Need the database to expand 1with-sage-command-args0, and
	   ;; need 1displayer0 for 1*display-line-gboxes-should-clear-screen-area*0.  --RWK
	   ;; But the latter makes it too hard to avoid circular dependencies.  --RWK
	   (:in-order-to (:compile) (:load device-defs envr database #+ignore displayer))
	   (:in-order-to (:load) (:load device-defs envr))
	   (:source-category :basic))
  (:module hardcopy-devices "hardcopy-devices"
	   (:required-systems :hardcopy))	; ---update when :required-systems changes
  (:module data "data"				;for collection and analysis routines
	   (:in-order-to (:compile :load) (:load defs)))
  (:module database ("database" "bd-approach" "bd-installation" "bd-reference-cards"
		     "bd-dictionary" "style-command" "bd-generic"
		     "bd-memo"
		     "bd-letter"
		     "bd-article")
	   ;; Needs 1in-environment0, 1making-sage-directives0 --RWK
	   (:in-order-to :compile (:load defs envr sage-showcase))
	   (:in-order-to :load (:load envr parser streams))
	   (:source-category :basic))
  (:module formatter-defs "box-flavors")
  (:module formatter
   ;;real formatting
   ("formatter" "forrec" "forline" "hyphen" "page-formatting-support"
    "forpage" "counter" "forindex" "bibliog"
    "permute" "simple-tables")
   (:in-order-to :compile (:load formatter-defs envr database sage-showcase))
   (:in-order-to :load (:load formatter-defs))
   (:in-order-to :load (:load database)))
  (:module hyphenation-exceptions "hyphenation-exceptions"
	   (:in-order-to :load (:load formatter tex-hyphenation-tables))
	   (:source-category :basic))
  (:module show ("show")
	   ;; Needs 1page-box0 flavor out of "forpage" --RWK
	   ;; Also needs 1with-sage-device-stream-prepared0 at compile time.  --RWK
	   (:in-order-to :compile (:load envr formatter-defs device-defs))
	   ;; Don't need DEVICE any more, it appears to have been for output-device,
	   ;; which now comes from defs-io.  --RWK
	   (:in-order-to :load (:load sage-choose envr builder data)))
  (:module sab-file "sab-file"			;writes and reads sab file records & indexes
	   (:in-order-to :compile (:load defs))
	   (:in-order-to :load (:load show)))
  (:module parser-macros "parser-macros")
  (:module parser "parser"
	   (:in-order-to (:compile :load) (:load streams show parser-macros )))
  (:module tex-hyphenation-tables "tex-hyphen.tex"
	   (:type :tex-hyphenation-tables)
	   ;; just hyphen., really, but I couldn't stand to make yet another module
	   (:in-order-to :compile (:load formatter))
	   (:in-order-to :load (:load formatter)))
  (:module ddex ("Dynamic-Dex" "MacIvory-Dex") (:type :system)
	   (:in-order-to (:compile :load) (:load formatter sab-file)))

  (:module record "record"
	   (:in-order-to (:compile :load) (:load defs envr database)))
  (:module install "install"			;for reading in a file index
	   (:in-order-to (:compile :load) (:load show)))
  (:module zwei-defs "zwei-defs"		;vars, macros, resources in zwei package
	   (:package zwei)
	   (:in-order-to (:compile :load) (:load defs)))
  (:module sage-zwei "sage-zwei"		;internal support stuff for sage mode
	   (:package zwei)
	   (:in-order-to (:compile :load) (:load install zwei-defs)))
  (:module who-calls "who-calls"		;maintaining info about callers
	   (:in-order-to (:compile :load) (:load install ddex)))
  (:module filter-directives "filter-directives"
	   (:in-order-to :compile (:load defs database))
	   (:in-order-to :load (:load defs)))
  (:module displayer "displayer"		;input editor interface and displaying stuff
	   (:in-order-to (:compile :load) (:load install sage-zwei ddex)))
  (:module compressed-database "compressed-database"
	   (:in-order-to (:compile :load) (:load defs)))
  (:module commands ("commands"			;presentation types and commands
		     "sage-ie-commands")
	   (:in-order-to (:compile :load) (:load defs compressed-database)))
  (:module sage-ui "sage-ui"			;user-interface editor commands
	   (:package zwei)
	   (:in-order-to (:compile :load) (:load install sage-zwei commands who-calls))
	   (:source-category :basic)
	   (:required-systems :zwei))		;--- change when :required-systems is changed
  (:module zmail-ui "zmail-ui"			;nsage commands for zmail
	   (:package zwei)
	   (:in-order-to (:compile :load) (:load install sage-zwei commands who-calls))
	   (:source-category :basic)
	   (:required-systems :zmail))		;--- change when :required-systems is changed
  (:module sct-interface "sct-interface"
	   (:package "SCT")
	   (:source-category :basic)		;SWM wants this available as simple example
	   )
  (:module hardcopy-cometh "hardcopy-cometh"
	   (:required-systems :hardcopy))	;--- change when :required-systems is changed
  (:module cometh "cometh"			;for all the compile-flavor-methods
	   (:uses-definitions-from show database who-calls displayer)))

(defsubsystem dynamic-dex
    (:default-pathname "SYS:NSAGE;DDEX;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional)
  (:module hardcopy-dexcom "hardcopy-dexcom"
	   (:required-systems :hardcopy))
  (:serial
    "dex-viewer-pane"
    "overview-grapher"
    ;; Going to get one compiler warning, but that's ok.
    "examiner"
    "dynamic-dex"
    "dexdispl"
    hardcopy-dexcom
    "dexcom"
    "cometh"
    ))

(defsubsystem macivory-dex
    (:default-pathname "SYS:EMBEDDING;RPC;UI;MACINTOSH;"
     :distribute-sources t
     :distribute-binaries nil
     :source-category :optional)
  (:module macivory-only ("GENERA-DOCEX" "SYS:EMBEDDING;MACIVORY;UI;SAGE-FONTS")
	   (:required-systems "Macivory-Support") (:machine-types (:|3600| :IMach))))
