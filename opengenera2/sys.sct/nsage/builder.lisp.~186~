;;; -*- Syntax: Common-lisp; Mode: Lisp; Package: NSAGE; Base: 10; Lowercase: t -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;


;;; decides whether topic is really a function spec; if it is, converts it from list to
;;; actual function spec.  This does categorizing according to the type it gets as arg.
;;;takes a contents list and the type of thing it is supposed to be and returns a function
;;;spec
;;;NOTE:  The contract of this function is to turn what it gets into a FUNCTION SPEC.
;;;Sometimes it will get contents-lists, sometimes it will get strings.  It has to handle
;;;both.  It assumes however that a contents-list really just represents one string, even
;;;if that contains formatter directives.  It does the filtering out of directives in case.
;;;e.g. (validate-topic '(:method pathname :device) 'method)
(defun VALIDATE-TOPIC (contents-list type &optional soft-p (query-p *ask-user*))
  (cond ((member type *lisp-object-types*)	;we need a real type scheme instead
	 (with-standard-io-environment
	   (let ((string
		   (string-thin
		     (typecase contents-list	;is it just string, no formatting?
		       (string
			 contents-list)
		       (cons
			 (if (every #'symbolp contents-list)
			     (format nil "~S" contents-list)
			     (filtered-string-from-contents-list contents-list)))
		       ((or symbol phony-function-spec)
			(format nil "~S" contents-list))
		       (otherwise
			 (error "~&Unknown thing ~A of type ~A can't be a topic."
				contents-list (type-of contents-list))))
		     :remove-bits t :error-if :fat)))
	     (validate-lisp-topic string soft-p query-p))))	;do real intern, not intern-soft
	(t
	 (typecase contents-list
	   (null nil)				;don't intern NIL if you happen to get it here
	   (symbol
	     (string contents-list))
	   (phony-function-spec
	     (string contents-list))
	   (otherwise
	     (filtered-string-from-contents-list contents-list))))))

;;;Assumes that it is dealing with a lisp topic.  Takes a string that it expects to be
;;;able to turn into a function spec with nothing left over.  Usually it interns the
;;;symbol unless it was told "soft".  When some kind of reading problem occurs that is
;;;related to packages, it offers to do package dwim when query-p is set (it takes its
;;;default from a global variable *ask-user*.)  This function either returns a valid
;;;function spec or throws to tag :no-such-record.
(defun VALIDATE-LISP-TOPIC (string &optional soft-p (query-p *ask-user*))
  (catch 'read-condition-handled
    (let (topic)
      ;;so we find attempts to intern invalid symbols
      ;; Has to use condition-bind, not condition-case, because of a bug in the
      ;; reader or somewhere that stores a stack-consed closure into the error
      ;; object.  When you try to access the closure outside the error environment
      ;; the machine dies a horrible death.  -- rom 7-25-86.
      (condition-bind ((sys:read-error
			 (lambda (err)
			   (dwim-validate-lisp-topic err string soft-p query-p))))
	(setq topic (zwei:symbol-from-string
		      (si:string-upcase-if-necessary string) nil nil t))
	(typecase topic				;---suspected of being bogus checking
	  ((or cons phony-function-spec) topic)	;O.K.
	  (symbol
	    (if (eq (symbol-package topic) zwei:*utility-package*)
		;; ----Kludge alert:  This is here to make old-style method specs work.
		;; Remove it when this is fixed.
		(let ((thing (read-from-string (symbol-name topic))))
		  (with-standard-io-environment
		    (zwei:symbol-from-string (format nil "~S" thing))))
		topic))
	  (otherwise (error "Not a Lisp object specification: ~A" string)))))))

(defun DWIM-VALIDATE-LISP-TOPIC (condition-object string soft-p query-p)
  (let (topic)
    (typecase condition-object			;see if it has already been found before
      ((or sys:read-package-locked sys:read-name-conflict-in-export-from-locked-package sys:read-external-symbol-not-found)
       (setq topic (phony-function-spec-intern string 'soft))
       ;;This was apparently an early effort to guess about "premature end of symbol"
       ;;It causes confusing trouble when reading strings that contain slashes
;	     ;;not clear whether just looking for a space in the string is enough at this pt
;	     (let* ((bad-symbol (send condition-object ':symbol))	;---heuristicating for doc: symbols
;		    (symbol-string (if (eq (symbol-package bad-symbol) pkg-global-package)
;				       (get-pname bad-symbol)
;				       (format nil "~S" bad-symbol))))
;	       (if (< (string-length symbol-string) (string-length string))
;		   (setq soft-p t))))		;so this will not become a phony fcn spec
       )
      (si:read-premature-end-of-symbol		;has spaces in it, probably meant in doc:
	(setq soft-p t))			;---heuristicating
      (otherwise ()))				;don't look, e.g. package-not-found
    (throw 'read-condition-handled		;return from validate-lisp-object
      (or topic					;might be OK now as phony spec
	  (let ((dwim-topic (if (and query-p (not soft-p))	;maybe try correcting
				(sage-topic-dwim condition-object string soft-p query-p))))
	    (or dwim-topic
		(phony-function-spec-intern string soft-p)	;maybe try creating
		(progn
		  (when *warn-user*		;Now report problem to error-output even if
		    (format *error-output* "~&Problem in reading ~S: ~%~A"	;not fixing
			    string (send condition-object ':report-string)))
		  (throw ':no-such-record nil))))))))	;--- gets here if soft intern


;;;Takes an error object from a read error.  Determines whether the string
;;;was a thinko for a symbol in some different package or whether the user was doing
;;;something else altogether
;;;---??This might be wrong for errors within method specs, because this isn't called
;;;from a read error, but just with a read error object.
;;;The last two args are not used but are passed through to validate-lisp-topic if called
(defun SAGE-TOPIC-DWIM (error-object string soft-p query-p)
  (format *error-output* "~&Problem in reading ~A: ~%~A"
	  string (send error-object ':report-string))
  (typecase error-object			;sometimes we could try to help
    ((or sys:read-package-locked sys:read-name-conflict-in-export-from-locked-package)
     (let ((bad-sym (send error-object ':symbol)))	;looks like a symbol
       (when (y-or-n-p "Attempt to find ~A in another package? " bad-sym)
	 (let ((good-sym (loop for (candidate nil) in (symbol-value-in-instance
							error-object 'si:conflicts 'no-error)
			       when (fquery '(:choices
					       (((t "Yes.") #\y #\t #\sp)
						((nil "No.") #\n #\rubout)))
					    "~&Use ~S? " candidate)
				 do (return candidate))))
	   (when good-sym
	     (convert-phony-symbol-in-string
	       string (symbol-name good-sym) (symbol-package good-sym) 0
	       (send error-object :location) nil t t)
	     (validate-lisp-topic string soft-p query-p))))))
      (sys:read-list-end-of-file		;probably missing close paren
	(let ((temp (string-append string #\))))
	  (when (y-or-n-p "Maybe missing paren.  Try ~A instead? " temp)
	    (format t "~%Please remember to fix your input.")
	    (validate-lisp-topic temp soft-p query-p))))
      (otherwise nil)))			;nothing to do to help

;;;Some feeble attempts at data abstraction
(defun EXTRACT-PARSE-AND-RETURN-TOPIC (record)
  (values
    (send record :topic)
    (send record :source-topic)))

(defun EXTRACT-PARSE-AND-RETURN-TYPE (record)
  (send record :type))
