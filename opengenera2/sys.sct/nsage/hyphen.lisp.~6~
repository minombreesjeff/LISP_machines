;;; -*- Mode: LISP; Syntax: Common-lisp; Package: SAGE; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*tex-hyphenation-patterns*0)

(defvar 1*word-starts*
0	(let ((word-starts (make-array 128 :element-type 'boolean)))
	  (setf (aref word-starts (char-code #\.)) T)
	  (loop repeat 26 for i from (char-code #\a) do (setf (aref word-starts i) T))
	  (loop repeat 10 for i from (char-code #\0) do (setf (aref word-starts i) T))
	  word-starts))

#||
;; (:MOST-LETTERS 8 :LEAST-LETTERS 2 :HIGHEST-DIGIT 5)
(defun 1gather-tex-hyphenation-file-stats0 (&optional (pathname "local:>writer-tools>tex>tex-hyphen.tex"))
  (let ((shortest 999)
	(longest 0)
	(highest-digit 0))
    (with-open-file (in pathname)
      (let ((word-starts *word-starts*))
	(declare (sys:array-register word-starts))
	(loop with which
	      for line = (read-line in nil) while line
	      do
	  (when (> (length line) 0)
	    (let ((ch (aref line 0)))
	      (cond ((eql ch #\\)
		     (let ((word (extract-word line 1)))
		       (cond ((string-equal word "patterns")
			      (setq which 'patterns))
			     ((string-equal word "hyphenation")
			      (setq which 'hyphenation))
			     (T (error "Unrecognized word in ~s, expected ~s or ~s"
				       line "patterns" "hyphenation")))))
		    ((aref word-starts (char-code ch))
		     ;;---
		     (ecase which
		       (patterns
			 (let ((nletters (count-if #'alpha-char-p line)))
			   (maxf longest nletters)
			   (minf shortest nletters)
			   (map nil (lambda (c)
				      (let ((d (digit-char-p c)))
					(when d (maxf highest-digit d))))
				line)))
		       (hyphenation )))
		    ((find ch "%}") )
		    (T (error "Line starts with something weird ~s" line))))))))
    (list :most-letters longest
	  :least-letters shortest
	  :highest-digit highest-digit)))
||#

;; vector index push.  like vector-push, except there's a variable instead of fill-pointer
(defmacro 1vipush0 (item vector index)
  `(progn (setf (aref ,vector ,index) ,item)
	  (incf ,index)))

(defun 1extract-word0 (line &optional (start 0) end)
  (when (null end) (setq end (length line)))
  (let ((past-letters (or (position-if-not #'alpha-char-p line :start start :end end) end)))
    (substring line start past-letters)))

;; Consider making this into some compile-time macro processing so we don't
;; have this other file to deal with.
(defun 1parse-tex-hyphenation-file0 (&optional (pathname "sys:nsage;tex-hyphen.tex"))
  (let ((patterns (make-hash-table :test #'string=))
	(exceptions (make-hash-table :test #'string-equal)))
    (with-open-file (in pathname)
      (decoding-array (word-starts *word-starts*)
	(loop with which
	      for line = (read-line in nil) while line
	      do
	  (when (> (length line) 0)
	    (let ((ch (aref line 0)))
	      (cond ((eql ch #\\)
		     (let ((word (extract-word line 1)))
		       (cond ((string-equal word "patterns")
			      (setq which 'patterns))
			     ((string-equal word "hyphenation")
			      (setq which 'hyphenation))
			     (T (error "Unrecognized word in ~s, expected ~s or ~s"
				       line "patterns" "hyphenation")))))
		    ((aref word-starts (char-code ch))
		     (ecase which
		       (patterns
			 (multiple-value-bind (pattern result)
			     (process-tex-hyphenation-pattern line)
			   (setf (gethash pattern patterns) result)))
		       (hyphenation
			 (multiple-value-bind (pattern result)
			     (process-tex-hyphenation-exception line)
			   (setf (gethash pattern exceptions) result)))))
		    ((find ch "%}") )
		    (T (error "Line starts with something weird ~s" line))))))))
    (values patterns exceptions)))

;; result is vector of weights
(defun 1process-tex-hyphenation-pattern0 (string)
  (declare (values pattern result))
  (let* ((length-of-pattern (count-if-not #'digit-char-p string))
	 (length-of-string (length string))
	 (pattern (make-array length-of-pattern :element-type 'string-char))
	 (result (make-array (1+ length-of-pattern)
			     :element-type '(integer 0 5)))
	 (string string))
    (declare (sys:array-register pattern result string))
    ;; fill result
    (let ((r 0) (s 0))
      (loop while (< s length-of-string) do
	(let* ((ch (aref string s))
	       (digit (digit-char-p ch)))
	  (cond (digit
		 (vipush digit result r)
		 (incf s 2))
		(T (vipush 0 result r)
		   (incf s))))))
    ;; fill pattern
    ;; If you're more awake than I am you could probably combine these loops.
    ;; But, this should run only at compile time anyway.
    (let ((p 0))
      (dotimes (s length-of-string)
	(let ((ch (aref string s)))
	  (unless (digit-char-p ch)
	    (vipush ch pattern p)))))
    (values pattern result)))

;; result is vector of char-indexes after which you can hyphenate
(defun 1process-tex-hyphenation-exception0 (string)
  (declare (values pattern result))
  (let ((number-of-hyphens 0)
	(max-hyphen 0)
	(length-of-string (length string)))
    (decoding-array (string string)
      (dotimes (i length-of-string)
	(when (char= (aref string i) #\-)
	  (incf number-of-hyphens)
	  (setq max-hyphen i)))
      (let* ((length-of-pattern (- length-of-string number-of-hyphens))
	     (pattern (make-array length-of-pattern :element-type 'string-char))
	     (result (make-array number-of-hyphens :element-type `(integer 0 ,max-hyphen))))
	(decoding-array (pattern pattern)
	  (decoding-array (result result)
	    (let ((ip 0)
		  (ir 0))
	      (dotimes (is length-of-string)
		(let ((ch (aref string is)))
		  (cond ((char= ch #\-)
			 (vipush ip result ir))
			(T (vipush ch pattern ip))))))))
	(values pattern result)))))

;; I use zl:defstruct because I can never figure out how to get
;; named-array-leader to work with :make-array as constructor arg.
(zl:defstruct (1tex-hyph-patterns0 :named-array-leader :conc-name)
  fill-pointer
  exceptions)

(defun 1make-tex-hyphenation-patterns0 (length)
  (make-tex-hyph-patterns
    :make-array (:length length)))

(defun 1setup-tex-hyphenation0 (&optional (pathname "sys:nsage;tex-hyphen.tex"))
  (multiple-value-bind (patterns exceptions)
      (parse-tex-hyphenation-file pathname)
    (let ((longest-pattern 0)
	  (counts-by-length (make-array 20 :initial-element 0)))
      (tv:maphash-noting-progress
	(lambda (key ignore)
	  (let ((len (length key)))
	    (maxf longest-pattern len)
	    (incf (aref counts-by-length len))))
	patterns
	"counting pattern histogram")
      (let ((pats (make-tex-hyphenation-patterns (1+ longest-pattern))))
	(setf (tex-hyph-patterns-fill-pointer pats) longest-pattern)
	(setf (tex-hyph-patterns-exceptions pats) exceptions)
	(loop for j from 2 to longest-pattern
		  do (setf (aref pats j)
			   (make-hash-table :test #'string=
					    :size (aref counts-by-length j))))
	(tv:maphash-noting-progress
	  (lambda (pattern value)
	    (setf (gethash pattern (aref pats (length pattern))) value))
	  patterns
	  "Copying by pattern length")
	pats))))

;; Used by SCT when compiling tex-hyphen.tex into tex-hyphen.bin
;; This could record source-file-unique-id or whatever SCT thinks
;; it needs to not have to contact the filesystem when loading
;; the bin file.
(defun 1compile-tex-hyphenation-tables0 (source-file bin-file)
  (let ((hyphenation-patterns (setup-tex-hyphenation source-file)))
    (sys:dump-forms-to-file bin-file
			    `((setq *tex-hyphenation-patterns*
				    ',hyphenation-patterns)))))

(defun 1add-hyphenation-exceptions0 (&rest list-of-hyphenated-strings)
  (let ((exceptions (tex-hyph-patterns-exceptions *tex-hyphenation-patterns*)))
    (dolist (string list-of-hyphenated-strings)
      (multiple-value-bind (pattern result)
	  (process-tex-hyphenation-exception string)
	(setf (gethash pattern exceptions) result)))))

;; This is what actually does the work
(defun 1funcall-with-hyphenation-vector0 (word continuation)
  (macrolet ((dbformat (string &rest args)	;debug format
	       #+Ignore ;; I just have to change this one line and recompile
	       `(format T ,string ,@args)))
    (let ((exception (gethash word
			      (tex-hyph-patterns-exceptions *tex-hyphenation-patterns*))))
      (if exception
	  (funcall continuation exception)
	  (let ((length-of-word (length word)))
	    (stack-let ((reword (make-array (+ length-of-word 2) :element-type 'character))
			(weights (make-array (+ length-of-word 3)
					     :element-type '(integer 0 5))))
	      (setf (aref reword 0) #\.)
	      (setf (aref reword (1+ length-of-word)) #\.)
	      (decoding-array (word word)
		(dotimes (j length-of-word)
		  (setf (aref reword (1+ j)) (char-downcase (aref word j)))))
	      (loop for len from 2
			    below (min length-of-word
				       (1+ (fill-pointer *tex-hyphenation-patterns*)))
		    do
		(dbformat "~&len ~d" len)
		(stack-let ((subword (make-array len :element-type 'character)))
		  (dotimes (offset (+ 3 (- length-of-word len)))
		    (copy-array-portion		;(replace subword reword :start2 offset)
		      reword offset (+ offset len)
		      subword 0 len)
		    (dbformat " ~a" subword)
		    (let ((subweights (gethash subword (aref *tex-hyphenation-patterns* len))))
		      (when subweights
			(dbformat "~s" (coerce subweights 'list))
			(dotimes (i (length subweights))
			  (maxf (aref weights (+ i offset)) (aref subweights i))))))))
	      (dbformat "~%~a"
			(let ((temp (make-array (+ (length weights) (length reword))
						:element-type 'character :fill-pointer 0)))
			  (dotimes (i (length reword))
			    (format temp "~v ~d ~~c" '(nil nil :very-small)
				    (aref weights i) (aref reword i)))
			  (format temp "~v ~d ~" '(nil nil :very-small)
				  (aref weights (1- (length weights))))
			  temp))
	      (stack-let ((hyphenation-points
			    (make-array (count-if #'oddp weights :start 3 :end length-of-word))))
		(let ((ip 0))
		  (loop for iw from 3 below length-of-word do
		    (let ((w (aref weights iw)))
		      (when (and (oddp w) ( (1- iw) (1- length-of-word)))	;algorithm
			(vipush (1- iw) hyphenation-points ip)))))
		(funcall continuation hyphenation-points))))))))

;; This uses the above and conses a result to return
(defun 1hyphenate-word0 (word)
  (funcall-with-hyphenation-vector word
    (lambda (v)
      (let ((result (make-array (+ (length word) (length v)) :element-type 'character)))
	(let ((ir 0)
	      (iv 0)
	      (lv (length v)))
	  (dotimes (iw (length word))
	    (vipush (aref word iw) result ir)
	    (when (and (< iv lv) (eql (1+ iw) (aref v iv)))
	      (vipush #\- result ir)
	      (incf iv))))
	result))))

#||
(zwei:defcom 1com-process-line-at-point0 "process line at point" ()
  (let ((line (zwei:bp-line (zwei:point))))
    (multiple-value-bind (pattern result)
	;;(process-tex-hyphenation-exception line)
	(process-tex-hyphenation-pattern line)
      (zwei:typein-line "~a  ~s" pattern (coerce result 'list))))
  zwei:dis-none)
(zwei:set-comtab zwei:*zmacs-comtab* '(#\s-m-L com-process-line-at-point))

(zwei:defcom 1com-hyphenate-this-word0 "Hyphenate the word at point" ()
  (com-wt-mark-whole-word)
  (zwei:region (bp1 bp2)
    (let ((hyp (hyphenate-word (substring (zwei:bp-line bp1)
					  (zwei:bp-index bp1)
					  (zwei:bp-index bp2)))))
      (zwei:typein-line "~a" hyp)))
  (setf (zwei:window-mark-p zwei:*window*) nil)
  zwei:dis-bps)
(zwei:set-comtab zwei:*zmacs-comtab* '(#\s-$ com-hyphenate-this-word))

(defun 1words-in-buffer0 ()
  ;; collects the words in the current buffer.  Uses lisp READ for its parser.
  (let ((table (make-hash-table)))
    (let ((stream (zwei:rest-of-interval-stream (zwei:interval-first-bp zwei:*interval*))))
      (loop with eof = '#:eof
	    for word = (read stream nil eof) while (neq word eof)
	    do (setf (gethash word table) T)))
    (let ((result nil))
      (maphash (lambda (key ignore) (push key result)) table)
      (sort result #'string-lessp))))

;; Regression test for when I fiddle with the file parser
(defun 1compare-tex-parses0 ()
  (locally
    (declare (special old-*tex-hyphenation-patterns* old-*tex-hyphenation-exceptions*))
    (let ((old-patterns old-*tex-hyphenation-patterns*)
	  (new-patterns *tex-hyphenation-patterns*)
	  (old-exceptions old-*tex-hyphenation-exceptions*)
	  (new-exceptions *tex-hyphenation-exceptions*))
      (loop for old-result being hash-elements of old-patterns with-key old-key
	    for new-result being hash-elements of new-patterns with-key new-key
	    do (assert (string-equal old-key new-key))
	       (assert (equalp old-result new-result)))
      (loop for old-result being hash-elements of old-exceptions with-key old-key
	    for new-result being hash-elements of new-exceptions with-key new-key
	    do (assert (string-equal old-key new-key))
	       (assert (equalp old-result new-result))))))

(ignore
  hyphenation concatenation
  supercalifragilisticexpialidocious
  bachelor echelon toothaches campfire afghanistan biorhythm algorithm
  pneumonoultramicroscopicsilicovolcanoconiosis
  Constantinopolitanischerdudelsackspfeifenmachersgesellschafft
  Nihilistendynamittheaterkaestchenssprengungsattentaetsversuchungen
  Transvaaltruppentropentransporttrampelthiertreibertrauungsthraenentragoedie
  Mekkamuselmannenmassenmenchenmoerdermohrenmuttermarmormonumentenmachen
  Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch
  independent manuscript manuscripts appendix center
  )
||#
