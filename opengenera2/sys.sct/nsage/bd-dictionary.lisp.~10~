;;; -*- Syntax: Common-lisp; Mode: LISP; Base: 10; Package: NSAGE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Book design for Lisp Dictionary document type

(defvar D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*dictionary-thumb-tab-specs*0 ())

(defmacro 1define-dictionary-thumb-tabs0 (name numbers &body tabs)
  (assert (symbolp name))
  (assert (listp numbers))
  (destructuring-bind (&key cm-for-top cm-for-each number-per-column sole-tab first-is-misc)
      numbers
    (assert (or (null cm-for-top) (numberp cm-for-top)))
    (assert (or (null cm-for-each) (numberp cm-for-each)))
    (assert (or (null number-per-column) (numberp number-per-column)))
    (ignore sole-tab first-is-misc)
    )
  `(add-dictionary-thumb-tabs ',name ',numbers ',(copy-list tabs)))

(defun 1add-dictionary-thumb-tabs0 (name numbers tabs)
  (pushnew (list name numbers tabs)
	   *dictionary-thumb-tab-specs*
	   :key #'first
	   :replace T))

(defun 1find-dictionary-thumb-tabs0 (name)
  (declare (values name (list cm-for-top cm-for-each number-per-column) tabs))
  (when (and name (neq name 'none))
    (let ((stuff (assoc name *dictionary-thumb-tab-specs*)))
      (when stuff
	(values-list stuff)))))

(define-dictionary-thumb-tabs 1none0 () )

(define-dictionary-thumb-tabs 12B
0			      (:cm-for-top 2.7
			       :cm-for-each 2.2
			       :number-per-column 10
			       :first-is-misc T
			       )
  ;; Y is 2.7cm + (2.2cm * index)
  ("Misc")
  ("A")
  ("B" "Ce")
  ("Ch" "Com")
  ("Con" "Ct")
  ("Deb" "Def")
  ("Del" "Dy")
  ("E")
  ("F")
  ("G" "I")
  ;;---top of page
  ("K" "L")
  ("M")
  ("N")
  ("O" "Q")
  ("R")
  ("Sa" "Sto")
  ("Str")
  ("Su" "Sy")
  ("T" "U")
  ("V" "Z"))

(define-dictionary-thumb-tabs 1Book-9
0			      (:cm-for-top 2.7
			       :cm-for-each 2.2
			       :number-per-column 10
			       :first-is-misc T
			       )
  ;; Y is 2.7cm + (2.2cm * index)
  ("Misc")
  ("A")
  ("B" "Ce")
  ("Ch" "Com")
  ("Con" "Cu")
  ("Deb" "Def")
  ("Del" "Dy")
  ("E")
  ("F")
  ("G" "I")
  ;;---top of page
  ("K" "L")
  ("M")
  ("N")
  ("O" "Q")
  ("R")
  ("Sa" "Sto")
  ("Str")
  ("Su" "Sy")
  ("T" "U")
  ("V" "Z"))

(define-dictionary-thumb-tabs 17B
0			      (:cm-for-top 2.7
			       :cm-for-each 2.2
			       :number-per-column 10
			       )
  ("A" "B")
  ("C")
  ("D")
  ("E" "G")
  ("H" "K")
  ("L" "O")
  ("P")
  ("R" "S")
  ("T" "V")
  ("W" "Z"))

(define-dictionary-thumb-tabs 17B-presentation-types
0			      (:cm-for-top 2.7
			       :cm-for-each 2.2
			       :number-per-column 10
			       :sole-tab T
			       )
  ("Pres" "Types"))

(define-dictionary-thumb-tabs 17B-graphics
0			      (:cm-for-top #.(+ 2.7 2.2)
			       :cm-for-each 2.2
			       :number-per-column 10
			       :sole-tab T
			       )
  ("Graph"))

(define-dictionary-thumb-tabs 1Book-11
0			      (:cm-for-top 2.7
			       :cm-for-each 2.2
			       :number-per-column 10
			       )
  ("A" "B")
  ("C")
  ("D")
  ("E" "G")
  ("H" "K")
  ("L" "O")
  ("P")
  ("R" "S")
  ("T" "V")
  ("W" "Z"))

(define-dictionary-thumb-tabs 1Book-11-presentation-types
0			      (:cm-for-top 2.7
			       :cm-for-each 2.2
			       :number-per-column 10
			       :sole-tab T
			       )
  ("Pres" "Types"))

(define-dictionary-thumb-tabs 1Book-11-graphics
0			      (:cm-for-top #.(+ 2.7 2.2)
			       :cm-for-each 2.2
			       :number-per-column 10
			       :sole-tab T
			       )
  ("Graph"))

(defun 1lisp-dictionary-tab-command0 (topic)
  (multiple-value-bind (name numbers tabs)
      (find-dictionary-thumb-tabs (lookup-style-parameter 'DictionaryTabs))
    (when name
      (destructuring-bind (&key cm-for-top cm-for-each number-per-column
				first-is-misc sole-tab)
	  numbers
	(let ((string (lisp-topic-link-sort-key topic)))
	  (multiple-value-bind (tab index)
	      (cond (sole-tab (values (first tabs) 0))
		    ((and first-is-misc (not (alpha-char-p (aref string 0))))
		     (values (first tabs) 0))
		    (T
		     (let ((okay nil)
			   (okay-index 0))
		       (multiple-value-bind (tabs-to-check first-index)
			   (if first-is-misc
			       (values (rest tabs) 1)
			       (values tabs 0))
			 (loop for tab in tabs-to-check
			       for i from first-index
			       do
			   (when (string-lessp (first tab) string)
			     (setq okay tab
				   okay-index i)))
			 (if okay
			     (values okay okay-index)
			     ;; Losing somehow, but why error at poor Whit?
			     (values (first tabs) 0))))))
	    (let ((y (+ cm-for-top (* cm-for-each (mod index number-per-column)))))
	      (make-sage-command 'pagetabs
				 `((first ,(list (first tab)))
				   ,@(and (second tab)
					  `((second ,(list (second tab)))))
				   (ylocation (,y cm)))))))))))

(define-book-design 1lisp-dictionary-lgp20 ()
  (use 3symanual-lgp2)
  (use lisp-dictionary-counters)
  (define (hdg-page (font smallbodyfont) (facecode i)))
  (modify
    (Hdg (Font TitleFont5) (FaceCode B)
	 (rightmargin 0)
	 (fixed "3picas"))
    (defline (need 4)
	     ;;(Justification On)
	     (Spaces Compact))
    (defline-internal visible)
    (defline-internal-complement invisible)
    (deftext (Hyphenation On)
	     ;;(HyphenationDictionary "AutomaticExceptions" )
	     ;;(Justification On)
	     (Spaces Compact))
    (Format (Above 0.5)
	    (Below 0.5)
	    (Hyphenation On)
	    ;;(HyphenationDictionary "AutomaticExceptions" 
	    ;;(Justification On)
	    (Spaces Compact))
    (Description
      (Above 0.5)
      (Below 0.5)
      (Spread 0)
      (Hyphenation On)
      ;;(HyphenationDictionary "AutomaticExceptions" )
      ;;(Justification On)
      (Spaces Compact))
    (Verbatim
      (Above 0.5)
      (Below 0.5)
      (Hyphenation On) 
      ;;(HyphenationDictionary "AutomaticExceptions" )
      ;;(Justification On)
      (Spaces Compact))
    (Itemize
      (Above 0.5)
      (Below 0.5)
      (Spread 0)
      (Hyphenation On)
      ;;(HyphenationDictionary "AutomaticExceptions")
      ;;(Justification On)
      (Spaces Compact))
    (Enumerate
      (Above 0.5)
      (Below 0.5)
      (Spread 0)
      (Hyphenation On)
      ;;(HyphenationDictionary "AutomaticExceptions")
      ;;(Justification On)
      (Spaces Compact))
    #+Ignore
    (K-Description
      (Above 0.5)
      (Below 0.5)
      (Spread 0)
      (Hyphenation On)
      ;;(HyphenationDictionary "AutomaticExceptions")
      ;;(Justification On)
      (Spaces Compact)))
  (first
    (envr (text
	    (Paper-Width "8.5in")
	    (LeftMargin "1.25inches")
	    (RightMargin "1.25inches")
	    (TopMargin "7picas")
	    (BottomMargin "6picas")))
    (envr (text (Indent "0")
		(Use BodyStyle)
		(Spaces Compact)
		(Font BodyFont)
		(FaceCode R)))
    (init
      initialize-lisp-dictionary-lgp2))
    )

(define-book-design 1lisp-dictionary-counters0 ()
  (counters
    (defline-section
      :within chapter
      :numbered ""
      :referenced ""
      :title ((title counter-contents)
	      (ignore counter-contents)
	      (idirs title))
      :contents ((title counter-contents)
		 (ignore title counter-contents)))
    ))

(note-book-design-specifics 1'lisp-dictionary0 :lgp2 'lisp-dictionary-lgp2)

(defun 1initialize-lisp-dictionary-lgp20 ()
  (macrolet ((in (&body body)
	       `(making-sage-directives () (idirs ,@body))))
    ;; To cancel out default pageheadings
    (idirs
      (command pagefooting)
      (command pagefooting)
      (command pageheading)
      (command pageheading))

    ;; The right-hand page
    (sage-command () 'pageheading
		  `((odd T)
		    (immediate T)
		    (left ,(in (envr hdg-page (value page))))
		    (right ,(in (value lastsectiontitle)))
		    (center ())))

    ;; The left-hand page
    (sage-command () 'pageheading
		  `((Even T) (immediate T)
		    (Left ,(in (value firstsectiontitle)))
		    (right ,(in (envr hdg-page (value page))))
		    (center ())))

    (sage-command () 'style '((date "March 1952")))

    ;;(symbolics-frontmatter)
    ))

;;Debugging only
#+Franz
(define-page-previewer-command (com-dictionary ) ()
   (let ((c (cp:build-command "Format Pages" "Dummy Dictionary" :do-toc nil :do-index nil)))
     (apply (car c) (cdr c))))
