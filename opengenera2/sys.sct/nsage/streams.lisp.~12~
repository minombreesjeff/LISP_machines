;;; -*- Syntax: Zetalisp; Mode: LISP; Package: SYSTEM-INTERNALS; Base: 10 -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;


;;;Written 5/18/84 by RLB.

#| SI:MAKE-INPUT-STREAM-FROM-TRIBUTARIES 
Make an input stream which is the "concatenation" of the supplied streams and/or strings.
When the stream is read from, the stream supplies the strings and stream contents, in
the order you passed them as args.  Any number of strings, streams, or lists of strings
or streams can be passed.  This stream tries to close the embedded streams as their eofs
are encountered.  It defines a :close method that takes care of closing any remaining
stream tributaries.

If you want a character stream, which you probably do, supply :CHARACTERS T before the 
other args.

I imagine the main use for all this is for encapsulating a stream inside some constant stuff.

Examples:

(defun make-sage-encapsulated-stream (stream)
  (si:make-input-stream-from-tributaries :characters T
					 :string "@Begin(Sage)"
					 :stream stream
					 :string "@End(Sage)"))

(defun streams-within-progn/'compile (&rest streams)
  (si:make-input-stream-from-tributaries :characters T
					 :string "(progn 'compile "
					 :list-of-streams (copylist streams)
					 :string ")"))

(defun slow-string-append (&rest strings)
  (with-output-to-string (string-destination)
    (stream-copy-until-eof (si:make-input-stream-from-tributaries
			     :characters T
			     :list-of-strings (copylist strings))
			   string-destination)))
					  
;;This was the first test code.
(defun test-tributaries ()
  (with-open-file (f1 "Sudbury:>rlb>test-data-1.text" :direction :input :characters T)
    (with-open-file (f2 "Sudbury:>rlb>test-data-2.text" :direction :input :characters T)
      (let ((string1 "Yow, here is string-1")
	    (string2 "Foo bar baz mumble hacker jargon lossage"))
	(with-open-stream (s (make-input-stream-from-tributaries
			       :characters T
			       :string string1
			       :stream f1
			       :stream f2
			       :string string2))
	  (stream-copy-until-eof s standard-output))))))
|#

(defun make-input-stream-from-tributaries (&rest key-pairs &key characters &allow-other-keys)
  (unless (evenp (length key-pairs))
    (ferror "Must have even number of arguments ~s" key-pairs))
  (setq key-pairs (copylist key-pairs))
  (remprop (locf key-pairs) :characters)
  (loop with allowed-keys = '(:stream :string :list-of-streams :list-of-strings)
	for (key nil) on key-pairs by #'rest2
	unless (memq key allowed-keys)
	do (ferror "Key is ~s, but must be one of ~{~s~^, ~}" key allowed-keys)
	;;Type checking on the stream/strings?
	)
  (make-instance ;;---Look up abstract flavors and use them to decide this.
		 (if characters
		     'input-character-stream-from-tributaries
		     'input-binary-stream-from-tributaries)
		 :key-pairs key-pairs))

(defflavor input-tributary-mixin
	((key-pairs ())
	 (buffer nil)
	 (line-count 0)
	 (prev-chars 0)
	 (increment-char-count nil)
	 (increment-line-count nil))
	   ()
  (:initable-instance-variables key-pairs)
  (:gettable-instance-variables key-pairs line-count prev-chars)
  )

(defresource TEMPORARY-BUFFER (character-p)
  :constructor (cl:make-array
		 512. :element-type (if character-p 'character '(cl:unsigned-byte 16.))
		 :fill-pointer 0)
  :initializer (progn (ignore character-p) (setf (fill-pointer object) 0))
  :matcher (cl:subtypep (if character-p 'character '(cl:unsigned-byte 16.))
			(cl:array-element-type object)))

(defmethod (:next-input-buffer input-tributary-mixin) (&optional no-hang-p)
  (loop when (null key-pairs) return (values () () () T)
	do
	(selectq (first key-pairs)
	  (:string
	   (let ((string (second key-pairs)))
	     (return (values string 0 (string-length string)))))
	  (:stream				;handles both buffered and unbuffered streams
	   (let ((stream (second key-pairs)))
	     (cond				;buffered streams
	       ((send stream :operation-handled-p :next-input-buffer)
		(multiple-value-bind (array start end end-of-data)
		    (send stream :next-input-buffer no-hang-p)
		  ;;I don't really understand why we check both conditions here.
		  ;;Perhaps it has to do with stream errors, or no-hang-p?
		  ;;I suppose CWH has it down pat though, if he remembers good ol' System 243
		  (cond ((or end-of-data
			     (null array))
			 (send stream :close)
			 (setq key-pairs (rest2 key-pairs)))
			(T (return (values array start end))))))
	       (t				;unbuffered stream (e.g. zwei)
		(when (null buffer)
		  (setq buffer (send self :allocate-temporary-buffer)))
		(when increment-line-count (incf line-count))
		(if increment-char-count
		    (incf prev-chars increment-char-count)
		    (setq prev-chars 0))
		(multiple-value-bind (count eof more-p)
		    (send stream :string-line-in nil buffer)
;		  (format t "~&~D chars, EOF: ~S, More: ~S, Input buffer: ~A"
;			  count eof more-p buffer)
		  (cond
		    ((and eof (= count 0))	;this stream is now empty, move on
		     (deallocate-resource 'temporary-buffer buffer)
		     (setq line-count 0 prev-chars 0
			   increment-char-count nil increment-line-count nil)
		     (setq key-pairs (rest2 key-pairs)))
		    ((or more-p eof)		;line overflows the buffer, no end-of-line
		     (setq increment-char-count count increment-line-count nil)
		     (return (values buffer 0 count)))
		    (t				;line fits, fake an end-of-line
		     (setq increment-char-count nil increment-line-count t)
		     (return (values (string-nconc buffer #\return) 0 (1+ count))))))))))
	  ((:list-of-strings :list-of-streams)
	   ;;---effectively turns (:list-of-x (a b c)) into (x a) (:list-of-x (b c))
	   ;;could be cleaner perhaps
	   (let ((type (if (eq (first key-pairs) :list-of-strings) :string :stream)))
	     (destructuring-bind (thing . rest-of-things) (second key-pairs)
	       (cond ((null rest-of-things)
		      (setf (first key-pairs) type)
		      (setf (second key-pairs) thing))
		     (T (setf (second key-pairs) rest-of-things)
			(setq key-pairs (list* type thing key-pairs)))))))
	  (otherwise (ferror "Bad tributary type ~s" (first key-pairs))))))

(defmethod (:discard-input-buffer input-tributary-mixin) (array)
  (cond ((null key-pairs)
	 ;;???
	 )
	((eq array buffer)
	 )
	((eq (first key-pairs) :string)
	 (let ((string (second key-pairs)))
	   (unless (eq array string)
	     (ferror "Discarding some other buffer? ~s" array)))
	 (setq key-pairs (rest2 key-pairs)))
	((eq (first key-pairs) :stream)
	 (let ((stream (second key-pairs)))
	   (send-if-handles stream :discard-input-buffer array)))	;??
	(T (ferror "Bad tributary type ~s" (first key-pairs)))))

(defmethod (:close input-tributary-mixin) (&optional mode)
  (ignore mode)
  (unless (null buffer)
    (deallocate-resource 'temporary-buffer buffer))
  (loop for (key stream) on key-pairs by #'cddr
	do
	(selectq key
	  (:stream (send stream :close))
	  (:list-of-streams (loop for s in stream
				  do (send s :close)))
	  (otherwise ()))))

(defflavor input-character-stream-from-tributaries ()
	   (input-tributary-mixin si:buffered-input-character-stream))

(defmethod (:allocate-temporary-buffer input-character-stream-from-tributaries) ()
  (allocate-resource 'temporary-buffer T))

(defflavor input-stream-from-tributaries ()
	   (input-tributary-mixin si:buffered-input-stream))

(defmethod (:allocate-temporary-buffer input-stream-from-tributaries) ()
  (allocate-resource 'temporary-buffer ()))
