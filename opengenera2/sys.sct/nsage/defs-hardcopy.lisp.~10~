;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: t -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;


(defflavor D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")basic-hardcopy-output-device
0	(printer
	 output-stream
	 char-width-cache
	 font-substitution-alist
	 printer-type
	 default-heading-character-style
	 (page-headings t)
	 (hardcopy-options))
	(output-device)
  (:initable-instance-variables printer page-headings hardcopy-options)
  (:required-init-keywords :printer))

#||
(defflavor 1lgp1-device
0	()
	(basic-hardcopy-output-device))
||#

(defflavor 1lgp2-device
0	()
	(basic-hardcopy-output-device))

(defflavor 1lgp3-device
0	()
	(lgp2-device))

(defmethod (:OUTPUT-DEVICE-TYPE LGP3-DEVICE) ()
  (setf printer-type :LGP2))

(defflavor 1dmp1-device
0       ()
       (basic-hardcopy-output-device))



(defvar 1*sage-printer-type-alist*0 ())

;;; Used for providing a default when default hardcopy device is no good.
;;; Make sure that the most recently used printer is at the front of this list.
(defvar 1*previous-sage-display-target-printers*0 nil
  "List of printers previously used for documentation display")

(defstruct 1(sage-printer-type :named-array)
0  type plist)

(defselect 1((sage-printer-type named-structure-invoke))
0  (:print-self (self stream &rest ignore)
	       (si:printing-random-object (self stream :typep)
		 (princ (sage-printer-type-type self) stream)))
  (sys:print-self (self stream &rest ignore)
	       (si:printing-random-object (self stream :typep)
		 (princ (sage-printer-type-type self) stream)))
  (:describe (self)
	     (format T "~&~s is a ~a" self (type-of self))
	     (let ((pn (getf (sage-printer-type-plist self)
			    'sys:fdefine-file-pathname)))
	       (when pn (format T "~&It was defined by ~a" pn)))
	     (when (sage-printer-type-plist self)
	       (format T "~&Its properties are:")
	       (loop for (key value) on (sage-printer-type-plist self) by #'cddr
		     unless (eq key 'sys:fdefine-file-pathname)
		       do (format T "~&   ~28<~s--~;~> ~s ~@[[by ~a]~]"
				  key (first value) (second value))))))

(defun 1add-sage-printer-type0 (type)
  (unless (assoc type *sage-printer-type-alist*)
    (let ((stuff (make-sage-printer-type :type type)))
      (setf (getf (sage-printer-type-plist stuff) 'sys:fdefine-file-pathname)
	    sys:fdefine-file-pathname)
      (push (list type stuff) *sage-printer-type-alist*))
    type))

;;(add-sage-printer-type 1:lgp10)
(add-sage-printer-type 1:lgp20)
(add-sage-printer-type 1:lgp30)
(add-sage-printer-type 1:dmp10)


(defvar 1*sage-printer-type-functions*0 ())

(defun 1note-sage-printer-type-function0 (function-name)
  (pushnew function-name *sage-printer-type-functions*))

(defmacro 1define-sage-printer-type-function0 (name type (device) &body body)
  `(progn
     (defun ,name (,device)
       (declare (sys:function-parent ,name define-sage-printer-type-function))
       (when (typep ,device ',type)
	 ,@body))
     (note-sage-printer-type-function ',name)))

(defmacro 1do-sage-printer-types0 ((type data) &body body)
  `(loop for (,type ,data) in *sage-printer-type-alist*
	 do (progn ,@body)))

(defun 1get-sage-printer-type0 (type &optional no-error)
  (or (second (assoc type *sage-printer-type-alist*))
      (if no-error
	  ()
	  (error "The Sage printer type ~s can't be found" type))))

(defun 1get-sage-printer-type-attribute0 (type attribute &optional no-error)
  (let ((stuff (get-sage-printer-type type)))
    (let ((data (getf (sage-printer-type-plist stuff) attribute)))
      (cond (data (first data))
	    (no-error ())
	    (T (error "No value for ~s for sage-printer-type ~s" attribute type))))))

(defun 1set-sage-printer-type-attribute0 (type &rest key-value-pairs)
  (let ((struct (get-sage-printer-type type :no-error)))
    (when (null struct)
      (cerror "Invent a data structure for it."
	      "The Sage device ~s should have been set up (internal error)."
	       type)
      (add-sage-printer-type type)
      (setq struct (get-sage-printer-type type)))
    (loop for (key value) on key-value-pairs by #'cddr
	  do (setf (getf (sage-printer-type-plist struct) key)
		   (list value sys:fdefine-file-pathname)))))

#||
(set-sage-printer-type-attribute
  1:lgp1
0  :sage-device-flavor 'lgp1-device
  :lisp-object-typep 'lgp::lgp-hardcopy-device-mixin
  :toplevel-mods-and-next-level-definition 'paper-toplevel-mods-and-next-level-definition)
||#

(set-sage-printer-type-attribute
  1:lgp2
0  :sage-device-flavor 'lgp2-device
  :lisp-object-typep 'lgp::lgp2-hardcopy-device-mixin
  :toplevel-mods-and-next-level-definition 'paper-toplevel-mods-and-next-level-definition)

(set-sage-printer-type-attribute
  1:lgp3
0  :sage-device-flavor 'lgp3-device
  :lisp-object-typep 'lgp::lgp3-hardcopy-device-mixin
  :toplevel-mods-and-next-level-definition 'paper-toplevel-mods-and-next-level-definition)

(set-sage-printer-type-attribute
  1:dmp1
0  :sage-device-flavor 'dmp1-device
  :lisp-object-typep 'dmp1::dmp1-hardcopy-device-mixin
  :toplevel-mods-and-next-level-definition 'paper-toplevel-mods-and-next-level-definition)

(define-sage-printer-type-function 1sage-lgp2-printer-type0 lgp2-device (device)
  :lgp2)

(define-sage-printer-type-function 1sage-hardcopy-printer-type0 hci:hardcopy-device-mixin (device)
  (block sage-printer-types
    (do-sage-printer-types (type nil)
      (let ((lisp-type (get-sage-printer-type-attribute type :lisp-object-typep)))
	(when (and lisp-type (typep device lisp-type))
	  (return-from sage-printer-types type))))
    (error "Can't deal with printer \"~a\" ~s" (send device :pretty-name) device)))

;;; Returns an alist of local printers that can print documentation output.
;;; Makes sure the default hardcopy device and the previous Sage display
;;; hardcopy devices are in the alist, if Sage can deal with them.
;;; Callers depend on having these in the alist.
;;; Looks as thought the alist returned by si:get-hardcopy-device-alist is
;;; not guaranteed to be sorted.
(defun 1get-sage-printer-alist0 ()
  (loop with default = hardcopy:*default-text-printer*
	with default-seen = nil
	for pair in (hardcopy:get-hardcopy-device-alist)
	for printer = (cdr pair)
	when (sage-can-deal-with-printer printer)
	  collect pair into alist
	when (eq printer default)
	  do (setq default-seen t)
	finally (when (and default
			   (not default-seen)
			   (sage-can-deal-with-printer default))
		  (push (cons (send default :pretty-name) default) alist))
		(loop for printer in *previous-sage-display-target-printers*
		      when (and (null (rassoc printer alist))
				(sage-can-deal-with-printer printer))
			do (push (cons (send printer :pretty-name) printer) alist))
		(return (sort (copy-list alist) #'string-lessp :key #'car))))



#||
(si:define-character-style-families lgp::*lgp-printer* si:*standard-character-set*
  '(:size :normal
	  (:family 1centuryschoolbook-body
0		   (:face :roman fonts:centuryschoolbook105
			  :italic fonts:centuryschoolbook105i
			  :bold fonts:centuryschoolbook105b
			  :bold-italic fonts:centuryschoolbook105b
			  smallcaps fonts:timesroman8
			  typewriter fonts:fix100
			  lisp fonts:centuryschoolbook105b
			  programlanguage fonts:fix100
			  keyboardinput fonts:tvfont9
			  symbol fonts:symbol10
			  math fonts:math10
			  greek fonts:greek9)
		   serif-body
		   (:face :roman fonts:timesroman10
			  :italic fonts:timesroman10i
			  :bold fonts:timesroman10b
			  :bold-italic fonts:timesroman10bi
			  smallcaps fonts:timesroman8
			  typewriter fonts:fix100
			  lisp fonts:timesroman10b
			  programlanguage fonts:fix100
			  keyboardinput fonts:tvfont9
			  symbol fonts:symbol10
			  math fonts:math10
			  greek fonts:greek9))))
||#

(si:define-character-style-families lgp::*lgp2-printer* si:*standard-character-set*
  '(:family 1centuryschoolbook-body
0    (:size
      :normal
      (:face :roman   "LWCenturySchoolbook105"
	     :italic  "LWCenturySchoolbook105i"
	     :bold    "LWCenturySchoolbook105b"
	     :bold-italic "Times-BoldItalic10.5"
	     smallcaps "Times-Roman8.5"
	     typewriter "LWFix10"
	     lisp "LWCenturySchoolbook105b"
	     programlanguage "LWFix10"
	     keyboardinput "cptfont9"
	     symbol fonts:symbol105		;"Bogus-Symbol105"
	     math (:font ("Courier" "" 9))
	     greek fonts:symbol105)		;"Bogus-Greek105"
      :small ;; Some drawings use ..small explicitly, so we're stuck with it here.
      (:face :roman "lwcenturyschoolbook84"
	     :italic "lwcenturyschoolbook84i"
	     :bold "lwcenturyschoolbook84b"
	     smallcaps (:style centuryschoolbook-body :roman :same)
	     typewriter (:style :fix :roman :same)
	     lisp (:style centuryschoolbook-body :bold :same)
	     programlanguage (:style :fix :roman :same)
	     keyboardinput (:style :fix :roman :same)
	     ;; symbol math greek
	     )

      smallbody					;8.5 Helvetica
      (:face :roman "LWHelvetica85"
	    :italic "LWHelvetica85I"
	    :bold "LWHelvetica85B"
	    :bold-italic "LWHelvetica85BI"
	    smallcaps "LWTimesRoman7"
	    typewriter "cptfont9"		;was "LWFix10"
	    lisp "LWHelvetica85B"
	    programlanguage "Courier85"
	    keyboardinput "cptfont9"
	    symbol "HLWSymbol7"		;was "HLWSymbol85"
	    math "HLWSymbol85"
	    greek "HLWSymbol85"
	    )
     title2				;10.5 Helvetica Bold
     (:face :roman "LWHelvetica105B"
	    :italic "LWHelvetica105BI"
	    :bold "LWHelvetica105B"
	    :bold-italic "LWHelvetica105BI"
	    smallcaps "LWHelvetica9B"
	    typewriter "LWFix10"
	    lisp "LWHelvetica105B"
	    programlanguage "Courier105"
	    keyboardinput "Courier105"
	    symbol "HLWSymbol105SS"
	    math "HLWSymbol105SS"
	    greek "HLWSymbol105SS"
	    )
     title3				;12.5 Helvetica Bold
     (:face :roman "LWHelvetica125B"
	    :italic "LWHelvetica125BI"
	    :bold "LWHelvetica125B"
	    :bold-italic "LWHelvetica125BI"
	    smallcaps "LWHelvetica12B"
	    typewriter "LWFix10"
	    lisp "LWHelvetica125B"
	    programlanguage "Courier125B"
	    keyboardinput "Courier125B"
	    symbol "HLWSymbol125"
	    math "HLWSymbol125"
	    greek "HLWSymbol125"
	    )
     title5				;15.5 Helvetica Bold
     (:face :roman "LWHelvetica155B"
	    :italic "LWHelvetica155BI"
	    :bold "LWHelvetica155B"
	    :bold-italic "LWHelvetica155BI"
	    smallcaps "LWHelvetica125B"
	    typewriter "Courier155B"
	    lisp "LWHelvetica155B"
	    programlanguage "Courier155B" 
	    keyboardinput "Courier155B"
	    symbol "HLWSymbol155" 
	    math "HLWSymbol155" 
	    greek "HLWSymbol155"
	    )
     title6				;10.5 Century Schoolbook roman
     (:face :roman (:style centuryschoolbook-body :bold :normal)
	    :italic (:style centuryschoolbook-body :bold-italic :normal)
	    :bold (:style centuryschoolbook-body :bold :normal)
	    :bold-italic (:style centuryschoolbook-body :bold-italic :normal)
	    smallcaps (:style centuryschoolbook-body :roman :small)
	    typewriter "LWFix10"
	    lisp (:style centuryschoolbook-body :bold :normal)
	    programlanguage (:style centuryschoolbook-body programlanguage :normal)
	    keyboardinput (:style centuryschoolbook-body keyboardinput :normal)
	    symbol (:style centuryschoolbook-body symbol :normal)
	    math (:style centuryschoolbook-body math :normal)
	    greek (:style centuryschoolbook-body greek :normal)
	    )
     ))) 

(si:define-character-style-families lgp::*lgp2-printer* si:*standard-character-set*
  `(:family 1approachability
0    (:size
      ,@(let ((sizes '(11 13 14 17 20 21 24 64)))
	  (mapcan
	    (lambda (size)
	      (let ((size-code (intern (format nil "SIZE~d" size))))
		`(,size-code
		  (:face
		    :roman ,(format nil "Century702Schoolbook~d" size)
		    :bold ,(format nil "Century702Schoolbook-Bold~d" size)
		    :bold-italic ,(format nil "Times~dBI" size)
		    lisp (:style approachability :bold ,size-code)
		    keyboardinput ,(format nil "Courier~dB" size)
		    typewriter (:style approachability keyboardinput ,size-code)
		    programlanguage (:style approachability keyboardinput ,size-code)
		    ;; --- smallcaps symbol math greek
		    ))))
	    sizes))))
  '(:family 1approachability
0    (:size
      :normal
      (:face :roman   "LWCenturySchoolbook105"
	     :italic  "LWCenturySchoolbook105i"
	     :bold    "LWCenturySchoolbook105b"
	     :bold-italic "Times-BoldItalic10.5"
	     smallcaps "Times-Roman8.5"
	     typewriter "LWFix10"
	     lisp "LWCenturySchoolbook105b"
	     programlanguage "LWFix10"
	     keyboardinput "cptfont9"
	     symbol fonts:symbol105		;"Bogus-Symbol105"
	     math "Courier9"
	     greek fonts:symbol105)		;"Bogus-Greek105"

      smallbody					;8.5 Helvetica
      (:face :roman "LWCenturySchoolbook84"
	     :italic "LWCenturySchoolbook84I"
	     :bold "LWCenturySchoolbook84B"
	     :bold-italic "LWTimesRoman85BI"	;---
	     smallcaps "LWTimesRoman7"
	     typewriter "Courier85"
	     lisp "LWCenturySchoolbook84B"
	     programlanguage "Courier85"
	     keyboardinput "Courier85B"
	     symbol "HLWSymbol85"
	     math "HLWSymbol85"
	     greek "HLWSymbol85"
	     )
      title2					;10.5 Helvetica Bold
      (:face :roman "LWHelvetica105B"
	     :italic "LWHelvetica105BI"
	     :bold "LWHelvetica105B"
	     :bold-italic "LWHelvetica105BI"
	     smallcaps "LWHelvetica9B"
	     typewriter "LWFix10"
	     lisp "LWHelvetica105B"
	     programlanguage "Courier105"
	     keyboardinput "Courier105B"
	     symbol "HLWSymbol105SS"
	     math "HLWSymbol105SS"
	     greek "HLWSymbol105SS"
	     )
      title3					;12.5 Helvetica Bold
      (:face :roman "LWHelvetica125B"
	     :italic "LWHelvetica125BI"
	     :bold "LWHelvetica125B"
	     :bold-italic "LWHelvetica125BI"
	     smallcaps "LWHelvetica12B"
	     typewriter "LWFix10"
	     lisp "LWHelvetica125B"
	     programlanguage "Courier125B"
	     keyboardinput "Courier125B"
	     symbol "HLWSymbol125"
	     math "HLWSymbol125"
	     greek "HLWSymbol125"
	     )
      title5					;15.5 Helvetica Bold
      (:face :roman "LWHelvetica155B"
	     :italic "LWHelvetica155BI"
	     :bold "LWHelvetica155B"
	     :bold-italic "LWHelvetica155BI"
	     smallcaps "LWHelvetica125B"
	     typewriter "Courier155B"
	     lisp "LWHelvetica155B"
	     programlanguage "Courier155B" 
	     keyboardinput "Courier155B"
	     symbol "HLWSymbol155" 
	     math "HLWSymbol155" 
	     greek "HLWSymbol155"
	     )
      title6					;10.5 Century Schoolbook roman
      (:face :roman (:style approachability :bold :normal)
	     :italic (:style approachability :bold-italic :normal)
	     :bold (:style approachability :bold :normal)
	     :bold-italic (:style approachability :bold-italic :normal)
	     smallcaps (:style approachability :roman :small)
	     typewriter "LWFix10"
	     lisp (:style approachability :bold :normal)
	     programlanguage (:style approachability programlanguage :normal)
	     keyboardinput (:style approachability keyboardinput :normal)
	     symbol (:style approachability symbol :normal)
	     math (:style approachability math :normal)
	     greek (:style approachability greek :normal)
	     )))
  )

(si:define-character-style-families lgp::*lgp2-printer* si:*standard-character-set*
  '(:size :normal
	  (:family 1serif-body
0		   (:face :roman "TimesRoman10.5"
			  :italic "TimesRoman10.5I"
			  :bold "TimesRoman10.5b"
			  :bold-italic "TimesRoman10.5bi"
			  smallcaps "Times-Roman8.5"
			  typewriter (:font ("Courier" "" 9 0.88 1.05))
			  lisp (:font ("Times-Bold" "" 10.5 1.11))
			  programlanguage (:font ("Courier" "" 9))
			  keyboardinput (:font ("Courier" "" 9 0.8 1.05))
			  symbol (:font ("Courier" "" 9))	;Is this right?
			  math (:font ("Courier" "" 9))
			  greek (:font ("Courier" "" 9))	;Is this right?
			  ))))

(si:define-character-style-families dmp1::*dmp1-printer* si:*standard-character-set*
  '(:size :normal
	  (:family 1normal-body
0		   (:face :roman fonts:dmp1-ps10
			  :italic fonts:dmp1-ps10i
			  :bold fonts:dmp1-ps10b
			  :bold-italic fonts:dmp1-ps10b
			  smallcaps fonts:dmp1-elite9
			  typewriter fonts:dmp1-elite9
			  lisp fonts:dmp1-ps10b
			  programlanguage fonts:dmp1-elite9
			  keyboardinput fonts:dmp1-elite9
			  symbol fonts:dmp1-symbol10	;"Bogus-Symbol10"
			  math fonts:dmp1-elite9
			  greek fonts:dmp1-symbol10))))
