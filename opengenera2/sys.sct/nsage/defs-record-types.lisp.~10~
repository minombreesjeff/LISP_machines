;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: t -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

(defvar *RECORD-TYPES* ())
(defvar *LISP-OBJECT-TYPES* ())
(defvar *CONCEPT-TYPES* ())
(defvar *ALL-OBJECT-TYPES* ())
(defvar *CONCEPT-TYPES-CANONICAL-ORDERING* '(script majorpart chapter section subsection
						    subsubsection subheading))

(defsubst CONCEPT-TYPE-P (type)
  (not (null (member (coerce-record-type type) *concept-types*))))

(defsubst LISP-OBJECT-TYPE-P (type)
  (not (null (member (coerce-record-type type) *lisp-object-types*))))

;;;This associates the "data types" for symbols in db records with the name of the property
;;;that contains the corresponding documentation
;;;Each of these list elements represents a distinct name space (??)
;;;Lisp-type arg contains the corresponding "type" that appears for symbols in the
;;; source-file-name property or in the si:definition-type-name property.
(defun CREATE-RECORD-TYPE (type lisp-type print-name external-symbols special-fields)
  (setq type (intern (si:string-upcase-if-necessary type)
		     sys:pkg-keyword-package))	;like :sage-function-record
  (loop for sym in external-symbols
	do
	(setf (get sym 'sage-record-property) type))
  (unless (member type *record-types*) (push type *record-types*))	;prevent dups
  (loop for sym in external-symbols
	do
	(unless (member sym *all-object-types*) (push sym *all-object-types*))
	(if lisp-type
	    (unless (member sym *lisp-object-types*) (push sym *lisp-object-types*))
	    (unless (member sym *concept-types*) (push sym *concept-types*))))
  (let ((lisp-type-p (neq t lisp-type)))
    (when (and lisp-type-p type)
      (setf (get type 'lisp-type) lisp-type))	;like DEFVAR (or NIL)
    (when (and lisp-type-p lisp-type)
      (setf (get lisp-type 'sage-equivalent) external-symbols)))
  (setf (get type 'si:definition-type-name)
	(string-capitalize-words type))
  (setf (get type 'print-name) print-name)	;like "Function"
  (setf (get type 'external-symbols) external-symbols)	;like FUNCTION
  (setf (get type 'special-fields) special-fields)	;like ("Arglist" "Example")
  type)

;;;for creating a record type dynamically and quietly, on the fly, given only
;;;a string to specify it.  This might be a bad idea but how else are you going
;;;to support an infinitely expandable type system properly.
;;;record type, lisp equivalent, pretty name, symbol for pretty name, fields in record
(defun CREATE-PHONY-RECORD-TYPE (string)
  (let* ((cap-string (string-upcase string))
	 (record-type (intern (string-append "SAGE-" cap-string "-RECORD")
			      sys:pkg-keyword-package))
	 (sym (intern cap-string *sage-package*)))
    (create-record-type record-type
			t			;this is probably better than guessing wrong
			string
			(list sym)
			'("Operation"))))

(create-record-type :sage-function-record 'defun "Function"
		    '(function macro |SPECIAL OPERATOR| |SPECIAL FORM| |GENERIC FUNCTION|)
		    '("Arglist" "Operation"))
(create-record-type :sage-message-record  t "Message" '(message)
		    '("Arglist" "Operation"))
(create-record-type :sage-init-option-record t "Init Option" '(|INIT OPTION|)
		    '("Arglist" "Operation"))
(create-record-type :sage-option-record t "Option" '(option)
		    '("Arglist" "Operation"))		;does it take arglist??
(create-record-type :sage-property-record 'defprop "Property" '(property)
		    '("Operation"))		;does it take arglist??
(create-record-type :sage-meter-record t "Meter" '(meter)
		    '("Operation"))		;does it take arglist??
(create-record-type :sage-flavor-record 'defflavor "Flavor" '(flavor)
		    '("Operation"))
(create-record-type :sage-variable-record 'defvar "Variable" '(variable constant)
		    '("Operation"))
(create-record-type :sage-resource-record 'defresource "Resource" '(resource)
		    '("Operation"))
(create-record-type :sage-system-record 'defsystem "System" '(system)
		    '("Operation"))
(create-record-type :sage-method-record 'defun "Method" '(method)
		    '("Arglist" "Operation"))
(create-record-type :sage-flavor-internal-function-record 'defun "Function"
		    '(|FLAVOR INTERNAL FUNCTION| |FLAVOR INTERNAL SUBSTITUTABLE FUNCTION|
						 |FLAVOR INTERNAL MACRO|)
		    '("Arglist" "Operation"))
(create-record-type :sage-flavor-method-combination-record
		    'define-method-combination
		    "Method Combination"
		    `(|METHOD COMBINATION|)
		    '("Arglist" "Operation"))
(create-record-type :sage-declaration-record t "Declaration" '(declaration)
		    '("Operation"))
(create-record-type :sage-presentation-type-record 'define-presentation-type
		    "Presentation Type" '(|PRESENTATION TYPE|) '("Arglist" "Operation"))
(create-record-type :sage-type-specifier-record 'deftype "Type Specifier"
		    '(|TYPE SPECIFIER|) '("Arglist" "Operation"))
(create-record-type :sage-lambda-list-keyword-record t "Lambda List Keyword"
                    '(|LAMBDA LIST KEYWORD|) '("Operation"))
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (SAGE:SANS-SERIF-BODY SAGE::TYPEWRITER :NORMAL) "CPTFONT")(create-record-type :sage-0remote-type1-record 'defun "0remote type1"
0		    1'(0|REMOTE TYPE|)
		    1'("Arglist" "Operation"))
0(create-record-type :sage-mac-callback-record T "Callback" '(callback) '("Arguments" "Values"))
(create-record-type :sage-class-record t "Class" '(class)
		    '("Operation"))
;;;Not a true Lisp object.  Awaiting more versatile record creation facilities
(create-record-type :sage-user-property-record 'defun "User Property"
		    '(|USER PROPERTY|)
		    '("Arglist" "Operation"))
;;;The following awaits "the real type system".  It isn't a lisp type exactly.
;;;It is for ILCP specifically
(create-record-type :sage-clispword-record t "CLispword" '(clispword)
		    '("Operation"))
(create-record-type :sage-structure-record 'cl:defstruct
		    "Structure" '(structure) '("Operation"))

;;; Record types for microcode objects.  Also not really Lisp.
(create-record-type :sage-micro-record t "Micro" '(micro)
		    '("Arglist" "Operation"))

(create-record-type :sage-atomicro-record t "Atomicro" '(atomicro)
		    '("Operation"))

;;;Note trouble here.  "subheading" is a kludge (and a defintion-order-dependent one at that)
;;;We need a scheme for how to print various types, to match that for record fields
(create-record-type :sage-fragment-record nil "Fragment"
		    '(fragment subheading)	;subheading is just an external alias
		    '("Contents"))
(create-record-type :sage-section-record nil "Section"
		    '(section script chapter subsection subsubsection appendix subheading
			      dictionary picture)
		    '("Contents")		;not intended to be used in records
		    )

;;;Trying to make some sense out of this crazy situation
(defun COERCE-RECORD-TYPE (type &optional (target-type 'external))
  (when type
    (let ((start-type (cond ((member type *record-types*) 'property)
			    ((member type *all-object-types*) 'external)
			    ((and (stringp type)
				  (member (string-upcase-and-intern type *sage-package*)
					*all-object-types*))
			     'print-name)
			    (t nil))))
      (case start-type
	(property
	 (case target-type
	   (property type)
	   (external (first (get type 'external-symbols)))
	   (print-name (get type 'print-name))
	   (otherwise (error "Unrecognized target type: ~S" target-type))))
	(external
	 (case target-type
	   (property (get type 'sage-record-property))
	   (external type)
	   (print-name (string-capitalize-words type))
	   (otherwise (error "Unrecognized target type: ~S" target-type))))
	(print-name
	 (let ((sym (string-upcase-and-intern type *sage-package*)))
	   (case target-type
	     (property (get sym 'sage-record-property))
	     (external sym)
	     (print-name (string-capitalize-words type))
	     (otherwise (error "Unrecognized target type: ~S" target-type)))))
	(otherwise (error "Unrecognized source type: ~S" type))))))

;;;Takes external name for type (like chapter, function)
;;;returns corresponding property name and "canonical" external name for type (first in list)
;;;(appropriate-property 'macro) ==> :sage-function-record function "Function"
(defun APPROPRIATE-PROPERTY (external-type)
  (let ((property (get external-type 'sage-record-property)))
    (values property				;like :sage-function-record
	    (first (get property 'external-symbols))	;like function
	    (get property 'print-name))))	;like "Function"

