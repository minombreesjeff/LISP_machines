;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Alternative version of compressed database.

(defflavor D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")record-field-encoding
0	(envr-vector
	 command-vector
	 L-command-arg-table L-command-arg-vector
	 thing-table thing-vector
	 )
	()
  (:readable-instance-variables
   envr-vector command-vector)
  (:constructor 1make-record-field-encoding
0   (envr-vector command-vector L-command-arg-table thing-table))
  (:constructor 1make-record-field-encoding-vectors
0   (envr-vector command-vector L-command-arg-vector thing-vector))
  )

(defmethod 1(:fasd-form record-field-encoding)0 ()
  `(make-record-field-encoding-vectors ',envr-vector
				       ',command-vector
				       ',(record-field-encoding-L-command-arg-vector self)
				       ',(record-field-encoding-thing-vector self)))

;; Define methods xxx-table and xxx-vector that know how to coerce one into the other.
(defmacro 1define-record-field-encoding-table-pairs0 (name-for-zmacs (table-var vector-var))
  `(progn
     (defmethod (,(intern (string-append 'record-field-encoding- vector-var))
		 record-field-encoding) ()
       (declare (sys:function-parent ,name-for-zmacs define-record-field-encoding-table-pairs))
       (if (variable-boundp ,vector-var)
	   ,vector-var
	   (setq ,vector-var (record-field-encoding-vector-from-table ,table-var))))
     (defmethod (,(intern (string-append 'record-field-encoding- table-var))
		 record-field-encoding) ()
       (declare (sys:function-parent ,name-for-zmacs define-record-field-encoding-table-pairs))
       (if (variable-boundp ,table-var)
	   ,table-var
	   (setq ,table-var (record-field-encoding-table-from-vector ,vector-var))))))

(define-record-field-encoding-table-pairs L-command (L-command-arg-table L-command-arg-vector))
(define-record-field-encoding-table-pairs thing (thing-table thing-vector))

(defun 1record-field-encoding-vector-from-table0 (table)
  (let ((vector (make-array (send table :filled-elements))))
    (maphash (lambda (item index) (setf (aref vector index) item)) table)
    vector))

(defun 1record-field-encoding-table-from-vector0 (vector)
  (let ((table (make-hash-table :size (length vector))))
    (dotimes (j (length vector))
      (setf (gethash (aref vector j) table) j))
    table))


(compile-flavor-methods record-field-encoding)

(defparameter =field-contents-encoding-string= 1)
(defparameter =field-contents-encoding-command= 2)
(defparameter =field-contents-encoding-L-command= 3)
(defparameter =field-contents-encoding-envr= 4)
(defparameter =field-contents-encoding-end-of-envr= 5)
(defparameter =field-contents-encoding-end= 6)
(defparameter =field-contents-encoding-extension= 7)
(defparameter =field-contents-encoding-extended-L-command= 8)

(defun 1decode-encoded-field-contents0 (encoding encoded-contents)
  (declare (values contents-list))
  (let ((index 0)
	(area *sage-formatter-area*)
	(length-of-encoded-contents (length encoded-contents))
	(command-vector (record-field-encoding-command-vector encoding))
	(L-command-arg-vector (record-field-encoding-L-command-arg-vector encoding))
	(envr-vector (record-field-encoding-envr-vector encoding))
	(thing-vector (record-field-encoding-thing-vector encoding)))
    (labels ((take-byte ()
	       (if (< index length-of-encoded-contents)
		   (prog1 (aref encoded-contents index)
			  (incf index))
		   =field-contents-encoding-end=))
	     (take-2-bytes ()
	       (let ((b1 (aref encoded-contents index))
		     (b2 (aref encoded-contents (1+ index))))
		 (incf index 2)
		 (dpb b2 (byte 8 8) b1)))
	     (take-string (length-of-string)
	       (assert ( (+ index length-of-string) (length encoded-contents)))
	       (let ((string (make-array length-of-string
					 :element-type 'string-char
					 :area area)))
		 (stack-let ((pseudo (make-array length-of-string
						 :element-type 'string-char
						 :displaced-to encoded-contents
						 :displaced-index-offset index)))
		   (replace string pseudo))
		 (incf index length-of-string)
		 string))
	     (recons-contents-list (contents-list)
	       (copy-seq (nreverse contents-list) area))
	     (take-contents-list (top-level)
	       (let ((contents-list ()))
		 (loop do
		   (let ((code (take-byte)))
		     (selector code =
		       (=field-contents-encoding-string=
			 (let* ((length-of-string (take-2-bytes))
				(string (take-string length-of-string)))
			   (push string contents-list)))
		       (=field-contents-encoding-command=
			 (let* ((command-index (take-byte))
				(command-name (aref command-vector command-index))
				(command (make-sage-command command-name)))
			   (push command contents-list)))
		       (=field-contents-encoding-L-command=
			 (let* ((L-command-arg-index (take-2-bytes))
				(L-command-arg (aref L-command-arg-vector L-command-arg-index))
				(L-command (make-sage-command 'L (list (list L-command-arg)))))
			   (push L-command contents-list)))
		       (=field-contents-encoding-extended-L-command=
			 (let* ((L-command-arg-index (take-2-bytes))
				(L-command-arg (aref thing-vector L-command-arg-index))
				(L-command (make-sage-command 'L L-command-arg)))
			   (push L-command contents-list)))
		       (=field-contents-encoding-envr=
			 (let* ((envr-index (take-byte))
				(envr-name (aref envr-vector envr-index))
				(envr-contents-list (take-contents-list nil))
				(envr (make-sage-envr envr-name nil envr-contents-list)))
			   (push envr contents-list)))
		       (=field-contents-encoding-end-of-envr=
			 (if top-level
			     (error "end-of-envr at top level (internal error)")
			     (return (recons-contents-list contents-list))))
		       (=field-contents-encoding-end=
			 (if top-level
			     (return (recons-contents-list contents-list))
			     (error "end-of-encoding not at top level (internal error)")))
		       (=field-contents-encoding-extension=
			 (let* ((thing-index (take-2-bytes))
				(thing (aref thing-vector thing-index)))
			   (push thing contents-list)))
		       (otherwise
			 (error "encoding byte ~d unknown" code))))))))
      (let ((contents-list (take-contents-list T)))
	(unless ( index length-of-encoded-contents)
	  (error "Failed to decode all of encoding: stopped at byte ~d of ~d (internal error)"
		 index length-of-encoded-contents))
	contents-list))))

;;; These could be instance variables of a single object representing a possible database,
;;; if no pointers outside such were allowed.
(defvar *compressed-record-groups*)
(defvar *unique-idcompressed-record-group-index-registry*)
(defvar *compressed-record-group-types*)
(defvar *compressed-disk-location-files*)
(defvar *compressed-record-group-field-encoding*)

(defun compressed-record-group-index (record-group)
  (gethash (record-group-unique-id record-group)
	   *unique-idcompressed-record-group-index-registry*))

(defun index-compressed-record-group (index)
  (aref *compressed-record-groups* index))

(defflavor compressed-record-group
	(topic
	 (word-1 0)
	 (word-2 0)
	 (optional-field-flags 0)
	 (optional-fields nil))
	()
  (:readable-instance-variables (record-group-topic topic))
  (:writable-instance-variables (record-group-topic topic))
  (:default-init-plist :area *sage-record-area*)
  (:constructor make-compressed-record-group-internal-2
		(topic word-1 word-2 optional-field-flags optional-fields)))

(defmethod (:fasd-form compressed-record-group) ()
  `(make-compressed-record-group-internal-2 ',topic ,word-1 ,word-2
					    ,optional-field-flags ',optional-fields))

(defmethod (:fasd-form phony-function-spec) ()
  `(phony-function-spec-intern ',string))

(defconstant %%compressed-record-group-1-type (byte 6 0))
(defconstant %%compressed-record-group-1-disk-location-length (byte 20 6))

(defconstant %%compressed-record-group-2-disk-location-file (byte 12 0))
(defconstant %%compressed-record-group-2-disk-location-position (byte 20 12))

(defconstant %%compressed-record-group-field-callers (byte 1 0))
(defconstant %%compressed-record-group-field-callees (byte 1 1))
(defconstant %%compressed-record-group-field-keyword-tokens-other-than-topic (byte 1 2))
(defconstant %%compressed-record-group-field-oneliner (byte 1 3))
(defconstant %%compressed-record-group-field-source-topic-with-markup (byte 1 4))

(defmethod (sys:print-self compressed-record-group) (stream ignore ignore)
  (si:printing-random-object (self stream :typep)
    (present (record-group-topic self) 'record-group-topic :stream stream)
    (write-char #\space stream)
    (present (record-group-type self) 'record-group-type :stream stream)))

(defmethod (record-group-type compressed-record-group) ()
  (aref *compressed-record-group-types* (sys:%logldb %%compressed-record-group-1-type word-1)))

(defmethod (record-group-compressed-p record-group) () nil)
(defmethod (record-group-compressed-p compressed-record-group) () t)
(defmethod (record-group-killed compressed-record-group) () nil)

(defun expand-compressed-record-group (record-group &key unique-id)
  ;; It is possible for this to return a record group with a NIL unique
  ;; id.
  (cond ((record-group-compressed-p record-group)
	 (let* ((topic (record-group-topic record-group))
		(type (record-group-type record-group))
		(new-record-group (make-instance 'record-group :topic topic :type type
						 :unique-id unique-id))
		(new-doc-record (create-record :topic topic :type type
					       :record-group record-group)))
	   (setf (record-group-published-record new-record-group) new-doc-record)

	   (fill-in-fields-from-compressed-record-group record-group
							new-record-group new-doc-record)
	   ;; this used to clobber the unique-id-registry to point to the new rg
	   ;; but nothing should point to new record groups but the compressed ones
	   (when unique-id
	     (setf (lookup-unique-id-registry unique-id) record-group))
	   (structure-forward (follow-structure-forwarding record-group)
			      new-record-group)	;For callees and so on.
	   (assert (not (record-group-compressed-p record-group)))
	   record-group))
	;; Since it's possible to expand record groups to produce record groups
	;; with no unique id, we must put the unique-id in here if we know it.
	(unique-id
	 (let ((old-uid (record-group-unique-id record-group)))
	   (cond ((null old-uid)
		  (setf (record-group-unique-id record-group) unique-id)
		  (setf (lookup-unique-id-registry unique-id) record-group))
		 ((not (string= old-uid unique-id))
		  (cerror "Leave things broken."
			  "The record ~A was previously given unique ID ~A and is now being given unique ID ~A."
			  record-group old-uid unique-id))))))
  record-group)

(defmethod (fill-in-fields-from-compressed-record-group compressed-record-group)
	   (record-group doc-record)
  (let ((file (sys:%logldb %%compressed-record-group-2-disk-location-file word-2)))
    (when (plusp file)
      (let ((start (sys:%logldb %%compressed-record-group-2-disk-location-position word-2)))
	(setf (doc-record-disk-location doc-record)
	      (list
		(list (aref *compressed-disk-location-files* (1- file))
		      start
		      (+ start (sys:%logldb %%compressed-record-group-1-disk-location-length
					    word-1))))))))
  (let ((field-flags optional-field-flags)
	(fields optional-fields))
    (when (ldb-test %%compressed-record-group-field-callers field-flags)
      (setf (record-group-callers record-group) (expand-caller-alist (pop fields) t)))
    (when (ldb-test %%compressed-record-group-field-callees field-flags)
      (setf (doc-record-callees doc-record) (expand-caller-alist (pop fields) nil)))
    (loop for (nil . callees) in (doc-record-callees doc-record) do
      (dolist (callee callees)
	(cond ((eq self callee)
	       ;; special case.  Substitute for self in the callers of the record-group
	       ;; we're building up.
	       (nsubst doc-record self (record-group-callers record-group)))
	      ((record-group-compressed-p callee)
	       ())
	      (t
	       (nsubst doc-record self (record-group-callers callee))))))
    (let ((keyword-tokens nil))
      (when (ldb-test %%compressed-record-group-field-keyword-tokens-other-than-topic
		      field-flags)
	(setq keyword-tokens (expand-keyword-token-list (pop fields))))
      (push (nreverse (tokenize (string-downcase (topic-completion topic))
				:opening-delims *word-open-break*
				:trailing-delims *word-close-break*
				:trailing-keep *word-close-keep*))
	    keyword-tokens)
      (setf (doc-record-tokens doc-record) (canonicalize-tokens keyword-tokens)))
    (when (ldb-test %%compressed-record-group-field-oneliner field-flags)
      (setf (doc-record-oneliner doc-record)
	    (expand-compressed-field-contents (pop fields) doc-record 'oneliner)))
    (let ((source-topic topic))
      (cond ((ldb-test %%compressed-record-group-field-source-topic-with-markup field-flags)
	     (setq source-topic (expand-compressed-field-contents (pop fields)
								  doc-record 'source-topic)))
	    ((lisp-object-type-p (record-group-type self))
	     ;; Nothing ever displays this, which is fortunate, since we aren't generated
	     ;; what Concordia would.
	     (setq source-topic (make-record-field doc-record :published
						   (list (make-sage-command 'l (list (list topic))))))))
      (setf (doc-record-source-topic doc-record) source-topic))))

(defun expand-caller-alist (list want-doc-records)
  (stack-let ((result (make-array 10 :fill-pointer 0))
	      (sublist (make-array 10 :fill-pointer 0)))
    (flet ((add-sublist ()
	     (when (plusp (fill-pointer sublist))
	       (when want-doc-records
		 (loop for i from 1 below (fill-pointer sublist) do
		   (let ((record-group (aref sublist i)))
		     (unless (record-group-compressed-p record-group)
		       (setf (aref sublist i) (record-group-published-record record-group))))))
	       (vector-push-extend (coerce sublist 'list) result))))
      (dolist (thing list)
	(cond ((numberp thing)
	       (let ((lo (ldb (byte 16 0) thing))
		     (hi (ldb (byte 16 16) thing)))
		 (vector-push-extend (index-compressed-record-group (1- lo)) sublist)
		 (when (plusp hi)
		   (vector-push-extend (index-compressed-record-group (1- hi)) sublist))))
	      (t
	       (add-sublist)
	       (setf (fill-pointer sublist) 0)
	       (vector-push-extend thing sublist))))
      (add-sublist))
    (coerce result 'list)))

(defun expand-keyword-token-list (list)
  (stack-let ((result (make-array 10 :fill-pointer 0))
	      (sublist (make-array 10 :fill-pointer 0)))
    (dolist (thing list)
      (flet ((add-byte (byte)
	       (unless (zerop byte)
		 (let* ((index (aref *sorted-keyword-token-indices*
				     (1- (ldb (byte 15 0) byte))))
			(position (ldb %%keyword-token-position index))
			(length  (ldb %%keyword-token-length index)))
		   (vector-push-extend (substring *keyword-token-characters*
						  position (+ position length))
				       sublist)
		   (when (ldb-test (byte 1 15) byte)
		     (vector-push-extend (coerce sublist 'list) result)
		     (setf (fill-pointer sublist) 0))))))
	(add-byte (ldb (byte 16 0) thing))
	(add-byte (ldb (byte 16 16) thing))))
    (coerce result 'list)))

(defun expand-compressed-field-contents (encoded doc-record type)
  (ignore type)
  (make-record-field doc-record :published
		     (decode-encoded-field-contents
		       *compressed-record-group-field-encoding*
		       encoded)))

(defun expand-record-group-and-pass-on (compressed-record-group ignore generic &rest args)
  (apply generic (expand-compressed-record-group compressed-record-group) args))

;;; Needed to get around flavor bug: this kind of 1defmethod0 doesn't define the generic. --RWK
(defgeneric find-record-for-lookup-nsage (compressed-record-group &rest args))

(defmethod (find-record-for-lookup-nsage compressed-record-group)
	   expand-record-group-and-pass-on)

;;; Needed to get around flavor bug: this kind of 1defmethod0 doesn't define the generic. --RWK
(defgeneric find-record-for-lookup-nwt (compressed-record-group &rest args))

(defmethod (find-record-for-lookup-nwt compressed-record-group)
	   expand-record-group-and-pass-on)

(defmethod (record-group-callers compressed-record-group) expand-record-group-and-pass-on)

(defmethod (add-record-as-caller compressed-record-group) expand-record-group-and-pass-on)
(defmethod (remove-record-as-caller compressed-record-group) expand-record-group-and-pass-on)

(defmethod (record-group-title-for-document-examiner compressed-record-group)
	   expand-record-group-and-pass-on)

(defun expand-record-group-and-pass-on-to-record
       (compressed-record-group ignore generic &rest args)
  (apply generic
	 (record-group-published-record
	   (expand-compressed-record-group compressed-record-group))
	 args))

(defmethod (doc-record-record-group compressed-record-group)
	   expand-record-group-and-pass-on-to-record)

;; By definition, compressed record group names are installed.
(defmethod (record-group-name-installed-p compressed-record-group) ()
  t)

(compile-flavor-methods compressed-record-group)

(defvar *doc-system-version* nil)

(defun compressed-database-file (base-pathname &key (system-name "DOC")
						    (major-version *doc-system-version*))
  (let* ((template (sct:system-default-pathname (sct:find-system-named system-name)))
	 (pathname (merge-pathnames base-pathname template))
	 (base-directory (send pathname :directory))
	 (template-directory (send template :directory)))
    (send pathname :new-directory
	  (append template-directory
		  (ncons (format nil "INSTALLED-~D" major-version))
		  (do ((temp template-directory (cdr temp))
		       (rest base-directory (cdr rest)))
		      ((null temp) rest)
		    (assert (and rest
				 (string-equal (first temp)
					       (first rest)))))))))

(defun expand-record-group-halfword-list (set)
  (stack-let ((result (make-array (* (if (listp set) (length set) 1) 2) :fill-pointer 0)))
    (flet ((add-record-group-halves (set)
	     (let ((first (ldb (byte 16 0) set)))
	       (unless (zerop first)
		 (vector-push-extend (index-compressed-record-group (1- first)) result)))
	     (let ((second (ldb (byte 16 16) set)))
	       (unless (zerop second)
		 (vector-push-extend (index-compressed-record-group (1- second)) result)))))
      (if (listp set)
	  (dolist (set set)
	    (add-record-group-halves set))
	  (add-record-group-halves set)))
    (let ((*default-cons-area* *sage-record-area*))
      (coerce result 'list))))

(defun load-doc-database-for-reader (&key (system-name "DOC") (major-version nil))
  (flet ((external-symbol-handler (err)
	   ;; Dwim: use internal symbol if possible
	   (condition-case ()
		(intern (send err :string) (send err :package))
	      (error ())
	      (:no-error (when (dbg:proceed-type-p err :internal)
			   (sys:proceed err :internal))))))
    (condition-bind ((sys:external-symbol-not-found #'external-symbol-handler))
      (dynamic-flet ((intern (string &optional (pkg *package*))
			     (condition-case (err)
				  (continue string pkg)
				((sys:package-locked
				   sys:name-conflict-in-export-from-locked-package)
				 (phony-function-spec-intern
				   (with-output-to-string (str)
				     (print-phony-symbol
				       (send err :symbol) str (send err :package))))))))
	(load
	  (compressed-database-file "COMPRESSED-INDEX-A.BIN.NEWEST"
				    :system-name system-name :major-version major-version)
	  :verbose t))))
  (assert (= *doc-system-version* major-version))
  (generate-topic-aarray))

(defmacro define-documentation-system (system-name options &body body)
  (declare (zwei:indentation 1 3 2 1))
  (si:with-rem-keywords (options options
			 '(:default-module-type :parameters
			   :before-construction :after-construction))
    (sct:warn-about-defsystem-obsolescences system-name 'define-documentation-system
					    options body)
    `(progn
       (record-source-file-name ',system-name 'define-documentation-system)
       (defsystem ,system-name
	   (,@options
	    :default-module-type :sage
	    :before-construction construct-documentation-system-before
	    :after-construction construct-documentation-system-after
	    :parameters (compress copy-files writer))
	 ,@body))))

(defun construct-documentation-system-before
       (system system-op
	&key top-level-p compress &allow-other-keys)
  ;; Forget anything that happens to be in the machine now.  We only
  ;; do this for the very top-level system, just in case there are
  ;; documentation subsystems, which will get compressed into the
  ;; database of the parent.
  system
  (when (and compress top-level-p (eq system-op :compile))
    (clear-record-registries)
    (setq *inhibit-keyword-token-additions* t)))

(defun construct-documentation-system-after
       (system system-op
	&key version top-level-p compress (copy-files t) writer &allow-other-keys)
  (when (and compress top-level-p)
    (case system-op
      (:compile
	(compile-doc-database :system-name (sct:system-name system)
			      :copy-files copy-files))
      (:load
	(if writer
	    (load-doc-database-for-writer :system-name (sct:system-name system)
					  :major-version version)
	    (load-doc-database-for-reader :system-name (sct:system-name system)
					  :major-version version))))
    (setq *inhibit-keyword-token-additions* nil)))
