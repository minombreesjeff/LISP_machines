;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: t -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

;;;All the things for handling actual output to devices.

#||
The generic Sage output device protocol.
This list is from :required-methods of OUTPUT-DEVICE.

 :width-of-char-in-font (char font-number)
 :height-of-font
 :with-device-prepared function &rest args
    set self up and funcall function on args
 :toplevel-environment document-type
    Return appropriate toplevel environment attribute list
||#

;;; Not used now -- 11/8/85 rom
(defvar *ENABLE-PRINTER-FONT-CACHING* ())

(defsubst MICRONS-TO-DEVICE-UNITS (number)
  (/ number (float *microns-per-device-pixel*)))

(defsubst DEVICE-UNITS-TO-MICRONS (number)
  (* number *microns-per-device-pixel*))

(defmacro USING-FONT-TABLE ((var length) &body body)
  `(sys:with-stack-array (.font-table. ,length :fill-pointer 0)
     (letf ((,var .font-table.))
       ,@body)))

(defun PI-CHAR-CODE-AND-FONT (name)
  (declare (values char font-number))
  (multiple-value-bind (char font-number)
      (send *current-sage-device* :pi-char-code-and-font name)
    (values char font-number)))

(defmethod (:SET-DEFAULT-STYLE OUTPUT-DEVICE) (style)
  (let* ((default (si:parse-character-style style))
	 (family (si:cs-family default))
	 (face (si:cs-face default))
	 (size (si:cs-size default)))
    (if (or (null family)
	    (null face)
	    (member size '(nil * :bigger :same :smaller)))
	(error "Default character style for device ~S, ~S, was not fully qualified."
		self style)
	(setq default-style default))))

(defmethod (:SET-CURRENT-STYLE OUTPUT-DEVICE) (style)
  (setq current-style (si:merge-character-styles style current-style)
	merged-current-style (si:merge-character-styles current-style default-style)
	current-font (si:cache-lookup charset&stylefont-cache #'si:get-font
				      display-device-type si:*standard-character-set*
				      merged-current-style)))

;;; window and DEX devices

(defmethod (:FONT-TABLE-INDEX-FROM-STYLE BASIC-WINDOW-OUTPUT-DEVICE) (style)
  (loop with style = (si:parse-character-style style)
	with length = (length font-table)
	for i below length
	for (nil s) = (aref font-table i)
	when (eql style s) return i
	finally (vector-push-extend
		  (list (si:cache-lookup charset&stylefont-cache #'si:get-font
					 display-device-type si:*standard-character-set*
					 style)
			style)
		  font-table)
		(return length)))

(defmethod (:FONT-TABLE-INDEX-FROM-FONT BASIC-WINDOW-OUTPUT-DEVICE) (font)
  (when (stringp font)
    (setq font (string-upcase-and-intern font si:pkg-fonts-package)))
  (loop with canonical-font = (send (send window :screen) :parse-font-descriptor font)
	with length = (length font-table)
	for i below length
	for (f) = (aref font-table i)
	when (eql canonical-font f) return i
	finally (let ((style (si:character-style-for-device-font
			       (zl:font-name canonical-font)
			       display-device-type)))
		  (vector-push-extend
		    (list canonical-font style)
		    font-table)
		  (return length))))

(defmethod (:SET-CURRENT-STYLE BASIC-WINDOW-OUTPUT-DEVICE :AFTER) (ignore)
  (setq current-font-number (send self :font-table-index-from-style merged-current-style)))

(defmethod (:READ-CURSORPOS BASIC-WINDOW-OUTPUT-DEVICE) ()
  (multiple-value-bind (x y)
      (send window :read-cursorpos)
    (values x y)))

(defun-in-flavor (WINDOW-FONT-FROM-SPEC BASIC-WINDOW-OUTPUT-DEVICE) (thing)
  (etypecase thing
    (integer (first (aref font-table thing)))
    (symbol (symbol-value thing)			;---parse-font-desc
     )
    ((structure sys:font) thing)))

(defun-in-flavor (WINDOW-STYLE-FROM-SPEC BASIC-WINDOW-OUTPUT-DEVICE) (thing)
  (typecase thing
    (integer (second (aref font-table thing)))
    (otherwise (si:parse-character-style thing))))

(defwhopper (:SUBSTITUTE-CHAR BASIC-WINDOW-OUTPUT-DEVICE) (char)
  (declare (values char font-index font))
  (multiple-value-bind (new-char new-font)
      (continue-whopper char)
    (let ((index) (font))
      (if (eql new-font current-font)
	  (setq index current-font-number
		font current-font)
	  (setq index (send self :font-table-index-from-font new-font)
		font (window-font-from-spec index)))
      (values new-char index font))))

(defparameter *SCREEN-SYMBOL12-SUBSTITUTIONS*
	  (let ((stuff "O!PåTdçgâlà")
		(array (make-array 128)))
	    (dotimes (i 128) (setf (aref array i) i))
	    (loop for i below (string-length stuff) by 2
		  for original-ch = (aref stuff i)
		  for substitute-ch = (aref stuff (1+ i))
		  do (setf (aref array (char-code original-ch)) (char-code substitute-ch)))
	    array))

(defmethod (:SUBSTITUTE-CHAR BASIC-WINDOW-OUTPUT-DEVICE) (char)
  (declare (values char font))
  (let ((char-code (char-code char))
	(face (si:cs-face merged-current-style)))
    (cond ((eq face 'symbol)
	   (values (code-char (aref *screen-symbol12-substitutions* char-code))
		   'fonts:symbol12))
	  (t (values char current-font)))))

(defmethod (:WIDTH-OF-CHAR-IN-FONT BASIC-WINDOW-OUTPUT-DEVICE) (char font)
  (unless font (setq font current-font-number))
  (let ((style (window-style-from-spec font)))
    (multiple-value-bind (char dev-font)
	(if (eq (si:cs-face style) 'symbol)
	    (letf ((merged-current-style style)
		   (current-font (window-font-from-spec font))
		   (current-font-number font))
	      (send self :substitute-char char))
	    (values char font))
      (setq font (window-font-from-spec dev-font))
      (* *microns-per-screen-pixel*
	 (let ((cwt (zl:font-char-width-table font)))
	   (if cwt (aref cwt (char-code char)) (zl:font-char-width font)))))))

(defmethod (:WIDTH-OF-STRING-IN-FONT BASIC-WINDOW-OUTPUT-DEVICE)
	   (font string start-index end-index)
  (when (null start-index) (setq start-index 0))
  (when (null end-index) (setq end-index (string-length string)))
  (unless font (setq font current-font-number))
  (let ((real-font (window-font-from-spec font)))
    (* *microns-per-screen-pixel*
       ;; For efficiency the following relies on the fact that :substitute-char
       ;; doesn't now change the font.
       (let ((cwt (zl:font-char-width-table real-font)))
	 (if cwt
	     (decoding-array (cwt cwt)
	       (decoding-array (str string)
		 (loop with style = (window-style-from-spec font)
		       with substitute-p = (eq (si:cs-face style) 'symbol)
		       with n = (length cwt)
		       for i from start-index below end-index
		       for ch = (if substitute-p
				    (letf ((merged-current-style style)
					   (current-font real-font)
					   (current-font-number font))
				      (send self :substitute-char (aref str i)))
				    (aref str i))
		       for char-code = (char-code ch)
		       when (< char-code n)
			 sum (aref cwt char-code))))
	     (* (- end-index start-index) (zl:font-char-width real-font)))))))

;;; This would need to get the font from :substitute-char if :substitute-char
;;; could return a different font.  Right now it doesn't change the font.
(defmethod (:HEIGHT-OF-FONT BASIC-WINDOW-OUTPUT-DEVICE) (font)
  (let ((font (window-font-from-spec (or font current-font-number))))
    (values
      (* *microns-per-screen-pixel* (zl:font-raster-height font))
      (* *microns-per-screen-pixel* (zl:font-baseline font)))))

(defmethod (:TYO BASIC-WINDOW-OUTPUT-DEVICE) (ch &optional font)
  (let* ((style merged-current-style)
	 (face (si:cs-face style)))
    (multiple-value-bind (device-ch device-font-number)
	(if (or (neq face 'symbol)
		font
		( (char-code ch) #o200))
	    (values ch (or font current-font-number))
	    (send self :substitute-char ch))
      (unless (= device-font-number current-font-number)
	(setq style (window-style-from-spec device-font-number)))
      (with-character-style (style window)
	(send window :tyo device-ch)))))

(defmethod (:STRING-OUT BASIC-WINDOW-OUTPUT-DEVICE) (string &optional (start 0) end)
  (let ((face (si:cs-face merged-current-style)))
    (if (eq face 'symbol)
	;;We need to tyo individually so we get the chance to do character substitution.
	(decoding-array (string string)
	  (loop for i from start below (or end (string-length string))
		for ch = (aref string i)
		do (multiple-value-bind (device-ch device-font-number)
		       (if ( (char-code ch) #o200)
			   (values ch current-font-number)
			   (send self :substitute-char ch))
		     (let ((style (if (= device-font-number current-font-number)
				      merged-current-style
				      (window-style-from-spec device-font-number))))
		       (with-character-style (style window)
			 (send window :tyo device-ch))))))
	(with-character-style (merged-current-style window)
	  (send window :string-out string start end)))))

(defmethod (:CLEAR-BETWEEN-CURSORPOSES BASIC-WINDOW-OUTPUT-DEVICE)
	   (x-start y-start x-end y-end)
  (send window :clear-between-cursorposes x-start y-start x-end y-end))

(defmethod (:INCREMENT-CURSORPOS BASIC-WINDOW-OUTPUT-DEVICE) (x-distance y-distance
								   &optional (units :micron))
  (unless (eq units :micron) (error "Can't hack ~s units yet" units))
  (send window :increment-cursorpos
	(microns-to-pixels x-distance :screen)
	(microns-to-pixels y-distance :screen)))

(defmethod (:SET-CURSORPOS BASIC-WINDOW-OUTPUT-DEVICE) (x-position y-position
								   &optional (units :micron))
  (multiple-value-bind (x y)
      (ecase units
	(:micron (values (and x-position (microns-to-pixels x-position :screen))
			 (and y-position (microns-to-pixels y-position :screen))))
	(:pixel (values x-position y-position)))
    ;; :set-cursorpos messes up more-vpos.  Set it back.
    (let ((more-vpos (ignore-errors (send window :more-vpos))))
      (send window :set-cursorpos x y)
      (when more-vpos
	(setf (symbol-value-in-instance (si:follow-syn-stream window) 'tv:more-vpos) more-vpos )))))

(defmethod (:PI-CHAR-CODE-AND-FONT BASIC-WINDOW-OUTPUT-DEVICE) (name)
  (ecase name
    (em-dash
      (let ((font-number (send self :font-table-index-from-font 'fonts:hippo12)))
	(values #\ font-number)))
    (paragraph
      (let ((font-number (send self :font-table-index-from-font 'fonts:symbol12)))
	(values #\ font-number)))
    (limited-paragraph
      (let ((font-number (send self :font-table-index-from-font 'fonts:symbol12)))
	(values #\ font-number)))))

;;; window output devices

(defmethod (:INITIALIZE WINDOW-OUTPUT-DEVICE) (new-window)
  (setq window new-window)
  (setf (symbol-value-in-instance charset&stylefont-cache 'si:hits) 0)
  (setf (symbol-value-in-instance charset&stylefont-cache 'si:probes) 0)
  (send charset&stylefont-cache :table-clear))

(defmethod (:OUTPUT-DEVICE-TYPE WINDOW-OUTPUT-DEVICE) ()
  :screen)

(defmethod (:WITH-DEVICE-PREPARED WINDOW-OUTPUT-DEVICE) (function &rest args)
  (letf ((display-device-type (send window :display-device-type))
	 (face-code-alist (copy-tree *face-code-alist*))
	 (current-style si:*null-style*))
    (send self :set-default-style *screen-default-character-style*)
    (using-font-table (font-table 10)
      (send self :set-current-style current-style)
      (let ((*microns-per-device-pixel* (float *microns-per-screen-pixel*)))
	(condition-case ()
	     (apply function args)
	   (sys:abort
	     ;;If the char was <abort>, eat it
	     (let ((ch (ignore-errors (send window :tyi-no-hang))))
	       (when ch
		 (unless (or (char-equal ch #\space) (char-equal ch #\abort))
		   (send window :untyi ch))))))))))

(defmethod (:FRESH-LINE WINDOW-OUTPUT-DEVICE) ()
  (send window :fresh-line))

(defmethod (:LINE-HEIGHT WINDOW-OUTPUT-DEVICE) ()
  (send window :line-height))

(defmethod (:ERASE-ALUF WINDOW-OUTPUT-DEVICE) ()
  (send window :erase-aluf))

(defmethod (:DRAW-RECTANGLE WINDOW-OUTPUT-DEVICE) (width height x y aluf)
  (send window :draw-rectangle width height x y aluf))

(defmethod (:DISPLAY-LINE-GBOXES WINDOW-OUTPUT-DEVICE) (line-hbox)
  (display-line-gboxes-on-window window line-hbox))

;;; DEX output devices

;;; DEX background operations want to be able to ask for :screen and :display-device-type,
;;; but do NOT want to have a real window.  This is so we can catch attempts to actually
;;; do output in the background, which is not supposed to happen.  So, this function exists
;;; to filter attempted operations.  Its argument D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")dex0 comes from WITH-SAGE-DEVICE-INTERNAL
;;; which includes this function in a lexical closure.
(defun OPERATION-UPON-DEX-IN-BACKGROUND (dex operation args)
  (case operation
    ((:screen :display-device-type)
     (lexpr-send dex operation args))
    (otherwise
     (zl:fsignal "Internal error.  Please report this bug.  ~
	      <Resume> will attempt to continue.~@
	      Attempt to perform operation in background upon ~s.~@
	      Operation ~s, arguments ~s" dex operation args)
     (lexpr-send dex :send-pane 'viewer-pane operation args))))

(defmethod (:WITH-DEVICE-PREPARED DEX-OUTPUT-DEVICE) (function &rest args)
  (setq display-device-type (send window :display-device-type)
	face-code-alist (copy-tree *face-code-alist*)
	current-style si:*null-style*)
  (send self :set-default-style *screen-default-character-style*)
  (using-font-table (font-table 10)
    (send self :set-current-style current-style)
    (let ((*microns-per-device-pixel* (float *microns-per-screen-pixel*)))
      (apply function args))))

(defmethod (:OUTPUT-DEVICE-TYPE DEX-OUTPUT-DEVICE) ()
  (if (eq window '|DEX output device uninitialized window|)
      :dex-background
      :dex))

;;; Printer support
;;; Moved to hardcopy-devices.lisp 12 Jul 89 MCW

;;; This kludge is so I can get my hands on the output stream without
;;; having to redesign the entire fucking protocol.
(defmethod (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(with-stream-internal basic-window-output-device)0 (continuation)
  (funcall continuation window))


;;; Box & Line stuff
(defmethod 2(draw-typed-line output-device)0 (line-type orientation
							stream start-x start-y end-x end-y)
  (let ((options (lookup-line-type-definition line-type)))
    (apply #'draw-typed-line-1 self stream orientation start-x start-y end-x end-y options)))

(defmethod 2(draw-typed-line-1 output-device)0 (stream orientation
						       start-x start-y end-x end-y
						       &key weight groove
						       &allow-other-keys)
  (let ((transform (graphics:stream-transform stream)))
    (flet ((untransform (distance)
	     (multiple-value-bind (x y)
		 (ecase orientation
		   (:horizontal (values 0 distance))
		   (:vertical (values distance 0)))
	       (multiple-value-bind (new-x new-y)
		   (graphics:untransform-distance
		     x y transform)
		 (ecase orientation
		   (:horizontal new-y)
		   (:vertical new-x))))))
      (graphics:draw-line start-x start-y end-x end-y
			  :thickness weight
			  :scale-thickness nil
			  :stream stream)
	(when groove
	  (let ((groove (untransform groove)))
	    (ecase orientation
	      (:horizontal
		(graphics:draw-line start-x (+ start-y groove) end-x (+ end-y groove)
				    :thickness weight ;thickness
				    :scale-thickness nil
				    :stream stream))
	      (:vertical
		(graphics:draw-line (+ start-x groove) start-y (+ end-x groove) end-y
				    :thickness weight ;thickness
				    :scale-thickness nil
				    :stream stream))))))))

(defun 2decode-box-type-options0 (options)
  (declare (values left-type top-type right-type bottom-type))
  (destructuring-bind (&key left top right bottom
			    horizontal vertical all)
      options
    (when all
      (return-from decode-box-type-options
	(values all all all all)))
    (when horizontal
      (setq top horizontal bottom horizontal))
    (when vertical
      (setq left vertical right vertical))
    (values left top right bottom)))

(defmethod 2(draw-typed-box output-device)0 (stream box-type left top right bottom)
  (let ((box-options (lookup-box-type-definition box-type)))
    (multiple-value-bind (left-type top-type right-type bottom-type)
	(decode-box-type-options box-options)
      (when left-type
	(draw-typed-line self left-type :vertical stream
			 left top left bottom))
      (when top-type
	(draw-typed-line self top-type :horizontal stream
			 left top right top))
      (when right-type
	(draw-typed-line self right-type :vertical stream
			 right top right bottom))
      (when bottom-type
	(draw-typed-line self bottom-type :horizontal stream
			 left bottom right bottom)))))
