;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10 -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

;;;Two things in this file:
;;;1. A hack to determine who-calls type information for Sage records.
;;;The approach taken here is to read all the .PS files, on the theory that they will have
;;;been parsed properly and can be processed rather quickly, compared to trying to do all
;;;the parsing over again.  This seems to be true.  The only pain is the enormous file
;;;overhead from opening and closing and doing set-pointer for each file multitudinous times.
;;;Otherwise it is fairly straightforward although not clean and tasteful.

;;;2. Code to support saving and loading who-calls information, so that the Sage
;;;"compiler" and loader can maintain it.

;;;----------Production Facility----------
;;;Here's the scheme.  Each documented record that refers to another has a property
;;; called 'sage-records-called. e.g.  A is a section that refers to X as a function and
;;; expands Y as a variable.  A is also a function that refers to Y as a variable.
;;; So A has the property:
;;; ((section (x function crossref) (y variable expand)) (function (y variable crossref)))
;;; Looking this property list gets you which things are used by A.
;;;The other half of the info is what are the callers of X.  This info gets stashed in
;;; a hash table.  The key is the name of the callee; the value is callee type, caller,
;;; caller type.  So for the example above:
;;; X   ((function crossref A section))
;;; Y   ((variable expand A section) (variable crossref A function))
;;;The type information is actually converted into canonical property form for comparisons
;;; so that questions of alternate surface forms don't interfere.  Stores surface form.
(defun SAGE-WHO-CALLS (record-group &optional usage)
  (let* ((type-string (coerce-record-type (record-group-type record-group) 'print-name))
	 (title-string (appropriate-title-rendering record-group 'no-formatting))
	 (documented (documented-p record-group))
	 (callers (record-group-callers record-group)))
    (cond (callers
	   (loop for (caller-type . caller-record-groups) in callers
		 when (or (null usage)
			  (eq usage caller-type))
		   do
		     (dolist (crg caller-record-groups)
		       (setq crg (doc-record-record-group crg))
		       (format t "~&~A ~A ~A by ~A ~A"
			       (namespace-type-string record-group)
			       (appropriate-title-rendering record-group 'no-formatting)
			       (case caller-type
				 (crossreference "referred to")
				 (expand "included")
				 (precis "summarized")
				 (otherwise "used"))
			       (namespace-type-string crg)
			       (appropriate-title-rendering crg 'no-formatting)))))
	  ((not documented)
	   (format t "~&~A is not documented~@[ as a ~A~]." title-string type-string))
	  (t
	   (format t "~&~A is not used ~:[at all.~;as a ~A.~]"
		   title-string type-string type-string)))))	;clumsy args

;; Doesn't do any output
;;;Returns the list of records that are used in the specified way(s).
(defun SAGE-WHO-CALLS-INTERNAL (record-group &optional view-types)
  ;;---This was put in instead of fixing the callers, so that it could be called with symbol
  (when (and view-types (symbolp view-types)) (setq view-types (ncons view-types)))
  (let ((callers (record-group-callers record-group)))
    (when callers
      (if view-types
	  (loop for view in view-types
		nconc (copy-list (cdr (assoc view callers))))
	  (loop for (nil . caller-record-groups) in callers
		nconc (copy-list caller-record-groups))))))

(defun VIEW-TABLE-OF-CONTENTS-INTERNAL (record-group crossrefs-too-p source-file-too-p
					&optional numeric-arg-p)
  (let ((toc-list				;the whole callee tree, with self at top
	  (list `(,record-group expand ,(table-of-contents record-group)))))
    (unwind-protect
	(if (and (in-zwei-p)
		 (eql zwei:*numeric-arg-p* :control-u))
	    (with-open-stream (stream (hardcopy:make-hardcopy-stream
					hardcopy:*default-text-printer*))
	      (condition-bind ((hardcopy:hardcopy-outside-of-bounding-box
				 #'hardcopy:simple-formatter-exception-interceptor))
		(let ((*standard-output* stream))
		  (format stream "Table of contents using \"~A\" (~A)"
			  (appropriate-title-rendering record-group 'no-formatting)
			  (coerce-record-type (record-group-type record-group)
					      'print-name))
		  (toc-really-internal toc-list crossrefs-too-p source-file-too-p nil))))
	    (toc-really-internal toc-list crossrefs-too-p source-file-too-p
				 (if (in-zwei-p)
				     (when zwei:*numeric-arg-p* zwei:*numeric-arg*)
				     numeric-arg-p)))
      (add-candidates-to-dex toc-list
			     (format nil "Table of contents using \"~A\" (~A)"
				     (appropriate-title-rendering record-group 'no-formatting)
				     (coerce-record-type (record-group-type record-group)
							 'print-name))
			     #'ddex::caller-list-to-item-list :visible))))

(defun TOC-REALLY-INTERNAL (toc-list crossrefs-too-p source-file-too-p max-level
			    &optional (level 0))
  (when (or (null max-level) (< level max-level))
    (loop for (record-group ref-type callees) in toc-list
	  for cref-flag = (and crossrefs-too-p (eq ref-type 'crossreference))
	  when (or (eq ref-type 'expand) cref-flag)	;list self
	    do (dw:with-output-as-presentation
		 (:object record-group
		  :type 'record-group)
		 (format t "~&~V@T~A~:[~; (Cross reference)~]~:[~;  (~A)~]~%"
			 (* 2 level)
			 (appropriate-title-rendering record-group 'no-formatting)
			 cref-flag source-file-too-p
			 (let ((record (find-record-for-lookup record-group)))
			   (and record (doc-record-source-file record)))
			 ))
	       (when (eq ref-type 'expand)	;handle self's own table of contents if any
		 (toc-really-internal callees crossrefs-too-p source-file-too-p
				      max-level (1+ level))))))

#|| ;;unused 5/11/87 RLB
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL NIL :SMALL) "TVFONT");;; First finds the topic of type requested.  Prints an appropriate
;;; heading for a recursive or non-recursive listing of crossrefs,
;;; then calls FIND-CROSSREFS and FIND-DUPLICATE-CROSSREFS to do the listing of 
;;; crossrefs found.
(defun LIST-CROSSREFS (symbol type toc-list recursively-p level)
  (if (get-sage-property symbol type 'callees)
      (cond (recursively-p
	     (format t "~&Crossrefs from ~A as a ~A:" symbol
		     (get-sage-property symbol type 'source-type))
	     (find-duplicate-crossrefs
	       (find-crossrefs toc-list recursively-p) level))
	    ((find-crossrefs toc-list nil)
	     (find-duplicate-crossrefs
	       (find-crossrefs toc-list recursively-p) level))
	    (t nil))
	(if recursively-p
	    (format t "~&There are no crossrefs from ~A as a ~A." symbol type))))

;;; Given a list of records called, finds the crossrefs and adds them to
;;; a list returned to the caller, FIND-DUPLICATE-CROSSREFS.
;;; If recursively-p is nil, this procedure expects toc-list to be
;;; a list of one element.
(defun FIND-CROSSREFS (toc-list recursively-p)
  (loop with crossrefs-list
	for (item item-type expand expand-item) in toc-list
	when (eq expand 'crossref)
	do (push item crossrefs-list)
	else do (if recursively-p
		    (setq crossrefs-list
			  (nconc (find-crossrefs expand-item recursively-p)
				 crossrefs-list)))
	finally (return crossrefs-list)))
0||#

;;; Returns a list of all records called, whether expanded or crossrefed, by
;;; the given record.  The list is in the form ((record-group expand expand-topic)).
(defun TABLE-OF-CONTENTS (record-group)
    (labels ((record-group-callees (record-group)
	       (let ((installed-record (find-record-for-lookup record-group)))
		 (and installed-record (doc-record-callees installed-record))))
	     (toc (rg done-already)
	       (declare (sys:downward-function))
	       (unless (loop for old-record-group in done-already
			     thereis (eq old-record-group rg))
		 (loop for (expand-type . rec-grps) in (record-group-callees rg)
		       nconcing
		       (loop for rec-grp in rec-grps
			     nconc (list (list rec-grp expand-type
					       (when (eq expand-type 'expand)
						 (stack-let ((done-so-far
							       (cons rg done-already)))
						   (toc rec-grp done-so-far))))))))))
    (toc record-group ())))

#|| ;;unused 5/11/87 RLB
1;;; Given a list of all crossrefs found by FIND-CROSSREFS,
;;; finds any duplicates and tallies up the number of times each 
;;; crossref appears.  Finally, prints out the results.
(defun FIND-DUPLICATE-CROSSREFS (crossrefs-list level)
  (loop with duplicate-crossrefs-list
	for element in crossrefs-list
	as found-cons = (assoc element duplicate-crossrefs-list :test #'equal)
	when found-cons
	do (incf (cdr found-cons))
	else do (push (cons element 1) duplicate-crossrefs-list)
	finally (loop for (element . count) in duplicate-crossrefs-list
		      do (format *standard-output*
				 "~&~V@T  ~D crossref~:P to ~S~&" (* 3 level) count
				 (capitalize-as-title element 'no-formatting)))))
0||#

;;;Stuff to support removing documentation (on analogy with undefmethod and friends)

;;;Removes a topic from all the places where it has been cached.
;;;This is the right thing for an application program to call.
(defun UNDOCUMENT-TOPIC (record-group)
;  (when (stringp topic)
;    ;; Topic probably came from a patch file.  "Intern" it by trying to read
;    ;; a spec from the string.  If that doesn't work, try to convert to a
;    ;; phony function spec.
;    (let ((possible-topic
;	    (condition-case (err)
;		 (multiple-value-bind (spec how-far)
;		     (read-from-string topic)
;		   (if (and (sys:validate-function-spec spec)
;			    (= how-far (string-length topic)))
;		       spec
;		       ;; Else use our kludge, I guess.
;		       (maybe-convert-string-to-spec topic)))
;	      (sys:read-error
;		(maybe-convert-string-to-spec topic)))))
;      (setq topic (if (documented-p possible-topic type)
;		      possible-topic
;		      ;; Topic might be documented as a phony function spec, but the string
;		      ;; was read as a symbol.  See if the aarray contains a lookalike.
;		      (loop for aarray-topic in (cdr (zwei:string-in-aarray-p
;						       topic *sage-completion-aarray*))
;			    when (string-equal topic (format nil "~S" aarray-topic))
;			      return aarray-topic
;			    finally (return possible-topic))))))
  (ignore record-group)
  (dbg:when-mode-lock '|I'm almost positive that this will not work -- doughty|)
  #+Dennis-is-almost-positive-that-this-will-not-work
  (let ((type (or (get-sage-property topic type 'source-type)	;need "real" external type
		  (coerce-record-type type 'external))))
    (cond ((documented-p record-group)
	   (sys:without-aborts
	     ("Documentation index information for ~A ~A is being removed.~@
               Aborting now could leave documentation data structures in an~@
               inconsistent state and cause problems in using the Document Examiner."
	      (namespace-type-string record-group)
	      (appropriate-title-rendering record-group 'no-formatting))
	     (let ((aarray-items (aarray-items-for-completion record-group)))
	       ;; Fix callers hash table to remove this topic as a caller of its callees
	       (loop for (usage callee-record-group)
			 in (record-group-record-attribute record-group :installed 'callees)
		     do (send *sage-who-calls* :modify-hash callee-record-group
			      #'remove-caller `(,usage ,record-group)))
	       ;; Fix match cache to remove this topic for its unique keyword tokens
	       (remove-from-match-cache record-group (first aarray-items))
	       (cond ((= (documented-record-count record-group) 1)
		      ;; No other record types for this topic.  Remove topic from
		      ;; completion aarray.
		      (zwei:remove-aarray-items *sage-completion-aarray* aarray-items
						*debugging-sage*)
		      ;; OK to remove entire documentation property structure
		      (si:function-spec-remprop topic 'documentation-info))
		     (t
		      (let ((tokens (record-group-record-attribute record-group :installed
								   'tokens)))
			;; Remove properties for this type only
			(remove-sage-property topic type)
			;; No reason to throw these away
			(put-sage-property topic type 'tokens tokens)))))))
	  (t
	   (when *warn-user*
	     (format *error-output*
		     "~&Warning: Attempt to undocument topic ~S of type ~A, but it is not ~
                      documented as a ~:*~A" (record-group-topic record-group)
		     (coerce-record-type (record-group-type record-group) 'print-name)))))))


