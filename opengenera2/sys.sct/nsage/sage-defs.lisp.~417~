;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: t -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

;;; Definitions file for the SAGE system.
;;;Some environmental changes needed for Sage

;;ensure editor knows about it
(let ((pair (assoc :sage-record fs:*file-type-mode-alist*)))
  (if pair 
      (setf (cdr pair) :sage)
      (push '(:sage-record . :sage) fs:*file-type-mode-alist*)))


(defvar D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*sage-initializations*0 nil)		;Initializations run by SCT.

(defvar 1*debugging-sage*0 nil)			;to let you see some error notices

(defvar 1*debugging-formatter*0 () "For enabling formatter debugging behavior")

(defvar 1*formatter-timestamp*0 0)		;to distinguish formatter runs
(defvar 1*query-case-variables* 0nil)		;for Format Pages :query keyword in PP
;;; *unassigned-case-selectors* is a list that holds any unbound Case selectors found
;;; furing a Foprmat Pages run.  Its form is:  ((triplet)(triplet)...record-group).
;;; record-group is the top level record being formatted by Format Pages.  Each (triplet)
;;; is a list consisting of (selector name, record group containing Case command, and a
;;; boolean indicating whether an Unassigned clause was provided in the Case command) and
;;; record-group
(defvar 1*unassigned-case-selectors* 0nil)

;;;Interpreting formatter definitions
(defvar 1*environment-to-default-from*0 ()
  "Set by setup-inheritance")

;;; We implement a cache of environments, rather than using a resource of them.
;;; This is because (a) their usage cannot be simply dynamically scoped,
;;; but instead deals in continuations which might never get invoked;
;;; and (b) we try hard to return them to the cache, but if we fail to
;;; we'd rather drop them on the floor for the gc to find than slow down
;;; resource allocation/deallocation by remembering them forever.

(defvar 1*environment-cache*0 ())			;the cache
(defvar 1*environments-taken-from-cache*0 0)	;meter
(defvar 1*environments-returned-to-cache*0 0)	;meter

;;This is a list of lists like (:screen <screen-envr> <screen-top-envr>)
(defvar 1*toplevel-environment-alist*0 ())

;;; Used to clear out old instances when flavors change incompatibly.
(defun 1invalidate-environment-caches0 ()
  (setq *environment-to-default-from* nil
	*environment-cache* nil
	*toplevel-environment-alist* nil))

;;;This is a defvar so that any subsequent make-system will not attempt to make-area again.
;;;This could also be approached as a :once initialization but supposedly defvar does the job.
(defvar 1*sage-completion-area*
0	(make-area :name '*sage-completion-area* :region-size 512000))
(defvar 1*sage-formatter-area*0 sys:working-storage-area)
(defvar 1*sage-record-area*0 *sage-completion-area*)

(defvar 1*topic-aarray*
0	(si:make-aarray 10000 :area *sage-completion-area*
			      :name "documentation topic completion table"))

(defvar 1*sage-word-hash-table*0 (make-hash-table :test #'string-equal
						:area *sage-completion-area*))
(defvar 1*inhibit-keyword-token-additions* 0nil)

;;; 5 Sep 83, array-active-length for the completion aarray is ~4750 items.
;;; 29 Sep 84, ~6100 items
;;; 19 Jan 85, 9069 items
;;; I think this last figure was the array length, not the array active length--
;;;   I get 7215 items -- 24 Jan 85 -- rom
;(defvar *SAGE-COMPLETION-AARRAY*		;for registering names you can look up
;	(si:make-aarray 1000 :area *sage-completion-area*
;			     :name "obsolete sage completion table"))

;;; Made create-p arg default; it's an error if it doesn't find it -- rom
(defparameter 1*sage-package*0 (pkg-find-package "NSAGE"))
;(defparameter *DOC-PACKAGE* (pkg-find-package "DOC"))

;;; Package, etc., relative to which symbols are printed
(defvar 1*print-package*0 si:*scl-package*)
(defvar 1*print-readtable*0 si:*common-lisp-readtable*)
(defvar 1*sage-print-base*0 10.)
(defvar 1*sage-read-base*0 10.)

(defmacro 1with-standard-sage-io-environment0 (&body body)
  `(let ((*package* *print-package*)
	 (*readtable* *print-readtable*)
	 (*print-base* *sage-print-base*)
	 (*read-base* *sage-read-base*))
     ,@body))

(defvar 1*expand-references-when*0 :defer)	;:defer or :immediate

(defvar 1*sage-expansion-history*0 ())	;for knowing how many @references deep & which ones
(defvar 1*inhibit-numbering*0 ())			;for deciding if numbering makes sense at all
(defvar 1*expansion-level-override*0 ()
  "Number controls Sage print level. NIL=just use defaults, ':ALL=ignore level and show all.
This variable is intended for binding by various interface routines.")

;;; For the parser.

(defparameter 1*equate-chars*0 '(#\= #\/ #\sp))

(defparameter 1*delim-pairs*0 '((#\( . #\))
			  (#\[ . #\])
			  (#\< . #\>)
			  (#\{ . #\})
			  (#\" . #\")
			  (#\' . #\')
			  (#\` . #\')))

(defvar 1*open-delims*0)
(setq *open-delims* (loop for (o) in *delim-pairs* collect o))

(defvar 1*close-delims*0)
(setq *close-delims* (loop for (nil . c) in *delim-pairs* collect c))

(defparameter 1*flag-char*0 #\@)				;formatter command esc char

(defparameter 1*white-space-list*0 '(#\SPACE #\LF #\CR #\TAB #\FF))
;; The system's string-processing functions are much faster when offered a string
;; than when offered a list.
(defparameter 1*white-space*0 (coerce *white-space-list* 'string))

(defun 1char-white-space-p0 (char)
  (not (null (string-search-char char *white-space*))))

(defvar 1*hyphen-chars*0 "-")			;string-processing is faster if given a string

(defparameter 1*delims*0 '((#\( . #\))
		     (#\[ . #\])
		     (#\< . #\>)
		     (#\{ . #\})
		     (#\" . #\")
		     (#\' . #\')
		     (#\` . #\')))

;;;Like *word-break* BUT these are the characters that are treated as delimiters
;;;when you are trying to move from delimiters to a word.  i.e. none of these
;;;chars can appear as the leading char in a word (note *, :, ~, and % are missing
;;;because they need to occur as a leading char)
(defparameter 1*word-open-break*0 '(#\@ #\SPACE #\LF #\CR #\TAB #\FF #\/ #\? #\. #\,
			      #\' #\" #\; #\\ #\| #\` #\] #\) #\( #\[ #\}
			      #\> #\{ #\< #\+ #\= #\_ #\- #\^ #\& #\$ #\# #\!))

;;;Also like *word-break* BUT these are the characters that cannot occur within a
;;;word.  As soon as it sees one of these, the word is OVER.  (note % is missing to
;;;allow for double leading % and * to allow for trailing *)
(defparameter 1*word-close-break*0 '(#\@ #\SPACE #\LF #\CR #\TAB #\FF #\/ #\? #\. #\,
			      #\' #\" #\; #\\ #\| #\` #\] #\) #\( #\[ #\}
			      #\> #\{ #\< #\+ #\= #\_ #\- #\& #\^ #\$ #\# #\!))

(defparameter 1*word-close-keep*0 '(#\:))		;breaks a word AND stays in it too

;; to be bound around calls to database lookup.
(defvar 1*document-type*0)
(defvar 1*device-type*0)

;; When there's nothing better to use, things use these.
(defvar 1*default-document-type*0 'generic)

(defvar 1*default-device-type*0 'generic)

;;Here's how to bind them.
;; Doing (with-document-and-device-types () ---) will bind them to the defaults
;; only if they are unbound.
(defmacro 1with-document-and-device-types0 ((&optional doc-type dev-type) &body body)
  `(with-document-and-device-types-1
     ,doc-type ,dev-type 
     (named-lambda with-document-and-device-types () ,@body)))

;;Here's how to make sure they're bound.
#+Ignore
(2 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")(defmacro (3 0 (NIL 0) (NIL :BOLD :SMALL) "TVFONTCB")kludging-document-and-device-types2 (&body body)
  `(with-document-and-device-types-1
     () ()
     (named-lambda kludging-document-and-device-types () ,@body)))

0(defun 1with-document-and-device-types-10 (doc-type dev-type continuation)
  (declare (sys:downward-funarg continuation))
  (let ((bind-doc-type (or doc-type (not (variable-boundp *document-type*))))
	(new-doc-type (or doc-type *default-document-type*))
	(bind-dev-type (or dev-type (not (variable-boundp *device-type*))))
	(new-dev-type (or dev-type *default-device-type*)))
    (let-if bind-doc-type ((*document-type* new-doc-type))
      (let-if bind-dev-type ((*device-type* new-dev-type))
	(funcall continuation)))))

;;;Maybe there is some better way to implement this.  For now, you have to know
;;;since the input editor and zwei typein don't have the same features.
(defun 1in-zwei-p0 ()
  (variable-boundp zwei:*window*))


;;; 1domap0 now lives in CLI


;;;Scheme devised by BSG for "interning" the bogus topics that aren't real
;;;function spec strings.  They become flavors

(defvar 1*ask-user*0 ())				;for various querying in topic DWIM stuff
(defvar 1*warn-user*0 nil)			;same idea -- for intern warnings about topics
						;when t, it chats about problems

(defflavor 1phony-function-spec
0	(string)
	(si:property-list-mixin)
  :initable-instance-variables
  (:required-init-keywords :string))

(clos:defmethod 1clos-internals::function-name-current-p0 ((function-name phony-function-spec))
  t)

(defmethod 1(:function-spec-type phony-function-spec)0 ()
  'phony-function-spec-type-symbol)

(defmethod 1(sys:print-self phony-function-spec)0 (stream ignore slashify-p &rest ignore)
  (let ((string-for-printing (convert-phony-function-spec-string string nil slashify-p)))
    (princ string-for-printing stream)))

(defmethod 1(:string-for-printing phony-function-spec)0 ()
  string)

(defprop phony-function-spec-type-symbol phony-function-spec-type-function
	 si:function-spec-handler)

(defmethod 1(:equal-hash phony-function-spec)0 ()
  (values (sys:sxhash-string string) ()))

(defun 1phony-function-spec-type-function0 (message function-spec &rest args)
  (case message
    (zl:putprop (lexpr-send function-spec ':putprop args))
    (zl:remprop (lexpr-send function-spec ':remprop args))
    (zl:get (lexpr-send function-spec ':get args))
    (zl:plist (lexpr-send function-spec :property-list args))
    (fdefinedp nil)
    (sys:function-parent nil)
    (otherwise (error "Unhandled message ~S for phony spec ~S" message function-spec))))

(defvar 1*phony-function-spec-hash-table*
0	(make-hash-table :test #'string-equal :area *sage-completion-area*))

;;;Returns 2 values, the "interned" function spec (i.e. flavor object) and
;;;the name of it as a string.  The second value can be used as a flag of phoniness
;;;in case any routines need to know.
(defun 1phony-function-spec-intern0 (string &optional soft-p)
  (check-type string string nil)
  (let ((hash-table *phony-function-spec-hash-table*)
	(canonical-string (convert-phony-function-spec-string
			    (string-thin (string-trim *white-space* string)
					 :remove-bits t :error-if :fat) t)))
    (or (send hash-table :get-hash canonical-string)
	(and (not soft-p)
	     (let ((new (make-instance 'phony-function-spec :string canonical-string)))
	       (send hash-table :put-hash canonical-string new)
	       (values new canonical-string))))))

(defun 1lookalike-phony-function-spec0 (thing)
  (sys:with-stack-array (string 100 :element-type 'string-char :fill-pointer 0)
    (with-output-to-string (stream string)
      (prin1 thing stream))
    (phony-function-spec-intern string t)))

(defparameter 1*pkg-name-char-array*
0	  (let ((arr (make-array 128. :element-type 'boolean :initial-element nil)))
	    (loop for i from (char-code #\0) to (char-code #\9)
		  do (setf (aref arr i) t))
	    (loop for i from (char-code #\A) to (char-code #\Z)
		  do (setf (aref arr i) t))
	    (loop for i from (char-code #\a) to (char-code #\z)
		  do (setf (aref arr i) t))
	    (setf (aref arr (char-code #\-)) t)
	    (setf (aref arr (char-code #\*)) t)
	    (setf (aref arr (char-code #\:)) t)
	    arr))

(defresource 1equal-hash-tables0 ()
  :constructor (make-hash-table :test #'equal)
  :initializer (clrhash object))

(defmacro 1with-equal-hash-table0 ((name) &body body)
  `(let (,name)
     (unwind-protect
       (progn (setq ,name (allocate-resource 'equal-hash-tables))
	      ,@body)
       (when ,name
	 (send ,name :clear-hash)
	 (deallocate-resource 'equal-hash-tables ,name)))))

(defstruct (1string-temp0 :array-leader
			(:constructor-make-array-keywords length type area))
  fill-pointer
  index)

(defstruct (1fat-string-temp0 :array-leader
			    (:constructor-make-array-keywords length type area))
  fill-pointer
  index)

;;; A resource of strings that you can do array-push-extend on.
;;; It comes initialized as empty.
(defresource 1string-temp0 ()
  :constructor (make-string-temp :length 1024 :type 'sys:art-string
				 :area *sage-completion-area*)
  :initializer (progn (setf (fill-pointer object) 0)
		      (setf (string-temp-index object) 0))
  :deinitializer (when (eql (array-element-type (follow-structure-forwarding object))
			    'character)
		   (cerror "Attempt to thin it"
			   "A string from the STRING-TEMP resource has been fattened.~@
			    Please find an NSage developer to track this down.")
		   (let ((new-string (make-string-temp :length 1024 :type 'sys:art-string
						 :area *sage-completion-area*)))
		     (structure-forward object new-string)
		     object))
  :initial-copies 0
  :clear-for-gc :cleanup)

(defresource 1fat-string-temp0 ()
  :constructor (make-fat-string-temp :length 1024 :type 'sys:art-fat-string
				     :area *sage-completion-area*)
  :initializer (progn (setf (fill-pointer object) 0)
		      (setf (fat-string-temp-index object) 0))
  :initial-copies 0
  :clear-for-gc :cleanup)

(defresource 1arrays-with-fill-pointer0 ()
  :constructor (make-array 100. :fill-pointer 0)
  :initializer (setf (fill-pointer object) 0))

;;Capture the writer's intent.
(defsubst 1copy-string0 (string) (string-append string))

(defun 1string-upcase-and-intern0 (string pkg)
  (when (symbolp string)
    (setq string (symbol-name string)))
  (using-resource (temp string-temp)
    (string-nconc temp (string-thin string :error-if :fat))
    (intern (nstring-upcase temp :start 0 :end ()) pkg)))

(defun 1string-trim-upcase-and-intern0 (char-set string pkg)
  (when (symbolp string)
    (setq string (symbol-name string)))
  (using-resource (temp string-temp)
    (string-trim-into-string temp char-set string)
    (intern (nstring-upcase temp :start 0 :end ()) pkg)))

(defmacro 1with-format-string-temp0 ((var format-control-string . format-args) &body body)
  `(using-resource (,var string-temp)
     (format ,var ,format-control-string ,@format-args)
     ,@body))

(defun 1alist-nonnull0 (&rest name-thing-pairs)
  (loop for (name thing) on name-thing-pairs by #'cddr
	when thing collect (list name thing)))

(defmacro 1do-lines-of-string0 (((string &optional string-start string-end)
			       (start-index-var end-index-var)
			       &optional cr-form)
			      &body body)
  `(dw::do-delimited-substrings ((,string :start (or ,string-start 0) :end ,string-end)
				  (.char. ,start-index-var ,end-index-var))
				(progn ,@body)
     (#\return (ignore .char.) ,cr-form)))

(defmacro 1decoding-array0 ((new-var old-val) &body body)
  `(let ((,new-var ,old-val))
     (declare (sys:array-register ,new-var))
     ,@body))

;;;This returns nil if item not in array
(defun 1find-position-in-array0 (item array &optional (equality-predicate #'eql))
  (position item array :test equality-predicate))

;;Some array stuff it would have been nice for the system to provide

;;;Move an item from one spot in an array to another.
;;;It sure would have helped if Moon had blessed my general version of copy-array-portion.
(defun 1shift-item-in-array0 (array from-index new-index)
  (cond ((eq from-index new-index))		;doesn't need to move
	((> from-index new-index)		;moving to earlier in array
	 (let ((item (aref array from-index)))
	   (si:shift-subarray-later array new-index from-index (1+ new-index))
	   (setf (aref array new-index) item)))
	(t					;moving to later in array
	 (let ((item (aref array from-index)))
	   (copy-array-portion array (1+ from-index) (1+ new-index)
			       array from-index new-index)
	   (setf (aref array new-index) item)))))

;;;Nice idea.  Probably duplicated N times in system.
(defun 1remove-item-from-array0 (array index)
  (let ((length (length array)))
    (when ( index length)
      (error "Trying to remove an item that is beyond the end of the array"))
    (when (> length 0)				;leave empty arrays alone!
      (let ((new-length (1- length)))
	(copy-array-portion array (1+ index) length	;dropping the item at index
			    array index new-length)
	(setf (fill-pointer array) new-length)
	(when (eq (sys:array-type array) 'sys:art-q-list)	;special case, adjust cdr-code at end
	  (unless (= length (array-total-size array))	;when array was at max size don't!
	    (sys:%p-store-cdr-code (locf (aref array (- length 1))) sys:cdr-next))
	  (sys:%p-store-cdr-code (locf (aref array (- length 2))) sys:cdr-nil)))))
  nil)

#||
2(defun 3string-ass-in-completion-alist2 (string alist)
  (cond ((null alist) ())
	((listp alist) (assoc string alist :test #'string-equal))
	(T (si:aarray-lookup string alist))))

(defun 3eliminate-equal-duplicates-using-hash2 (list)
  (let ((marker '#:marker-for-eliminate-equal-duplicates-using-hash))
    (with-equal-hash-table (hash)
      (unwind-protect
	(loop for tails on list
	      do (multiple-value-bind (nil was-there) (send hash :swap-hash (first tails) T)
		   (when was-there (setf (first tails) marker))))
	(setq list (delete marker list)))))
  list)
0||#

(defmacro 1with-index-field0 ((var-name field-name fields-var) &body body)
  `(with-index-field-1 ',field-name
		       ,fields-var
		       (zl:named-lambda set-field-alist (.new-value.)
					(setq ,fields-var .new-value.))
		       (zl:named-lambda
			 ,(intern (string-append 'with-index-field- field-name))
			 (,var-name)
			 (declare (sys:downward-function))
			 ,@body)))

(defun 1with-index-field-10 (field-name field-alist set-field-alist continuation)
  (declare (sys:downward-funarg set-field-alist continuation))
  (let ((field-contents (assoc field-name field-alist)))
    (if field-contents
	(multiple-value-prog1
	  (funcall continuation (second field-contents))
	  (funcall set-field-alist (delete field-contents field-alist)))
	(funcall continuation ()))))

(defmacro 1with-file-attributes-from-sab-field-if0 (condition fields-var &body body)
  (let ((continuation (gensym))
	(vars (gensym))
	(vals (gensym)))
    `(let ((,continuation (named-lambda with-file-attributes-from-sab-field-if ()
			    (declare (sys:downward-function))
			    ,@body)))
       (with-index-field (file-attribute-string file-attribute-string ,fields-var)
	 (if (and ,condition
		  (stringp file-attribute-string)
		  (not (string-equal file-attribute-string "")))
	     (multiple-value-bind (,vars ,vals)
		 (fs:file-attribute-bindings
		   nil :additional-attributes (fs:parse-attribute-list file-attribute-string))
	       (progv ,vars ,vals (funcall ,continuation)))
	     (funcall ,continuation))))))

;; Function gets applied to topic
(defun 1map-over-topics-in-aarray0 (aarray function progress-note)
  (declare (sys:downward-funarg function))
  (with-equal-hash-table (hash)
    (tv:dolist-noting-progress (stuff (g-l-p aarray) progress-note)
      (let ((things (rest stuff)))
	(dolist (topic things)
	  (modify-hash hash topic
		       (lambda (ignore old-value there?)
			 (if there?
			     old-value
			     (progn
			       (funcall function topic)
			       T)))))))))

(defsubst 1maphash-noting-progress0 (function table progress-note)
  (declare (sys:downward-funarg function))
  (tv:maphash-noting-progress function table progress-note))

(defflavor 1editor-symbols-character-set0 ()
	   (si:character-set-no-case-mixin
	    si:character-set-all-delimiters-mixin
	    si:basic-character-set)
  (:default-init-plist
   :name "Editor-Symbols"
   :styleless T
   :n-characters #o177
   :characters '#.(loop for (ch name) in '((#\space "Space")
					   (#\- "Em-Dash")
					   (#\% "Eye")	;same char-index as in fonts:narrow
					   (#\. "Period")
					   (#\a "Open-L")
					   (#\b "Close-L")
					   (#\c "Tab")
					   (#\d "Tab-Right-Flush")
					   (#\e "Tab-Center"))
			collect (list (char-code ch) name))
   ))

;; It would be nice if the system provided this for us
(defmethod 1(add-character-to-character-set editor-symbols-character-set)0 (char-name char-index)
  (check-type char-name string)
  (check-type char-index (integer 0 255))
  (when ( char-index (array-total-size si:name-array))
    (adjust-array si:name-array (list (1+ char-index))))
  (pushnew char-name (aref si:name-array char-index) :test #'string-equal :replace T)
;;(maxf (fill-pointer si:name-array) (1+ char-index))
  (setf (gethash char-name si:name-hash-table) char-index)
  (code-char (send self :name-char char-name)))

(defmethod 1(:char-equal editor-symbols-character-set)0 (index1 index2)
  (= index1 index2))

(defmethod 1(:char-lessp editor-symbols-character-set)0 (index1 index2)
  (< index1 index2))

(defmethod 1(:alpha-char-p editor-symbols-character-set)0 (ignore)
  nil)

(defmethod 1(:graphic-char-p editor-symbols-character-set)0 (index)
  (and ( index #o177) (not (null (aref si:name-array index)))))

(compile-flavor-methods editor-symbols-character-set)

(defvar 1*editor-symbols-character-set*0 (make-instance 'editor-symbols-character-set))

(si:define-character-style-families si:*b&w-screen* *editor-symbols-character-set*
  '(:family :fix (:size :normal (:face :roman fonts:edsymbol12))))

;;; 1lexpr-continue0 1continue0 and 1dynamic-flet0 are now in CLI


;;; Another useful utility.
(defmacro 1query-case0 ((format-string &rest format-args)
		      other-fquery-options
		      &body clauses)
  (multiple-value-bind (options option-bodies)
      (loop for clause in clauses
	    collect (first clause) into options
	    collect (rest clause) into option-bodies
	    finally (return (values options option-bodies)))
    (let ((fquery-options
	    (make-query-case-fquery-options options))
	  (case-bodies (make-query-case-bodies options option-bodies)))
      `(ecase (fquery ',(append other-fquery-options fquery-options)
		      ,format-string
		      ,@format-args)
	 ,@case-bodies))))

(defun 1make-query-case-fquery-options0 (options)
  (let ((tyi t))
    (cond ((every 'symbolp options)
	   (setq tyi nil)
	   (setq options
		 (loop for option in options
		       collect `(,option ,(string-capitalize option)))))
	  ((every (lambda (o)
		    (and (listp o)
			 (characterp (second o)))) options)
	   (setq options (loop for option in options
			       collect `((,(first option) ,(string-capitalize (first option)))
					 ,(second option)))))
	  ((every (lambda (o)
		    (and (listp o)
			 (stringp (second o)))) options)
	   (setq tyi nil))
	  (t (error "The specs ~S are incompatible with each other.  They must all be symbols
or lists of the form (Value Thing-To-Type)" options)))
    `(:type ,(if tyi :tyi :readline) :choices ,options)))

(defun 1make-query-case-bodies0 (options bodies)
  (flet ((extract-symbol (option)
	   (cond ((atom option) option)
		 ((atom (first option)) (first option))
		 (t (first (first option))))))
    (loop for option in options
	  for body in bodies
	  collecting `((,(extract-symbol option)) ,@body))))

#||
(defun test-query-case ()
  (query-case ("This is a test")
	      (:help-function (lambda (s) (format s "AAIugh!")))
    ((Yes #\Y) t)
    ((No #\N) nil)
    ((Edit #\E) 'edit)))
||#

(defvar 1*unique-idrecord-group-registry*0 (make-hash-table :test #'string-equal
							   :area *sage-record-area*))

(defsubst 1lookup-unique-id-registry0 (unique-id)
  (gethash unique-id *unique-idrecord-group-registry*))

(export '(*default-document-type*
	   *default-device-type*))
