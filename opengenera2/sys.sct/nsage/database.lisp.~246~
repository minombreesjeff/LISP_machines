;;; -*- Syntax: Common-lisp; Mode: LISP; Base: 10; Package: NSAGE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-document-type D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")'generic0)
(define-document-type 1'SyManual0)
(define-document-type '1SyMap0)
(define-device-type 1'generic0)
;;(define-device-type 1'LGP10)
(define-device-type 1'LGP20)
(define-device-type 1'LM0)

(define-sage-directive 1begin0 :begin generic generic)

(define-sage-directive 1end0 :end generic generic)

(define-sage-directive 1comment0 :comment generic generic)

(define-sage-directive 1check0 :comment generic generic)

(define-sage-directive 1ok0 :comment generic generic)

(define-sage-directive 1record0 :sage-record generic generic)

(define-sage-field 1topic0)

(define-sage-field 1type0)

(define-sage-field 1arglist0)

(define-sage-field 1oneliner0)

(define-sage-field 1keywords0)

(define-sage-field 1operation0)

(define-sage-field 1contents0)

(define-sage-field 1related0)

(define-sage-field 1releasenumber0)

(define-sage-field 1abbrev0)

(define-sage-field 1title0)

(define-sage-field 1source-topic0)

(define-sage-field 1notes0)

(define-sage-field 1glossary0)

;; There are sort of duplicate definitions in counter.lisp -- see define-named-counter
(define-sage-counter 1FigureCounter0 generic generic
		     '((Numbered "Figure @1.  ")
		       (Referenced "@1")
		       (table "FigureContents")
		       (init 0)
		       ;; ContentsForm "@TcC{@imbed(numbered,def '@parm(numbered)@ @ ')@$@rfstr(@parm(page))@parm(title)}"
		       ))

(define-sage-counter 1TableCounter0 generic generic
		     '((Numbered "Table @1.  ")
		       (Referenced "@1")
		       (table "TableContents")
		       (init 0)
		       ;; ContentsForm "@TcC{@imbed(numbered,def '@parm(numbered)@ @ ')@$@rfstr(@parm(page))@parm(title)}"
		       ))

(define-sage-counter 1FootnoteCounter0 generic generic
		     '((Numbered "@1")
		       (Referenced "@1")
		       (init 0)
		       ))


(define-sage-command 1bibliography0 ()
  :undisplayed? T)

(define-sage-command 1blankpage0 (&optional ((n 1) :positive-integer))
  :ends-with-newline? T :starts-with-printing-char? T :text? t
  :pretty-name "BlankPage")

(define-sage-command 1blankspace0 ((distance :vertical-distance))
  :ends-with-newline? nil :starts-with-printing-char? T :text? t
  :pretty-name "BlankSpace")

(define-sage-command 1blocklabel0 (&all (title :contents-list))
  :text? T :ends-with-newline? T :starts-with-printing-char? T
  :internal t :pretty-name "BlockLabel")

(define-sage-command 1caption0 (&all (caption :contents-list))
  :text? T :ends-with-newline? T :starts-with-printing-char? T)

(define-sage-command 1case0 ((selector :sage-variable) &any-keys (clauses :contents-list))
  :undisplayed? T)

(define-sage-command 1cb0 ()
  :text? T :starts-with-printing-char? T :pretty-name "CB"
  :internal T)

(define-sage-command 1Chapter0 (&all (title :contents-list))
  :text? T :ends-with-newline? () :starts-with-printing-char? T)

(define-sage-command 1Prefatory0 (&all (title :contents-list))
  :text? T :ends-with-newline? () :starts-with-printing-char? T)

;;; This is supposed to let you put a delimited string after the parameter, but
;;; I don't see an easy way to make that work, so I'm punting -- rom
(define-sage-command 1cite0 (&any-keys (clauses :none)))

(define-sage-command 1citemark0 (&any-keys (keys :none)))

(define-sage-command 1counter0 ((name :text) &key
			      (numbered :template)
			      (referenced :template)
			      (alias counter)
			      (announced boolean)
			      (contentsform :contents-list)
			      (incrementedby (use tag reference magic))
			      (init integer)
			      (numbered template)
			      (outline boolean)
			      (referenced template)
			      (titleform :contents-list)
			      (within :counter))
  :undisplayed? T :internal t)

(define-sage-command 1define
0		     ((name :text)
		      ;;---This list is (almost) the same as that in 1Modify0.  Both should
		      ;;get modified together, and both should be replaced by something
		      ;;driven off the attribute database.
		      &key
		      (use :cmd-or-envr-name)	;This should come first
		      (above :vertical-distance)
		      (afterentry :contents-list)
		      (afterexit :contents-list)
		      (anchor :none)
		      (backgroundcolor :text)
		      (beforeentry :contents-list)
		      (beforeexit :contents-list)
		      (below :vertical-distance)
		      (blanklines (break hinge hingebreak hingekeep ignore ignored kept))
		      (boldface (false off no overstruck tilde))
		      (bottommargin :vertical-distance)
		      (boxed :none)
		      (break (after around before off))
		      (capitalized :boolean)
		      (centered :boolean)
		      (color :text)
		      (columnmargin :horizontal-distance)
		      (columns :positive-integer)
		      (columnwidth :horizontal-distance)
		      (continue (:none allowed force off ()))
		      (copy :cmd-or-envr-name)
		      (counter :counter-name)
		      (crbreak :boolean)
		      (crspace :none)
		      (eofok :boolean)
		      (facecode :text)
		      (fill :none)
		      (fixed :vertical-distance)
		      (float :none)
		      (floatpage :none)
		      (flushleft :none)
		      (flushright :none)
		      (font :text)
		      (foot :none)
		      (free :none)
		      (group :none)
		      (hyphenbreak :boolean)
		      (hyphenation :boolean)
		      (increment :counter-name)
		      (indent :horizontal-distance)
		      (indentation :horizontal-distance)
		      (initialize :contents-list)
		      (invisible :none)
		      (justification :boolean)
		      (leadingspaces (compact ignored kept))
		      (leftmargin :horizontal-distance)
		      (linewidth :horizontal-distance)
		      (longlines (chop keep wrap))
		      (need :vertical-distance)
		      (nofill :none)
		      (numbered :template)
		      (numberfrom :number)
		      (numberlocation (lfl lfr rfl rfr))
		      (overstruck :number)
		      (pagebreak (off before after around untilodd untileven))
		      (pageheading :boolean)
		      (pageheadings :boolean)
		      (rightmargin :horizontal-distance)
		      (savebox :none)
		      (script :vertical-distance)
		      (scriptpush :boolean)
		      (sink :vertical-distance)
		      (size :number)
		      (slant :number)
		      (spaces (kept compact ignored tab))
		      (spacing :vertical-distance)
		      (specialcase :text)
		      (spread :vertical-distance)
		      (tabexport :boolean)
		      (topmargin :vertical-distance)
		      (underline (off alphanumeric nonblank all))
		      (unnumbered :none)
		      (visible :none)
		      (widestblank :horizontal-distance)
		      (within :counter-name)
		      (BoxTM vertical-distance)
		      (BoxBM vertical-distance)
		      (BoxLM horizontal-distance)
		      (BoxRM horizontal-distance)
		      (BoxType T)
		      )
  :undisplayed? T :internal t)

(define-sage-command 1DefineBox
0		     ((name :symbol)
		      &key
		      (left Line-Type)
		      (top Line-Type)
		      (right Line-Type)
		      (bottom Line-Type)
		      (horizontal Line-Type)
		      (vertical Line-Type)
		      (all Line-Type))
  :internal t :pretty-name "DefineBox")

(define-sage-command 1DefineLineType
0		     ((name :symbol)
		      &key
		      (weight :number)
		      (groove :number)
		      #+Ignore #+Ignore #+Ignore
		      (halftone  :ignore)
		      (character :ignore)
		      (rawfont   :ignore)
		      )
  :pretty-name "DefineLineType" :internal t)

(define-sage-command 1defline-section 0((topic T) &all (title contents-list))
  :ends-with-newline? T :starts-with-printing-char? T)

(define-sage-command 1defthingx
0		     (&key (spec :contents-list) (args :contents-list)
			   (type :contents-list) (noise :contents-list)
			   (fname :contents-list))
  :text? T :ends-with-newline? T :starts-with-printing-char? T :internal t)

(define-sage-command 1defthingz
0		     (&key (sym :contents-list) (args :contents-list) (type :contents-list))
  :text? T :ends-with-newline? T :starts-with-printing-char? T :internal t)

(define-sage-command 1Device0 ((device :device-name))
  :undisplayed? T :internal t)

(define-sage-command 1Disable0 ((portion :text))
  :undisplayed? T :internal t)

(define-sage-command 1DynamicText0 ((function :symbol))
  :text? t :starts-with-printing-char? t :pretty-name "DynamicText") 

(define-sage-command 1Em0 ()
  :text? T :starts-with-printing-char? T :internal t)

(define-sage-command 1Enable0 ((portion :text))
  :undisplayed? T :internal t)

(define-sage-command 1Equate0 (&any-keys (cmds-or-envr :cmd-or-envr-name))
  :undisplayed? T :internal t)

(define-sage-command 1FontFamily0 ((fontfamily :text))
  :undisplayed? T :internal t)

(define-sage-command 1Foot0 (&all (footnote :contents-list))
  :text? T :starts-with-printing-char? T)

;;; commented out 2/15/85 by York on the eve of rel 6.0
;;; Sage just throws this command away and Scribe has no @Footnote
;;; command, so this probably isn't being used and is a mistake.
;(define-sage-command 1Footnote0 (&all (footnote :contents-list))
;  :text? T :starts-with-printing-char? T)

(define-sage-command 1Goto0 ((distance :horizontal-distance)) :internal t)

(define-sage-command 1Hinge0 ())

(define-sage-command 1Hpos0 ((distance :horizontal-distance)) :internal t)

(define-sage-command 1Hsp0 ((distance :horizontal-distance)) :internal t)

;;for Scribe checking macro parameters
(define-sage-command 1Imbed0 ((name :text) &key (def :contents-list) (undef :contents-list))
  :undisplayed? T :internal t)

;;---Should be sort of like unexpanded-reference-gbox.
(define-sage-command 1Include0 ((filename :text))
  :undisplayed? T :internal t)

(define-sage-command 1Index0 (&all (entry :contents-list))
  :undisplayed? T)

;; Like Index, but with no page number
(define-sage-command 1IndexPrimary0 (&all (entry :contents-list))
  :undisplayed? T :pretty-name "IndexPrimary")

(define-sage-command 1IndexSecondary0 (&key (primary :contents-list) (secondary :contents-list))
  :undisplayed? T :pretty-name "IndexSecondary")

(define-sage-command 1IndexEntry
0		     (&key (key :text) (entry :contents-list) (number :contents-list) (record :text))
  :undisplayed? T :pretty-name "IndexEntry" :internal t)

(define-sage-command 1IndFinalPage0 ()
  :undisplayed? T :internal t :pretty-name "IndFinalPage")

(define-sage-command 1Itag0 ((code :text))
  :undisplayed? T :internal t)

(define-sage-command 1L0 (&all (string :string-for-lisp-reading))
  :text? t :starts-with-printing-char? t)

(define-sage-command 1Label0 ((code :text))
  :undisplayed? T)

(define-sage-command 1LayeredError0 ((error-name :text)
				   (lisp-error-flavor :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T :pretty-name "LayeredError")

(define-sage-command 1Lisp0 (&all (form :text))
  :text? T :starts-with-printing-char? T)

(define-sage-command 1Majorpart0 (&all (title :contents-list))
  :text? T :ends-with-newline? () :starts-with-printing-char? T :pretty-name "MajorPart")

(define-sage-command 1Make0 ((type :document-type) &key (form :number))
  :undisplayed? T :internal t)

(define-sage-command 1Message0 (&all (message :text))
  :undisplayed? T)

(define-sage-command 1Modify
0		     ((environment :cmd-or-envr-name)
		      ;;---This list is (almost) the same as that in 1Define0.  Both should
		      ;;get modified together, and both should be replaced by something
		      ;;driven off the attribute database.
		      &key
		      (use :cmd-or-envr-name)	;This should come first
		      (above :vertical-distance)
		      (afterentry :contents-list)
		      (afterexit :contents-list)
		      (anchor :none)
		      (backgroundcolor :text)
		      (beforeentry :contents-list)
		      (beforeexit :contents-list)
		      (below :vertical-distance)
		      (blanklines (break hinge hingebreak hingekeep ignore ignored kept))
		      (boldface (false off no overstruck tilde))
		      (bottommargin :vertical-distance)
		      (boxed :none)
		      (break (after around before off))
		      (capitalized :boolean)
		      (centered :boolean)
		      (color :text)
		      (columnmargin :horizontal-distance)
		      (columns :positive-integer)
		      (columnwidth :horizontal-distance)
		      (continue (:none allowed force off ()))
		      (copy :cmd-or-envr-name)
		      (counter :counter-name)
		      (crbreak :boolean)
		      (crspace :none)
		      (eofok :boolean)
		      (facecode :text)
		      (fill :none)
		      (fixed :vertical-distance)
		      (float :none)
		      (floatpage :none)
		      (flushleft :none)
		      (flushright :none)
		      (font :text)
		      (foot :none)
		      (free :none)
		      (group :none)
		      (hyphenbreak :boolean)
		      (hyphenation :boolean)
		      (increment :counter-name)
		      (indent :horizontal-distance)
		      (indentation :horizontal-distance)
		      (initialize :contents-list)
		      (invisible :none)
		      (justification :boolean)
		      (leadingspaces (compact ignored kept))
		      (leftmargin :horizontal-distance)
		      (linewidth :horizontal-distance)
		      (longlines (chop keep wrap))
		      (need :vertical-distance)
		      (nofill :none)
		      (numbered :template)
		      (numberfrom :number)
		      (numberlocation (lfl lfr rfl rfr))
		      (overstruck :number)
		      (pagebreak (off before after around untilodd untileven))
		      (pageheading :boolean)
		      (pageheadings :boolean)
		      (rightmargin :horizontal-distance)
		      (savebox :none)
		      (script :vertical-distance)
		      (scriptpush :boolean)
		      (sink :vertical-distance)
		      (size :number)
		      (slant :number)
		      (spaces (kept compact ignored tab))
		      (spacing :vertical-distance)
		      (specialcase :text)
		      (spread :vertical-distance)
		      (tabexport :boolean)
		      (topmargin :vertical-distance)
		      (underline (off alphanumeric nonblank all))
		      (unnumbered :none)
		      (visible :none)
		      (widestblank :horizontal-distance)
		      (within :counter-name)
		      (BoxTM vertical-distance)
		      (BoxBM vertical-distance)
		      (BoxLM horizontal-distance)
		      (BoxRM horizontal-distance)
		      (BoxType T)
		      (BoxFlushRight boolean))
  :undisplayed? T)

(define-sage-command 1NewColumn0 ()
  :ends-with-newline? T :starts-with-printing-char? T :text? t)

(define-sage-command 1NewPage0 (&optional ((n 0) :nonnegative-integer))
  :ends-with-newline? T :starts-with-printing-char? T :text? t)

(define-sage-command 1Noop0 ()
  :undisplayed? T :internal t)

(define-sage-command 1Note0 (&all (endnote :contents-list))
  :text? T :starts-with-printing-char? T)

;;Prints the text then moves "cursor" back to its start
(define-sage-command 1OVP0 (&all (text :contents-list))
  :text? T :starts-with-printing-char? T :internal t :pretty-name "OVP")

(define-sage-command 1OP0 (&all (text :contents-list))
  :definition ovp				;It took some archaeology to find this out.
  :text? T :starts-with-printing-char? T :internal t :pretty-name "OP")

(define-sage-command 1PageFooting
0		     (&key (left :contents-list) (center :contents-list)
			   (right :contents-list) (immediate :none)
			   (even :none) (odd :none) (line :contents-list))
  :undisplayed? T :pretty-name "PageFooting")

(define-sage-command 1PageHeading
0		     (&key (even :none) (odd :none) (immediate :none)
			   (left :contents-list) (center :contents-list)
			   (right :contents-list)
			   (line :contents-list))
  :undisplayed? T :pretty-name "PageHeading")

(define-sage-command 1PageRef0 ((code :text))
  :text? T :starts-with-printing-char? T :pretty-name "PageRef")

(define-sage-command 1Parm0 ((text :text))
  :undisplayed? T :internal t)

(define-sage-command 1ParmQuote0 ((text :text))
  :undisplayed? T :internal t :pretty-name "ParmQuote")

(define-sage-command 1Part0 ((partname :text) &key (root :text))
  :undisplayed? T :internal t)

(define-sage-command 1PermanentString0 (&any-keys (strings :contents-list))
  :undisplayed? T :pretty-name "PermanentString")

(define-sage-command 1Picture0 (&key (size :vertical-distance) (regis :text))
  :ends-with-newline? T :starts-with-printing-char? T :internal t)

(define-sage-command 1Place0 ((portion :text))
  :text? T :starts-with-printing-char? T :internal t)

(define-sage-command 1PlainHeadings0 ()
  :undisplayed? T :internal t :pretty-name "PlainHeadings")

(define-sage-command 1PlainHeadingsNow0 ()	;        hee hee hee
  :undisplayed? T :internal t :pretty-name "PlainHeadingSnow")

(define-sage-command 1Presentation0 (&key (kind (start end))
					(presentation-type t)
					(presentation-object t)
					(presentation-options t))
  :undisplayed? t)

(define-sage-command 1Process0 (&key (bibliography :none) (pageheadings :none))
  :undisplayed? T :internal t)

(define-sage-command 1Ref0 ((code :text))
  :text? T :starts-with-printing-char? T)

;;Causes text to be flushed right against the global right margin
(define-sage-command 1rfstr0 (&all (text :contents-list))
  :text? T :ends-with-newline? T :starts-with-printing-char? T :internal t)

;;Causes text to be flushed left against the prevailing right margin
(define-sage-command 1rmstr0 (&all (text :contents-list))
  :text? T :starts-with-printing-char? T :internal t)

(define-sage-command 1Section0 (&all (title :contents-list))
  :text? T :ends-with-newline? () :starts-with-printing-char? T)

(define-sage-command 1Appendix0 (&all (title :contents-list))
  :text? T :ends-with-newline? () :starts-with-printing-char? T)

(define-sage-command 1appendixsection0 (&all (title :contents-list))
  :text? T :ends-with-newline? () :starts-with-printing-char? T
  :pretty-name "AppendixSection")

(define-sage-command 1SectionRef0 ((code :text))
  :text? T :starts-with-printing-char? T)

(define-sage-command 1Send0 (&key (portion :text))
  :undisplayed? T :internal t)

(define-sage-command 1SendEnd0 (&key (portion :text))
  :undisplayed? T :internal t)

(define-sage-command 1Set0 (&any-keys (values :text))
  :undisplayed? T)

(define-sage-command 1SpecialFont0 (&any-keys (files :text))
  :undisplayed? T :internal t :pretty-name "SpecialFont")

(define-sage-command 1String0 (&any-keys (strings :contents-list))
  :undisplayed? T)

(define-sage-command 1Subsection0 (&all (title :contents-list))
  :text? T :ends-with-newline? () :starts-with-printing-char? T)

(define-sage-command 1SubSubSection0 (&all (title :contents-list))
  :text? T :ends-with-newline? () :starts-with-printing-char? T
  :pretty-name "SubSubSection")

(define-sage-command 1TabClear0 () :pretty-name "TabClear")

(define-sage-command 1TabDivide0 ((n :positive-integer)) :pretty-name "TabDivide")

(define-sage-command 1Tabs0 (&list-of (tabs :horizontal-distance)))

(define-sage-command 1Tabset0 (&list-of (tabs :horizontal-distance)))

(define-sage-command 1Tabstops0 (&list-of (tabs :horizontal-distance)))

(define-sage-command 1Tag0 ((code :text))
  :undisplayed? T)

(define-sage-command 1TextForm0 (&any-keys (template :contents-list))
  :undisplayed? T :internal t :pretty-name "TextForm")

(define-sage-command 1TitleRef0 ((code :text))
  :text? T :starts-with-printing-char? T :pretty-name "TitleRef")

(define-sage-command 1UnindentParagraph0 () :internal t :pretty-name "UnindentParagraph")

(define-sage-command 1Unnumbered0 ((text :text))
  :undisplayed? T)

(define-sage-command 1Use0 (&any-keys (ignored :text))
  :undisplayed? T :internal t)

(define-sage-command 1Value0 ((name :text))
  :text? T :starts-with-printing-char? T)

;; Internal use by the section commands
(define-sage-command 1counter-value-as-number0 ((counter-name :text))
  :text? T :starts-with-printing-char? T)
(define-sage-command 1counter-value-as-reference0 ((counter-name :text))
  :text? T :starts-with-printing-char? T)

(define-sage-command 1SimpleTableSpecs0 (&key (hrules :text) (vrules :text))
  :pretty-name "SimpleTableSpecs"
  )


;;; For the next bunch, DON'T make the arguments bold, or the symbols
;;; will get interned with bold characters in their pnames.
(define-sage-command \! :none :definition save-absolute-horizontal-position)

(define-sage-command \) :none :definition replicate-pattern-aligned
		     :text? T :starts-with-printing-char? T)

(define-sage-command \# :none :definition missing-special-character
		     :text? T :starts-with-printing-char? T)

(define-sage-command \$ :none :definition dynamic-left-margin)

(define-sage-command \& :none :definition replicate-pattern
		     :text? T :starts-with-printing-char? T)

(define-sage-command \* :none :definition force-line-break
		     :ends-with-newline? T)

(define-sage-command \. :none :definition abbreviation-period
		     :text? T :starts-with-printing-char? T)

(define-sage-command / :none :definition move-to-saved-abs-horizontal-position)

(define-sage-command \: :none :definition force-end-of-sentence)

(define-sage-command \= :none :definition collect-centering)

(define-sage-command \> :none :definition collect-right-flushing)

(define-sage-command \\ :none :definition tab-to-tab-stop)

(define-sage-command ^ :none :definition dynamic-tab-stop)

(define-sage-command \| :none :definition permit-word-break)

(define-sage-command \~ :none :definition ignore-white-space :internal t)

(define-sage-command \@ :none :definition literal-atsign
		     :text? T :starts-with-printing-char? T :internal t)

(define-sage-command | | :none :definition literal-space
		     :text? T :starts-with-printing-char? T :internal t)

(define-sage-command \; :none :definition no-op :internal t)

;;This is for internal use, hence the included hyphen in its name
(define-sage-attribute 1Paper-Width0 horizontal-distance physical-attributes () paper-width)

(define-sage-attribute 1Font0 :symbol font-environment () font-family)

(define-sage-attribute 1FaceCode0 :symbol font-environment (:pretty-name "FaceCode") face-code)

(define-sage-attribute 1Size0 vertical-distance font-environment () font-size)

(define-sage-attribute 1Above0 vertical-distance formatting-environment () minimum-above-spacing)

(define-sage-attribute 1AfterEntry0 contents-list formatting-environment
		       (:internal t :pretty-name "AfterEntry")
		       process-text-after-entry)

(define-sage-attribute 1AfterExit0 contents-list formatting-environment
		       (:internal t :pretty-name "AfterExit")
		       process-text-after-exit)

(define-sage-attribute 1Anchor0 :none formatting-environment
		       (:internal t)
		       (setq float-disposition 'group))	;anchor is the same as group

(define-sage-attribute 1Anchored0 :none formatting-environment
		       (:internal t)
		       (setq float-disposition 'group))	;anchored is the same as group

(define-sage-attribute 1BeforeEntry0 contents-list formatting-environment
		       (:internal t :pretty-name "BeforeEntry")
		       process-text-before-entry)

(define-sage-attribute 1BeforeExit0 contents-list formatting-environment
		       (:internal t :pretty-name "BeforeExit")
		       process-text-before-exit)

(define-sage-attribute 1Below0 vertical-distance formatting-environment () minimum-below-spacing)

(define-sage-attribute 1Blanklines0 (break hinge hingebreak hingekeep ignore ignored kept)
  formatting-environment
  (:pretty-name "BlankLines")
  (lambda (arg)
    (setq blank-line-action
	  (ecase arg
	    (break 'paragraph-break)
	    (hinge 'hinge)
	    (hingebreak 'break-and-hinge)
	    (hingekeep 'keep-and-hinge)
	    ((ignore ignored) 'ignored)
	    (kept 'keep-line)))))

(define-sage-attribute 1Boldface0 (false off no overstruck tilde)
  formatting-environment
  (:internal t)
  (lambda (arg)
    (setq bold-implementation
	  (ecase arg
	    ((false off no) 'off)
	    (overstruck 'overstruck)
	    (tilde 'tilde)))))

(define-sage-attribute 1BottomMargin0 vertical-distance formatting-environment
		       (:pretty-name "BottomMargin")
		       bottom-margin)

;; BoxTM etc are collected after the other attributes

(define-sage-attribute 1Boxed0 :none
  formatting-environment (:internal T)
  (setq block-disposition 'group))		;This has to do with multiple columns

(define-sage-attribute 1Break0 (:none around after before off ())
  formatting-environment ()
  (lambda (arg)
    (multiple-value-setq (break-on-entry break-on-exit)
      (ecase arg
	((:none around NIL) (values T T))
	((after) (values () T))
	((before) (values T ()))
	((off) (values () ()))))))

(define-sage-attribute 1Capitalized0 (:none on off no initial T nil)
  formatting-environment ()
  (lambda (arg)
    (ecase arg
      ((:none on T) (setq transformation 'capitalized))	;should have uppercase also
      ((off no nil) (setq transformation 'none))
      (initial (setq transformation 'initial-capitalized)))))

(define-sage-attribute 1Centered0 :none formatting-environment ()
		       (setq fill-mode 'centered
			     leading-space-action 'discarded))

(define-sage-attribute 1Columnmargin0 horizontal-distance formatting-environment
		       (:pretty-name "ColumnMargin")
		       column-margin)

(define-sage-attribute 1Columns0 integer formatting-environment () columns)

(define-sage-attribute 1ColumnWidth0 horizontal-distance formatting-environment
		       (:pretty-name "ColumnWidth")
		       column-width)

(define-sage-attribute 1Continue0 (:none allowed force off ())
  formatting-environment ()
  (lambda (arg)
    (setq resume-paragraph-on-exit
	  (ecase arg
	    ((:none allowed) 'permitted)
	    (force 'required)
	    ((off NIL) 'no)))))

(define-sage-attribute 1Counter0 counter
  formatting-environment ()
  (lambda (arg)
    (let ((the-counter (find-or-create-counter raw-arg)))
      (setq environment-counter the-counter))))

(define-sage-attribute 1CounterEnvironment0 cmd-or-envr-name formatting-environment
		       (:pretty-name "CounterEnvironment")
		       counter-environment)

(define-sage-attribute 1CRBreak0 :none
  formatting-environment
  (:pretty-name "CRBreak")
  (setq carriage-return-action 'paragraph-break))	;used in @verse

(define-sage-attribute 1CRSpace0 :none formatting-environment
		       (:pretty-name "CRSpace")
		       (setq carriage-return-action 'spaces))

(define-sage-attribute 1eofok0 :none formatting-environment
		       (:internal t)
		       (setq accept-premature-end T))

(define-sage-attribute 1Fill0 :none formatting-environment ()
		  (setq fill-mode 'fill
			leading-space-action 'discarded))

(define-sage-attribute 1Fixed0 vertical-distance-relative
  formatting-environment ()
  (lambda (arg)
    (setq fixed-location arg)			;coerce-to-type somehow?
    (setq float-disposition 'fixed-location)))

(define-sage-attribute 1Float0 :none formatting-environment ()
		       (setq float-disposition 'float-defer))

(define-sage-attribute 1FloatPage0 :none formatting-environment
		       (:pretty-name "FloatPage")
		  (setq float-disposition 'float-whole-page))

(define-sage-attribute 1FlushLeft0 :none formatting-environment
		       (:pretty-name "FlushLeft")
		  (setq fill-mode 'flushleft
			leading-space-action 'retained))

(define-sage-attribute 1FlushRight0 :none formatting-environment
		       (:pretty-name "FlushRight")
		  (setq fill-mode 'flushright
			leading-space-action 'discarded))

(define-sage-attribute 1Foot0 :none formatting-environment
		       (:internal t)
		       (setq block-disposition 'foot))

(define-sage-attribute 1Free0 :none formatting-environment () (setq float-disposition 'free))

(define-sage-attribute 1Group0 :none formatting-environment () (setq float-disposition 'group))

(define-sage-attribute 1Hyphenation0 boolean formatting-environment () hyphenation)

(define-sage-attribute 1HyphenBreak0 boolean formatting-environment
		       (:pretty-name "HyphenBreak") hyphen-may-cause-line-break)

(define-sage-attribute 1Increment0 counter formatting-environment () environment-counter)

(define-sage-attribute 1Indent0 horizontal-distance-relative formatting-environment () indention)

(define-sage-attribute 1Indentation0 horizontal-distance-relative formatting-environment ()
		       indention)

(define-sage-attribute 1Initialize0 contents-list formatting-environment (:internal t)
		       process-text-after-entry)

(define-sage-attribute 1Invisible0 :none formatting-environment () (setq visibility ()))

(define-sage-attribute 1Justification0 boolean formatting-environment () justification)

(define-sage-attribute 1LeadingSpaces0 (compact ignored kept)
  formatting-environment
  (:pretty-name "LeadingSpaces")
  (lambda (arg)
    (setq leading-space-action
	  (ecase arg
	    (compact 'compressed)
	    ((ignore ignored) 'discarded)
	    (kept 'retained)
	    (null 'discarded)			;---is supposed to not cause word breaks
	    (nobreak 'retained-significant)))))

(define-sage-attribute 1LeftMargin0 horizontal-distance formatting-environment
		       (:pretty-name "LeftMargin")
		       left-margin)

(define-sage-attribute 1LineWidth0 horizontal-distance formatting-environment
		       (:pretty-name "LineWidth")
		       line-width)

(define-sage-attribute 1LongLines0 (chop wrap keep) formatting-environment
		       (:pretty-name "LongLines")
		       overlong-line-action)

;;Values for this attribute are generated internally
(define-sage-attribute 1Mouse-Sensitivity0 T mouse-sensitivity-environment ()
  (lambda (arg)
    (setq mouse-sensitivity
	  (if (eq arg T)
	      ;;If we're setting sensitivity to T, and the superior already is sensitive,
	      ;;use the superior's sensitivity.  This handles the case of a ref to
	      ;;"The @L(loop) Iteration Macro" not dividing into three regions, where
	      ;;the @L generates (mouse-sensitivity T).
	      (or (send (send self :superior) :mouse-sensitivity) T)
	      arg))))

(define-sage-attribute 1NarrowestBlank0 horizontal-distance formatting-environment
		       (:pretty-name "NarrowestBlank")
		       narrowest-blank)

(define-sage-attribute 1Need0 vertical-distance formatting-environment () page-need)

(define-sage-attribute 1Nofill0 :none formatting-environment ()
		  (setq fill-mode 'flushleft
			leading-space-action 'retained))

(define-sage-attribute 1Numbered0 :template
  formatting-environment ()
  (lambda (arg)
    (send self :set-attached-counter-if-necessary)
    (send attached-counter :set-attribute 'numbered arg)))

(define-sage-attribute 1NumberFrom0 integer
  formatting-environment
  (:pretty-name "NumberFrom")
  (lambda (arg)
    (send self :set-attached-counter-if-necessary)
    (send attached-counter :set-attribute 'init arg)))

(define-sage-attribute 1NumberLocation0 (lfl lfr rfl rfr) formatting-environment
		       (:pretty-name "NumberLocation")
		       number-location)

(define-sage-attribute 1Overstruck0 integer
  formatting-environment
  (:internal t)
  (lambda (arg)
    (setq overstrikes-for-bold arg
	  bold-implementation 'overstruck)))

(define-sage-attribute 1PageBreak0 (off before after around untilodd untileven ())
  formatting-environment
  (:pretty-name "PageBreak")
  (lambda (arg)
    (ecase arg
      ((off NIL) (setq page-break-on-entry 'no page-break-on-exit ()))
      (before (setq page-break-on-entry 'yes page-break-on-exit ()))
      (after (setq page-break-on-entry 'no page-break-on-exit T))
      (around (setq page-break-on-entry 'yes page-break-on-exit T))
      (untilodd (setq page-break-on-entry 'until-odd page-break-on-exit ()))
      (untileven (setq page-break-on-entry 'until-even page-break-on-exit ())))))

(define-sage-attribute 1PageHeading0 boolean formatting-environment
		       (:pretty-name "PageHeading" :internal t) running-heads)

(define-sage-attribute 1PageHeadings0 boolean formatting-environment
		       (:pretty-name "PageHeadings")
		       running-heads)

(define-sage-command 1PageTabs
0		     (&key (first :contents-list) (second :contents-list)
			   (ylocation :vertical-distance))
  :undisplayed? T :pretty-name "PageTabs")

(define-sage-attribute 1ParagraphBreaks0 (normal limited) formatting-environment
		       (:pretty-name "ParagraphBreaks")
		       paragraph-breaks)

(define-sage-attribute 1PictureScale0 scale formatting-environment
		       (:pretty-name "PictureScale")
		       picture-scale)

(define-sage-attribute 1PresentationType0 presentation-type formatting-environment
		       (:pretty-name "PresentationType")
		       presentation-type)

(define-sage-attribute 1PresentationObject0 presentation-object formatting-environment
		       (:pretty-name "PresentationObject")
		       presentation-object)

(define-sage-attribute 1Referenced0 :template
  formatting-environment ()
  (lambda (arg)
    (send self :set-attached-counter-if-necessary)
    (send attached-counter :set-attribute 'referenced arg)))

(define-sage-attribute 1RightMargin0 horizontal-distance formatting-environment
		       (:pretty-name "RightMargin")
		       right-margin)

(define-sage-attribute 1Script0 vertical-distance-relative formatting-environment ()
		  script-displacement)

(define-sage-attribute 1ScriptPush0 boolean formatting-environment
		       (:internal t :pretty-name "ScriptPush")
		       script-push)

(define-sage-attribute 1Sink0 vertical-distance formatting-environment () sink-margin)

(define-sage-attribute 1Spaces0 (ignored compact kept nobreak)
  formatting-environment ()
  (lambda (arg)
    (setq space-action
	  (ecase arg
	    ((ignore ignored) 'discarded)
	    ((normalize normalized) 'normalized)
	    (compact 'compressed)
	    (kept 'retained)
	    (nobreak 'retained-significant)))))

(define-sage-attribute 1Spacing0 vertical-distance formatting-environment () spacing)

(define-sage-attribute 1SpecialCase0 :symbol
  formatting-environment
  (:internal t :pretty-name "SpecialCase")
  (lambda (arg)
    (if (eq arg 'openbefore)
	(setq paragraph-breaks 'limited)
	(zl:fsignal "What does this SpecialCase arg mean?  It is being ignored.  ~S" arg))))

(define-sage-attribute 1Spread0 vertical-distance formatting-environment () paragraph-spread)

(define-sage-attribute 1TabExport0 boolean formatting-environment
		       (:pretty-name "TabExport") tab-export)

(define-sage-attribute 1TopMargin0 vertical-distance formatting-environment
		       (:pretty-name "TopMargin")
		       top-margin)

(define-sage-attribute 1Underline0 (off alphanumeric alphanumerics nonblank all)
  formatting-environment () underlining)

(define-sage-attribute 1Unnumbered0 :none formatting-environment () (setq attached-counter ()))

(define-sage-attribute 1Use0 cmd-or-envr-name	;---Need to worry about compiled environments
  formatting-environment ()
  (lambda (arg) (send self :adjust
		      (let ((dd (lookup-directive-descriptor arg)))
			(if (null dd)
			    (error "Should have put the error check in ~
					lookup-directive-descriptor--- ~s" arg)
			    (dd-definition dd))))))

(define-sage-attribute 1VerticalJustificationAllowed0 (above below around none)
  vertical-justification-environment (:pretty-name "VerticalJustificationAllowed")
  vertical-justification-allowed)

(define-sage-attribute 1Visible0 boolean formatting-environment () visibility)

(define-sage-attribute 1WidestBlank0 horizontal-distance formatting-environment
		       (:pretty-name "WidestBlank")
		       widest-blank)

(define-sage-attribute 1Within0 counter
  formatting-environment ()
  (lambda (arg)
    (send self :set-attached-counter-if-necessary)
    (send attached-counter :set-attribute 'within arg)))

;;; ========================================
;;; Hooks
;;; ========================================

(define-sage-attribute 1lisp-splicing-hook0 :symbol lisp-splicing-hook-environment
		       lisp-splicing-hook)

;;; Vertical justification
(define-sage-attribute 1GroupNext0 boolean vertical-justification-environment
		       (:pretty-name "GroupNext")
		       group-next)

;;; ========================================
;;; Box and table attributes introduced in Scribe ver. 5
;;; ========================================

;; BoxXX
(define-sage-attribute BoxTM vertical-distance box-environment
		       (:pretty-name "BoxTM")
		       box-top-margin)
(define-sage-attribute BoxBM vertical-distance box-environment
		       (:pretty-name "BoxBM")
		       box-bottom-margin)
(define-sage-attribute BoxLM horizontal-distance box-environment 
		       (:pretty-name "BoxLM")
		       box-left-margin)
(define-sage-attribute BoxRM horizontal-distance box-environment 
		       (:pretty-name "BoxRM")
		       box-right-margin)
(define-sage-attribute BoxFlushRight boolean box-environment
		       (:pretty-name "BoxFlushRight")
		       box-flush-right)

;; ---BoxType, instead of Text, wants something of type BoxType, which is the set
;; of things defined by DefineBox.
(define-sage-attribute BoxType Box-Type box-environment
		       (:pretty-name "BoxType")
		       (lambda (arg)
			 (setq box-type arg)
			 (when (eq (send self :float-disposition) 'free)
			   ;; ---
			   (sys:set-in-instance self 'float-disposition 'group))))

#|
(2 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")Other attributes: 
TableColumns
LineWidth MaxWidth MinWidth NumberAligned



Commands:
DefineLineType (name &key weight groove halftone
DefineChangeBar (bar-name &key LineType Text Obsolete)
DefineBox (name &key left right top bottom horizontal vertical all)
DefineRowFormat (BoxType Columns FlushBottom FlushTop LineType Name TableNumber)
NextEntry (AllColumns FirstColumn OtherColumns Boxed ColumnLined ColumnWidth 
		      FirstColumnWidth OtherColumnWidth FlushBottom FlushTop
		      HeadingBoxed RowLined TableNumber TopHeading ColumnHeadings)
TableHeading (Continued Immediate Line RowFormat)
TableID(name)
0|#

(define-sage-counter-attribute 1Alias0 counter aliased-counter)

(define-sage-counter-attribute 1Announced0 boolean announced)

(define-sage-counter-attribute 1ContentsForm0 :contents-list contentsform)

(define-sage-counter-attribute 1IncrementedBy0 (use tag reference magic) incremented-by)

(define-sage-counter-attribute 1Init0 integer
  (lambda (arg)
    (setq initial-value arg)
    ;;The 1- is because (counter :counter-number-gbox) increments the number (3 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")before0 use
    (send self :set-value (1- arg))))

(define-sage-counter-attribute 1Numbered0 :template template-as-number)

(define-sage-counter-attribute 1Outline0 boolean outline)

(define-sage-counter-attribute 1Referenced0 :template template-as-reference)

(define-sage-counter-attribute 1TitleForm0 :contents-list titleform)

(define-sage-counter-attribute 1Within0 counter
  (lambda (arg)
    ;; setq's parent-counter, and tells the parent about this child
    (find-or-create-counter raw-arg)
    (let ((the-counter (find-counter-named raw-arg)))
      (establish-counter-parental-bonding self the-counter))))

(define-sage-macro 1Newtabs0 generic generic (&list-of (tab :horizontal-distance))
		   `(@ list
		     (@ tabclear)
		     (@ tabset ,@tab)))

(define-sage-reference
  generic generic
  (&key (topic :contents-list) (type :symbol) (view :contents-list)
	(field :list-of-fields))
  :reference)

(define-sage-environment 1BodyStyle0 generic generic (:pretty-name "BodyStyle" :internal t)
			 '((Font BodyFont) (Spacing "13pts") (Spread "6pts")))
(define-sage-environment 1BodyStyle0 generic LM (:pretty-name "BodyStyle" :internal t)
			 '((Font Bodyfont) (Spacing 1line) (Spread 1line)))
(define-sage-environment 1TitleStyle0 generic generic (:pretty-name "TitleStyle" :internal t)
			 '((Spacing 1) (Spread "0.5lines") (Font TitleFont3)))
(define-sage-environment 1ContentsStyle0 generic generic
			 (:pretty-name "ContentsStyle" :internal t)
			 '((Spacing 1) (Spread "0.5lines") (Font TitleFont6)))
(define-sage-environment 1LargeStyle0 generic generic
			 (:pretty-name "LargeStyle" :internal t)
			 '((Spacing 1) (Spread "0.5lines") (Font TitleFont5)))
(define-sage-environment 1NoteStyle0 generic generic
			 (:pretty-name "NoteStyle" :internal t)
			 '((Spacing 1) (Spread "0.5lines") (Font SmallBodyFont) (FaceCode R)))
(define-sage-environment 1AboveBelowStyle0 generic generic
			 (:pretty-name "AboveBelowStyle" :internal t)
			 '((Above 1) (Below 1)))

;; Uses of this environment are generated by @Caption commands
(define-sage-environment 1CaptionEnv0 generic generic 
			 (:pretty-name "CaptionEnv" :internal t)
			 '(Fill
			    Break
			    (Continue Off)
			    (Indent 0)
			    (Use BodyStyle)
			    (Justification Off)
			    (Afterentry "@TabClear()")
			    (Use AboveBelowStyle)))
(define-sage-environment CaptionCounterEnv generic generic
			 (:pretty-name "CaptionCounterEnv" :internal t)
			 '()			;i.e., transparent by default
			 )

(define-sage-environment 1CrossRef0 generic generic
			 (:pretty-name "CrossRef")	;--- internal t? 
			 '((lisp-splicing-hook crossref-lisp-splicing-hook)))

;;; Crossreferences to books use this
(define-sage-environment 1crossreference-book-environment0 generic generic
			 ()
			 '((use i)))

;;; Crossreferences to sections use this
(define-sage-environment 1crossreference-section-environment0 generic generic
			 ()
			 '((afterentry "\"")
			   (beforeexit "\"")))


;; Uses of this environment are generated by processing Index 
(define-sage-environment 1IndexEnv0 generic generic
			 (:pretty-name "IndexEnv" :internal t)
			 '(Break
			    CrBreak
			    Fill
			    (BlankLines Kept)
			    (Justification Off)
			    (Columns 1)
			    (ColumnMargin 0.4in)
			    Boxed
			    (Above 2)
			    (Hyphenation Off)
			    (LineWidth "2.6in")
			    (Use NoteStyle)
			    (Spread "0lines")
			    (Spaces Kept)
			    (LeftMargin "+8")
			    (Indent "-8")))

(define-sage-environment 1PermutedIndexEnv0 generic generic
			 (:pretty-name "PermutedIndexEnv" :internal t)
			 '((use Format)
			   (use NoteStyle)
			   (longlines Wrap)
			   (indent "20picas")
			   (spacing ".8 lines")))

(define-sage-environment 1PermutedIndexHeaderEnv0 generic generic
			 (:pretty-name "PermutedIndexHeaderEnv" :internal t)
			 '((use MajorHeading)
			   Flushleft
			   (above "1")
			   (below "0")))

;; Uses of this environment are generated by processing Footnotes

(define-sage-environment 1S0 generic generic
			 ()
		    '((FACECODE S)
		      TABEXPORT))

(define-sage-environment 1Text0 generic generic
			 ()
		    '(FILL
		       JUSTIFICATION
		       (SPACES compact)
		       BREAK
		       (WIDESTBLANK "1.2char")))

(define-sage-environment 1Insert0 generic generic
			 (:internal t)
		    '(BREAK
		       CONTINUE
		       (ABOVE 0.5line)
		       (BELOW 0.5line)
		       (LEFTMARGIN "+1cm")
		       (RIGHTMARGIN "+4")
		       (SPACING 1)
		       (LONGLINES keep)
		       (BLANKLINES kept)))

(define-sage-environment 1Itemize0 generic generic
			 ()
		    '(BREAK
		       CONTINUE
		       FILL
		       (LEFTMARGIN "+2")
		       (INDENT "-2")
		       (RIGHTMARGIN "+0")
		       (NUMBERED "@@s(o) @,@@s(.) ")
		       (NUMBERLOCATION lfr)
		       (BLANKLINES break)
		       (SPACING 1)
		       (ABOVE 1)
		       (BELOW 1)
		       (SPREAD 1)
		       (PARAGRAPHBREAKS normal)))

(define-sage-environment 1Verbatim0 generic generic
			 ()
		    '(BREAK
		       CONTINUE
		       NOFILL
		       (SPACES Kept)
		       (ABOVE 1)
		       (BELOW 1)
		       (BLANKLINES kept)
		       (LONGLINES keep)
		       (SPACING 1)
		       (FACECODE T)))

(define-sage-environment 1Format0 generic generic
			 ()
		    '((FONT BodyFont)
		      BREAK
		      CONTINUE
		      NOFILL
		      (SPACES Kept)
		      (FACECODE R)
		      (BLANKLINES kept)
		      (LONGLINES keep)
		      (SPACING 1)
		      (JUSTIFICATION off)
		      (ABOVE 1)
		      (BELOW 1)))

(define-sage-environment 1R0 generic generic
			 ()
		    '((FACECODE R)
		      TABEXPORT))

(define-sage-environment 1I0 generic generic
			 ()
		    '((FACECODE I)
		      TABEXPORT))


(define-sage-environment 1HDG0 generic generic
			 (:pretty-name "HDG" :internal t)
		    '((FONT SmallBodyFont)
		      (FACECODE R)
		      (FIXED "+0.5inch")
		      NOFILL
		      (LEFTMARGIN 0)
		      UNNUMBERED
		      (UNDERLINE off)
		      (SPACING 1)
		      (USE I)
		      (TABEXPORT False)
		      (COLUMNS 1)
		      (COLUMNMARGIN 0)
		      (CAPITALIZED Off)
		      (RIGHTMARGIN 0)
		      (SPREAD 0)
		      (INDENT 0)
		      (INITIALIZE "@tabclear()")))

(define-sage-environment 1SimpleTable0 generic generic
			 (:pretty-name "SimpleTable")
			 ;; Dummy definition
			 '())

(define-sage-environment 1Table0 generic generic
			 ()
		    '(NOFILL
		       BREAK
		       (Continue Off)
		       (Spaces Kept)
		       (Use R)
		       (BlankLines kept)
		       (LONGLINES keep)
		       Float
		       (Above 1)
		       (Below 1)
		       (Counter TableCounter)
		       (NumberLocation LFL)
		      ))

(define-sage-environment 1TBS0 generic generic
			 (:pretty-name "TBS" :internal t)
		    '((FONT HEADINGFONT)
		      (FIXED "+0.5inch")
		      NOFILL
		      (LEFTMARGIN 0)
		      UNNUMBERED
		      (UNDERLINE off)
		      (SPACING 1)
		      (TABEXPORT False)
		      (COLUMNS 1)
		      (COLUMNMARGIN 0)
		      (CAPITALIZED Off)
		      (RIGHTMARGIN 0)
		      (SPREAD 0)
		      (INDENT 0)
		      (INITIALIZE "@tabclear()")))

(define-sage-environment 1Verse0 generic generic
			 ()
		    '((USE Insert)
		      (FONT BodyFont)
		      FILL
		      (SPACES Kept)
		      (LEADINGSPACES Kept)
		      (JUSTIFICATION off)
		      CRBREAK
		      (USE R)
		      (TABEXPORT False)
		      (INDENT "-3")
		      (SPREAD 0)
		      (LEFTMARGIN "+8")
		      (RIGHTMARGIN "+4")
		      (PARAGRAPHBREAKS normal)))

(define-sage-counter 1Page0 generic generic
		     '((NUMBERED "@1")
		       (REFERENCED "@1")
		       (INIT 1)))

(define-sage-environment 1plus0 generic generic
			 (:internal t)
		    '((SCRIPT "+0.3lines")
		      TABEXPORT
		      (FONT SmallBodyFont)))

(define-sage-environment 1+0 generic generic
		    '((USE plus)))

(define-sage-environment 1minus0 generic generic
			 (:internal t)
		    '((SCRIPT "-0.3lines")
		      TABEXPORT
		      (FONT SmallBodyFont)))

(define-sage-environment 1-0 generic generic
			 ()
		    '((USE minus)))

(define-sage-environment1 ActiveText0 generic generic
			 (:pretty-name "ActiveText" :internal t)
			 '((USE Transparent)
			   PresentationType
			   PresentationObject))

(define-sage-environment 1B0 generic GENERIC
			 ()
		    '((FACECODE B)
		      TABEXPORT))

(define-sage-environment 1BasicMargin0 generic generic
			 (:pretty-name "BasicMargin" :internal t)
		    '((LEFTMARGIN 7.0picas)
		      (INITIALIZE "@~")))

(define-sage-environment 1BI0 generic generic
			 (:pretty-name "BI")
		    '((FACECODE P)
		      TABEXPORT))

(define-sage-environment 1Block0 generic generic
			 (:internal t)
		    '((copy text)))

(define-sage-environment 1StandardBoxMargins0 generic generic
			 (:pretty-name "StandardBoxMargins" :internal t)
			 '((BoxTM 4points)
			   (BoxBM 4points)
			   (BoxLM 4points)
			   (BoxRM 4points)))

(define-sage-environment 1Box0 generic generic
			 ()
			 '((BoxType StandardBox)
			   (use StandardBoxMargins)))

(define-sage-environment 1BPage0 generic generic
			 (:pretty-name "BPage" :internal t)
		    '(FLOATPAGE
		       BREAK
		       CONTINUE))

(define-sage-environment 1BSpace0 generic generic
			 (:pretty-name "BSpace" :internal t)
		    '(BREAK
		       CONTINUE
		       BOXED
		       (ABOVE 0)
		       (BELOW 0)
		       NOFILL
		       (LEFTMARGIN 0)
		       (RIGHTMARGIN 0)))

(define-sage-environment 1C0 generic generic
			 ()
		    '(CAPITALIZED
		       (FACECODE C)
		       TABEXPORT))

(define-sage-environment 1Center0 generic generic
			 ()
		    '(BREAK
		       CONTINUE
		       (ABOVE 0.5line)
		       (BELOW 0.5line)
		       (SPACING 1)
		       (LEFTMARGIN 0)
		       (RIGHTMARGIN 0)
		       (TABEXPORT False)
		       CENTERED
		       (LONGLINES keep)
		       (BLANKLINES kept)
		       (afterentry "@tabclear()")
		       ))

(define-sage-environment 1Commentary0 generic generic
			 ()
			 '(invisible))

(define-sage-environment 1DefText0 symanual generic
			 (:pretty-name "DefText" :internal t)
			 '((Use Text)
			   (LeftMargin "+3picas")
			   (Above 0)
			   (Below 1)
			   (Indent 0)))

(define-sage-environment 1DefLine0 symanual generic
			 (:pretty-name "DefLine" :internal t)
			 '((Use I)
			   (indent "-7picas")
			   (LeftMargin "+7picas")
			   (RightMargin "+1.25in")
			   (Below "0")
			   (Break Before)
			   (Need "3lines")
			   (Justification Off)))

;; Used by Lisp-Dictionary book-design
(define-sage-environment 1DefLine-internal0 generic generic
			 ()
			 '(invisible))
(define-sage-environment 1DefLine-internal-complement0 generic generic
			 ()
			 ())
(define-sage-command 1DictionaryTabs
0		     ((style :text))
  ;; I could be really cute and make a ConEd user interface for accepting names
  ;; of these things out of the set defined by *dictionary-thumb-tab-specs*.
  :undisplayed? T :pretty-name "DictionaryTabs")

(define-sage-environment 1Description0 generic generic
			 ()
		    '(BREAK
		       (AFTERENTRY "@TABCLEAR()")
		       CONTINUE
		       (ABOVE 1)
		       (BELOW 1)
		       FILL
		       (LEFTMARGIN "+16")	;string, so Lisp reader won't throw away sign
		       (SPACES Compact)
		       (INDENT "-16")
		       (SPACING 1)
		       UNNUMBERED
		       (PARAGRAPHBREAKS normal)))

(define-sage-environment 1SetOff 0generic generic
			 (:pretty-name "SetOff")
			 '((Use Description)
			   (Use Box)
			   (BoxTM 6points)
			   (BoxBM 8points)
			   (Below 1.5)
			   (Font SmallBodyFont)
			   (Facecode B)))

(define-sage-environment 1Descript0 symanual generic
			 (:internal t)
		    '((USE Description)))

(define-sage-environment 1Display0 generic generic
			 ()
		    '((USE Insert)
		      NOFILL
		      (FACECODE R)
		      GROUP
		      (RIGHTMARGIN "+0")
		      (BLANKLINES Kept)
		      (SPACES Kept)))

(define-sage-environment 1Enumerate0 generic generic
			 ()
		    '((USE Itemize)
		      (LEFTMARGIN "+4")
		      (INDENT "-4")
		      (NUMBERED "@1. @,@a. @,@i. ")
		      (REFERENCED "@1@,@a@,@i")))

(define-sage-environment Checklist generic generic
			 ()
		    '((USE Itemize)
		      (LEFTMARGIN "+3")		;Total of two spaces would be better
		      (INDENT "-3")		;but the box is wider than "a character"
		      (NUMBERED "@@Begin[Box, BoxTM 0, BoxBM 0,]@@ @@End(Box)")
		      ))

;;;This would have to be done if there were any way to specify a DMP1 printer. (jun86)
;(define-sage-environment Checklist generic DMP1
;		    '((USE Itemize)
;		      (LEFTMARGIN "+4")
;		      (INDENT "-4")
;		      (NUMBERED "[@@ ]")))	;a real box would be better if available

;;;This is here to demonstrate sincerity.  The device type gets ignored by
;;;everything further down the line.  All formatting uses the generic device. (jun86)
;;;Since no one uses this, I commented it out -- doughty
;(define-sage-environment Checklist generic LGP2
;		    '((USE Itemize)
;		      (LEFTMARGIN "+4")
;		      (INDENT "-4")
;		      (NUMBERED "[@@ ]")))	;a real box would be better if available

(define-sage-environment 1Example0 generic generic
			 ()
		    '((USE Insert)
		      NOFILL
		      (SPACES Kept)
		      GROUP
		      (RIGHTMARGIN "+0")
		      (BLANKLINES Kept)
		      (FACECODE T)))

(define-sage-environment 1ActiveExample0 generic generic
			 (:pretty-name "ActiveExample")
		    '((USE Example)
		      (PresentationType 'active-example)
		      ))

(define-sage-command 1EndExampleCompiledPrologue 0()
  :ends-with-newline? T :starts-with-printing-char? T
  :pretty-name "EndExampleCompiledPrologue")

(define-sage-environment 1Equation0 generic generic
			 ()
		    '((USE Example)))

(define-sage-environment 1F0 generic generic
			 ()
		    '((FACECODE F)
		      TABEXPORT))

;;Commented out because facecode attribute was changed to be "symbol" instead of
;;string.  This is inconsistent with the :text designation for it in the definition
;;for DEFINE but maybe that doesn't matter.  In any case, when you try to load the
;;file with the following definitions in it, it blows out in validate-attribute-and-
;;value-type in symbol? because 0 is not a symbol. etc.  Maybe use /0 instead of 0?
;(define-environment 1F00 generic generic
;		    '((FONT UserFont)
;		      (FACECODE 0)
;		      TABEXPORT))
;
;(define-environment 1F10 generic generic
;		    '((FONT UserFont)
;		      (FACECODE 1)
;		      TABEXPORT))
;
;(define-environment 1F20 generic generic
;		    '((FONT UserFont)
;		      (FACECODE 2)
;		      TABEXPORT))
;
;(define-environment 1F30 generic generic
;		    '((FONT UserFont)
;		      (FACECODE 3)
;		      TABEXPORT))
;
;(define-environment 1F40 generic generic
;		    '((FONT UserFont)
;		      (FACECODE 4)
;		      TABEXPORT))
;
;(define-environment 1F50 generic generic
;		    '((FONT UserFont)
;		      (FACECODE 5)
;		      TABEXPORT))
;
;(define-environment 1F60 generic generic
;		    '((FONT UserFont)
;		      (FACECODE 6)
;		      TABEXPORT))
;
;(define-environment 1F70 generic generic
;		    '((FONT UserFont)
;		      (FACECODE 7)
;		      TABEXPORT))
;
;(define-environment 1F80 generic generic
;		    '((FONT UserFont)
;		      (FACECODE 8)
;		      TABEXPORT))
;
;(define-sage-environment 1F90 generic generic
;		    '((FONT UserFont)
;		      (FACECODE 9)
;		      TABEXPORT))

(define-sage-environment 1Figure0 generic generic
			 ()
			 '(NOFILL
			    BREAK
			    (Continue Off)
			    (Spaces Kept)
			    (Use R)
			    (BlankLines kept)
			    (LONGLINES keep)
			    float
			    (Above 1)
			    (Below 1)
			    (Counter FigureCounter)
			    (NumberLocation LFL)))

(define-sage-environment 1FileExample0 generic generic
			 (:pretty-name "FileExample")	;--- :Internal t?
		    '((COPY Verbatim)
		      (FONT SmallBodyFont)
		      (FACECODE F)
		      (LEFTMARGIN 1cm)))

(define-sage-environment 1Float0 generic generic
			 ()
		    '(float
		       BREAK))

(define-sage-environment 1Flushleft0 generic generic
			 (:pretty-name "FlushLeft")
		    '((COPY Format)
		      (LEFTMARGIN 0)))

(define-sage-environment 1FlushRight0 generic generic
			 (:pretty-name "FlushRight")
		    '((COPY center)
		      FLUSHRIGHT))

(define-sage-environment 1FnEnv0 generic generic
			 (:pretty-name "FnEnv" :internal t)
			 '((Use Text)
			   (Counter FootnoteCounter)
			   (Font SmallBodyFont)
			   (Above 1)
			   Foot
			   Crspace
			   (Use R)
			   (TabExport False)
			   (LeftMargin 0)
			   (RightMargin 0)
			   (Indent 2)
			   (Spread 1)
			   UnNumbered
			   (Spacing 1)
			   (Break off)))

(define-sage-environment 1Ftg0 generic generic
			 (:pretty-name "FTG" :internal t)
		    '((COPY HDG)
		      (FIXED "-0.75inches")))

(define-sage-environment 1FullPageFigure0 generic generic
			 (:pretty-name "FullPageFigure")
		    '((USE Figure)
		      FLOATPAGE
		      ))

(define-sage-environment 1FullPageTable0 generic generic
			 (:pretty-name "FullPageTable")
		    '((USE Table)
		      FLOATPAGE
		      ))

(define-sage-environment 1G0 generic generic
			 ()
		    '((FACECODE G)
		      TABEXPORT))

(define-sage-environment 1Group0 generic generic
			 ()
		    '(GROUP
		       BREAK))

(define-sage-environment 1Heading0 generic generic
			 ()
		    '((USE Center)
		      (FONT TitleFont3)
		      (FACECODE B)
		      (CONTINUE off)
		      (ABOVE 1)
		      (BELOW 1)
		      (NEED 0.8inch)))

(define-sage-environment 1HDX0 generic generic
			 (:pretty-name "HDX" :internal t)
			 '((Use TitleStyle)
			   ;; GDMF!  This horrible kludge
			   ;; is necessary to cause a PSEUDO-PARAGRAPH-BREAK gbox
			   ;; to be spliced in before the heading.
			   ;; This fixes:
			   ;;  a) Headings getting indented to the wrong place
			   ;;     (a mythical problem, perhaps)
			   ;;  b) Headings being treated improperly as widows
			   ;;     or orphans and put on the wrong side of the page
			   ;;     break boundary.
			   (LeftMargin "+.0001cm")
			   ;(LeftMargin 0)
			   (Indent 0)
			   Break
			   Fill
			   (Justification Off)
			   (Spaces Compact)
			   (FaceCode R)
			   GroupNext
			   (Need "4lines")
			   (Hyphenation Off)))

(define-sage-environment 1Hd00 generic generic
			 (:internal t)
			 '((Use HdX)
			   (Font TitleFont5)
			   (Sink "3in")
			   (Below "2in")
			   (LongLines Wrap)
			   Centered
			   (Capitalized T)
			   (PageBreak UntilOdd)))

(define-sage-environment 1Hd10 generic generic
			 (:internal t)
			 '((Use HdX)
			   (Font TitleFont5)
			   (Below "0.5inch")
			   (PageBreak UntilOdd)))

(define-sage-environment 1Hd1A0 generic generic
			 (:internal t)
			 '((use Hd1) Centered (PageBreak Before)))

(define-sage-environment 1Hd20 generic generic
			 (:internal t)
			 '((Use HdX)
			   (Font TitleFont3)
			   (Above "1cm")
			   (Below "0.7cm")
			   (Need "1.2 inches")
			   ;; In Scribe terms this is "Need 4 lines" but
			   ;; what does "4 lines" mean when dealing with
			   ;; variable height fonts?  1.2 inches is what we
			   ;; 3meant0 by that, so we say it.
			   ))
(define-sage-environment 1Hd30 generic generic
			 (:internal t)
			 '((Use HdX)
			   (Font TitleFont2)
			   (Above "0.25inches")
			   (Below "0.16inches")
			   ;; see comment for need on HD2
			   (Need "0.8 inches")))
(define-sage-environment 1Hd40 generic generic
			 (:internal t)
			 '((Use HdX)
			   (Font TitleFont2)
			   (Above "0.15inches")
			   (Below "0.1inches")
			   ;; see comment for need on HD2
			   (Need "0.7 inches")))

(define-sage-environment 1TCX0 generic generic
			 (:internal t)
			 '((Use ContentsStyle)
			   ;; see 1environment-specially-hacks-paragraphs
0			   ;; which tries to figure out whether pseudo-paragraph-breaks
			   ;; should be spliced in.
			   (LeftMargin "+.0001cm")
			   (RightMargin 5)
			   (Indent 0)
			   (Spread "0lines")
			   (Hyphenation Off)
			   (Above 0)
			   (Below 0)
			   Break
			   Fill
			   (Justification Off)
			   (Spaces Compact)
			   (Need "2lines")))

(define-sage-environment 1Tc00 generic generic
			 (:internal t)
			 '((Use TcX)
			   ;Centered
			   (Capitalized T)
			   (Above "1line")
			   (Below "0.5line")
			   (Need "2lines")
			   (TabExport False)))

(define-sage-environment 1Tc10 generic generic
			 (:internal t)
			 '((Use TcX)
			   (TabExport False)
			   (Above "1line")
			   (Below "0.5line")
			   (Need "2lines")))

(define-sage-environment 1Tc20 generic generic
			 (:internal t)
			 '((Use TcX) (LeftMargin "+4")
			   (TabExport False)
			   (Font TitleFont7)
			   (Need "2lines")))
(define-sage-environment 1Tc30 generic generic
			 (:internal t)
			 '((Use TcX) (LeftMargin "+9") (Font TitleFont7) (Need "2lines")))

(define-sage-environment 1TcC0 generic generic
			 (:internal t)
			 '((Use TcX) (Font TitleFont7) (TabExport False) (Need "2lines")))

(define-sage-environment 1Helb0 generic generic
			 (:internal t)
		    '((USE Hd3)
		      (ABOVE 0)
		      (BELOW 0)
		      (BREAK around)
		      (CONTINUE off)
		      (INITIALIZE "")
		      (BEFOREEXIT "")
		      (LEFTMARGIN 7picas)))

(define-sage-environment 1InputExample0 generic generic
			 (:pretty-name "InputExample")
		    '((COPY Example)
		      (FACECODE T)))

(define-sage-environment 1K0 generic generic
			 ()
		    '((FACECODE K)
		      TABEXPORT
		      (HYPHENBREAK off)))

;;; This is to simulate @L in facecode and capitalization, but
;;; without the mouse sensitivity or package-sensitive display.
;;; This shouldn't have a LONGLINES attribute.  Take it out when
;;; hyphenbreaks work.
(define-sage-environment 1LS0 generic generic
			 (:pretty-name "LS")
		    '((FACECODE L)
		      TABEXPORT
		      (LONGLINES keep)
		      (Hyphenation Off)
		      ))
;;;Used for formatting error messages for embedded products.
(define-sage-environment 1LayeredErrorEnv0 generic generic
			 (:pretty-name "LayeredErrorEnv" :internal nil)
			 '((Font BodyFont)
			   (LeftMargin "+5") (Above 0) (Below 2)
			   (Spacing "13pts") (Spread "6pts")))
(define-sage-environment 1Level0 generic generic
			 ()
		    '((USE Verse)
		      (LEFTMARGIN "+6")
		      (INDENT "-6")
		      (RIGHTMARGIN "+0")
		      (CONTINUE Off)
		      (ABOVE 0)
		      (BELOW 0)
		      (SPACING 2)
		      (NUMBERED "@I. @,@A. @,@1. @,@a. @,@i. @,@@ @@ @@ - @,@@ @@ @@ - ")
		      (NUMBERLOCATION LFL)))

(define-sage-environment 1M0 generic generic
			 ()
		    '((FACECODE M)
		      TABEXPORT))

(define-sage-environment 1MajorHeading0 generic generic
			 (:pretty-name "MajorHeading")
		    '((USE Center)
		      (FONT TitleFont5)
		      (FACECODE B)
		      (CONTINUE off)
		      (ABOVE 1)
		      (BELOW 1)
		      (NEED 1inch)))

(define-sage-environment 1MargLabel0 generic generic
			 (:pretty-name "MargLabel" :internal t)
		    '((FACECODE I)
		      NOFILL
		      (SPACES kept)
		      (BLANKLINES kept)
		      (ABOVE 0)
		      (BELOW 0)
		      (LEFTMARGIN "-16")
		      (INDENT 0)))

(define-sage-environment 1Multiple0 generic generic
			 ()
		    '((ParagraphBreaks Limited)))

(define-sage-environment 1OutputExample0 generic generic
			 (:pretty-name "OutputExample")
		    '((COPY Verbatim)
		      (LEFTMARGIN 2)))

(define-sage-environment 1P0 generic generic
			 ()
		    '((FACECODE P)
		      TABEXPORT))

(define-sage-environment 1ProgramExample0 generic generic
			 (:pretty-name "ProgramExample")
		    '((COPY Example)
		      (FACECODE T)))

(define-sage-environment 1PSpace0 generic generic
			 (:pretty-name "PSpace" :internal t)
		    '(BREAK
		       CONTINUE
		       BOXED
		       (ABOVE 0)
		       (BELOW 0.25inch)
		       NOFILL
		       (LEFTMARGIN 0)
		       (RIGHTMARGIN 0)))

(define-sage-environment 1Quotation0 generic generic
			 ()
		    '((COPY insert)
		      (FONT BodyFont)
		      FILL
		      (INDENT 0)
		      (FACECODE R)
		      (BLANKLINES break)
		      (SPACES Compact)))

(define-sage-environment 1Squeeze0 generic generic
			 (:internal t)
		    '((ABOVE 0.4lines)
		      (BELOW 0.4lines)
		      (SPREAD 0.3lines)))

(define-sage-environment 1SST0 generic generic
			 (:pretty-name "SST" :internal t)
		    '((USE BasicMargin)))

(define-sage-environment 1SubHeading0 generic generic
			 (:pretty-name "SubHeading")
		    '((USE Insert)
		      (INDENT 0)
		      (FONT TitleFont2)
		      (FACECODE B)
		      (LEFTMARGIN 0)
		      (JUSTIFICATION Off)
		      (CONTINUE off)
		      (ABOVE 1)
		      (BELOW 1)
		      (NEED 0.85inch)))

(define-sage-environment 1SubSubHeading0 generic generic
			 (:pretty-name "SubSubHeading")
		    '((USE Subheading)
		      (BELOW 0)
		      (FACECODE I)))

(define-sage-environment 1T0 generic generic
			 ()
		    '((FACECODE T)
		      TABEXPORT))

(define-sage-environment 1Transparent0 generic generic
			 ()
		    ())

(define-sage-environment 1U0 generic generic
			 ()
		    '((UNDERLINE NonBlank)
		      TABEXPORT))

(define-sage-environment 1UN0 generic generic
			 (:pretty-name "UN")
		    '((UNDERLINE Alphanumerics)
		      TABEXPORT))

(define-sage-environment 1UX0 generic generic
			 (:pretty-name "UX")
		    '((UNDERLINE All)
		      TABEXPORT))

(define-sage-environment 1UnderlineBox0 generic generic
			 (:pretty-name "UnderlineBox" :internal t)
			 '((BoxType StandardUnderline)
			   (BoxLM 0)
			   (BoxRM 0)
			   (BoxTM 0)
			   (BoxBM 0)))

(define-sage-environment 1W0 generic generic
			 ()
		    '((SPACES NoBreak)
		      TABEXPORT))

(define-sage-environment 1Zone0 generic generic
			 (:internal t)
		    '(BREAK
		       CONTINUE
		       NOFILL
		       (SPACES Kept)
		       (ABOVE 0)
		       (BELOW 0)
		       (SPACING 1)
		       (FONT BodyFont)
		       (FACECODE R)))

(define-sage-command 1Bar0 ())

(define-sage-environment 1Old-Bar-Environment0 generic generic
			 (:internal t)
		    '())

(define-sage-environment 1Debar0 generic generic
			 (:internal t)
		    '((BREAK around)
		      (CONTINUE off)
		      (LEFTMARGIN 6.75picas)
		      (ABOVE 0)
		      (BELOW 0)
		      (SPREAD 0)
		      (AfterEntry "@bar()")))

(define-sage-environment 1Description10 generic generic
			 (:internal t)
		    '((USE BasicMargin)
		      (INITIALIZE "@group<@debar[]@helb[Example]>")))

(define-sage-environment 1Description20 generic generic
			 (:internal t)
		    '((USE Description)
		      (LEFTMARGIN "+14picas")
		      (INDENT "-14picas")
		      (ABOVE 0.5)
		      (INITIALIZE "@group<@debar[]@helb[Reference]>")))

(define-sage-font 1BodyFont0 generic generic
  '())

(define-sage-font 1SmallBodyFont0 generic generic
  '())

(define-sage-font 1TitleFont10 generic generic
  '())

(define-sage-font 1TitleFont20 generic generic
  '())

(define-sage-font 1TitleFont30 generic generic
  '())

(define-sage-font 1TitleFont40 generic generic
  '())

(define-sage-font 1TitleFont50 generic generic
  '())

(define-sage-font 1UserFont0 generic generic
  '())

;;; Box & Line stuff
(define-line-type 1StandardLineType0 generic generic
		  :weight 1)
(define-line-type 1DoubleLineType0 generic generic
		  :weight 1 :groove 3)

(define-line-type dashedlinetype generic generic
		  :weight 2 :groove 5)

(define-box-type doublebox generic generic
		 :all dashedlinetype)

(define-box-type 1StandardBox0 generic generic
		 :all StandardLineType)
(define-box-type 1StandardRowLines0 generic generic
		 :top StandardLineType
		 :bottom StandardLineType)
(define-box-type 1StandardColumnLines0 generic generic
		 :left StandardLineType
		 :right StandardLineType)
(define-box-type 1StandardOverline0 generic generic
		 :top StandardLineType)
(define-box-type 1StandardUnderline0 generic generic
		 :bottom StandardLineType)
(define-box-type 1StandardInvisibleOverline0 generic generic
		 )

#||
;;Takes scribe database @define and so on and turns them into list structure in
;;current buffer.  Works very slowly.
;;This was a one-time thing.  It has suffered significant software rot.
(defun 1transform-scribe-db0 (doc-type device-type string)
  (with-input-from-string (in string)
    (let ((result (db-parse-and-return in)))
      (loop for (name type definition) in result
	    do
	    (zwei:insert-moving (zwei:point)
				(format nil "~%(define-directive~%  ~A ~A ~S ~S~%  "
					name
					(selectq type
					  (define ":environment")
					  (definefont ":font")
					  (counter ":counter")
					  (otherwise (format nil "unrecognized ~A" type)))
					doc-type device-type))
	    (let ((contents (format nil "'(~:{(~A ~A)~}))~2%" name definition)))
	      (zwei:insert (zwei:point) contents)
	      (zwei:com-indent-sexp)
	      (zwei:com-forward-sexp)
	      (zwei:com-down-indented-line))))))
||#

;;When you change this, do (setq *toplevel-environment-alist* ())
(defun1 get-toplevel-mods-and-next-level-definition0 (type)
  (case type
    ((:screen :dex :dex-background)
     (screen-toplevel-mods-and-next-level-definition))
    (otherwise
      (if (fdefinedp 'get-sage-printer-type-attribute)
	  (funcall
	    (get-sage-printer-type-attribute type :toplevel-mods-and-next-level-definition))
	  (cl:cerror "Redirect output to screen instead"
		     "Hardcopy system is not loaded")))))

;;; Move calls to set-sage-printer-type-attribute for lgp1, lgp2,
;;; and dmp1 to defs-hardcopy 14 Jul 89 MCW

(defun 1screen-toplevel-mods-and-next-level-definition0 ()
  (values '(;; To calculate Paper-Width: multiply inside width of DEX viewer pane
	    ;; (in pixels) by *microns-per-screen-pixel* and divide the result by
	    ;; *microns-per-inch*.
	    (Paper-Width "6.38in")
	    (LeftMargin ".58in")
	    (RightMargin ".5in"))
	  '(text (Indent "0")
		 (Use BodyStyle)
		 (LeftMargin 0)
		 (RightMargin 0)
		 (Justification On)
		 (Spaces Compact)
		 (Font CharDef)
		 (FaceCode R)
		 ;(Spacing "1line")
		 )))

(setq *toplevel-environment-alist* nil)

(defun 1paper-toplevel-mods-and-next-level-definition0 ()
  (values '((Paper-Width "8.5in")
	    (LeftMargin "8picas")
	    (RightMargin "8picas")
	    ;;Since the Sage formatter isn't really dealing with pages, it has no
	    ;;place to deal with the top and bottom page margins.  So, for now,
	    ;;these margins are converted to micas and put into the hardcopy stream,
	    ;;in the function FIND-HARDCOPY-STREAM-WITH-FONT-MAP.
	    (TopMargin "8picas")
	    (BottomMargin "6picas")
	    )
	  '(Text (Indent "0")
		 (Use BodyStyle)
		 (Justification On)
		 (Spaces Compact)
		 (Font CharDef)
		 (FaceCode R))))

;;;
;;;============================================================
;;; The new version of the database
;;;============================================================
;;;

(define-sage-environment 1headbar0 generic generic
			 (:pretty-name "HeadBar" :internal t)
			 '((use format)))

(define-book-design 13symanual-lgp20 ()
  (use generic-lgp2)
  (use defline)
  (define
    (BodyStyle (Font BodyFont) (Spacing "13pts") (Spread "6pts"))
    (Checklist (USE Itemize)
	       (LEFTMARGIN "+4")
	       (INDENT "-4")
	       (NUMBERED "@@Begin[Box, BoxTM 0, BoxBM 0,]@@ @@End(Box)"))
    (headbar
      (use Format)
      (break off)
      (fixed 3picas)
      (above 0)
      (below 0) 
      (facecode T)
      ;;(boxtype standardrowlines)
      (beforeentry "@tabclear()@&_")
      )
    )
  (modify
    (fnenv (font BodyFont))
    (hdg (font smallbodyfont))
    (ftg (font smallbodyfont)))
  (first
    (envr (text
	    (Paper-Width "8.5in")
	    (LeftMargin "8picas")
	    (RightMargin "8picas")
	    (TopMargin "8picas")
	    (BottomMargin "6picas")))
    (envr (text (Indent "0")
		(Use BodyStyle)
		;;(LineWidth "35picas")
		;;(LeftMargin "8.0picas")
		;;(BottomMargin "6.0picas")
		;;(TopMargin "11.5picas")
		;; Justification
		(Spaces Compact)
		(Font BodyFont)
		(FaceCode R)))
    (init
      ;; setup like @Send(Contents "@Set(Page=PreContPage)@String(---)@NewPage...")
      initialize-3symanual-lgp2))
    )
(note-book-design-specifics '3symanual :lgp2 '3symanual-lgp2)

(defun 1initialize-3symanual-lgp20 ()
  (macrolet ((in-boxes (&body body)
	       `(in-boxes-1 (named-lambda in-boxes () (idirs ,@body))))
	     (in (&body body)
	       `(making-sage-directives () (idirs ,@body))))
    (flet ((in-boxes-1 (continuation)
	     (declare (sys:downward-funarg continuation))
	     (making-sage-directives () 
	       (in-environment (T transparent boxtype StandardInvisibleOverline)
		 (in-environment (T transparent boxtype StandardOverline)
		   (funcall continuation))))))
      (sage-command () 'pageheading
		    `((odd T) (immediate T)
		      (left ,(in (value confidential)))
		      (right ,(in (value page)))
		      (center ())
		      (line ,(in-boxes
			       (value date)
			       (command collect-right-flushing)
			       (value chapter)
			       (command literal-space)))))
      (sage-command () 'pageheading
		    `((Even T) (immediate T)
		      (Left ,(in (value page)))
		      (right ,(in (value confidential)))
		      (center ())
		      (line ,(in-boxes (value chapter)
				       (command collect-right-flushing)
				       (value date)
				       (command literal-space)))))
      (sage-command () 'pagefooting '((immediate T)))
      (sage-command () 'style '((date "March 1952")))
      (sage-command () 'style '((hyphenation T) (hyphenbreak T)))
      3;0(symbolics-frontmatter)
      )))
		   
(define-book-design 1defline0 ()
  (define
    (1DefLine
0      (Use I)
      (indent "-7picas")
      (LeftMargin "+7picas")
      (RightMargin "+1.25in")
      (Below "0")
      (Break Before)
      (Need "3lines")
      (Justification Off))
    (1DefLine-internal0 invisible)		;used by Lisp-Dictionary book design
    (1defline-internal-complement0 )
    (1DefText
0      (Use Text)
      (LeftMargin "+3picas")
      (Above 0)
      (Below 1)
      (Indent 0))
    ))

(define-book-design 1screen-inner-styles0 ()
  (define
    (1BodyStyle0 (Font BodyFont) (Spacing "16pixels") (Spread "6pixels"))
    (1TitleStyle0 (use bodystyle))
    (1LargeStyle0 (use bodystyle))
    (1NoteStyle0 (use bodystyle))
    (1AboveBelowStyle0 (Above 1) (Below 1))
    ;; Footnotes
    (1FNEnv0 (use bodystyle)
	   (Use AboveBelowStyle)
	   ;; foot
	   CRSPACE 
	   (USE R) 
	   (TABEXPORT False) 
	   (LEFTMARGIN 0) (RIGHTMARGIN 0) 
	   (INDENT 2) 
	   (SPREAD 1) 
	   UNNUMBERED 
	   (SPACING 1) 
	   (BREAK off))
    ;; Uses of this environment are generated by @Caption commands
    (1CaptionEnv0 (use bodystyle)
		(Use AboveBelowStyle)
		Fill
		Break
		(Continue Off)
		(Indent 0)
		(Justification Off)
		(Afterentry "@TabClear()"))
    (CaptionCounterEnv
      ;; i.e., transparent
      )
    ;; Uses of this environment are generated by processing Index 
    (1IndexEnv0 (use bodystyle)
	      (Use AboveBelowStyle)
              Break CrBreak Fill (BlankLines Kept)
	      (Justification Off) (ColumnMargin 0.4in) Boxed (Above 2) (Hyphenation Off)
	      (Spread "0lines") (Spaces Kept) (LineWidth "2inches") (LeftMargin "+8")
	      (Indent "-8"))
    ;; Uses of this environment are generated by processing tables of contents, figures, etc
    (1ContentsEnv0 (use bodystyle)
		 (Use AboveBelowStyle)
		 Fill
		 Break
		 (Continue Off)
		 (Indent 0)
		 (Justification Off)
		 (Afterentry "@TabClear()"))
    (1Crossreference-Book-Environment0 (use i))
    (1Crossreference-Section-Environment0 (AfterEntry "\"")
					(BeforeExit "\""))
    ))

(define-book-design 1lgp2-inner-styles0 ()
  (define
    (1BodyStyle0 (Font BodyFont) (Spacing "13pts") (Spread "6pts"))
    (1TitleStyle0 (Spacing 1) (Spread "0.5lines") (Font TitleFont3))
    (1LargeStyle0 (Spacing 1) (Spread "0.5lines") (Font TitleFont5))
    (1NoteStyle0 (Spacing 1) (Spread "0.5lines") (Font SmallBodyFont) (FaceCode R))
    (1AboveBelowStyle0 (Above 1) (Below 1))
    ;; Footnotes
    (1FNEnv0 (USE Text)
	   (FONT SmallBodyFont)
	   (ABOVE 1)
	   FOOT
	   CRSPACE
	   (USE R)
	   (TABEXPORT False)
	   (LEFTMARGIN 0)
	   (RIGHTMARGIN 0)
	   (INDENT 2)
	   (SPREAD 1)
	   UNNUMBERED
	   (SPACING 1)
	   (BREAK off))
    ;; Uses of this environment are generated by @Caption commands
    (1CaptionEnv0 Fill
		Break
		(Continue Off)
		(Indent 0)
		(Use BodyStyle)
		(Justification Off)
		(Afterentry "@TabClear()")
		(Use AboveBelowStyle))
    (CaptionCounterEnv
      ;; i.e., transparent
      )

    (1Crossreference-Book-Environment0 (use i))
    (1Crossreference-Section-Environment0 (AfterEntry "\"")
					(BeforeExit "\""))

    ;; Uses of this environment are generated by processing Index 
    (1IndexEnv0 Break
	      CrBreak
	      Fill
	      (BlankLines Kept)
	      (Justification Off)
	      (Columns 1)
	      (ColumnMargin 0.4in)
	      Boxed
	      (Above 2)
	      (Hyphenation Off)
	      (LineWidth "2.6in")
	      (Use NoteStyle)
	      (Spread "0lines")
	      (Spaces Kept)
	      (LineWidth "2inches")
	      (LeftMargin "+8")
	      (Indent "-8"))
    ;; Uses of this environment are generated by processing tables of contents, figures, etc
    (1ContentsEnv0 Fill
		 Break
		 (Continue Off)
		 (Indent 0)
		 (Use BodyStyle)
		 (Justification Off)
		 (Afterentry "@TabClear()"))
    ))

#||
(define-book-design 1lgp1-inner-styles0 ()
  ;; This is merely an abbreviation for now, not a necessary design intent.
  (use lgp2-inner-styles))
||#

(define-book-design 1dmp1-inner-styles0 ()
  ;; This is merely an abbreviation for now, not a necessary design intent.
  (use lgp2-inner-styles))

(define-book-design 1numbered-sections0 ()
  (counters
    (majorpart
      :numbered "@I."
      :referenced "@I"
      :title ((title counter-contents)
	      (idirs
		(envr (HD0)
		      "PART "
		      counter-contents
		      (command force-line-break)
		      (command blankspace '((1 cm)))
		      title)))
      :contents ((title counter-contents)
		 (render-regular-toc '(TC0) title counter-contents)))
    (chapter
      :numbered "@1."
      :referenced "@1"
      :title ((title counter-contents)
	      (idirs
		(envr (HD1 above 2 below 2 facecode b) counter-contents (spaces 2) title)))
      :contents ((title counter-contents)
		 (render-regular-toc '(Tc1) title counter-contents)))
    (prefatory
      :alias chapter
      :title ((title counter-contents)
	      (ignore counter-contents)
	      (idirs (envr (Hd1A) title)))
      :contents ((title counter-contents)
		 (ignore counter-contents)
		 (render-counterless-toc '(Tc1) title)))
    (appendix
      :alias chapter
      :numbered "@A" :referenced "@A"
      :title ((title counter-contents)
	      (idirs (envr (Hd1A) "Appendix "
			   counter-contents
			   #.(make-string 2 :initial-element #\return)
			   title)))
      :contents ((title counter-contents)
		 (render-regular-toc 'Tc1 title
				     (cons "APPENDIX " counter-contents))))
    (section
      :within chapter
      :numbered "@#@:.@1."
      :referenced "@#@:.@1"
      :title ((title counter-contents)
	      (idirs (envr HD2 counter-contents (spaces 2) title)))
      :contents ((title counter-contents)
		 (render-regular-toc '(Tc2) title counter-contents)))    
    (appendixsection
      :alias section
      :within appendix
      :numbered "@#@:.@1."
      :referenced "@#@:.@1"
      :title ((title counter-contents)
	      (idirs (envr HD2 counter-contents (spaces 2) title)))
      :contents ((title counter-contents)
		 (render-regular-toc '(Tc2) title counter-contents)))
    (subsection
      :within section
      :numbered "@#@:.@1."
      :referenced "@#@:.@1"
      :title ((title counter-contents)
	      (idirs (envr HD3 counter-contents (spaces 2) title)))
      :contents ((title counter-contents)
		 (render-regular-toc '(Tc3) title counter-contents)))
    (subsubsection
      :within subsection
      :numbered "@#@:.@1."
      :referenced "@#@:.@1"
      :title ((title counter-contents)
	      (idirs (envr HD4 counter-contents (spaces 2) title)))
      ;; does not appear in table of contents
      )
    ))

(define-book-design 1other-counters0 ()
  (counters
    (1FigureCounter
0      :incremented-by use
      :numbered "Figure @1.  "
      :referenced "@1")
    (1TableCounter
0      :incremented-by use
      :numbered "Table @1.  "
      :referenced "@1")
    (1FootnoteCounter
0      :incremented-by use
      :numbered "@1"
      :referenced "@1")))

(define-book-design 1standard-collectors0 ()
  (collectors
    (contents :name "Table of Contents"
	      :init init-standard-table-of-contents)
    (figures  :name "List of Figures")
    (tables   :name "List of Tables")
    (index    :name "Index"
	      :init init-standard-index)))

(defun 1init-standard-table-of-contents0 ()
  (sage-command T 'newpage '(0))
  (sage-command T 'set '((page 1)))
  (let ((doctitle (lookup-ambient-value 'doctitle)))
    (sage-command T 'string `((MajorPartTitle ,DocTitle))))
  (sage-command T 'style '((pagenumber "@i"))))

(defun 1init-standard-index0 ()
  (sage-command T 'newpage '(until-odd)))

(define-book-design 1lm-inner-styles0 ()
  (define
    (1BodyStyle0 (Font Bodyfont) (Spacing 1line) (Spread 1line))))

(define-book-design 1facecode-environments0 ()
  (define
    (1S0 (FACECODE S) TABEXPORT)
    (1R0 (FACECODE R) TABEXPORT)
    (1I0 (FACECODE I) TABEXPORT)
    (1B0 (FACECODE B) TABEXPORT)
    (1BI0 (FACECODE P) TABEXPORT)
    (1C0 CAPITALIZED (FACECODE C) TABEXPORT)
    (1F0 (FACECODE F) TABEXPORT)
    (1G0 (FACECODE G) TABEXPORT)
    (1K0 (FACECODE K) TABEXPORT (HYPHENBREAK off))
    ;; This is to simulate @L in facecode and capitalization, but
    ;; without the mouse sensitivity or package-sensitive display.
    ;; This shouldn't have a LONGLINES attribute.  Take it out when
    ;; hyphenbreaks work.
    (1LS0 (FACECODE L) TABEXPORT (LONGLINES keep) (Hyphenation Off))
    (1M0 (FACECODE M) TABEXPORT)
    (1P0 (FACECODE P) TABEXPORT)
    (1T0 (FACECODE T) TABEXPORT)))

(define-book-design 1inner-environments0 ()
  (define
    (1Insert0 BREAK
	    CONTINUE
	    (VerticalJustificationAllowed Around)
	    (ABOVE 0.5line)
	    (BELOW 0.5line)
	    (LEFTMARGIN "+1cm")
	    (RIGHTMARGIN "+4")
	    (SPACING 1)
	    (LONGLINES keep)
	    (BLANKLINES kept))
    (1BasicMargin0 (LEFTMARGIN 7.0picas)
		 (AfterEntry "@~"))
    (1BPage0 FLOATPAGE BREAK CONTINUE)
    (1BSpace0 BREAK
	    CONTINUE
	    BOXED
	    (ABOVE 0)
	    (BELOW 0)
	    NOFILL
	    (LEFTMARGIN 0)
	    (RIGHTMARGIN 0))
    (1MargLabel0 (FACECODE I)
	       NOFILL
	       (SPACES kept)
	       (BLANKLINES kept)
	       (ABOVE 0)
	       (BELOW 0)
	       (LEFTMARGIN "-16")
	       (INDENT 0))
    (1PSpace0 BREAK
	    CONTINUE
	    BOXED
	    (ABOVE 0)
	    (BELOW 0.25inch)
	    NOFILL
	    (LEFTMARGIN 0)
	    (RIGHTMARGIN 0))
    (1Squeeze0 (ABOVE 0.4lines)
	     (BELOW 0.4lines)
	     (SPREAD 0.3lines))
    (1SST0 (USE BasicMargin))
    (1StandardBoxMargins0 (BoxTM 4points)
			(BoxBM 4points)
			(BoxLM 4points)
			(BoxRM 4points))
    (1Zone0 BREAK
	  CONTINUE
	  NOFILL
	  (SPACES Kept)
	  (ABOVE 0)
	  (BELOW 0)
	  (SPACING 1)
	  (FONT BodyFont)
	  (FACECODE R))
    ))

(define-book-design 1user-visible-environments0 ()
  (use inner-environments)
  (define
    (1Text0 FILL
	  JUSTIFICATION
	  (SPACES compact)
	  BREAK
	  (WIDESTBLANK 5pts))
    (1Itemize0 BREAK
	     CONTINUE
	     FILL
	     (LEFTMARGIN "+2")
	     (INDENT "-2")
	     (RIGHTMARGIN "+0")
	     (NUMBERED "@@s(o) @,@@s(.) ")
	     (NUMBERLOCATION lfr)
	     (BLANKLINES break)
	     (SPACING 1)
	     (ABOVE 1)
	     (BELOW 1)
	     (SPREAD 1)
	     (PARAGRAPHBREAKS normal))
    (1Verbatim0 BREAK
	      CONTINUE
	      NOFILL
	      (SPACES Kept)
	      (ABOVE 1)
	      (BELOW 1)
	      (BLANKLINES kept)
	      (LONGLINES keep)
	      (SPACING 1)
	      (FACECODE T))
    (1Format0 (FONT BodyFont)
	    BREAK
	    CONTINUE
	    NOFILL
	    (SPACES Kept)
	    (FACECODE R)
	    (BLANKLINES kept)
	    (LONGLINES keep)
	    (SPACING 1)
	    (JUSTIFICATION off)
	    (ABOVE 1)
	    (BELOW 1))

    ;; for "invisible" crossreferences
    (1CrossRef0 (lisp-splicing-hook crossref-lisp-splicing-hook))

    (1SimpleTable0 break
		 (lisp-splicing-hook simple-table-lisp-splicing-hook)
		 (use abovebelowstyle))
    (1Table0 NOFILL
	   BREAK
	   (Continue Off)
	   (Spaces Kept)
	   (Use R)
	   (BlankLines kept)
	   (LONGLINES keep)
	   Float
	   (verticaljustificationallowed around)
	   (Above 1)
	   (Below 1)
	   (Counter TableCounter)
	   (NumberLocation LFL)
	   )
    (1Verse0 (USE Insert)
	   (FONT BodyFont)
	   FILL
	   (SPACES Kept)
	   (LEADINGSPACES Kept)
	   (JUSTIFICATION off)
	   CRBREAK
	   (USE R)
	   (TABEXPORT False)
	   (INDENT "-3")
	   (SPREAD 0)
	   (LEFTMARGIN "+8")
	   (RIGHTMARGIN "+4")
	   (PARAGRAPHBREAKS normal))
    (1plus0 (SCRIPT "+0.3lines")
	  TABEXPORT
	  (FONT SmallBodyFont))
    (1+0 (USE plus))
    (1minus0 (SCRIPT "-0.3lines")
	   TABEXPORT
	   (FONT SmallBodyFont))
    (1-0 (USE minus))
    (1Center0 BREAK
	    CONTINUE
	    (ABOVE 0.5line)
	    (BELOW 0.5line)
	    (SPACING 1)
	    (LEFTMARGIN 0)
	    (RIGHTMARGIN 0)
	    (TABEXPORT False)
	    CENTERED
	    (LONGLINES keep)
	    (BLANKLINES kept)
	    (afterentry "@tabclear()"))
    (1Commentary0 invisible)
    (1Description0 BREAK
		 CONTINUE
		 (ABOVE 1)
		 (BELOW 1)
		 FILL
		 (LEFTMARGIN "+16")		;string, so Lisp reader won't throw away sign
		 (SPACES Compact)
		 (INDENT "-16")
		 (SPACING 1)
		 UNNUMBERED
		 (PARAGRAPHBREAKS normal))
    (1SetOff0 (Use Description)
	    (Use Box)
	    (BoxTM 6points)
	    (BoxBM 8points)
	    (Below 1.5)
	    (Font SmallBodyFont)
	    (Facecode B))
    (1Display0 (USE Insert)
	     NOFILL
	     (FACECODE R)
	     GROUP
	     (RIGHTMARGIN "+0")
	     (BLANKLINES Kept)
	     (SPACES Kept))
    (1Enumerate0 (USE Itemize)
	       (LEFTMARGIN "+4")
	       (INDENT "-4")
	       (NUMBERED "@1. @,@a. @,@i. ")
	       (REFERENCED "@1@,@a@,@i"))
    (1Checklist0 (USE Itemize)
	       (LEFTMARGIN "+4")
	       (INDENT "-4")
	       (NUMBERED "@@Begin[Box, BoxTM 0, BoxBM 0,]@@ @@End(Box)")
	       )
;    (1Checklist0 (USE Itemize)
;	       (LEFTMARGIN "+3")		;Total of two spaces would be better
;	       (INDENT "-3")			;but the box is wider than "a character"
;	       (NUMBERED "@@S[O]"))		;The screen and LGP1 have real boxes
    (1Block0 (copy text))
    (1Descript0 (USE Description))
    (1Example0 (USE Insert)
	     NOFILL
	     (SPACES Kept)
	     GROUP
	     (RIGHTMARGIN "+0")
	     (BLANKLINES HingeKeep)
	     (FACECODE T))
    (1ActiveExample0 (USE Example)
		   (PresentationType 'active-example))
    (1Equation0 (USE Example))
    (1Figure0 NOFILL
	    BREAK
	    (Continue Off)
	    (Spaces Kept)
	    (Use R)
	    (BlankLines kept)
	    (LONGLINES keep)
	    float
	    (verticaljustificationallowed around)
	    (Above 1)
	    (Below 1)	
	    (Counter FigureCounter)
	    (NumberLocation LFL))
    (1FileExample0 (COPY Verbatim)
		 (FONT SmallBodyFont)
		 (FACECODE F)
		 (LEFTMARGIN 1cm))
    (1Float0 float
	   BREAK)
    (1Flushleft0 (COPY Format)
	       (LEFTMARGIN 0))
    (1FlushRight0 (COPY center)
		FLUSHRIGHT)
    (1FullPageFigure0 (USE Figure)
		    FLOATPAGE)
    (1FullPageTable0 (USE Table)
		   FLOATPAGE)
    (1Group0 GROUP BREAK)
    (1Heading0 (USE Center)
	     (FONT TitleFont3)
	     (FACECODE B)
	     (CONTINUE off)
	     (ABOVE 1)
	     (BELOW 1)
	     (NEED 0.8inch))
    (1InputExample0 (COPY Example)
		  (FACECODE T))
    (1Level0 (USE Verse)
	   (LEFTMARGIN "+6")
	   (INDENT "-6")
	   (RIGHTMARGIN "+0")
	   (CONTINUE Off)
	   (ABOVE 0)
	   (BELOW 0)
	   (SPACING 2)
	   (NUMBERED "@I. @,@A. @,@1. @,@a. @,@i. @,@@ @@ @@ - @,@@ @@ @@ - ")
	   (NUMBERLOCATION LFL))
    (1MajorHeading0 (USE Center)
		  (FONT TitleFont5)
		  (FACECODE B)
		  (CONTINUE off)
		  (ABOVE 1)
		  (BELOW 1)
		  (NEED 1inch))
    (1Multiple0 (ParagraphBreaks Limited))
    (1OutputExample0 (COPY Verbatim)
		   (LEFTMARGIN 2))
    (1ProgramExample0 (COPY Example)
		    (FACECODE T))
    (1Quotation0 (COPY insert)
	       (FONT BodyFont)
	       FILL
	       (INDENT 0)
	       (FACECODE R)
	       (BLANKLINES break)
	       (SPACES Compact))
    (1SubHeading0 (USE Insert)
		(INDENT 0)
		(FONT TitleFont2)
		(FACECODE B)
		(LEFTMARGIN 0)
		(RIGHTMARGIN 0)
		(JUSTIFICATION Off)
		(CONTINUE off)
		(ABOVE 1)
		(BELOW 1)
		(NEED 0.85inch))
    (1SubSubHeading0 (USE Subheading)
		   (BELOW 0)
		   (FACECODE I))
    (1Transparent0 )
    (1U0 (UNDERLINE NonBlank)
       TABEXPORT)
    (1UN0 (UNDERLINE Alphanumerics)
	TABEXPORT)
    (1UX0 (UNDERLINE All)
	TABEXPORT)
    (1W0 (SPACES NoBreak)
       TABEXPORT)
3;0    (1Bar0 (AfterEntry "@*@ux(@>)@*"))3 Changed to a command
0    (1Box0 (BoxType StandardBox) (use StandardBoxMargins))))

(define-book-design 1page-heading-environments0 ()
  (define
    (1HDG0 (FONT BodyFont)
	 (FACECODE R)
	 (FIXED "+0.5inch")
	 NOFILL
	 (LEFTMARGIN 0)
	 UNNUMBERED
	 (UNDERLINE off)
	 (SPACING 1)
	 (USE I)
	 (TABEXPORT False)
	 (COLUMNS 1)
	 (COLUMNMARGIN 0)
	 (CAPITALIZED Off)
	 (RIGHTMARGIN 0)
	 (SPREAD 0)
	 (INDENT 0)
	 (AfterEntry "@tabclear()"))
    (1Ftg0 (COPY HDG)
	 (FIXED "-0.5inches"))
    (1TBS
0      (FONT HEADINGFONT)
      (FIXED "+0.5inch")
      NOFILL
      (LEFTMARGIN 0)
      UNNUMBERED
      (UNDERLINE off)
      (SPACING 1)
      (TABEXPORT False)
      (COLUMNS 1)
      (COLUMNMARGIN 0)
      (CAPITALIZED Off)
      (RIGHTMARGIN 0)
      (SPREAD 0)
      (INDENT 0)
      (INITIALIZE "@tabclear()"))))

(define-book-design 1section-heading-environments0 ()
  (define
    (1HDX0 (Use TitleStyle)
	 (LeftMargin "+.0001cm")		;see comment on HDX above
	 (Indent 0)
	 Break
	 Fill
	 (Justification Off)
	 (Spaces Compact)
	 (FaceCode R)
	 (Need "4lines")
	 GroupNext
	 (VerticalJustificationAllowed Above)
	 (Hyphenation Off))
    (1Hd00 (Use HdX)
	 (Font TitleFont5)
	 (Sink "3in")
	 (Below "2in")
	 (LongLines Wrap)
	 Centered
	 (Capitalized T)
	 (PageBreak UntilOdd)			;start majorpart on next off page
	 (AfterExit "@newpage()"))		;force a blank page before starting chapter
    (1Hd10 (Use HdX) (Font TitleFont5) (Below "0.5inch") (PageBreak UntilOdd))
    (1Hd1A0 (use Hd1) Centered (PageBreak Before))
    (1Hd20 (Use HdX) (Font TitleFont3) (Above "1cm") (Below "0.7cm") (Need "1.2 inches"))
    (1Hd30 (Use HdX) (Font TitleFont2) (Above "0.25inches") (Below "0.16inches") (Need "0.8 inches"))
    (1Hd40 (Use HdX) (Font TitleFont2) (Above "0.15inches") (Below "0.1inches") (Need "0.7 inches"))))

(define-book-design 1table-of-contents-environments0 ()
  (define
    (1ContentsStyle0 (Spacing 1) (Spread "0.5lines") (Font TitleFont6))
    (1TCX0 (Use ContentsStyle)
	 ;; see 1environment-specially-hacks-paragraphs
0	 ;; which tries to figure out whether pseudo-paragraph-breaks
	 ;; should be spliced in.
	 (LeftMargin "+.0001cm")
	 (RightMargin 5)
	 (Indent 0)
	 (Spread "0lines")
	 (Hyphenation Off)
	 (Above 0)
	 (Below 0)
	 Break
	 Fill
	 (Justification Off)
	 (Spaces Compact)
	 (Need "2lines"))
    (1Tc00 (Use TcX)
	 ;Centered
	 (Capitalized T)
	 (Above "1line")
	 (Below "0.5line")
	 (Need "2lines")
	 (TabExport False))
    (1Tc10 (Use TcX)
	 (TabExport False)
	 (Above "1line")
	 (Below "0.5line")
	 (Need "2lines"))
    (1Tc20 (Use TcX) (LeftMargin "+4")
	 (TabExport False)
	 (Font TitleFont7)
	 (Need "2lines"))
    (1Tc30 (Use TcX) (LeftMargin "+9") (Font TitleFont7) (Need "2lines"))
    (1TcC0 (Use TcX) (Font TitleFont7) (TabExport False) (Need "2lines"))
    (1PermutedIndexEnv0 (use Format)
		      (use NoteStyle)
		      (longlines Wrap)
		      (indent "20picas")
		      (spacing ".8 lines"))
    (1PermutedIndexHeaderEnv0 (use MajorHeading)
			    Flushleft
			    (above "1")
			    (below "0"))
    ))

(define-book-design 1tools-and-techniques-environments0 ()
  (define
    (1Helb0 (USE Hd3)
	  (ABOVE 0)
	  (BELOW 0)
	  (BREAK around)
	  (CONTINUE off)
	  (AfterEntry "")
	  (BEFOREEXIT "")
	  (LEFTMARGIN 7picas))
    (1Debar0 (BREAK around)
	   (CONTINUE off)
	   (LEFTMARGIN 6.75picas)
	   (ABOVE 0)
	   (BELOW 0)
	   (SPREAD 0)
	   (AfterEntry "@bar()"))
    (1Description10 (USE BasicMargin)
		  (AfterEntry "@group<@debar[]@helb[Example]>"))
    (1Description20 (USE Description)
		  (LEFTMARGIN "+14picas")
		  (INDENT "-14picas")
		  (ABOVE 0.5)
		  (AfterEntry "@group<@debar[]@helb[Reference]>"))))


;;;
;;;============================================================
;;; The Approchability Specifications 
;;; have been moved to sys:nsage;bd-approach.lisp
;;;============================================================
;;;
