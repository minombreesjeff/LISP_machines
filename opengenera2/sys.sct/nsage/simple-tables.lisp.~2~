;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: T -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

;;; Support for simple tables

(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")draw-simple-table0 (stream specs rows)
  (destructuring-bind (&key rows number-of-columns vrules hrules vrule-width hrule-height)
      (whack-away-at-simple-table-specs specs rows)
    (let ((number-of-rows (length rows))
	  (number-of-hrules (length hrules)))
      (flet ((new-bool (list length)
	       (let ((array (make-array length :element-type 'boolean)))
		 (dolist (elt list) (setf (aref array elt) T))
		 array)))
	(setq vrules (new-bool vrules (1+ number-of-columns))
	      hrules (new-bool hrules (1+ number-of-rows))))
      (graphics:with-graphics-scale (stream (/ *microns-per-device-pixel*
					       *microns-per-screen-pixel*))
	(let ((max-column-widths (make-array number-of-columns :initial-element 0))
	      (column-x-locations (make-array (1+ number-of-columns))))
	  (dolist (row rows)
	    (loop for cell in row
		  for i from 0
		  do (maxf (aref max-column-widths i)
			   (simple-table-cell-width stream cell))))
	  (let* ((width-of-vrule (simple-table-vrule-width stream vrule-width))
		 (height-of-hrule (simple-table-hrule-height stream hrule-height)))
	    (multiple-value-bind (height-of-text-line baseline)
		(simple-table-text-line-height stream)
	      (let* ((total-height
		       (+ (* number-of-rows height-of-text-line)
			  (* number-of-hrules height-of-hrule)))
		     (total-width
		       (+ (reduce #'+ max-column-widths)
			  (* (1- number-of-columns) width-of-vrule))))
		(let ((x 0))
		  (dotimes (i number-of-columns)
		    (if (= i 0)
			(when (aref vrules 0) (incf x width-of-vrule))
			(incf x width-of-vrule))
		    (setf (aref column-x-locations i) x)
		    (incf x (aref max-column-widths i)))
		  (when (aref vrules number-of-columns) (incf x width-of-vrule))
		  (setf (aref column-x-locations number-of-columns) x))
		(labels ((draw-hrule (y)
			   (decf y (round height-of-hrule 2))
			   (graphics:draw-line 0 y total-width y
					       ;; :thickness ??
					       :stream stream
					       ))
			 (draw-vrule (x)
			   (incf x (round width-of-vrule 2))
			   (graphics:draw-line x 0 x total-height
					       :stream stream
					       ))
			 (draw-row (row y)
			   (loop for cell in row
				 for i from 0
				 do (draw-cell cell (aref column-x-locations i) y)))
			 (draw-cell (cell x y)
			   (unless (zerop (length cell))
			     (graphics:draw-string cell x (- y baseline) :attachment-y :baseline
						   :stream stream))))
		  (let ((y total-height))
		    ;; The y's correspond to :attachment-y :top
		    (loop for row in rows
			  for r from 0
			  do
		      (when (aref hrules r)
			(draw-hrule y)
			(decf y height-of-hrule))
		      (draw-row row y)
		      (decf y height-of-text-line))
		    (when (aref hrules number-of-rows)
		      (draw-hrule y)))
		  (dotimes (i (1+ number-of-columns))
		    (when (aref vrules i)
		      (draw-vrule (- (aref column-x-locations i) width-of-vrule))))
		  #+Franz ;; this is just to show where it thinks it is
		  (graphics:draw-rectangle 0 0 total-width total-height
					   :filled nil :stream stream)
		  )))))))))

(defun 1whack-away-at-simple-table-specs0 (specs rows)
  (let ((vrules ())
	(hrules ())
	(vrule-width 1.5)
	(hrule-height .5)
	)
    (loop for (spec val) on specs by #'cddr do
      (assert (numberp val) (val) "The value ~s for ~s must be a number" val spec)
      (ecase spec
	(:vrule (push val vrules))
	(:hrule (push val hrules))
	(:vrule-width (setq vrule-width val))
	(:hrule-height (setq hrule-height val))
	))
    (multiple-value-bind (new-rows number-of-columns)
	(reprocess-rows-for-sage-markup rows)
      `(:rows ,new-rows
	:number-of-columns ,number-of-columns
	:vrules ,vrules
	:hrules ,hrules
	:vrule-width ,vrule-width
	:hrule-height ,hrule-height))))

(defun 1simple-table-cell-width0 (stream cell)
  (draw-string-size cell stream))

(defun 1simple-table-vrule-width0 (stream factor)
  (* factor
     (draw-string-size "n" stream)))

(defun 1simple-table-hrule-height0 (stream factor)
  (* factor (simple-table-text-line-height stream)))

(defun 1simple-table-text-line-height0 (stream)
  (declare (values height baseline))
  (multiple-value-bind (ignore height)
      (draw-string-size "n" stream)
    (values (* height 1.2)			;include leading
	    (* height 0.8)			;horrible guess at baseline
	    )))

(defun 1draw-string-size0 (string stream)
  (dw:continuation-output-size
    (lambda (stream)
      (graphics:draw-string string 0 0 :stream stream :attachment-y :top))
    stream))

(defun 1test-draw-string-size0 (&optional (stream *standard-output*))
  (graphics:with-graphics-scale (stream .5)
    (multiple-value-bind (wid hei)
	(draw-string-size "foo" stream)
      (let (width height)
	(dw:continuation-output-size
	  (lambda (s)
	    (multiple-value-setq (width height)
	      (draw-string-size "foo" s)))
	  stream)
	(format t "~&wid: (~A, ~A), height: (~A, ~A)" wid width hei height)))))

;; rows is a list of ROWs, or a string.  If it's a string, split it into ROWs
;; at the embedded newlines.
;; Each ROW is a list of CELLs, or a string.  If it's a string, split it into CELLs
;; at the "(2 0 ("Editor-Symbols" 0) (NIL NIL NIL) "EDSYMBOL12")c0" markers.
;; Each CELL is a string, perhaps with Sage character style markup.
(defun 1reprocess-rows-for-sage-markup0 (rows)
  (declare (values rows number-of-columns))
  (flet ((split-string-into-rows (string)
	   (zwei:zcollecting-into (rows)
	     (dw::do-delimited-substrings ((string)
					    (char start-index end-index))
					  (zwei:zcollect rows
							 (substring string start-index
								    end-index))
	     (#\return (ignore char)))
	     rows))
	 (split-row-into-cells (string)
	   (zwei:zcollecting-into (cells)
	     (do-delimited-substrings-exact ((string)
					    (char start-index end-index))
					    (zwei:zcollect cells
							 (substring string start-index
								    end-index))
	       (#.(symbol-for-editor-buffer 'tab-to-tab-stop) (ignore char)))
	     cells)))
    (when (stringp rows)
      (setq rows (split-string-into-rows rows)))
    (setq rows
	  (domap 'list ((row rows))
	    (if (consp row)
		row
		(split-row-into-cells row))))
    (unless (every (lambda (row) (every #'stringp row)) rows)
      (error "Some table cell contains something that isn't a string"))
    (values rows
	    ;; Fixed in APL
	    (reduce #'max (mapcar #'length rows)))))

(defun 1simple-table-lisp-splicing-hook0 (predecessor containing-environment contents-list)
  (multiple-value-bind (specs lines)
      (process-simple-table-environment-body contents-list)
    (let ((drawing-function (named-lambda draw-simple-table (stream)
			      (draw-simple-table stream specs lines))))
      (let ((stream (get-sage-stream *current-sage-device*)))
	(splice-envr-contents-list
	  predecessor containing-environment
	  (if (stream-supports-pictures-p stream)
	      (destructuring-bind (scale scale-type)
		  (send containing-environment :picture-scale)
		(let ((gbox (make-picture-gbox
			      containing-environment
			      (make-instance 'standin-sage-picture
					     :drawing-function drawing-function)
			      scale scale-type)))
		  (list (make-sage-command 'already-has-gbox-kludge (list gbox)))))
	      (making-sage-directives ()
		(format t "<<Picture ~A>>" drawing-function))))))))

;; Returns a list of rows.  Rows are separated by newlines in the contents-list.
(defun 1process-simple-table-environment-body0 (contents-list)
  (declare (values specs body-contents-list))
  (multiple-value-bind (specs body)
      (block specs
	(flet ((no-specs () (return-from specs (values nil contents-list))))
	  (loop for (directive . rest) on contents-list do
	    (typecase directive
	      (sage-command
		(if (eq (send directive :command-name) 'simpletablespecs)
		    (let ((simpler-specs
			    (flet ((process-string (key string)
				     (if (just-white-space string)
					 ()
					 (let ((nums (accept-from-string '((sequence integer))
									 string)))
					   (loop for n in nums
						 collect key collect n)))))
			      (with-sage-command-args (simpletablespecs directive)
				(let ((result (nconc (process-string :hrule hrules)
						     (process-string :vrule vrules))))
				  result)))))
		      (return-from specs (values simpler-specs rest)))
		    (no-specs)))
	      (sage-text-structure
		(unless (just-white-space
			  (zwei:string-interval
			    (sage-text-structure-interval directive)))
		  (no-specs)))
	      (otherwise (no-specs)))))
	(values nil contents-list))
    (values specs
	    (split-simple-table-row-cells
	      (convert-contents-list-by-lines body)))))

;;; Splits contents-list into lines.  Each line is a contents-list.
(defun 1convert-contents-list-by-lines0 (contents-list)
  (let ((lists ())
	(list ()))
    (labels ((in-a-line (thing envr-nest)
	       (dolist (e envr-nest)
		 (setq thing (make-sage-envr (first e) (second e) (list thing))))
	       (push thing list))
	     (end-of-line ()
	       (when list
		 (push (nreverse list) lists)
		 (setq list ())))
	     (frob-contents-list (cl envr-nest)
	       (dolist (thing cl)
		 (typecase thing
		   (string
		     (dw::do-delimited-substrings
		       ((thing) (char start end))
		       (unless (= start end)
			 (in-a-line (substring thing start end) envr-nest))
		       (#\return (ignore char) (end-of-line))))
		   (sage-text-structure
		     (frob-contents-list
		       (contents-list-from-sage-text-structure thing)
		       envr-nest))
		   (sage-envr
		     (frob-contents-list
		       (send thing :contents-list)
		       (cons (list (send thing :envr-name) (send thing :envr-mods))
			     envr-nest)))
		   (otherwise
		     (in-a-line thing envr-nest))))))
      (frob-contents-list contents-list ()))
    (nreverse (if list (cons (nreverse list) lists) lists))))

;;; Returns a list of rows.  Each row is a list of cells.  Each cell is a string.
;;; The cells are converted into strings by upgrade-sage-contents-list-for-newthink.
(defun 1split-simple-table-row-cells0 (lines)
  (map-into
    lines
    (lambda (row)
      (let ((columns ())
	    (column ()))
	(flet ((finish-column ()
		 (when column
		   (let ((new-cl (upgrade-sage-contents-list-for-newthink
				   (nreverse column)
				   :edited)))
		     (unless (and (= 1 (length new-cl))
				  (typep (first new-cl) 'sage-text-structure))
		       (error "The simple table contents are not simple enough"))
		     (push (zwei:string-interval
			     (sage-text-structure-interval (first new-cl)))
			   columns)
		     (setq column nil)))))
	  (dolist (directive row)
	    (cond ((and (typep directive 'sage-command)
			(eq (send directive :command-name) 'tab-to-tab-stop))
		   (finish-column))
		  (T (push directive column))))
	  (finish-column))
	(nreverse columns)))
    lines))

(defflavor 1standin-sage-picture0 (drawing-function)
	   ()
  :initable-instance-variables
  :writable-instance-variables
  (:readable-instance-variables (sage-picture-drawing-function drawing-function))
  )

(defmethod 1(default-character-style-for-picture standin-sage-picture)0 (stream)
  (ignore stream)
  (symbol-value-in-instance *current-sage-device* 'merged-current-style))

#||
(defun 1test0 (function)
  (with-character-style ('(centuryschoolbook-body :roman :normal) T :bind-line-height T)
    (with-sage-device (:screen)			;to bind *microns-per-xxx-pixel*
      (graphics:with-room-for-graphics ()
	(dw:with-output-truncation (*standard-output*)
	  (funcall function *standard-output*))))))

(defun 1draw-table-00 (stream)
  (draw-simple-table
    stream
    ()
    "Foo2c0bar
mumble2c0ick"))

(defun 1draw-table-10 (stream)
  (let ((*standard-output* 'dsfkj))
  (draw-simple-table
    stream
    '(:vrule 2
      :hrule 1)
    '(("" "(3 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")Options0" "3Usage0")
      ("*" ":columns" "specifies the number of columns which")
      ("" "" "will be used to format the table")
      ("*" ":vrule" "Each (4 0 (NIL 0) (NIL SAGE::LISP NIL) "HL12B"):vrule0 3n0 pair calls for")
      ("" "" "a vertical rule.  The parameter 3n0 says which")
      ("" "" "column the rule 3follows0.  A rule at the left")
      ("" "" "of the table is 4:vrule 10.")))))

(defun 1draw-table-20 (stream)
  (draw-simple-table
    stream
    '(:vrule 1
      :hrule 1
      )
    '(("3Qualifier0" "3Method Role0")
      ("3none0" "An unqualified method is a primary method.")
      ("4:before0" "A method to be called before the primary")
      ("" "method.")
      ("4:after0" "A method to be called after the primary method.")
      ("4:around0" "A method to be wrapped around the execution of")
      ("" "all other kinds of methods."))))

(defun 1draw-table-30 (stream)
  (draw-simple-table
    stream
    '(:vrule-width 2
      :hrule-height .5
      :vrule 1 :vrule 2
      :hrule 1
      )
    '"3Constraint2c3Rule2c0     3Class
(5 0 (NIL 0) (NIL SAGE::TYPEWRITER NIL) "CPTFONT")input-stream >> stream2c5 12c5input-stream
char-stream >> stream2c5 12c5char-stream
char-input-stream >> char-stream2c5 12c5char-input-stream
char-input-stream >> input-stream2c5 12c5char-input-stream
char-stream >> input-stream2c5 22c5char-input-stream0"))

(defun 1draw-table-40 (stream)
  (draw-simple-table
    stream
    '(:vrule 1
      :hrule 1
      )
    "3Slot Characteristics2c3From Class
(6 0 (NIL 0) (NIL :ROMAN NIL) "CPTFONT")the 5name6 slot itself2c5basic-lock0 
5:initarg :name2c5basic-lock
:initform 0\5"Simple Lock0\5"2c5simple-lock0"))

||#
