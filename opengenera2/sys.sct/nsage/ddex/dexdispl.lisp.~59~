;;; -*- Syntax: Common-lisp; Mode: Lisp; Package: (DDEX :USE SCL); Lowercase: T; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Defflavor for dex-viewer-pane moved to dex-viewer-pane.lisp


;;;This variable determined empirically by looking at screens of average density.
;;;This number is a better thing to use than the :max-line-height because it is
;;;based on normal paragraphs etc and so includes some estimate of the amount of
;;;whitespace on the screen (why? because the whitespace is part of the line, not
;;;a separate line itself).
(defvar D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*average-line-height*0 19)

;;; --- fix this
;(defmethod 1(:top-view-item0 1dex-viewer-pane)0 ()
;  (when (> (fill-pointer screen-lines-array) 0)
;    (car (aref screen-lines-array 0))))
;
;(defmethod 1(:top-view-hbox0 1dex-viewer-pane)0 ()
;  (when (> (fill-pointer screen-lines-array) 0)
;    (cdr (aref screen-lines-array 0))))
;
;(defmethod1 (:top-line-data0 1dex-viewer-pane)0 ()
;  (when (> (fill-pointer screen-lines-array) 0)
;    (values (car (aref screen-lines-array 0))
;	    (cdr (aref screen-lines-array 0)))))
;
;(defmethod 1(:bottom-line-data0 1dex-viewer-pane)0 ()
;  (let ((last (1- (fill-pointer screen-lines-array))))
;    (when ( last 0)
;      (values (car (aref screen-lines-array last))
;	      (cdr (aref screen-lines-array last))))))

;(defmethod 1(:bottom-view-item0 1dex-viewer-pane)0 ()
;  (when (> (fill-pointer screen-lines-array) 0)
;    (car (aref screen-lines-array (1- (fill-pointer screen-lines-array))))))

;(defmethod 1(:bottom-view-hbox0 1dex-viewer-pane)0 ()
;  (when (> (fill-pointer screen-lines-array) 0)
;    (cdr (aref screen-lines-array (1- (fill-pointer screen-lines-array))))))


;;;Displaying stuff for the viewer pane, maintaining data structures in viewer-contents
;;;Scrolling methods and commands

;;;Returns the total vertical pixel height of the items in the viewer.
;;;ALSO, it side effects on the array of offsets, i.e. recomputes the first line "cache".
;;;Returns heights in lines and in pixels.
(defmethod 1(:compute-total-height-of-items0 1dex-viewer-contents)0 ()
  (loop with total-pixels = 0
	with total-lines = 0
	initially (setf (fill-pointer view-item-pixels) 0)
		  (setf (fill-pointer view-item-lines) 0)
	for i from 0 below (fill-pointer view-item-array)	;for each item being shown
	for item = (aref view-item-array i)
	do
	(sys:array-push-extend view-item-pixels total-pixels)	;set first pixel # of item
	(sys:array-push-extend view-item-lines total-lines)	;no. of lines above
	(incf total-pixels (send item :item-pixels))	;accumulate the totals
	(incf total-lines (send item :item-lines))
	finally (return (values total-lines total-pixels))))	;return both totals


;;;don't call this directly.  Use :display-dex-item method for the context instead
;;;because that keeps the various content data structures up to date.
;;;This is binding the *microns* thing due to the fact that the formatter can get
;;;called from the mouse process and it requires that this be bound apparently.
(defmethod 1(:display-dex-item0 1dex-viewer-pane)0 (item &optional hbox)
  (let ((nsage::*microns-per-device-pixel* nsage::*microns-per-screen-pixel*)	;---bad modularity
	(first-displayed-hbox (or hbox (send item :item-position) (send item :first-hbox))))
    (ignore nsage::*microns-per-device-pixel*)		;---and, is it still needed?
    (setf (send item :item-position) first-displayed-hbox)
    (send self :clear-window-after-last-item)
    (unwind-protect-case ()
	(multiple-value-bind (ignore left-over-space last-screen-index)
	    (send item :display-vertical-height self (tv:sheet-inside-height)
		  (or (send item :item-position)
		      (send item :first-hbox)))
	  (ignore last-screen-index)
	  left-over-space)
      (:abort
	(setf (send item :last-presentation)
	      (send self :insert-ellipsis item (send item :last-hbox) :visible t))))))

(defmethod 1(:clear-window-after-last-item dex-viewer-pane)0 ()
  (send self :set-cursorpos 0 dw::maximum-y-position)
  (send self :clear-window))

(defvar *background-lookup-mode* :contents)	; :contents or :bookmark

(defmethod (display-dex-item-in-background dex-viewing-context) (item)
  (flet ((item-already-displayed-p (item)
	   (let ((index (send bookmarks-contents :known-bookmark item)))
	     (and index
		  (send self :in-viewer-p
			(aref (send bookmarks-contents :contents) index))))))
    (unless (item-already-displayed-p item)
      (ecase *background-lookup-mode*
	(:contents
	  (using-resource (dex-background-viewer dex-viewer-pane tv:main-screen)
	    (unwind-protect
		(progn (send dex-background-viewer :activate)
		       (multiple-value-bind (width height)
			   (send (dw:get-program-pane 'viewer-pane) :size)
			 (send dex-background-viewer :set-size width height))
		       (send self :display-dex-item item dex-background-viewer :background-p t)
		       (copy-presentations-from-background-viewer self dex-background-viewer))
	      (send dex-background-viewer :deactivate))))
	(:bookmark nil)))))

(defmethod (copy-presentations-from-background-viewer dex-viewing-context) (window)
  (copy-presentations-from-background-viewer dynamic-window-state window))

(defmethod (copy-presentations-from-background-viewer dynamic-window-state) (window)
  (let ((new-max-y 0))
    (labels ((alter-boxes (presentation box)
	       (dolist (inferior (dw::presentation-inferiors presentation))
		 (let ((inferior-box (dw::presentation-displayed-box inferior)))
		   (alter-boxes inferior inferior-box)))
	       (alter-box box))
	     (alter-box (box)
	       (dw::set-box-position
		 box (dw::box-left box) (+ (dw::box-top box) maximum-y-position))
	       (maxf new-max-y (dw::box-bottom box))))
      (macrolet ((copying-boxes ((from to box &optional (thing '.thing.)) &body body)
		   `(map nil (lambda (,thing)
			       (let ((,box (dw:presentation-displayed-box ,thing)))
				 (vector-push-extend ,thing ,to)
				 ,@body))
			 ,from)))
	(copying-boxes ((send window :displayed-presentations) displayed-presentations
			box presentation)
	  (alter-boxes presentation box))
	(copying-boxes ((send window :displayed-strings) displayed-strings
			box)
	  (alter-box box))
	(copying-boxes ((send window :displayed-graphics) displayed-graphics
			box presentation)
	  (alter-box box)
	  (dw::presentation-adjust-for-box-move presentation 0 maximum-y-position))))
    (setq maximum-y-position new-max-y)))

(defmethod (remaining-height-in-viewport dex-viewer-pane) (&optional start-y)
  (multiple-value-bind (cursor-x cursor-y)
      (send self :read-cursorpos)
    (ignore cursor-x)
    (let ((viewport-bottom (dw::box-bottom dw::cursor-viewport)))
      (- viewport-bottom (or start-y cursor-y)))))

(defmethod 1(:display-0more-of-1dex-item0 1dex-viewer-pane)0 (item &optional hbox)
  (let ((nsage::*microns-per-device-pixel* nsage::*microns-per-screen-pixel*)   ;---bad modularity
	(first-displayed-hbox (or hbox (send item :item-position) (send item :first-hbox))))
    (ignore nsage::*microns-per-device-pixel*)		;---and, is it still needed?
    (setf (send item :item-position) first-displayed-hbox)
    (multiple-value-bind (ignore left-over-space last-screen-index)
	(send item :display-vertical-height self (remaining-height-in-viewport self)
	      (or (send item :item-position)
		  (send item :first-hbox)))
      (ignore last-screen-index)
      left-over-space)))

(define-presentation-type sage-ellipsis ())

;;; An ellipsis is a list of the dex-item that has been ellipsified
;;; and the offset between the top of the presentation and the last y-position.
(defmethod (:insert-ellipsis dex-viewer-pane) (item last-hbox &key visible)
  (ignore last-hbox visible)			;no longer needed!
  ;; visible means "We were aborted, make the ellipsis appear on the screen."
  (labels ((draw-text (stream)
	     (with-character-style ('(nsage::sans-serif-body :italic :normal) stream)
	       (format stream "Click here to see more of \"~A\"" (send item :string))))
	   (draw-raster (stream y)
	     (let ((width (send stream :inside-width)))
	       (graphics:draw-rectangle 0 y width (+ y 2) :pattern tv:33%-gray
					:stream stream)))
	   (draw-ellipsis (stream y)
	     (draw-text stream)
	     (send self :close-current-output-displayed-string)
	     (draw-raster stream y)))
    (multiple-value-bind (x y) (send self :read-cursorpos)
      (ignore x)
      (multiple-value-bind (text-width text-height)
	  (dw:continuation-output-size #'draw-text self)
	(let ((ellipsis-height (+ text-height 3)))
	  (let* ((width (send self :inside-width))
		 (indent-width (round (- width text-width) 2))
		 (y-cursor-of-next-line y)
		 (y-cursor-of-ellipsis (+ y 5)))
	    ;; the 5 above is to mask a bug wherein the ellipsis
	    ;; marker overwrites some of the descenders of the preceding line
	    (let ((next-item
		    ;; --- modularity problem
		    (next-item (doc-ex-current-viewing-context dw:*program*) item)))
	      (when next-item
		(send self :experimental-move-region
		      y-cursor-of-ellipsis
		      (+ y-cursor-of-ellipsis ellipsis-height))))
	    (send self :set-cursorpos indent-width y-cursor-of-ellipsis)
	    (let ((first-presentation
		    (dw:with-output-as-presentation
			(:type 'sage-ellipsis
			 :object (list item 'offset-not-computed)
			 :single-box t
			 :stream self)
		      (draw-ellipsis self (+ y-cursor-of-ellipsis text-height)))))
	      ;; do this :set-cursorpos to avoid potential :FRESH-LINE clobbering
	      ;; this 1-bit-raster.
	      (send self :set-cursorpos 0 (+ y-cursor-of-ellipsis text-height 3))
	      (let ((presentation-top (dw::box-top (dw::presentation-displayed-box
						     first-presentation))))
		(setf (second (dw:presentation-object first-presentation))
		      (- presentation-top y-cursor-of-next-line)))
	      first-presentation)))))))

;;;Note: requires that something else have cleared the needed screen area already
;;;Starting at the line hbox until height has been
;;;satisfied or the item is fully displayed.  Return the amount of unsatisfied height.
(defmethod 1(:display-vertical-height0 1dex-item)0 (pane height line-hbox)
  (let (done height-left last-screen-line)
    (unless (null line-hbox)			;happens at the very end of the buffer
      (nsage::with-line-source-from (line-hbox 0)
	(nsage::with-presentation-stack ()
	  (nsage::with-ambient-counters
	    (unwind-protect
		(dw:with-output-truncation (pane)
		  (loop with line-top-y = (vertical-cursorpos pane)	;top of the display box
			with screen-line-index	; = (send pane :screen-line-index line-top-y)
			with line-height	;extra above, plus the line itself
			for hbox = (send self :take-line)	;get the next displayable hbox
			while (and hbox		;enough space remaining for this line?
				   (or
				     (progn (setq line-height
						  (send hbox :screen-display-height-of-box))
					    ;; as long as we're still in the viewport
					    (plusp height))
				     ;; an outstanding presentation!
				     (not (zerop (fill-pointer nsage::*presentation-stack*)))))
			do
		    (let ((old-top-y line-top-y))
		      (unwind-protect-case ()
			  (progn
			    ;;; Must check this first
			    ;; if line-height > height  (available-height)
			    ;; (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")and0 there's an item after this, we have to do our
			    ;; shuffling to ensure that we don't write over subsequent topics.
			    (let ((viewing-context (send pane :current-viewing-context)))
			      (when (and (> line-height height)
					 viewing-context
					 (next-item viewing-context (currently-displayed-item viewing-context)))
				(send pane :experimental-move-region line-top-y (+ line-top-y (- line-height height)))))

			    (send pane :set-cursorpos
				  0
				  (+ line-top-y
				     (nsage::microns-to-pixels
				       (send hbox :extra-space-above) :screen))
				  :pixel)
			    (send pane :display-line-hbox hbox)
			    (incf line-top-y line-height) ;these two are redundant methinks
			    (decf height line-height))
			(:abort
			  (setq barrier-hbox hbox)
			  (send pane :clear-region
			       0 (+ old-top-y
				    (nsage::microns-to-pixels (send hbox :extra-space-above)
							      :screen))
			       (send pane :inside-width) (+ old-top-y line-height))
			  (send pane :set-cursorpos 0 old-top-y :pixel))))
			finally
			  (send pane :set-cursorpos 0 line-top-y :pixel)
			  ;; If there's more to this guy, stick in the ellipsis presentation
			  (if (eq barrier-hbox :all)
			      (setq last-presentation nil)
			      (setq last-presentation
				    (send pane :insert-ellipsis self barrier-hbox)))
			  ; done or more space for another line
			  (setq done (< height line-height)
				height-left height	;vertical space left
				last-screen-line screen-line-index)))	;last line written on
	      (unless first-presentation
		(setq first-presentation (elt nsage::*presentations* 0)))
	      ;; P.S.  We 2never0 want the end-of-page-flag to be set.
	      (setf (tv:sheet-end-page-flag pane) 0)
	      )))))
    ;;Tell the mouse process that we changed what's on the screen under it.
    (tv:mouse-wakeup (tv:sheet-mouse pane) t)
    (values done height-left last-screen-line)))

(defun 1vertical-cursorpos0 (window)
  (multiple-value-bind (nil y) (send window :read-cursorpos) y))


;;;Displays a line-hbox at the current cursor position and updates the knowledge
;;;about contents of the screen.  Returns index of the next screen line to be
;;;written onto.
(defmethod 1(:display-line-hbox0 1dex-viewer-pane)0 (hbox)
  (declare (values index presentations))
  (let ((presentations (send hbox :display-line-gboxes-without-clearing-newlines self)))
    (values
      presentations)))

(defmethod (remove-item-from-display dex-viewer-pane) (item next-item)
  (let ((start-presentation (send item :first-presentation))
	(end-presentation (when next-item (send next-item :first-presentation)))
	(first-item-first-hbox (send item :first-hbox))
	(next-item-first-hbox (when next-item (send next-item :first-hbox))))
    (let ((top (dw::box-top (dw::presentation-displayed-box start-presentation)))
	  (bottom (or (and end-presentation
			   (dw::box-top (dw::presentation-displayed-box end-presentation)))
		      dw::maximum-y-position)))
      (let ((space-above-first (send first-item-first-hbox :extra-space-above))
	    (space-above-second (when next-item
				  (send next-item-first-hbox :extra-space-above))))
	(setq top (- top (nsage::microns-to-pixels space-above-first :screen)))
	(when space-above-second
	  (setq bottom (- bottom (nsage::microns-to-pixels space-above-second :screen))))
;	  (send self :experimental-remove-region top bottom)
	(send self :experimental-move-region bottom top)
	;; This causes flicker if the remove-region above happened
	;; to move the viewport.  I'm not sure what do do about this.
;	  (send self :refresh)
	))))

(defmethod (:experimental-remove-region dex-viewer-pane) (top bottom)
  ;; This only worries about vertical cursorposes, given that we know it'll be
  ;; called from within the context of the DocEx.  Maybe later we can
  ;; extend it to work more generally.
  (unless bottom
    (setq bottom dw::maximum-y-position))
  (let ((wid (send self :inside-width)))
    ;; Clear out the region
    (send self :clear-region 0 top wid bottom))
  (let ((dy (- top bottom)))
    (flet ((index-range (array window-start-index)
	     (declare (values start-index end-index))
	     (let ((start-index
		     (if ( top (dw::box-top dw::cursor-viewport))
			 (dw::top-displayable-index array top window-start-index)
		       (dw::top-displayable-index array top))))
	       (values start-index (fill-pointer array))))
	   (move-box (box boxes-moved)
	     (unless (gethash box boxes-moved)
	       (dw::set-box-position box (dw::box-left box) (+ (dw::box-top box) dy))
	       (setf (gethash box boxes-moved) t)))
	   (box-should-move (box)
	     ( (dw::box-top box) bottom)))
      (sys:with-data-stack
	(let* ((approximate-n-boxes
		 (macrolet ((approximate-number-of-boxes (array)
			      (multiple-value-bind (array-start-idx array-end-idx)
				  (dw::viewport-displayed-array-index-names array)
				`(multiple-value-bind (start-index end-index)
				     (index-range ,array ,array-start-idx)
				   (1+ (- end-index start-index))))))
		   (+ (approximate-number-of-boxes dw::displayed-strings)
		      (approximate-number-of-boxes dw::displayed-presentations)
		      (approximate-number-of-boxes dw::displayed-graphics))))
	       (boxes-moved (make-hash-table :size (floor (* 1.5 approximate-n-boxes))
					     :area :stack
					     :number-of-values 0)))
	  (macrolet ((do-overlapping-boxes ((object array box) &body body)
		       (multiple-value-bind (array-start-idx array-end-idx)
			   (dw::viewport-displayed-array-index-names array)
			 `(multiple-value-bind (start-index end-index)
			      (index-range ,array ,array-start-idx)
			    (loop for ,object being the array-elements of ,array
				      from start-index below end-index do
			      (let ((,box (dw::presentation-displayed-box ,object)))
				(when (box-should-move ,box)
				  . ,body)))))))
	    (do-overlapping-boxes (displayed-string dw::displayed-strings box)
	      (move-box box boxes-moved))
	    (do-overlapping-boxes (presentation dw::displayed-presentations box)
	      (labels ((move-one (presentation box)
			 (dolist (inferior (dw::presentation-inferiors presentation))
			   (let ((inferior-box (dw::presentation-displayed-box inferior)))
			     (when (box-should-move inferior-box)
			       (move-one inferior inferior-box))))
			 (move-box box boxes-moved)))
		(move-one presentation box)))
	    (do-overlapping-boxes (graphics dw::displayed-graphics box)
	      (move-box box boxes-moved)
	      (dw::presentation-adjust-for-box-move graphics 0 dy))))))
    ;; Update various saved cursor positions that might be in the same region.
    (flet ((move-point (y)
	     (declare (values x y moved-p))
	     (cond (( y bottom)
		    (values (+ y dy) t))
		   (t (values y)))))
      (when dw::rubout-handler
	(setq si:buffer-y (move-point si:buffer-y))
	(setq dw::input-editor-initial-y
	      (move-point dw::input-editor-initial-y)))
      (setq dw::maximum-y-position (+ dw::maximum-y-position dy))

      ;; move the viewport so that basically the same stuff is on the screen.
      (multiple-value-bind (v-left v-top v-right v-bottom) (dw::box-edges dw::cursor-viewport)
	(ignore v-right)
	(let ((changed-p nil))
	  (cond (( v-top bottom)
		 ;; just move the viewport up
		 (setq changed-p t)
		 (incf v-top dy))
		(( bottom v-bottom)
		 ;; viewport overlaps region being removed, must refresh
		 (setq changed-p t)
		 (incf v-top dy)))
	  (when changed-p
	    (setq v-top (max v-top 0))		;no lower than 0
	    (send self :set-viewport-position v-left v-top)
	    (send self :refresh))))

      (multiple-value-bind (ox oy)
	  (send self :read-cursorpos)
	(multiple-value-bind (ny moved-p)
	    (move-point oy)
	  (when moved-p
	    (send self :set-cursorpos ox ny)))))))

;;; Moves a region around on the window, handling display properly if
;;; requested.  If from > to, clobber the existing stuff between to and
;;; from before moving the region.
(defmethod (:experimental-move-region dex-viewer-pane) (from-top to-top)
  ;; This only worries about vertical cursorposes, given that we know it'll be
  ;; called from within the context of the DocEx.  Maybe later we can
  ;; extend it to work more generally.
  (let ((old-max-y dw::maximum-y-position))
    (send self :close-current-output-displayed-string)
    (when (> from-top to-top)
      (let ((wid (send self :inside-width)))
	;; Clear out the region
	(send self :clear-region 0 to-top wid from-top)))
    (let ((dy (- to-top from-top)))
      (flet ((index-range (array window-start-index)
	       (declare (values start-index end-index))
	       (let ((start-index
		       (if ( (min to-top from-top)
			      (dw::box-top dw::cursor-viewport))
			   (dw::top-displayable-index array (min to-top from-top)
						      :start window-start-index)
			 (dw::top-displayable-index array
						    (min to-top from-top)))))
		 (values start-index (fill-pointer array))))
	     (move-box (box boxes-moved)
	       (unless (gethash box boxes-moved)
		 (dw::set-box-position box (dw::box-left box) (+ (dw::box-top box) dy))
		 (setf (gethash box boxes-moved) t)))
	     (box-should-move (box)
	       ( from-top (dw::box-top box))))
	(sys:with-data-stack
	  (let* ((approximate-n-boxes
		   (macrolet ((approximate-number-of-boxes (array)
				(multiple-value-bind (array-start-idx array-end-idx)
				    (dw::viewport-displayed-array-index-names array)
				  `(multiple-value-bind (start-index end-index)
				       (index-range ,array ,array-start-idx)
				     (1+ (- end-index start-index))))))
		     (+ (approximate-number-of-boxes dw::displayed-strings)
			(approximate-number-of-boxes dw::displayed-presentations)
			(approximate-number-of-boxes dw::displayed-graphics))))
		 (boxes-moved (make-hash-table :size (floor (* 1.5 approximate-n-boxes))
					       :area :stack
					       :number-of-values 0)))
	    (macrolet ((do-overlapping-boxes ((object array box) &body body)
			 (multiple-value-bind (array-start-idx array-end-idx)
			     (dw::viewport-displayed-array-index-names array)
			   `(multiple-value-bind (start-index end-index)
				(index-range ,array ,array-start-idx)
			      (loop for ,object being the array-elements of ,array
					from start-index below end-index do
				(let ((,box (dw::presentation-displayed-box ,object)))
				  (when (box-should-move ,box)
				    . ,body)))))))
	      (do-overlapping-boxes (displayed-string dw::displayed-strings box)
	        (move-box box boxes-moved))
	      (do-overlapping-boxes (presentation dw::displayed-presentations box)
	        (labels ((move-one (presentation box)
			   (dolist (inferior (dw::presentation-inferiors presentation))
			     (let ((inferior-box (dw::presentation-displayed-box inferior)))
			       (when (box-should-move inferior-box)
				 (move-one inferior inferior-box))))
			   (move-box box boxes-moved)))
		  (move-one presentation box)))
	      (do-overlapping-boxes (graphics dw::displayed-graphics box)
		(move-box box boxes-moved)
		(dw::presentation-adjust-for-box-move graphics 0 dy))))))
      ;; Update various saved cursor positions that might be in the same region.
      (flet ((move-point (y)
	       (declare (values y moved-p))
	       (cond (( y from-top)
		      (values (+ y dy) t))
		     (t (values y)))))
	(when dw::rubout-handler
	  (setq si:buffer-y (move-point si:buffer-y))
	  (setq dw::input-editor-initial-y
		(move-point dw::input-editor-initial-y)))

	(setq dw::maximum-y-position (+ old-max-y dy))

	;; move the viewport so that basically the same stuff is on the screen.
	(multiple-value-bind (v-left v-top v-right v-bottom) (dw::box-edges dw::cursor-viewport)
	  (ignore v-right)
	  (let ((do-cursorpos-too nil))
	    (multiple-value-bind (ox oy)
		(send self :read-cursorpos)
	      (unless (and (> to-top from-top) ( v-top oy v-bottom))
		(setq do-cursorpos-too t))
	      (let ((changed-p nil))
		(cond ((> to-top from-top)
		       (cond ((> v-top from-top)
			      (setq changed-p t)
			      (incf v-top dy))
			     #+ignore ((> v-bottom from-top)
				       ;(dbg:whistle :direction :down)
				       (setq changed-p t)
				       (incf v-top dy))))
		      ((< to-top from-top)
		       (cond (( v-top from-top)
			      ;; if the viewport is in the stuff that changed
			      ;; then, if stuff in the viewport is moving,
			      ;; redisplay it, otherwise, just move the viewport.
			      ;; Unfortunately, can't do this now.
			      (setq changed-p t)
			      (incf v-top dy))
			     ((> v-bottom to-top)
			      (send self :redraw-inside-sets)))))
		(when changed-p
		  (setq v-top (max v-top 0))	;no lower than 0
		  (send self :refresh)
		  (send self :set-viewport-position v-left v-top)
		  ))

	      (when do-cursorpos-too
		(multiple-value-bind (ny moved-p)
		    (move-point oy)
		  (when moved-p
		    (send self :set-cursorpos ox ny))))
	      )))))))

;;; ++++
;;; If the viewport is going to be set such that the ellipsis presentation
;;; for the active item is on display, better format some more lines.

(define-presentation-type 1show-more-of-topic0 ()
   :expander 'dw::window-wakeup)

(define-presentation-type 1scroll-position-changed-by-mouse0 ()
   :expander 'dw::window-wakeup)

(defun 1doc-ex-window-wakeup-handler0 (blip)
  (dw:presentation-blip-case blip
    (show-more-of-topic
      (lexpr-send (doc-ex-current-viewing-context dw:*program*)
		  :display-more-of-dex-item (dw:presentation-blip-object blip)))
    (scroll-position-changed-by-mouse
      (redisplay-bookmarks dw:*program*))
    (otherwise (dw::default-window-wakeup-handler blip))))

(defmethod 1(scroll-for-document-examiner dex-viewer-pane)0 (x-or-y type position)
  ;; If the ellipsis presentation for the active item is going to be on display
  ;; adjust the history before allowing the scroll code to redisplay the window.
  ;; Then insert a wakeup that inserts more of the active item.
  (when (eq x-or-y :y)
    (multiple-value-bind (viewport-left viewport-top)
	(dw::calculate-new-viewport-position self x-or-y type position)
      (let* ((active-item (send current-viewing-context :active-item))
	     (last-presentation (when active-item (send active-item :last-presentation))))
	(when last-presentation
	  (let ((viewport-width (dw::box-width dw::cursor-viewport))
		(viewport-height (dw::box-height dw::cursor-viewport)))
	    (when (dw::box-overlaps-region-p (dw:presentation-displayed-box last-presentation)
					     viewport-left viewport-top
					     (+ viewport-left viewport-width)
					     (+ viewport-top viewport-height))
	      (send self :force-kbd-input
		    (dw::make-presentation-blip :presentation-type 'show-more-of-topic
						:object `(,active-item ,viewport-top)))
	      ;; return the current viewport position so that nothing happens.
	      (return-from scroll-for-document-examiner
		(values (dw:box-left dw::cursor-viewport)
			(dw:box-top dw::cursor-viewport))))))))
    (when (member type '(:relative :absolute))
      ;; changed by mouse
      (send self :force-kbd-input
	    (dw::make-presentation-blip
	      :presentation-type 'scroll-position-changed-by-mouse)))))


(defmethod 1(:reset-context0 1dex-viewer-pane)0 (new-context &optional first-time)
  (let ((state (send new-context :dynamic-window-state)))
    (setq dw::displayed-strings
	  (dynamic-window-state-displayed-strings state))
    (setq dw::displayed-graphics
	  (dynamic-window-state-displayed-graphics state))
    (setq dw::displayed-presentations
	  (dynamic-window-state-displayed-presentations state))
    (setq dw::maximum-x-position (dynamic-window-state-maximum-x-position state))
    (setq dw::maximum-y-position (dynamic-window-state-maximum-y-position state))
    ;; Must do this before the :set-cursorpos or things get screwed up.
    ;; Also, seems as if this causes the screen to flash twice.
    (unless first-time
      (send self :set-viewport-position
	    (dynamic-window-state-viewport-x state) (dynamic-window-state-viewport-y state))
      (send self :set-cursorpos
	    (dynamic-window-state-cursor-x state)
	    (dynamic-window-state-cursor-y state)))
    (setq current-viewing-context new-context)
;    (send self :refresh)
    )
  (send self :set-label `(:string
			  ,(format nil "Viewer: ~A~@[ (~:(~A~))~]"
				   (send current-viewing-context :name)
				   (let ((mode (send current-viewing-context
						     :record-lookup-mode)))
				     (and mode
					  (ecase mode
					    ((:normal :edit-newest-record) nil)
					    (:use-published-record "Published")))))
			  ;---redundant but it refused otherwise
			  :style ,(ecase (type-of-docex-frame self)
				    (small-doc-ex
				      '(:swiss :bold-italic :small))
				    (doc-ex
				      '(:swiss :bold-italic :normal)))
				 )))


;;;Formatting stuff

(defflavor 1dex-gray-bar-hbox
0	(height					;this is in pixels
	 extra-space-above)			;so is this
	(nsage::fake-line-hbox				;defined in sage-defs
	 nsage::doubly-linked-list-mixin)
  :settable-instance-variables)

(defmethod 1(:annotate-line-heights0 1dex-gray-bar-hbox) ()
0  (setq height (* 2 nsage::*microns-per-screen-pixel*)))

(defmethod 1(:annotate-line-spread0 1dex-gray-bar-hbox)0 ()
  (let ((below (or (and sage::prev (send sage::prev :extra-space-below)) 0)))
    (let ((extra (* 2 nsage::*microns-per-screen-pixel*)))
      (setq extra-space-above (max extra below))
      extra)))

(defmethod 1(sage::annotate-line-box-widths dex-gray-bar-hbox)0 ()
  ())

(defmethod 1(:screen-display-height-of-box0 1dex-gray-bar-hbox) ()
0  ;;need to return pixels here
  (nsage::microns-to-pixels (+ height extra-space-above) :screen))

;;;For drawing a gray box around a particular line of a window
;;;Note: just bitblits the stuff out there.  Doesn't adjust cursor position
(defmethod 1(:display-line-gboxes0 1dex-gray-bar-hbox)0 ()
  (let ((window (send nsage::*current-sage-device* :window)))
    (multiple-value-bind (x y) (send window :read-cursorpos)
      (send window :draw-1-bit-raster (send window :inside-width)
	    (nsage::microns-to-pixels height :screen) tv:33%-gray 0 0 x y :flip :noop))))

(defmethod 1(:display-line-gboxes-without-clearing-newlines dex-gray-bar-hbox)0 (&optional w)
  ;; Simplest for the time being is the following:
  (sage::with-device-stream (stream)
    (when w (setq stream w))
    (multiple-value-bind (x y)
	(send stream :read-cursorpos)
      (graphics:with-graphics-translation (stream x y)
	(graphics:with-graphics-scale (stream (/ sage:*microns-per-device-pixel*))
	  (sage::inside-sage-graphics-transform
	    (let* ((width-in-pixels (send stream :inside-width))
		   (width-in-microns (* width-in-pixels sage:*microns-per-device-pixel*)))
	      (graphics:draw-rectangle 0 0 width-in-microns height
				       :pattern tv:33%-gray :stream stream))))))))

;;;---This gets cached, so it doesn't notice when you recompile documentation or resize
;;;window.
;;;We can't find out the height of the item, even if all the lines are "real" (as
;;;opposed to unexpanded, because the heights haven't been annotated yet.)
;;;This method is really violating modularity because it is sticking something onto
;;;the end of the item, due to knowing about the internal implementation.
(defmethod 1(:prepare-documentation0 1dex-item) (viewer-pane)
0  viewer-pane ;;---Really should use the view pane for formatting info, like size.
  (unless nsage::line-source			;can't have it happen twice. Not yet anyhow
    (setq nsage::line-source (nsage::formatted-sage-record-line-source record-group))	;formats top level

    #||
    ;;--- I can't believe this is right.  Looks like an old-Sage turd --rom
    (let ((record (nsage::find-record-for-lookup record-group)))
      (nsage::doc-record-put-sage-property record 'nsage::location
					   (send nsage::line-source :first-doc-record))
      )
    ||#

    ;;now we add in the final terminator bar
    (if nsage::line-source				;paranoia check
	(loop for hbox = (send nsage::line-source :first-line-hbox) then next
	      for next = (nsage::box-next hbox)	;keep going until last line is in hand
	      when (null next)			;found last line, stick in separator bar
	      do (let ((gray-box (make-instance 'dex-gray-bar-hbox)))
		   (nsage::splice-boxes-after hbox gray-box)
		   (return)))
	(error "Problem: the documentation record for ~A as a ~A is completely null."
	       (nsage::record-group-topic record-group)
	       (nsage::coerce-record-type (nsage::record-group-type record-group)
					  'nsage::print-name))))
  ())
