;;; -*- Syntax: Common-lisp; Mode: Lisp; Package: DDEX; Lowercase: T; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun default-sage-printer ()
  (cond ((nsage::sage-can-deal-with-printer
	   hardcopy:*default-text-printer*)
	 hardcopy:*default-text-printer*)
	(t (let ((default nil))
	     (when
	       (loop for printer
			 in nsage::*previous-sage-display-target-printers*
		     thereis (nsage::sage-can-deal-with-printer
			       (setq default printer)))
	       default)))))

(define-doc-ex-command-and-documentation
  (D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")com-hardcopy-viewer
0    :documentation "Sends the topics in the viewer to a printer."
    :menu-accelerator t
    :menu-level :viewer-commands)
    ((viewer 'viewer
	     :default current-viewing-context
	     :confirm t
	     :prompt "viewer name")
     (printer '((nsage::documentation-destination :include-screen nil))
	      :default (default-sage-printer)
	      :prompt "on printer")
     &key
     (seen-only 'boolean
		:default t
		:documentation "Only hardcopy text that's been seen"))
   (prepare-viewer)
   (hardcopy-contents viewer printer :seen-only seen-only))

(defmethod (hardcopy-contents dex-viewing-context) (printer &key (seen-only t) context)
  (ignore context)				;never get passed this anyway.
  (hardcopy-contents bookmarks-contents printer :seen-only seen-only :context self))

(defmethod (hardcopy-contents dex-bookmarks-contents) (printer
							&key (seen-only t)
							context)
  (nsage::with-sage-device (printer nil :page-headings ""
				    :hardcopy-options
				    `(:title ,(format nil "Contents of viewer ~A"
						      (send context :name))))
    (loop for item being the array-elements of contents
	  until (and seen-only (not (send context :in-viewer-p item)))
	  do
      (nsage::display-on-device #'nsage::formatted-sage-record-line-source
				(send item :record-group)))))
(define-doc-ex-command-and-documentation
  (1com-hardcopy-documentation
0    :documentation "Hardcopies a topic from the documentation set to a supported printer.")
    ((record-group 'nsage::record-group :default nil :confirm t
	   :prompt "topic")
     (printer '((nsage::documentation-destination :include-screen nil))
	      :default (default-sage-printer)
	      :confirm t
	      :prompt "on printer"))
   (nsage::keeping-sage-files
     (nsage::sage-displayer printer
			    (nsage::appropriate-title-rendering record-group
								'nsage::no-formatting)
			    #'nsage::formatted-sage-record-line-source
			    record-group)))

;;; Yecch!!
(defun hardcopy-documentation-tester (&rest ignored)
  (cp:command-in-command-table-p 'com-hardcopy-documentation cp:*command-table*))

(define-presentation-to-command-translator
  record-group-to-com-hardcopy-documentation-translator
  (nsage::record-group :documentation ((ignore) "Hardcopy this topic")
		       :do-not-compose t
		       :tester hardcopy-documentation-tester
		       :gesture nil)
  (record-group)
  (cons 'com-hardcopy-documentation
	(cp:choose-command-arguments 'com-hardcopy-documentation
				     :initial-arguments (ncons record-group)
				     :stream *query-io*
				     :mode :keyboard)))

(define-presentation-to-command-translator
  record-group-name-to-com-hardcopy-documentation-translator
  (nsage::record-group-name :tester hardcopy-documentation-tester
			    :do-not-compose t
			    :documentation
			    ((ignore)
			     "Hardcopy this topic")
			    :gesture nil)
  (record-group-name)
  (let ((record-group
	  (nsage::convert-record-group-name-to-record-group-using-mouse
	    record-group-name)))
    (when record-group
      (cons 'com-hardcopy-documentation
	    (cp:choose-command-arguments 'com-hardcopy-documentation
					 :initial-arguments (ncons record-group)
					 :stream *query-io*
					 :mode :keyboard)))))

(define-presentation-to-command-translator
  bookmark-to-com-hardcopy-documentation-translator
  (bookmark :documentation ((ignore) "Hardcopy this topic")
	    :do-not-compose t
	    :tester hardcopy-documentation-tester
	    :gesture nil)
  (bookmark)
  (cons 'com-hardcopy-documentation
	(cp:choose-command-arguments 'com-hardcopy-documentation
				     :initial-arguments
				     (ncons (convert-bookmark-to-record-group bookmark))
				     :stream *query-io*
				     :mode :keyboard)))
    
(define-doc-ex-command (1com-hardcopy-private-document
0			 :menu-accelerator t
			 :menu-level :private-document-commands)
    ((pathname '((pathname) :default-type :private-document)
	       :default (send (fs:merge-pathnames "private" (fs:default-pathname))
			      :new-canonical-type :private-document)
	       :confirm t)
     (printer '((nsage::documentation-destination :include-screen nil))
	      :default (default-sage-printer)
	      :prompt "on printer"))
   (nsage::with-sage-device (printer nil
			     :page-headings ""
			     :hardcopy-options
			     `(:title ,(string pathname)))
     (read-load-private-document
       self pathname
       #'(lambda (record-group)
	   (nsage::display-on-device #'nsage::formatted-sage-record-line-source
				     record-group))
       nil)))
