;;; -*- Mode: LISP; Syntax: Common-lisp; Package: (DDEX :USE SCL); Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


(defvar *VIEWS-FOR-OVERVIEW-GRAPH* 'sage::(expand precis contents))
(defvar *VIEWS-FOR-OVERVIEW-CROSSREFERENCES* 'sage::(crossreference crossref topic))

(defun get-parents (record-group)
  (let ((parents (nsage::sage-who-calls-internal record-group *views-for-overview-graph*)))
    (if (null parents)
	;; no parents, return topic itself as root
	(ncons record-group)

	;; otherwise, get parents into correct format
	;; (If record group called by multiple records in the same record group
	;; don't produce duplicate graphs.)
	(setq parents (remove-duplicates parents :key #'sage::doc-record-record-group))
	(map 'list #'nsage::doc-record-record-group parents))))

;;; This function lumps all concept types together, since there is only one
;;; topic namespace for all concept types.  
(defun same-node-p (record-group1 record-group2)
  (and (eq (nsage::record-group-topic record-group1)
	   (nsage::record-group-topic record-group2))
       (let ((type1 (nsage::record-group-type record-group1))
	     (type2 (nsage::record-group-type record-group2)))
	 (or (eq type1 type2)
	     (and (nsage::concept-type-p type1)		; or both concept-types
		  (nsage::concept-type-p type2))))))

;;; Code to do Sage-specific portions of graph computation.  This
;;; function provides the general purpose grapher with the
;;; necessary functions to produce successive generations and
;;; pretty-print the topic names in the nodes.

(defun display-overview-graph (original-record-group &optional (window *standard-output*))
  (flet ((draw-rule (stream &key (thickness 1) width)
	   (multiple-value-bind (x y)
	       (send stream :read-cursorpos)
	     (let ((wid (or width (send stream :inside-width))))
	       (graphics:draw-line x y (+ x wid) y :thickness thickness
				   #+ignore :gray-level #+ignore .3)))))
    (dw:with-output-truncation (window)
      (let* ((typeout-window-p (operation-handled-p window :incomplete-p)))
	(when (and typeout-window-p (send window :incomplete-p))
	  ;; typeout-window is exposed and something's on it.
	  (draw-rule window :thickness 2 #+ignore :width #+ignore max-width)
	  (send window :increment-cursorpos 0 10)))

	(multiple-value-bind (y-cursor max-width)
	    (display-overview-item (cli::follow-synonym-stream window)
				   original-record-group
				   )
	(when y-cursor
	  (fresh-line window)
	  (send window :increment-cursorpos 0 10)
;	  (draw-rule window :thickness 1 :width max-width)
	  (ignore max-width)			;because we no longer use it above.
	  (dotimes (i 2) (terpri window))
	  (let ((roots (get-parents original-record-group))
		(registry)
		(column-spacing dw:*default-graph-column-spacing*)
		(field-width))
	    (labels ((record-group-callees (record-group)
		       (let ((installed-record
			       (nsage::find-record-for-lookup record-group)))
			 (and installed-record (nsage::doc-record-callees installed-record))))
		     ;; Intern all topic/type lists so the grapher doesn't get confused
		     ;; on the second pass.
		     (make-topic (record-group &optional title)
		       (or (find record-group registry :key #'car)
			   (first (push (cons record-group title)
					registry))))
		     (topic-printer (item stream)	; item is (rg) or (rg title)
		       (let ((topic-has-children
			       (and (not (graphable-topic-children item))
				    (not (null (all-topic-children item))))))
			 ;; will eventually use this in the incremental version
			 (ignore topic-has-children)
			 (unless (second item)
			   (let ((title (nsage::appropriate-title-rendering
					  (first item)
					  'nsage::no-formatting)))
			     (nconc item (list title))))
			 (dw:with-output-as-presentation (:stream stream
							  :object (first item)
							  :type 'nsage::record-group)
			   (filling-output (stream :fill-column field-width ;'(30 :character)
						   :fill-characters '(#\Space #\-))
			     (write-string (second item) stream)))
			 ;; draw a trailing  if there are children
			 ;(when topic-has-children
			 ;  (write-string " " stream))
			 ))
		     ;; Finds children (callees) of a sage topic.
		     (all-topic-children (item)
		       (destructuring-bind (record-group &rest ignored)
			   item
			 (let ((record (nsage::find-record-for-lookup record-group)))
			   (let ((source-type
				   (or (and record (nsage::doc-record-source-type record))
				       (nsage::record-group-type record-group))))
			     (if (eq source-type 'nsage::dictionary)
				 ;; Don't expand children dictionaries.  Pretend that the
				 ;; dictionary has only one child, the original topic.
				 (unless (same-node-p record-group original-record-group)
				   (list (make-topic original-record-group)))
				 (let ((children 
					 (record-group-callees record-group)))
				   ;; only return EXPAND references, not crossrefs
				   (loop for (child-ref . record-groups) in children
					 when (member child-ref
						      *views-for-overview-graph*)
					   append record-groups into rec-grps
					 finally
					   (return (map 'list #'make-topic rec-grps)))))))))
		     ;; When the user requests a graph of a topic, we only graph the
		     ;; "immediate family" of the topic: its parent, its parent's children
		     ;; (including itself), and its children.  This function restricts the
		     ;; graph to that set.
		     (graphable-topic-children (item)	;item is '(rec-grp) or '(rec-grp title)
		       (destructuring-bind (record-group &rest ignored)
			   item
			 ;; is the node a parent of the original topic  or the original node?
			 (when (or (member (first item) roots :key #'car)
				   ;; (avoid type-system lossage: SECTION = SCRIPT, etc.)
				   (same-node-p
				     record-group
				     original-record-group
				     ))
			   (all-topic-children item)))))
	      (fresh-line window)
	      ;; draw the actual graph(s)
	      (setq roots (map 'list #'(lambda (item) (make-topic item)) roots))
	      ;; Figure out the appropriate field width based on the tree depth
	      (let ((tree-depth 0))
		(labels ((traverse (item depth)
			   (setq tree-depth (max tree-depth depth))
			   (dolist (child (graphable-topic-children item))
			     (traverse child (1+ depth)))))
		  (dolist (item roots)
		    (traverse item 1)))
		(setq field-width (- (/ (+ (send window :inside-width) column-spacing)
					tree-depth)
				     column-spacing)))
	      (with-character-style ('(:swiss :roman :small) window)
		(sys:letf-if (typep window 'tv:sheet)
			     (((tv:sheet-line-height (si:follow-syn-stream window))
			       (- (tv:sheet-line-height (si:follow-syn-stream window)) 2)))
		  (dw:format-graph-from-root
		    roots
		    #'topic-printer
		    #'graphable-topic-children
		    :test 'equal
		    :stream window
		    :root-is-sequence t
		    :border nil
		    :column-spacing column-spacing
		    :within-column-spacing 5
		    :orientation :horizontal)))))
	  (fresh-line window)
	  ;; Scroll the window back if the beginning is no longer within the viewport.
	  (when (operation-handled-p window :cursor-viewport)
	    (when (> (dw::box-top (send window :cursor-viewport)) y-cursor)
	      (send window :set-viewport-position 0 y-cursor))))
	  ))))

#||
(cp:define-command (com-show-topic-graph :command-table 'user)
    ((topic 'nsage::documentation-topic))
   (display-overview-graph topic standard-output))

(scl:define-presentation-to-command-translator show-documentation
					       (documentation-topic-set :gesture :left)
  (topic)
  `(com-show-documentation ,topic))

(scl:define-presentation-to-command-translator graph-topic
					       (documentation-topic-set :gesture :middle)
  (topic)
  `(com-show-topic-graph ,topic))
||#


(defun display-overview-item (window item)
  (declare (values y-cursor max-width))
  (let ((nsage::*debugging-sage* ())
	(nsage::*debugging-formatter* ()))
    (nsage::with-sage-device (window :screen)
      (multiple-value-bind (line-source micron-width micron-height)
	  (formatted-overview-source item)
	(let ((height (nsage::microns-to-pixels micron-height :screen))
	      (width (nsage::microns-to-pixels micron-width :screen)))
	  ;;Add an extra half a line.  Some bottom margin looks good anyway.
	  (incf height (sys:ceiling (send window :line-height) 2))
	  (fresh-line window)
	  (multiple-value-bind (ignore y-cursor)
	      (send window :read-cursorpos)
	    (with-character-style ('(:swiss :bold-italic :normal) window :bind-line-height t)
	      (format window "Overview~&"))
	    (multiple-value-bind (start-x start-y)
		(send window :read-cursorpos)
	      (ignore start-x)
	      (nsage::with-presentation-stack ()
		(loop with y = 0
		      for line = (send line-source :take-line) while line
		      for height = (nsage::microns-to-pixels (send line :height) :screen)
		      for extra = (nsage::microns-to-pixels
				    (send line :extra-space-above) :screen)
		      do (send nsage::*current-sage-device* :set-cursorpos
			       () (+ start-y y extra) :pixel)
			 (send line :display-line-gboxes-without-clearing-newlines)
			 (incf y (+ extra height))))
	      (send window :set-cursorpos start-x (+ start-y height))
	      (values y-cursor width))))))))

(defun formatted-overview-source (item)
  (declare (values line-source micron-width micron-height))
  (let* ((nsage::*microns-per-device-pixel* nsage::*microns-per-screen-pixel*)
	 (directives (formatted-overview-directives item))
	 (first-gbox
	   (nsage::with-document-and-device-types ()
	     (nsage::with-device-toplevel-environment (envr)
	       (nsage::with-temp-list-head (head)
		 (nsage::splice-contents-list head envr directives)))))
	 (source (make-instance 'nsage::source-of-formatted-sage-gboxed-lines
				:first-gbox first-gbox)))
    (multiple-value-bind (width height)
	(loop with (width height)
	      for line-hbox = (send source :take-line) while line-hbox
	      do (multiple-value-setq (width height) (send line-hbox :total-width-and-height))
	      maximize width into max-width
	      sum height into total-height
	      finally (return (values max-width total-height)))
      (overview-timing "Formatting")
      ;;Add in a little right margin
      (incf width (nsage::micron-width-of-char () #\m))
      (send source :take-it-from)
      (values source width height))))

(defun formatted-overview-directives (item)
  #+Ignore
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")  (let ((data (formatted-overview-directives-1 item)))
    (overview-timing "Computing text")
    (let ((directives (nsage::convert-@-to-directives data)))
      (overview-timing "Converting to directives")
      (list directives)))
0  (formatted-overview-directives-2 item)
  )

  #+Ignore
;;(FUNDEFINE 'FORMATTED-OVERVIEW-DIRECTIVES-1)
 1(defun formatted-overview-directives-1 (record-group)
  (let ((document-p (nsage::document-p record-group))
	(type-string (nsage::namespace-type-string record-group))  ;get user-visible name right
	(record-for-lookup (nsage::find-record-for-lookup record-group)))
    (flet ((quoted-ref (record-group)
	     (declare (sys:downward-function))
	     (let ((nsage::topic (nsage::record-group-topic record-group))
		   (nsage::type (nsage::record-group-type record-group)))
	       `nsage::((@ reference (topic ,topic) (type ,type) (field topic))))))
      ;;---hardwired assumption about window size.  We don't want the
      ;;overview window to exceed the width of the viewer pane, else it
      ;;(the overview) would overlap the candidates and bookmark panes,
      ;;losing their mouse sensitivity.  When we can adjust the size of
      ;;the viewer pane, make this adjustable correspondingly.
      `nsage::
      (@ (text (linewidth "500pixels") (indent "-4") (spread "4 pixels"))
       ;; name of the record
       (@ list
	,*two-newlines* 
	,ddex::type-string ": " (@ | |)
	,@(ddex::quoted-ref ddex::record-group)
	,*two-newlines*)
       ;; summary (if any)
       ,(let ((summary
		(and ddex::record-for-lookup
		     (nsage::record-field-contents	;contents-list or NIL
		       (doc-record-oneliner ddex::record-for-lookup)))))
	  (when (and (not (null summary)) (non-white-contents-list summary))	;if any
	    `(@ list "Summary: " ,@summary ,*two-newlines*)))
       ;;  Parent topics where the view is considered "structural"
       ,(let* ((callers (sage-who-calls-internal ddex::record-group
						 ddex::*views-for-overview-graph*))
	       (ncallers (length callers)))
	  (ddex::overview-timing "  Who-calls")
	  (cond (ddex::document-p ())		;documents don't bother reporting inclusion
		((> ncallers 0)
		 `(@ list "It is included in topic" ,(if ( ncallers 1) "s: " ": ")
		   ,@(loop for comma = () then ", "
			   for caller-record in callers	;wants 'source
			   as caller-record-group = (doc-record-record-group caller-record)
			   when comma collect it
			   append (ddex::quoted-ref caller-record-group))
		   ,*two-newlines*))
		(T `(@ list "It is not currently included in any topic."
		     ,*two-newlines*))))
       ;;  Documents that include the full record
       ,(let* ((documents (zwei:new-find-topic-documents ddex::record-group))
	       (ndocuments (length documents)))
	  (ddex::overview-timing "  Topic documents")
	  (cond (ddex::document-p `(@ list "This is itself a document." ,*two-newlines*))
		((> ndocuments 0)
		 `(@ list "It appears in document" ,(if ( ndocuments 1) "s: " ": ")
		   ,@(loop for comma = () then ", "
			   for parent-record-group in documents
			   when comma collect it
			   append (ddex::quoted-ref parent-record-group))
		   ,*two-newlines*))
		(T `(@ list "It does not currently appear in any document."
		     ,*two-newlines*))))
       ;;  keywords (only if different from the topic name)
       ;; Assumption: the first sublist in the keywords came from the title of the record
       ;; so don't use the first one.
       ,(let ((keywords (and ddex::record-for-lookup
			     (cdr (doc-record-tokens ddex::record-for-lookup)))))
	  (when keywords
	    `(@ list
	      (@ r "Keywords:")
	      ,@(loop for sublist in keywords
		      collect '(@ *)
		      nconc (loop for string in sublist collect string collect " "))
	      ,*two-newlines*)))
       ;;  references
       ,(labels ((refs (record)
		   (let ((callees (doc-record-callees record)))
		     ;;--- zwei:zcollect-nconc still broken?
		     (loop for view in ddex::*views-for-overview-crossreferences*
			   nconc
			   (append (cdr (assoc view callees))
			     ;; Fragment boundaries are not visible so find references
			     ;; that occur within any fragments included by this record
			     (loop for record-group in (cdr (assoc 'expand callees))
				   for record-for-lookup = (find-record-for-lookup
							     record-group)
				   when (and record-for-lookup
					     (eq (coerce-record-type
						   (record-group-type record-group) 'property)
						 :sage-fragment-record))
				   append (refs record-for-lookup)))))))
	  (let ((cross-references (and ddex::record-for-lookup
				       (delete-duplicates
					 (refs ddex::record-for-lookup)))))
	    (when cross-references		;---wants to include Related field eventually
	      `(@ list
		(@ r "See also: ")
		;;Before dynamic windows there was a limit on the number of
		;;crossreferences allowed in an overview.  The limit isn't needed with DDEX.
		,@(loop for record-group in cross-references
			collect '(@ *)
			append (ddex::quoted-ref record-group))
		,*two-newlines*))))))))

0(defun formatted-overview-directives-2 (sage::record-group)
  sage:: ;;---Get the feeling this is in the wrong package?
  (let ((document-p (document-p record-group))
	 (type-string (namespace-type-string record-group))	;get user-visible name right
	 (record-for-lookup (find-record-for-lookup record-group)))
    (flet ((quoted-ref (record-group)
	     (declare (sys:downward-function))
	     (list (make-sage-reference record-group nil '(topic)))))
      (macrolet ((do-separating ((var list separator) &body body)
		   `(let ((.first. T))
		      (dolist (,var ,list)
			(if .first.
			    (setq .first. nil)
			    (write-string ,separator))
			,@body))))
	;;---hardwired assumption about window size.  We don't want the
	;;overview window to exceed the width of the viewer pane, else it
	;;(the overview) would overlap the candidates and bookmark panes,
	;;losing their mouse sensitivity.  When we can adjust the size of
	;;the viewer pane, make this adjustable correspondingly.
	(making-sage-directives ()
	  (in-environment (T text linewidth "500pixels" indent "-4" spread "4 pixels")
			  (sage-paragraph)
			  ;; name of the record
			  (write-string type-string)
			  (write-string ": ")
			  (sage-command T 'literal-space)
			  (sage-contents-list T (quoted-ref record-group))
			  (sage-paragraph)
			  ;; summary (if any)
			  (let ((summary
				  (and record-for-lookup
				       (nsage::record-field-contents	;contents-list or NIL
					 (doc-record-oneliner record-for-lookup)))))
			    (when (and (not (null summary)) (non-white-contents-list summary))
			      (write-string "Summary: ")
			      (sage-contents-list T summary)
			      (sage-paragraph)))
			  ;;  Parent topics where the view is considered "structural"
			  (let* ((callers (sage-who-calls-internal
					    record-group
					    ddex::*views-for-overview-graph*))
				 (ncallers (length callers)))
			    (ddex::overview-timing "  Who-calls")
			    (cond (document-p
				   ;;documents don't bother reporting inclusion
				   ())
				  ((> ncallers 0)
				   (write-string "It is included in topic")
				   (write-string (if ( ncallers 1) "s: " ": "))
				   (do-separating (caller-record callers ", ")
				     (sage-contents-list T (quoted-ref
							     (doc-record-record-group
							       caller-record))))
				   (sage-paragraph))
				  (T (write-string "It is not currently included in any topic.")
				     (sage-paragraph))))
			  ;;  Documents that include the full record
			  (let* ((documents (zwei:find-topic-documents record-group))
				 (ndocuments (length documents)))
			    (ddex::overview-timing "  Topic documents")
			    (cond (document-p
				   (write-string "This is itself a document.")
				   (sage-paragraph))
				  ((> ndocuments 0)
				   (write-string "It appears in document")
				   (write-string (if ( ndocuments 1) "s: " ": "))
				   (do-separating (parent-record-group documents ", ")
				     (sage-contents-list T (quoted-ref parent-record-group)))
				   (sage-paragraph))
				  (T (write-string "It does not currently appear in any document.")
				     (sage-paragraph))))
			  ;;  keywords (only if different from the topic name)
			  ;; Assumption: the first sublist in the keywords came from the title of the record
			  ;; so don't use the first one.
			  (let ((keywords (and record-for-lookup
					       (cdr (doc-record-tokens record-for-lookup)))))
			    (when keywords
			      (in-environment (T r) (write-string "Keywords:"))
			      (dolist (sublist keywords)
				(flet ((canonicalize-and-output-keyword (keyword)
					 ;; this might want to first see if the
					 ;; sublist happens to correspond to a record
					 ;; group and then extract the appropriate 
					 ;; capitalization of each token in its title
					 ;; but that's for another day.
					 (format t "~(~A~)" keyword)))
				  (sage-command T 'force-line-break)
				  (do-separating (elt sublist " ") 
				    (canonicalize-and-output-keyword elt))))
			      (sage-paragraph)))
			  ;;  references
			  (let ((cross-references
				  (and record-for-lookup
				       (ddex::record-groups-referenced-by-record
					 record-for-lookup))))
			    (when cross-references	;---wants to include Related field eventually
			      (in-environment (T r) (write-string "See also: "))
			      (dolist (record-group cross-references)
				(sage-command T 'force-line-break)
				(sage-contents-list T (quoted-ref record-group)))
			      (sage-paragraph)))))))))

(defun record-groups-referenced-by-record (record)
  (let ((results ()))
    (labels ((check-refs (record)
	       (let ((callees (sage::doc-record-callees record)))
		 (dolist (view *views-for-overview-crossreferences*)
		   (dolist (callee (cdr (assoc view callees :test #'string-equal)))
		     (pushnew callee results))
		   ;; Fragment boundaries are not visible so find references
		   ;; that occur within any fragments included by this record
		   ;; ---I suppose this should also descend view=contents,
		   ;; for the same reason.
		   (dolist (record-group (cdr (assoc 'sage::expand callees)))
		     (let ((record-for-lookup (sage::find-record-for-lookup record-group)))
		       (and record-for-lookup
			    (eq (sage::coerce-record-type
				  (sage::record-group-type record-group)
				  'sage::property)
				:sage-fragment-record)
			    (check-refs record-for-lookup))))))))
      (check-refs record))
    (nreverse results)))

(defstruct (overview-time-spent :named-array-leader (:alterant ())
				(:constructor-make-array-keywords length))
  fill-pointer item)
(defvar *overview-time-spent* (make-overview-time-spent :length 20
							:fill-pointer 0))
(defun overview-timing (where &optional type item)
  (cond ((eq where :init)
	 (setf (fill-pointer *overview-time-spent*) 0)
	 (setf (overview-time-spent-item *overview-time-spent*) (list type item))
	 (vector-push-extend (time:microsecond-time) *overview-time-spent*))
	(T (let ((time (time:microsecond-time)))
	     (vector-push-extend where *overview-time-spent*)
	     (vector-push-extend time *overview-time-spent*)))))

(cp:define-command (com-show-documentation-overview 
		     :name "Show Overview"
		     :command-table "Documentation"
		     :provide-output-destination-keyword nil)
    ((record-group 'nsage::record-group
	    :prompt "of topic"
	    :confirm t))
   (ddex::display-overview-graph record-group))

(nsage::define-record-group-to-command-translator
  com-show-documentation-overview
  "Show Overview" "Show Overview"
  :gesture :describe)
