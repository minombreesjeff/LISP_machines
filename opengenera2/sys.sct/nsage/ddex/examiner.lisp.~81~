;;; -*- Package: (ddex :use SCL); Syntax: Common-lisp; Mode: LISP -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;A string, or a function of two args, the stream and a keyword.
;;Do Show Doc :PROMPT
(defvar D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*dex-command-prompt*0 'default-dex-prompt)

(defun 1type-of-docex-frame0 (window)
  (dw::program-name (send (send window :alias-for-selected-windows) :program)))

(defun 1default-dex-prompt0 (stream keyword)
  (ignore keyword)
  (with-character-style ('(:fix :roman :normal) stream)
    (ecase (type-of-docex-frame stream)
      (small-doc-ex
	(send stream :tyo #\space)
	(send stream :tyo #\arrow:right-open-arrow))
      (doc-ex
	(send stream :tyo #\space)
	(send stream :tyo #\arrow:right-triangle)))))

;; Get rid of the non-dynamic DeX, if any.
(setq tv:*select-keys* (delete #\D tv:*select-keys* :key #'car))

(dw:define-program-framework 1doc-ex
0; :select-key #\D
  :pretty-name "Standard Document Examiner"
  :system-menu nil
  :selectable nil
  :top-level (toplevel :unknown-accelerator-is-command t)
; :help doc-ex-help
  :command-definer  t
  :command-table
  (:inherit-from '(#+ignore "colon full command" "standard arguments"); "standard scrolling")
   :kbd-accelerator-p 't)
  :state-variables ((current-viewing-context)
		    (viewing-contexts)
		    (viewer-pane)		;where documentation text appears
		    (viewer-pane-items-array)
		    (candidate-pane)		;where tables of contents and menus appear
		    (bookmark-pane)		;where "chronology" of lookup appears
		    (command-pane)		;where commands get entered
		    (command-queue nil)		;local command-queue for this dex
		    )
  :panes
  ((title-pane :title
		 :redisplay-string "Document Examiner"
		 :default-character-style '(:eurex :italic :huge))

   (viewer-pane :display
		:typeout-window t
		:automatically-remove-typeout-window nil
		:blinker-p nil
		:more-p nil
		:end-of-page-mode :truncate
		:flavor dex-viewer-pane
		:margin-components
		`((dw:margin-ragged-borders :thickness 1)
		  (dw:margin-whitespace :margin :left :thickness 2)
		  (dw:margin-scroll-bar )
		  (dw:margin-whitespace :margin :bottom :thickness 2)
		  (dw:margin-scroll-bar :margin :bottom)
		  (dw:margin-white-borders :thickness 2)))
   (candidate-pane :display
		   ; :redisplay-function 'display-candidates
		   :more-p nil
		   :end-of-page-mode :truncate
		   :margin-components
		   `((dw:margin-pattern :margin :left :thickness 1 :pattern T)
		     (dw:margin-pattern :margin :top :thickness 1 :pattern t)
		     (dw:margin-pattern :margin :right :thickness 1 :pattern T)
		     (dw:margin-pattern :margin :bottom :thickness 1 :pattern T)
		     (dw:margin-whitespace :margin :left :thickness 2)
		     (dw:margin-scroll-bar )
		     (dw:margin-white-borders :thickness 2)
		     (dw:margin-label :style (:swiss :bold-italic :normal) 
				      :string "Current Candidates"
				      :margin :top)))
   (bookmark-pane :display
		  :redisplay-function 'display-bookmarks
		  :incremental-redisplay t
		  :more-p nil
		  :end-of-page-mode :truncate
		  :margin-components
		  `((dw:margin-pattern :margin :left :thickness 1 :pattern T)
		    (dw:margin-pattern :margin :top :thickness 1 :pattern t)
		    (dw:margin-pattern :margin :right :thickness 1 :pattern T)
		    (dw:margin-pattern :margin :bottom :thickness 1 :pattern T)
		    (dw:margin-whitespace :margin :left :thickness 2)
		    (dw:margin-scroll-bar )
		    #+ignore (dw:margin-scroll-bar :margin :bottom)
		    (dw:margin-white-borders :thickness 2)
		    (dw:margin-label :string "Bookmarks"
				     :style (:swiss :bold-italic :normal)
				     :margin :top)))
   (menu-pane :command-menu
	      :menu-level :top-level
	      :columns `(("Show Candidates" "Show Documentation"
			  "Show Overview" "Show Table of Contents")
			 ("Help" "Select Viewer"
			  "Reselect Candidates" "Read Private Document"))
	      :center-p t
	      :margin-components
	      `(;(dw:margin-pattern :margin :left :thickness 1 :pattern T)
		(dw:margin-pattern :margin :top :thickness 1 :pattern t)
		(dw:margin-pattern :margin :right :thickness 1 :pattern T)
		(dw:margin-pattern :margin :bottom :thickness 1 :pattern T)
		(dw:margin-whitespace :margin :left :thickness 2)
		(dw:margin-white-borders :thickness 2)))
   (command-pane :interactor
		 :more-p nil
		 :end-of-page-mode :scroll
		 :margin-components
		 `((dw:margin-pattern :margin :left :thickness 1 :pattern T)
		   (dw:margin-pattern :margin :top :thickness 1 :pattern t)
		   ;(dw:margin-pattern :margin :right :thickness 1 :pattern T)
		   (dw:margin-pattern :margin :bottom :thickness 1 :pattern T)
		   (dw:margin-whitespace :margin :left :thickness 4)
		   (dw:margin-scroll-bar)
		   (dw:margin-white-borders :thickness 2)
		   (dw:margin-label :string "(2 0 (NIL 0) (:SWISS :BOLD-ITALIC NIL) "HL12BI")Commands0";(3 0 (NIL 0) (:SWISS :ITALIC NIL) "HL12I") (Completion; end with Return)0"
				    :style (:swiss :roman :normal)
				    :margin :top))))
  :configurations
  '((dw::main
      (:layout (dw::main :column top-part bottom-part)
       (top-part :row title&viewer-pane candidates&bookmarks)
       (bottom-part :row command-pane menu-pane)
       (title&viewer-pane :column title-pane viewer-pane)
       (candidates&bookmarks :column candidate-pane bookmark-pane))
      (:sizes
         (dw::main (bottom-part 4 :lines command-pane) :then (top-part :even))
	 (bottom-part (command-pane 660.) :then (menu-pane :even))
	 (top-part (title&viewer-pane 660.) :then (candidates&bookmarks :even))
	 (title&viewer-pane (title-pane 1 :lines) :then (viewer-pane :even))
	 (candidates&bookmarks (candidate-pane 0.5) :then (bookmark-pane :even))))
       ))

;;; Another similar d-p-f is necessary to define a different window configuration
;;; of the DOC-EX window for a small screen, such as a Macintosh screen.
(dw:define-program-framework 1small-doc-ex
0;  :select-key #\D
  :pretty-name "Small Document Examiner"
  :system-menu nil
  :selectable nil
  :top-level (toplevel :unknown-accelerator-is-command t)
;  :help doc-ex-help
  :command-definer  t
  :command-table
  (:inherit-from
    '(#+ignore "colon full command" "standard arguments" "doc-ex"); "standard scrolling")
    :kbd-accelerator-p 't)
  :inherit-from (doc-ex)
  :state-variables ((current-viewing-context)
		    (viewing-contexts)
		    (viewer-pane)		;where documentation text appears
		    (viewer-pane-items-array)
		    (candidate-pane)		;where tables of contents and menus appear
		    (bookmark-pane)		;where "chronology" of lookup appears
		    (command-pane)		;where commands get entered
		    (command-queue nil)		;local command-queue for this dex
		    )
  :panes
  ((title-pane :title
		 :redisplay-string "Document Examiner"
		 :default-character-style '(:swiss :bold-italic :large)
		 :margin-components
		 '((dw:margin-pattern :margin :left :thickness 1 :pattern t)
		   (dw:margin-pattern :margin :right :thickness 1 :pattern t)
		   (dw:margin-pattern :margin :bottom :thickness 1 :pattern t)
		   (dw:margin-whitespace :margin :top :thickness 2)))

   (viewer-pane :display
		:typeout-window t
		:automatically-remove-typeout-window nil
		:blinker-p nil
		:more-p nil
		:end-of-page-mode :truncate
		:flavor dex-viewer-pane
		:margin-components
		`((dw:margin-ragged-borders :thickness 1)
		  (dw:margin-whitespace :margin :left :thickness 2)
		  (dw:margin-scroll-bar )
		  (dw:margin-whitespace :margin :bottom :thickness 2)
		  (dw:margin-scroll-bar :margin :bottom :elevator-thickness 5)
		  (dw:margin-white-borders :thickness 2)))
   (candidate-pane :display
		   ; :redisplay-function 'display-candidates
		   :more-p nil
		   :end-of-page-mode :truncate
		   :margin-components
		   `((dw:margin-pattern :margin :left :thickness 1 :pattern t)
		     (dw:margin-pattern :margin :top :thickness 1 :pattern t)
		     (dw:margin-pattern :margin :right :thickness 1 :pattern t)
		     (dw:margin-pattern :margin :bottom :thickness 1 :pattern t)
		     (dw:margin-whitespace :margin :left :thickness 4)
		     (dw:margin-scroll-bar )
		     (dw:margin-white-borders :thickness 2)
		     (dw:margin-label :style (:swiss :bold-italic :small) 
				      :string "Current Candidates"
				      :margin :top)))
   (bookmark-pane :display
		  :redisplay-function 'display-bookmarks
		  :incremental-redisplay t
		  :more-p nil
		  :end-of-page-mode :truncate
		  :margin-components
		  `((dw:margin-pattern :margin :left :thickness 1 :pattern t)
		    (dw:margin-pattern :margin :top :thickness 1 :pattern t)
		    (dw:margin-pattern :margin :right :thickness 1 :pattern t)
		    (dw:margin-pattern :margin :bottom :thickness 1 :pattern t)
		    (dw:margin-whitespace :margin :left :thickness 4)
		    (dw:margin-scroll-bar )
		    (dw:margin-white-borders :thickness 2)
		    (dw:margin-label :string "Bookmarks"
				     :style (:swiss :bold-italic :small)
				     :margin :top)))
   (menu-pane :command-menu
	      (4 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; The following is unfortunately necessary because inheritance from
	      ;; the DOC-EX program's command table somehow contaminates this menu
	      ;; if the level is default (to :TOP-LEVEL).
0	      :menu-level :small-top-level
	      :columns '(("Show")( "Other"))
	      :center-p t
	      :margin-components
	      `(;(dw:margin-pattern :margin :left :thickness 1 :pattern T)
		(dw:margin-pattern :margin :top :thickness 1 :pattern t)
		(dw:margin-pattern :margin :right :thickness 1 :pattern t)
		(dw:margin-pattern :margin :bottom :thickness 1 :pattern t)
		(dw:margin-whitespace :margin :left :thickness 2)
		(dw:margin-white-borders :thickness 2)))
   (command-pane :interactor
		 :more-p nil
		 :end-of-page-mode :scroll
		 :margin-components
		 `((dw:margin-pattern :margin :left :thickness 1 :pattern t)
		   (dw:margin-pattern :margin :top :thickness 1 :pattern t)
		   (dw:margin-pattern :margin :right :thickness 1 :pattern T)
		   (dw:margin-pattern :margin :bottom :thickness 1 :pattern t)
		   (dw:margin-whitespace :margin :left :thickness 4)
		   (dw:margin-scroll-bar)
		   (dw:margin-white-borders :thickness 2)
		   #+ignore	;real estate is too expensive here
		   (dw:margin-label :string "2Commands0";3 (Completion; end with Return)0"
				    :style (:swiss :bold-italic :small)
				    :margin :top))))
  :configurations
  '((dw::main
      (:layout (dw::main :column title&menu viewer-pane candidates&bookmarks command-pane)
       (title&menu :row title-pane #+Ignore menu-pane)
       (candidates&bookmarks :row candidate-pane bookmark-pane))
      (:sizes
         (dw::main (command-pane 2 :lines) (title&menu 1 :lines title-pane)
		   (candidates&bookmarks 4 :lines candidate-pane)
		   :then (viewer-pane :even))
	 (title&menu  #+Ignore #+Ignore (menu-pane 200.) :then (title-pane :even))
	 (candidates&bookmarks (candidate-pane 0.5) :then (bookmark-pane :even)))

      )
       ))

(defun 1choose-doc-ex-for-screen0 (screen)
  (let* ((real-screen (or screen tv:main-screen))
	 (screen-type (if (or (null real-screen) (> (send real-screen :inside-width) 950.))
			  :big-screen
			:small-screen)))
4    0(ecase screen-type
      (:big-screen 'doc-ex)
      (:small-screen 'small-doc-ex))))

(tv:add-dispatching-select-key
  #\D 'choose-doc-ex "Document Examiner" 'choose-doc-ex-for-screen t)

;;; Until choice-activities are better elaborated and conceptually integrated,
;;; we have to remove the entries that D-P-F puts in the *ACTIVITY-TABLE* for
;;; the individual DocEx variants.  The only one that should be there is put
;;; there for "Document Examiner" by the preceding form.
(remhash "Standard Document Examiner" cli::*activity-table*)
(remhash "Small Document Examiner" cli::*activity-table*)

;;; The following is necessary to put the "Document Examiner" entry in
;;; the system menu, as D-P-F would do.
(tv:add-activity-to-system-menu-programs-column "Document Examiner")
(tv:add-to-system-menu-create-menu "Document Examiner"
				   '(program-frame :program choose-doc-ex)
				   "A Document Examiner program frame.")

;;; Imports
(cp:install-commands "doc-ex"
		     '(sage::com-run-documentation-example
		       sage::com-edit-documentation-example))

(when (fboundp 'si:com-edit-definition)		; Development Utilities may not be loaded
  (cp:install-commands "doc-ex"
		       '(si:com-edit-definition)))

(cp:install-commands "small-doc-ex"
		     '(sage::com-run-documentation-example
		       sage::com-edit-documentation-example))

(when (fboundp 'si:com-edit-definition)		; Development Utilities may not be loaded
  (cp:install-commands "small-doc-ex"
		       '(si:com-edit-definition)))

(defun-in-flavor (prepare-viewer doc-ex) ()
  (dw:remove-window-typeout-window viewer-pane :prompt-p nil)
  ;; kludge!!
  (send dw:*program-frame* :inferior-select command-pane))

(defmethod (barf doc-ex) (format-string &rest format-args)
  (beep)
  (fresh-line command-pane)
  (apply #'format command-pane format-string format-args)
  nil)

(defvar 1*dex-background-request-queue*0 ())

(defvar *close-sage-files-timeout* (* 1 60 60))	;1 minute

(defun-in-flavor (process-background-requests doc-ex) ()
  (loop while *dex-background-request-queue*
	do 
    (let ((request (first *dex-background-request-queue*)))
      (catch-error-restart ((error sys:abort) "Skip processing this background request")
	(destructuring-bind (function . arguments) request
	  (apply function self arguments)))
      (without-interrupts
	(setq *dex-background-request-queue* 
	      (delete request *dex-background-request-queue*))))))

;; Ditto for local requests
(defun-in-flavor (process-command-queue doc-ex) ()
  (loop while command-queue
	do 
    (let ((request (first command-queue)))
      (catch-error-restart ((error sys:abort) "Skip processing this background request")
	(destructuring-bind (function . arguments) request
	  (apply function self arguments)))
      (without-interrupts
	(setq command-queue
	      (delete request command-queue))))))

(defmacro cased-catch (body-form &rest clauses)
  (let ((tag (make-symbol "CASED-CATCH-TAG"))
	(block-name (make-symbol "CASED-CATCH-BLOCK")))
    `(block ,block-name
       (let ((catch-value
	       (catch ',tag
		 (flet ((cased-throw (value)
			  (throw ',tag value)))
		   (return-from ,block-name
		     ,body-form)))))
       (ecase catch-value
	 ,@clauses)))))

(defmethod (toplevel doc-ex) (&rest args)
  (initialize-doc-ex self)
  (let ((nsage::*microns-per-device-pixel* nsage::*microns-per-screen-pixel*)
	;; Next two bound here so they can be set inside Dex
	(nsage::*record-lookup-mode* nsage::*record-lookup-mode*))
    (nsage::with-document-and-device-types ()	;gets *document-type*, *device-type* bound
      (nsage::with-sage-device (viewer-pane :dex)
	(sage::with-ambient-counters
	  (tv:with-auto-line-height (viewer-pane nil)
	    (ignore viewer-pane)		;inhibit warning from bogus macroexpansion
	    (if current-viewing-context
		;;needed for display init
		(send self :select-viewing-context current-viewing-context nil t)
		(send self :select-viewing-context "Default Viewer" :create t))
	    (error-restart-loop ((error sys:abort) "Dynamic Document Examiner Top Level")
	      ;; Run the book design's init code.  We do this mainly so
	      ;;  (@Style<leading=...>) will alter the dex display "device"'s leading
	      (let ((init-source (sage::formatted-sage-text-line-source ())))
		(loop while (send init-source :take-line)))
	      (prepare-viewer)			;remove the typeout window
	      (let ((start-time (zl:time))
		    (close-sage-files-timeout-flag nil)
		    (timeout-passed-long-ago nil)
		    (sage::*inhibit-@modify-and-@define* T))
		(cased-catch
		  (labels ((sage-open-streams-p ()
			     (and nsage::*sage-open-streams*
				  (listp nsage::*sage-open-streams*)))
			   (timeout-p ()
			     ;; don't worry about open files unless there are sage files
			     ;; to close.
			     ;; Can't just look at the global value of *sage-open-streams*
			     ;; because it is a special bound per-process and this
			     ;; code runs in the scheduler.
			     (and *close-sage-files-timeout*
				  ;; Don't return T forever once the timeout has passed.
				  ;; After all, the only way new files can be opened
				  ;; in this process is if the user types something.
				  (not timeout-passed-long-ago)
				  (sys:time-elapsed-p *close-sage-files-timeout* start-time)))
			   (common-input-wait-handler-internals ()
			     (setq start-time (zl:time))
			     (cond (timeout-passed-long-ago
				    ;; if the timeout happened long ago
				    ;; and there are newly open streams, reset the counter
				    ;; rather than just blindly closing the streams.
				    ;; Remember that this will only run when something
				    ;; 4other0 than 1timeout-p0 returns T.
				    (when (sage-open-streams-p)
				      (setq close-sage-files-timeout-flag nil
					    timeout-passed-long-ago nil)))
				   (close-sage-files-timeout-flag
				    ;; a timeout occurred
				    (cond ((sage-open-streams-p)
					   ;; if there are open streams, close them
					   ;; and reset the timeout.
					   (setq close-sage-files-timeout-flag nil)
					   (close-kept-sage-files))
					  (t
					   ;; if no open streams and timeout occurred
					   ;; then remember that the timeout happened
					   ;; "long ago"
					   (setq timeout-passed-long-ago t))))
				   (t
				    (setq close-sage-files-timeout-flag nil))))
			   (common-input-wait-internals ()
			     (when (timeout-p) (setq close-sage-files-timeout-flag t)))
			   (do-it ()
			     (zl:with-input-editing-options
				 (
				  (:input-wait nil
				   #'(lambda (stream)
				       (or (dw::mouse-motion-pending stream)
					   (common-input-wait-internals)))
				   (si:follow-syn-stream *query-io*))
				  (:input-wait-handler
				    #'(lambda ()
					(dw::update-highlighted-presentation *query-io*)
					(common-input-wait-handler-internals))))
			       (apply 'dw:default-command-top-level self
				      :prompt *dex-command-prompt*
				      :command-prompt *dex-command-prompt*
				      :input-wait
				      (lambda ()
					(or *dex-background-request-queue*
					    (common-input-wait-internals)))
				      :input-wait-handler
				      (lambda ()
					(common-input-wait-handler-internals)
					(setq start-time (zl:time))
					(when command-queue
					  (cased-throw 'something-in-command-queue))
					(when *dex-background-request-queue*
					  (cased-throw 'something-in-background-request-queue)))
				      :window-wakeup 'doc-ex-window-wakeup-handler
				      args))))
		    (if *close-sage-files-timeout*
			(nsage::keeping-sage-files (do-it))
			(do-it)))
		  (something-in-command-queue
		    (process-command-queue))
		  (something-in-background-request-queue
		    (process-background-requests)))))))))))

(defun 1close-kept-sage-files0 ()
  (loop for s in nsage::*sage-open-streams*
	do
    ;; try closing the stream normally, then try closing it in abort mode
    (condition-case ()
	 (si:close-open-stream (nsage::file-stream-stream s) ())
       (error (si:close-open-stream (nsage::file-stream-stream s) t)))
    (without-interrupts
      (setq nsage::*sage-open-streams*
	    (or (delete s nsage::*sage-open-streams*)
		':none)))))

(defmethod1 (display-candidates doc-ex)0 (stream)
  (when current-viewing-context
    (let* ((contents (send current-viewing-context :candidates-contents))
	   (candidates (send contents :contents)))
      ;; don't use FORMATTING-TABLE, it's too slow
      (loop for candidate in candidates
	    do
	(fresh-line stream)
	(dw:with-output-truncation (stream)
	  (present-candidate candidate stream))))))

(defmethod (redisplay-candidates doc-ex) ()	;defun-in-flavor?
  (send candidate-pane :clear-history)
  (display-candidates self candidate-pane))

;;; A candidate is now a list of lists where each
;;; sublist is (4name record-group0)
(defun1 present-candidate0 (candidate stream)
  (cond ((dex-item-p candidate)
	 (let ((string (send candidate :string))
	       (record-group (send candidate :record-group)))
	   (dw:with-output-as-presentation (:stream stream
					    :type 'nsage::record-group
					    :object record-group)
	     (unless (zerop (send candidate :level))
	       (format stream "~V@T" (* 2 (send candidate :level))))
	     (write-string string stream))))
	(t (dw:with-output-as-presentation (:stream stream
					    :type 'nsage::record-group
					    :object (second candidate))
	     (write-string (first candidate) stream)))))

;;; When does a bookmark need redisplaying?
;;; If it used to be current and is not any more
;;; If it used to be unseen and is now seen.
(defmethod (display-bookmarks doc-ex) (stream)
  (when current-viewing-context
    (let* ((contents (send current-viewing-context :bookmarks-contents))
	   (bookmarks (send contents :contents))
	   (currently-displayed-item (currently-displayed-item current-viewing-context)))
      (flet ((show-mark-if-necessary (item stream)
	       (if (eq item currently-displayed-item)
		   (write-char #\arrow:right-open-arrow stream) 
		   (write-char #\space stream))))
	(formatting-table (stream :inter-column-spacing 2)
	  (loop for bookmark-item being the array-elements of bookmarks
		doing
	    (formatting-row (stream)
	      (formatting-cell (stream)
		;; does it really hurt to cons this unique-id every time?
		(dw:with-redisplayable-output (:stream stream
					       :unique-id `(,bookmark-item :arrow)
					       :cache-value (eq bookmark-item
								currently-displayed-item)
					       :id-test #'equal)
		  (show-mark-if-necessary bookmark-item stream)))
	      (formatting-cell (stream)
		(dw:with-redisplayable-output (:stream stream
					       :unique-id bookmark-item
					       :cache-value (send bookmark-item :seen-contexts))
		  (draw-bookmark bookmark-item stream :allow-gray t))))))))))

(defmethod (redisplay-bookmarks doc-ex) ()	;defun-in-flavor?
  (send dw:*program-frame* :redisplay-pane 'bookmark-pane))

(defun format-bookmark-string (item &optional stream)
  (format stream "~A~@[ ~A~]"
	  (send item :string)
	  (nsage::namespace-type-string (send item :record-group))))

(defparameter 1*gray-for-marking*
0	  (tv:make-binary-gray 6 4 '#2r(1000 0000 0000 0010 0000 0000)))

;; This returns a dex-item.  I hope this isn't a problem
(define-presentation-type bookmark ()
   :parser ((stream &key initially-display-possibilities type)
	    (flet ((within-dex? ()
		     (and (variable-boundp dw:*program*)
			  (typep dw:*program* 'doc-ex))))
	      (unless (within-dex?)
		(error "You can't accept bookmarks unless you're in a Document Examiner."))
	      (let* ((current-viewing-context
		       (doc-ex-current-viewing-context dw:*program*))
		     (bookmarks-contents (send current-viewing-context :bookmarks-contents))
		     (contents (send bookmarks-contents :contents)))
		(dw:complete-from-sequence
		  contents
		  stream
		  :type type
		  :name-key 'format-bookmark-string
		  :initially-display-possibilities
		   initially-display-possibilities))))
   :printer ((item stream)
	     (format-bookmark-string item stream)))


;;; Need to be able to click on a bookmark when prompted for a record-group.
(define-presentation-translator bookmark-to-record-group
   (bookmark nsage::record-group)
   (dex-item)
  (send dex-item :record-group))

(defun draw-bookmark (bookmark stream &key allow-gray)
  (dw:with-output-as-presentation
    (:stream stream
     :type 'bookmark
     :object bookmark
     :single-box t)
    (let ((presentation (present bookmark 'bookmark :stream stream)))
      (when (and allow-gray presentation)
	(unless (send bookmark :seen-contexts)
	  (multiple-value-bind (left top right bottom)
	      (dw:box-edges
		(dw:presentation-displayed-box presentation))
	    (graphics:draw-rectangle left top right bottom
				     :stream stream
				     :pattern *gray-for-marking*
				     :opaque nil)))))))

;;; Help support.

;;; Command, Character, Documentation
(defvar 1*dex-command-help-alist*0 () )

(defprop define-doc-ex-command-and-documentation
	 cp:define-command zwei:definition-function-spec-type)

(setf (get 'define-doc-ex-command-and-documentation 'zwei:definition-function-spec-finder)
      (get 'cp:define-command 'zwei:definition-function-spec-finder))

(defprop define-doc-ex-command-and-documentation "Program Command" si:definition-type-name)

(defmacro 1define-doc-ex-command-and-documentation0 ((name &rest options
							 &key keyboard-accelerator
							 documentation
							 &allow-other-keys)
						   arglist &body body)
  (when (and keyboard-accelerator (atom keyboard-accelerator))
    (setq keyboard-accelerator (ncons keyboard-accelerator)))
  ;;Don't try si:with-rem-keywords because it conses on the stack; new-options gets tossed out
  (let ((new-options (si:rem-keywords options '(:documentation))))
    `(progn (define-doc-ex-command (,name ,.new-options) ,arglist .,body)
	    (install-dex-command-documentation ',name ',keyboard-accelerator ',documentation))))

(defvar 1*dex-self-help-tick*0 0)			;(incf *dex-self-help-tick*)
(defvar 1*dex-self-help-tick-shown*0 nil)

(defun 1install-dex-command-documentation0 (command characters documentation)
  (let ((element (assoc command *dex-command-help-alist*)))
    (if element
	(setf (cdr element) (list characters documentation))
	(push (list command characters documentation) *dex-command-help-alist*)))
  (incf *dex-self-help-tick*))

;;;--- Needs design.  The parser is a kludge to let you type spaces, but
;;; it means that any CP argument that uses this had better be the last one
;;; in the command.  This could also just be a synonym for ((sequence string)),
;;; or the parser could tokenize the substrings and have the type be a
;;; sequence of tokens.  If you make it be a sequence of anything, be sure
;;; to fix dynamic-dex-doc-match-internal to use this sequence instead of the
;;; bogus zwei:*last-match-list*, which should be flushed anyway. -- rom
(define-presentation-type candidate-substring ()
   :history t
   :abbreviation-for 'string
   :parser ((stream &key original-type)
	    ;; Gross.  There doesn't seem to be any other way to remove a single blip char.
	    (let ((dw::*accept-blip-chars*
		    (mapcar (lambda (char-list)
			      (remove-if (lambda (char) (string-equal char #\sp)) char-list))
			    dw::*accept-blip-chars*)))
	      (values
		(accept 'string :stream stream :prompt nil :original-type original-type)
		original-type)))
   :description "a substring")

(defmethod1 (dynamic-dex-doc-match-internal doc-ex)0 (match-string matching-function match-basis
								 reason-string condition)
  (let ((candidates (nsage::candidates-satisfying-condition
		      (setq zwei:*last-match-list*
			    (if (listp match-string) match-string
				;;---Problem here due to tokenizing.  A single-char string
				;;can end up with no tokens, for example "/" or "?".  Any
				;;character that is both an open and a close break is trouble.
				(let ((tokens (nsage::tokenize match-string
						   ':opening-delims nsage::*word-open-break*
						   ':trailing-delims nsage::*word-close-break*
						   ':trailing-keep nsage::*word-close-keep*)))
				  (reverse (or tokens (list match-string))))))
		      matching-function match-basis condition)))
    (nsage::log-lookup-event zwei:*last-match-list* reason-string candidates)
    (cond ((null candidates)
	   (barf self "No topic names or keywords contain~{ ~S~}."
		 zwei:*last-match-list*))
	  (t
	   (send current-viewing-context :replace-candidates
		 (sort-candidates-for-display candidates)
		 (format nil "~A match using~{ ~S~}" reason-string
			 zwei:*last-match-list*))
	   ))))

(defun1 sort-candidates-for-display0 (candidates)
  (flet ((collect-sort-list ()
	   (tv:noting-progress ("Collecting candidates' names for sorting")
	     (loop for rg in candidates
		   for count from 0
		   with length = (length candidates)
		   as title = (prog1 (nsage::record-group-title-for-document-examiner rg)
				     (tv:note-progress count length))
		   collect `(,title ,rg)))))
    (let ((sort-list (collect-sort-list)))
      (sort sort-list #'string-lessp :key #'car))))

;;; A little support for the presentation of undefined tags.
;;; See sage::splice-replace-ref-gbox
(dw:define-program-command 1(com-show-forward-ref doc-ex)
0			   ((gbox T))
  (sage::show-forward-ref gbox))

;; For Document Examiner
(define-presentation-to-command-translator 1show-forward-ref
0   (sage::undefined-ref-gbox
     :documentation sage::show-forward-ref-translator-documentation)
   (obj &key presentation)
  (ignore obj)
  (dw:with-presentation-type-arguments
      (sage::undefined-ref-gbox (dw:presentation-type presentation))
    `(com-show-forward-ref ,sage::gbox)))
