;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: t -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

;;; The following forms were moved to hardcopy-devices 12 Jul 89 MCW
;;;
;;;  Function (FLAVOR:METHOD EJECT-PAGE BASIC-HARDCOPY-OUTPUT-DEVICE)
;;;  Function (FLAVOR:METHOD DEVICE-TYO BASIC-HARDCOPY-OUTPUT-DEVICE)
;;;  Function (FLAVOR:METHOD DEVICE-STRING-OUT BASIC-HARDCOPY-OUTPUT-DEVICE)
;;;  Function (FLAVOR:METHOD GET-SAGE-STREAM BASIC-HARDCOPY-OUTPUT-DEVICE)
;;;  Function (FLAVOR:METHOD WITH-STREAM-PREPARED-INTERNAL BASIC-HARDCOPY-OUTPUT-DEVICE)

(sys:defvar-standard *inside-sage-graphics-transform* nil)
(sys:defvar-standard *displayer-x-offset* 0)

(defmacro inside-sage-graphics-transform (&body body)
  `(let ((*inside-sage-graphics-transform* t))
     ,@body))

(defun assure-inside-sage-graphics-transform ()
  (unless *inside-sage-graphics-transform*
    (error "You shouldn't call this without a graphics transform set up")))

(defun increment-cursorpos-using-graphics-transform (stream &optional (x-delta 0) (y-delta 0))
  (assure-inside-sage-graphics-transform)
  (unless (and (zerop x-delta) (zerop y-delta))
    (graphics:graphics-translate x-delta y-delta :stream stream)))

(defvar *current-line-height* 0)		;kludge!!
(defvar *current-line-below-baseline* 0)	;ditto!!

(defmethod (display-gbox-contents-new line-hbox) (stream
						   &optional
						   (initial-x-motion :start-of-line))
  ;; extra-space-above dealt with by caller, because of sink business
  (flet ((doit (stream)
	   #+ignore
	   (graphics:draw-line 0 0 140000 0 :stream stream)
	   (graphics:with-graphics-translation (stream 0 line-baseline)
	     #+Ignore
	     (graphics:draw-line 0 0 180000 0 :stream stream)
	     (let ((font-number)
		   (x-motion initial-x-motion)
		   (*current-line-height* height)
		   (*current-line-below-baseline* (- height line-baseline))
		   (extra-width-per-space (extra-width-per-space self))
		   (current-extra-width-per-space 0)
		   (first-justify-gbox (find-first-justify-gbox self)))
	       #+ignore
	       (format *standard-output* "~%Box: ~S, Height: ~S, line-baseline: ~S"
		       self
		       height line-baseline)
	       (do-line-gboxes-exclusive (gbox first-gbox newline-gbox)
		 (when (null font-number)
		   (setq font-number (send gbox :validate-font-number)))
		 (when (eq gbox first-justify-gbox)
		   (setq current-extra-width-per-space extra-width-per-space))
		 (multiple-value-setq (font-number x-motion)
		   (device-display-gbox *current-sage-device* gbox stream
					font-number x-motion
					current-extra-width-per-space)))))))
    (if (typep stream 'tv:sheet)
	(tv:prepare-sheet (stream) (doit stream))
	(doit stream))))

(defun-in-flavor D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")(canonicalize-x-motion basic-gbox)0 (stream x-motion)
  (when (symbolp x-motion)
    ;; not really as simple as hposition+, really wants to be
    ;; difference between hposition+ and where the cursor is now.
    ;; Shit.
    
    ;; figure out where the cursor is now.
    (multiple-value-bind (nil x-scale nil x-translation)
	(graphics:decompose-transform (graphics:stream-transform stream))
      (let ((x-offset (graphics:untransform-distance *displayer-x-offset* 0
						     (graphics:stream-transform stream))))
	(cond ((member x-motion '(:start-of-line :start-of-paragraph))
	       (let ((fill-mode (send environment :fill-mode)))
		 (case fill-mode
		   ((centered flushright)
		    (let ((text-width (loop for gbox = self then (box-next gbox)
					    until (or (null gbox) (send gbox :newline?))
					    sum (send gbox :width)))
			  (line-width (send environment :line-width)))
		      (setq x-motion
			    (+ (send environment :left-margin)
			       (if (eq fill-mode 'centered)
				   (floor (- line-width text-width) 2)
				   (- line-width text-width))))))
		   (otherwise
		     (setq x-motion
			   (hposition+ environment x-motion))))))
	      (T (setq x-motion (hposition+ environment x-motion))))
	(setq x-motion (+ x-offset (- x-motion (/ x-translation x-scale)))))))
  x-motion)

;;; contract now is that each gbox moves the cursor WIDTH + whatever else it needs
;;; before it starts and returns WIDTH or a keyword when it's done.
(defmethod (handle-x-motion basic-gbox) (stream x-motion)
  (setq x-motion (canonicalize-x-motion stream x-motion))
  (increment-cursorpos-using-graphics-transform stream x-motion)
  #+ignore
  (graphics:draw-rectangle 0 0 1000 1000 :stream stream)
  #+ignore
  (let ((si:*whostate-awaiting-user-input* "Tyi"))
    (zl:tyi stream)))

(defmethod (display-gbox-new basic-gbox) (stream device font-number x-motion extra-space)
  (ignore stream device extra-space)
  (values font-number x-motion))

;(defmethod (display-gbox-new string-gbox) (stream device font-number x-motion extra-space)
;  (handle-x-motion self stream x-motion)
;  (let ((script-displacement (send environment :script-displacement)))
;    (cond ((zerop script-displacement)
;	   (device-string-out device stream string start-index end-index width self))
;	  (t (graphics:with-graphics-translation (stream 0 (- script-displacement))
;	       (device-string-out device stream string start-index end-index width self)
;	       ))))
;  (values font-number width))

(defmethod (display-gbox-new string-gbox) (stream device font-number x-motion extra-space)
  (handle-x-motion self stream x-motion)
  (let ((script-displacement (send environment :script-displacement))
	(num-spaces 0))
    (labels ((display-string (start end x-motion)
	       (handle-x-motion self stream x-motion)
	       (let ((*fake-string-special-hack-spaces* nil))
		 (device-string-out device stream string start end width self))
	       (micron-width-of-string font-number string start end))
	     (do-string ()
	       (cond ((and *fake-string-special-hack-spaces*
			   (eq (send device :output-device-type) :screen))
		      (setq x-motion
			    ;; window-output-device returns x-motion
			    (device-string-out device stream string
					       start-index end-index width self extra-space)))
		     ((zerop extra-space)
		      (setq x-motion (display-string start-index end-index 0)))
		     (t
		      (setq x-motion 0)
		      (dw::do-delimited-substrings ((string :start start-index :end end-index)
						    (char start end))
						   (setq x-motion
							 (display-string start end x-motion))
			(#\space
			 (ignore char)
			 (handle-x-motion self stream x-motion)
			 #+Ignore
			 (device-string-out device stream " " 0 1 'fake-width self)
			 (incf num-spaces)
			 (setq x-motion
			       (+ (micron-width-of-string font-number " " 0 1)
				  extra-space))))))))
      (cond ((zerop script-displacement)
	     (do-string))
	    (t (graphics:with-graphics-translation (stream 0 (- script-displacement))
		 (do-string)))))
    (values font-number x-motion)))

(defmethod (display-gbox-new space-gbox) (stream device font-number x-motion extra-space)
  (handle-x-motion self stream x-motion)
  (device-tyo device stream #\space font-number width)
  (values font-number (+ width extra-space)))

(defmethod (display-gbox-new tab-character-gbox) (stream device font-number x-motion ignore)
  (ignore device)
  (handle-x-motion self stream x-motion)
  (values font-number width))

(defmethod (display-gbox-new newline-gbox) (stream device font-number x-motion ignore)
  (ignore x-motion) ;;no need to (handle-x-motion self stream x-motion)
  (cond (*display-line-gboxes-should-clear-screen-area*
	 (device-tyo device stream #\newline font-number 0))
	(T nil))				;just don't touch the cursor, leave at right
  (values font-number :start-of-line))

(defmethod 1(display-gbox-new pseudo-paragraph-break-gbox)0 (stream device font-number x-motion
								  ignore)
  (ignore stream device x-motion)
  (values font-number (ecase break-type
			(normal (if indented :start-of-paragraph :start-of-line))
			(limited :start-of-line))))

(defmethod (display-gbox-new paragraph-break-gbox) (stream device font-number x-motion ignore)
;  (handle-x-motion self stream x-motion)
  (ignore x-motion)
  (when *debugging-formatter*
    (multiple-value-bind (code font)
	(pi-char-code-and-font (ecase break-type
				 (normal 'paragraph)
				 (limited 'limited-paragraph)))
      (device-tyo device stream code font 0)))
  (values font-number (ecase break-type
			(normal (if indented :start-of-paragraph :start-of-line))
			(limited :start-of-line))))

;;; The x-position of a cursor-motion-gbox is a real coordinate, not
;;; a relative one.
(defmethod (display-gbox-new cursor-motion-gbox) (stream device font-number x-motion ignore)
  (ignore device x-motion)
  (let ((transform (graphics:stream-transform stream)))
    ;; clobber the transforms relying on knowledge that
    ;; all we want to do is clobber the (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")dx0 or 2dy0 of the
    ;; transform to be the new proper number of device
    ;; units and that the prevailing transform already
    ;; has the proper scale set up.
    (when x-position
      (setf (graphics::graphics-transform-tx transform)
	    (+ *displayer-x-offset*
	       (graphics:transform-distance x-position 0 transform))))
    (when y-position
      (setf (graphics::graphics-transform-ty transform)
	    (graphics:transform-distance 0 y-position transform)))
    (values font-number 0)))

;(defmethod 1(display-gbox-new box-support-gbox)0 (stream device font-number x-motion)
;  (handle-x-motion self stream x-motion)
;  (multiple-value-bind (left-margin top-margin right-margin bottom-margin)
;      (box-margins self)
;    (ecase type
;      (first
;	(unless (symbolp x-motion)
;	  (handle-x-motion self stream left-margin))
;	(multiple-value-setq (x y)
;	  (graphics:transform-point
;	    (- left-margin)
;	    (-
;	      (+ *current-line-height* #+ignore *current-line-below-baseline* additional-top-margin))
;	    (graphics:stream-transform stream)))
;	)
;      (last
;	(let ((left (box-support-gbox-x other-end))
;	      (top (box-support-gbox-y other-end)))
;	  (multiple-value-setq (left top)
;	    (graphics:untransform-point left top (graphics:stream-transform stream)))
;	  (draw-typed-box device stream (send environment :box-type)
;			  left top (+ left box-width)
;			  (+ *current-line-below-baseline* additional-bottom-margin)))))
;    (values font-number (ecase type (first 0) (last right-margin)))))

(defmethod 1(display-gbox-new box-support-gbox)0 (stream device font-number x-motion ignore)
  (multiple-value-bind (left-margin top-margin right-margin bottom-margin)
      (box-margins self)
    (ignore top-margin bottom-margin)
    (ecase type
      (first
	(let ((x-motion (if box-origin box-origin x-motion)))
	  (let ((real-x-motion (canonicalize-x-motion stream x-motion)))
	    (multiple-value-setq (x y)
	      (graphics:transform-point (if (symbolp x-motion)
					    (- real-x-motion left-margin)
					    real-x-motion)
					(-
					  (+ *current-line-height* additional-top-margin))
					(graphics:stream-transform stream)))))
	(cond ((symbolp x-motion)
	       (values font-number x-motion))
	      (t (handle-x-motion self stream x-motion)
		 (handle-x-motion self stream left-margin)
		 (values font-number 0))))
      (last
	(handle-x-motion self stream x-motion)
	(let ((left (box-support-gbox-x other-end))
	      (top (box-support-gbox-y other-end)))
	  (multiple-value-setq (left top)
	    (graphics:untransform-point left top (graphics:stream-transform stream)))
	  (draw-typed-box device stream (send environment :box-type)
			  left top (+ left box-width)
			  (+ *current-line-below-baseline* additional-bottom-margin)))
	(values font-number right-margin)))))

(defmethod (display-gbox-new cursor-saving-entry-gbox) (stream device font-number x-motion
							       ignore)
  (ignore device)
  (handle-x-motion self stream x-motion)
  (let ((transform (graphics:stream-transform stream)))
    (setq saved-x-position (graphics::graphics-transform-tx transform)
	  saved-y-position (graphics::graphics-transform-ty transform))
    (values font-number 0)))

(defmethod (display-gbox-new cursor-saving-exit-gbox) (stream device font-number x-motion
							      ignore)
  (ignore device x-motion)
  (let ((transform (graphics:stream-transform stream)))
    (setf (graphics::graphics-transform-tx transform)
	  (cursor-saving-entry-gbox-saved-x-position entry-gbox))
    (setf (graphics::graphics-transform-ty transform)
	  (cursor-saving-entry-gbox-saved-y-position entry-gbox))
    (values font-number 0)))

(defmethod (display-gbox-new envr-entry-gbox) (stream device ignore x-motion ignore)
  (ignore device stream);---
  (values (send self :validate-font-number)
	  x-motion))

(defmethod (display-gbox-new envr-exit-gbox) (ignore ignore ignore x-motion ignore)
  (values () x-motion))

(defmethod (display-gbox-new presentation-entry-gbox) (stream device font-number x-motion ignore)
  (handle-x-motion self stream x-motion)
  (vector-push-extend 
    (apply #'handle-device-presentation device stream
	   :start *presentation-stack*
	   :object presentation-object
	   :type presentation-type
	   ;; single box unless otherwise specified
	   ;:single-box (getf presentation-options :single-box t)
	   presentation-options)
    *presentations*)
  (values font-number 0))

(defmethod (display-gbox-new presentation-exit-gbox) (stream device font-number x-motion ignore)
  (handle-x-motion self stream x-motion)
  (handle-device-presentation device stream :end *presentation-stack*)
  (values font-number 0))

(sys:defvar-resettable 1*record-contents-are-sensitive*0 nil)

(defmethod (display-gbox-new record-entry-gbox) (stream device font-number x-motion ignore)
  (cond ((symbolp x-motion)
	 )
	(t
	 (handle-x-motion self stream x-motion)
	 (setq x-motion 0)))
  (when *record-contents-are-sensitive*
    (let ((presentation
	    (start-record-presentation device stream *presentation-stack* record)))
      (when presentation
	(vector-push-extend presentation *presentations*))))
  (values font-number x-motion))

(defmethod (display-gbox-new record-exit-gbox) (stream device font-number x-motion ignore)
  (unless (symbolp x-motion)
    (handle-x-motion self stream x-motion)
    (setq x-motion 0))
  (when *record-contents-are-sensitive*
    (end-record-presentation device stream *presentation-stack*
			     (send entry-gbox :record)))
  (values font-number x-motion))

(defmethod 1(display-gbox-new picture-gbox)0 (stream device font-number x-motion ignore)
  (ignore device)
  (handle-x-motion self stream x-motion)
  (multiple-value-bind (width height)
      (cached-width-and-height self)
    (flet ((draw-clipping-outline (stream)
	     (graphics:draw-lines `(0 0 0 ,height
				      ,(- width overflow-amount) ,height
				      ,(- width overflow-amount) 0)
				  :stream stream)))
      (macrolet ((maybe-clip (&body body)
		   `(if overflow-amount
			(graphics:with-clipping-path (stream #'draw-clipping-outline)
			  ,@body)
			(progn ,@body))))
	(graphics:with-graphics-scale (stream
					*microns-per-screen-pixel*
					(- *microns-per-screen-pixel*)
					)
	  (maybe-clip
	    (ecase scale-type
	      (absolute
		(graphics:with-graphics-scale (stream scale)
		  (with-character-style-for-picture (stream picture)
		    (funcall (sage-picture-drawing-function picture) stream))))
	      (size
		(error "Can't scale to a particular size yet.")))))))
    (values font-number
	    (* width *microns-per-screen-pixel*))))

(defmethod (display-gbox-new 1field-start-gbox0) (stream device font-number x-motion extra-space)
  (ignore stream device extra-space font-number x-motion)
  (values font-number x-motion))

(defmethod (display-gbox-new 1field-end-gbox0) (stream device font-number x-motion extra-space)
  (ignore stream device extra-space)
  (values font-number x-motion))

(defmethod (display-gbox-new command-gbox) (stream device font-number x-motion ignore)
  ;; this dispatches to individual command methods
  (command-display-gbox self stream device font-number x-motion 'ignore))

    ;;When you add or delete clauses here, remember to update the corresponding ones
    ;;in (:width-annotate simple-command-gbox)
(define-command-gbox-generic 1command-display-gbox
0				  (stream device font-number x-motion ignore)
  (command-name-display-new stream device command-name font-number x-motion))
  

(define-command-gbox-method 1(command-display-gbox hsp)0 (stream device font-number x-motion
							       ignore)
  (ignore device)
  (handle-x-motion self stream x-motion)
  (values font-number width))

(define-command-gbox-method 1(command-display-gbox cb)
0				 (stream device font-number x-motion ignore)
  (ignore device stream)
  ;; no need to (handle-x-motion self stream x-motion)
  (values font-number x-motion))

(define-command-gbox-method 1(command-display-gbox
0			      1(tab-to-tab-stop collect-right-flushing collect-centering))
0			    (stream device font-number x-motion ignore)
  (let ((width (send self :width)))
    (when (minusp width)
      (when *debugging-sage* (device-tyo device stream #\! font-number 0))
      (break "Haven't yet converted this method to handle negative widths properly.  Please report this to Bug-NSage.")
      (device-tyo device stream #\newline font-number 0))	;---not allowed
    (handle-x-motion self stream x-motion)
    (values font-number width)))

(define-command-gbox-method 1(command-display-gbox em)0 (stream device font-number x-motion
							      ignore)
  (handle-x-motion self stream x-motion)
  (let ((script-displacement (send environment :script-displacement)))
    (multiple-value-bind (em-code em-font)
	(pi-char-code-and-font 'em-dash)
      (graphics:with-graphics-translation (stream 0 (- script-displacement))
	(device-tyo device stream em-code em-font width))
      (values font-number
	      ;;---this :width is because only simple-command-gboxes have widths 
	      ;; while param-command-gboxes don't.  Bleagh.
	      (send self :width)))))

(define-command-gbox-method 1(command-display-gbox0 1(literal-space missing-special-character))
0			    (stream device font-number x-motion ignore)
  (handle-x-motion self stream x-motion)
  (device-tyo device stream #\space font-number width)
  (values font-number (send self :width)))

(define-command-gbox-method 1(command-display-gbox
0			      1(make string modify include label blankspace))
0			    (stream device font-number x-motion ignore)
  (ignore device stream)
  ;; no need to (handle-x-motion self stream x-motion)
  (values font-number x-motion))

(define-command-gbox-method 1(command-display-gbox newpage)
0			    (stream device font-number x-motion ignore)
  (handle-x-motion self stream x-motion)
  (when (numberp n)
    (loop repeat (selector n eql
		   (nil 1)
		   (otherwise (1+ n)))
	  do
      (device-tyo device stream #\page font-number 0)))
  (values font-number :unknown))

(defun 1command-name-display-new0 (stream device command-name font-number x-motion)
  (cond ((and *debugging-sage* (not (command-known-not-to-display command-name)))
	 (handle-x-motion device stream x-motion)
	 (let ((atsign-width (send device :width-of-char-in-font #\@ font-number))
	       (name-width (send device :width-of-string-in-font font-number
				 (string command-name)
				 0 (string-length command-name))))
	   (device-tyo device stream #\@ font-number atsign-width)
	   (device-string-out device stream (string command-name)
			      0 (string-length (string command-name)) name-width)
	   (values font-number (+ atsign-width name-width))))
	(T (values font-number x-motion))))

(defmethod 1(display-gbox-new unexpanded-reference-gbox)0 (stream device font-number x-motion ignore)
  (ignore device)
  (handle-x-motion self stream x-motion)
  (values font-number :unknown))

;----------------------------------------------------------------

(defmethod 1(eject-page output-device)0 (stream)
  (ignore stream))

(defmethod 1(device-tyo basic-window-output-device)0 (stream ch font width)
  (sys:with-stack-array (string 1 :element-type 'character :initial-value ch)
    (fake-string-out stream string 0 1 width
		     (si:character-style-for-device-font
		       (tv:font-name (first (aref font-table font)))
		       (send stream :display-device-type))))
  (ignore font) #+Franz ;---
  (let* ((style merged-current-style)
	 (face (si:cs-face style)))
    (multiple-value-bind (device-ch device-font-number)
	(if (or (neq face 'symbol)
		font
		( (char-code ch) #o200))
	    (values ch (or font current-font-number))
	    (send self :substitute-char ch))
      (unless (= device-font-number current-font-number)
	(setq style (window-style-from-spec device-font-number)))
      (with-character-style (style stream)
	(sys:with-stack-array (string 1 :element-type 'character :initial-value device-ch)
	  (device-string-out-internal self stream string))))))

(defmethod 1(device-string-out basic-window-output-device)0 (stream string &optional (start 0) end width object (extra-width-per-space 0))
  (declare (values x-motion))
  (when (null end) (setq end (length string)))
  (when (null object) (setq object (substring string start end)))
  (setq stream (cli::follow-synonym-stream stream))
  (ignore object)
  (fake-string-out stream string start end (or width 1) merged-current-style
		   extra-width-per-space)	;---
  #+Franz
  (dw:with-output-as-presentation
    (:stream stream
     :object object
     :type (type-of object)
     :single-box T
     :allow-sensitive-inferiors nil)
    (fake-string-out stream string start end width))
  #+Franz
  (let ((face (si:cs-face merged-current-style)))
    (if (eq face 'symbol)
	;;We need to tyo individually so we get the chance to do character substitution.
	(decoding-array (string string)
	  (loop for i from start below (or end (string-length string))
		for ch = (aref string i)
		do (multiple-value-bind (device-ch device-font-number)
		       (if ( (char-code ch) #o200)
			   (values ch current-font-number)
			   (send self :substitute-char ch))
		     (let ((style (if (= device-font-number current-font-number)
				      merged-current-style
				      (window-style-from-spec device-font-number))))
		       (with-character-style (style stream)
			 (device-string-out-internal self stream (string device-ch)))))))
	(with-character-style (merged-current-style stream)
	  (device-string-out-internal self stream (substring string start end))))))

;;; 1*fake-string-special-hack-spaces*0 moved to device-defs.lisp to break a circular
;;; dependency.  --RWK

(defun 1fake-string-out0 (stream string start end width style
			&optional (extra-width-per-space 0))
  (declare (values x-motion))
  (let ((width (+ width (* extra-width-per-space
			   (count #\Space string :start start :end end)))))
    (flet ((output-string (string string-start string-end x &optional (use-style t))
	     (when (and (null use-style)	;outputting to previewer
			(= string-end end)
			( string-start start))
	       ;; if we're outputing the last chunk of the string
	       ;; (and there's more than one chunk)
	       ;; then try to make it line up with the end of the string
	       (let ((displayed-string-width
		       (dw:continuation-output-size
			 (lambda (s)
			   (graphics:draw-string (substring string string-start string-end)
						 0 0 :stream s))
			 stream)))
		 (setq displayed-string-width
		       (graphics:untransform-distance displayed-string-width 0
						      (graphics:stream-transform stream)))
		 (setq x (- width displayed-string-width))))

	     (apply #'graphics:draw-string (substring string string-start string-end) x 0
						;:attachment-y :bottom
		    :record-as-text t
		    :stream stream
		    (when use-style
		      `(:character-style ,style)))))
      (if *fake-string-special-hack-spaces*
	  (when (> end start)
	    (let ((number-of-chars (- end start))
		  (space-count 0))
	      (flet ((piece (index)
		       (+			;(* space-count extra-width-per-space)
			 (/ (* (- index start) width) number-of-chars))))
		(dw::do-delimited-substrings ((string :start start :end end)
					      (ignore start-sub end-sub))
					     (let ((from (piece start-sub))
						   (to (piece end-sub)))
					       (unless (= from to)
						 (output-string	;-1
						   string start-sub end-sub from nil)
						 #+Franz
						 (graphics:draw-string
						   (substring string start-sub end-sub) from 0
						   :character-style
						   (si:character-style-for-device-font
						     'fonts:tinier si:*b&w-screen*)
						   :attachment-y :top
						   :stream stream)
						 #+Franz
						 (graphics:draw-rectangle
						   from 0 to -2600
						   :stream stream
						   :gray-level .5)))
		  (#\space (incf space-count)))
		)))
	  (output-string string start end 0)
	  ))
    width))


#||
(3 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")(defmacro with-identity-scale ((&optional stream) &body body)
  (dw::format-output-macro-default-stream stream)
  `(with-identity-scale-internal
     (dw::named-continuation with-identity-scale (,stream) . ,body)
     ,stream))

(defun with-identity-scale-internal (continuation xstream)
  (declare (sys:downward-funarg continuation))
  (let ((transform (graphics:stream-transform xstream)))
    (destructuring-bind (a b c d e f) transform
      (stack-let ((new-transform (list (signum a) b c (signum d) e f)))
	(graphics::with-new-stream-transform xstream new-transform continuation xstream)))))

0;; Formerly support for device-tyo
3(defmethod (device-string-out-internal basic-window-output-device) (stream string)
  ;; fuck.  Just use the prevailing font and don't try to scale it nohow
  (with-identity-scale (stream)
    (graphics:draw-string string 0 0 :attachment-y :top :stream stream
			  :return-presentation t)))
0||#


(defmethod 1(display-line-gboxes-new window-output-device)0 (stream line-hbox)
  (display-line-gboxes-on-window stream line-hbox))

(defmethod 1(handle-device-presentation output-device)0 (stream key output-stack &rest options)
  (ignore stream key output-stack options)
  )

(defmethod 1(handle-device-presentation basic-window-output-device)0 (stream key output-stack
									   &rest options)
  (when (operation-handled-p stream 'dw::push-presentation-stack)
    (ecase key
      (:start
	(apply #'dw::push-presentation-stack stream output-stack options))
      (:end
	(dw::pop-presentation-stack stream output-stack)))))

;;; Well, I was going to have:
;;;  WITH-SAGE-DEVICE initialize the device
;;;  OPEN-SAGE-STREAM give you a stream
;;;  WITH-STREAM-something initialize the stream
;;;
;;; so that I could separate the formatting pass from the display pass.
;;; However, there's just too much overlap right now.

(defmethod 1(get-sage-stream output-device)0 ()
  (error "This device has no defined handler for GET-SAGE-STREAM."))

(defmethod 1(get-sage-stream basic-window-output-device)0 ()
  window)

;;; 1stream-supports-pictures-p0 moved to sys:dynamic-windows;graphics-flavors.lisp and
;;; sys:hardcopy;sage-compatibility.lisp to remove an unnecessary inter-system dependency. 

;;; 1with-stream-prepared0 moved to device-defs.lisp, to break a circular
;;; dependency.  --RWK

;;; 1with-sage-device-stream-prepared0 moved to device-defs.lisp, to break a circular
;;; dependency.  --RWK

(defmethod 1(with-stream-prepared-internal window-output-device)0 (stream
								  continuation
								  &key paper-height
								  stream-height)
  (when (null paper-height) (error "You must supply a paper-height for the window-output-device"))
  (when (null stream-height)
    (setq stream-height
	  (- (multiple-value-bind (ignore top ignore bottom)
		 ;; ---want to flush secondary viewport
		 (send stream :visible-cursorpos-limits)
	       (- bottom top))
	     (* 3 (send stream :line-height)))))
  (let ((stream-units-per-micron (/ stream-height paper-height)))
    (tv:with-auto-line-height (stream nil)
      ;; No with-room-for-graphics because
      ;; coordinate system is now (0,0) is upper left rather than lower right
      (graphics:with-graphics-scale (stream stream-units-per-micron)
	(funcall continuation stream)))))

