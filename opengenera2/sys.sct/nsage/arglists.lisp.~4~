;;; -*- Base: 10; Mode: LISP; Package: NSAGE; Syntax: Common-lisp; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")record-allows-arglist-field0 (record)
  (let* ((record-group (doc-record-record-group record))
	 (type (coerce-record-type (record-group-type record-group) 'property))
	 (special-fields (get type 'special-fields)))
    (when (member "arglist" special-fields :test #'string-equal)
      T)))

(defun 1arglist-for-function-record0 (record)
  (declare (values arglist valid))
  (let ((function (doc-record-topic record))
	(function-standin nil)
	(record-type (coerce-record-type (doc-record-source-type record))))
    (when (and (sys:validate-function-spec function)
	       (not (fdefinedp function))
	       (listp function)
	       (eq (first function) 'flavor:method))
      (let ((g-f (flavor:find-generic-function (second function) nil)))
	(when g-f
	  ;; If we wanted to, we could process the flavors hacked by the g-f
	  ;; similarly to how Zmacs m-X List Methods does.
	  ;; Check the code in (:revert zwei:methods-editing-buffer).
	  (setq function-standin g-f
		record-type 'defun)
	  (when (variable-boundp zwei:*typein-window*)
	    ;; ---that is, when in ConEd.  Formatter needs warning mechanism.
	    (zwei:typein-line "Using arglist for generic function ~S"
			      (flavor:generic-function-name g-f))))))
    ;;rom wants empty arglist here
    (unless (member record-type '(|INIT OPTION| option))
      (if (or function-standin (fdefinedp function))
	  (let ((arglist (arglist (or function-standin function))))
	    (let ((strip-arguments 
		    (cond (function-standin nil)
			  ((atom function) nil)
			  ((eq (car function) 'defun-in-flavor) 2)
			  ((member (car function) flavor:*fdefinable-method-types*)
			   #+3600 3 #+Imach 2
			   #-(or 3600 Imach) (this-cannot-possibly-work)
			   ))))
	      (when (and (listp function)
			 (eq (car function) 'defun-in-flavor)
			 (eq record-type 'scl:macro))
		;; DEFMACRO-IN-FLAVOR doesn't need anything stripped
		(setq strip-arguments nil))
	      (values
		(if strip-arguments
		    (lt:remove-arguments-from-lambda-list strip-arguments arglist)
		    arglist)
		T)))
	  (values nil nil)))))

(defun 1make-lambda-list-contents-list0 (lambda-list)
  (let ((*print-abbreviate-quote* 'si:backquote)
	(*print-pretty* t)			(2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");not :data, or something else
0	(*print-case* :downcase))
    (condition-bind ((sys:warning #'(lambda (error)
				      (and (dbg:proceed-type-p error :no-action)
					   (sys:proceed error :no-action)))))
      (condition-case ()
	   (making-sage-directives (stream)
	     (make-lambda-list-contents-list-1 lambda-list stream))
	 (lt::lambda-list-syntax-error		2;someone declared a joke
0	   (making-sage-directives (stream)
	     (format stream "~S" lambda-list)))))))

(defun 1make-lambda-list-contents-list-10 (lambda-list stream)
  (let ((brief T)
	(dotted-is-&rest T)
	(print-space nil)
	(state 'required))
    ;;---The environments R, I, LS, L are too simplistic.
    ;; They capture formatting effect instead of semantic intent.
    ;; Replace with something more abstract, and also define
    ;; an argument-separating command to help the formatter
    ;; break lines more intelligently than it does now.
    (macrolet ((R (&body body)
		 `(in-environment (stream R) ,@body))
	       (I (&body body)
		 `(in-environment (stream I) ,@body))
	       (LS (&body body)
		 `(in-environment (stream LS) ,@body))
	       (L ((function &rest args))
		 (ecase function
		   ((prin1)
		    (destructuring-bind (thing stream) args
		      (unless (eq stream 'stream)
			;; Error happens only at compile time
			(error "Can hack only stream"))
		      `(print-symbol-thing ,thing)))
		   ((print-or-recurse)
		    (destructuring-bind (item &optional no-space) args
		      `(print-or-recurse-1 ,item ,no-space))))))
      (labels ((print-symbol-thing (thing)
		 (sage-command stream 'L (list (list thing))))
	       (print-or-recurse-1 (item no-space)
		 (unless no-space (space))
		 (cond ((consp item)
			(LS "("
			    (sage-contents-list stream
						(make-lambda-list-contents-list item))
			    ")"))
		       (T (print-symbol-thing item))))
	       (print-or-recurse (item &optional no-space)
		 (unless no-space (space))
		 (if (symbolp item)
		     (print-symbol item)
		     (if (atom item)
			 (prin1 item stream)
			 (progn
			   (write-string "(" stream)
			   (sage-contents-list stream
					       (make-lambda-list-contents-list
						 item))
			   (write-string ")" stream)))))
	       (print-symbol (item)
		 (if (lt:global-special-variable-p item)
		     (format stream "~(~s~)" item)
		     (if (symbolp item)
			 (format stream "~(~a~)" item)
			 (princ item stream))))
	       (space ()
		 (if print-space (write-char #\space stream)
		     (setq print-space t))))
	(multiple-value-bind (ignore allow-other-keys)
	    (lt:map-over-lambda-list
	      lambda-list
	      #'(lambda (list-point type)
		  (case type
		    (:required
		      (i (print-or-recurse (car list-point))))
		    (:body
		      (r (print-or-recurse '&body))
		      (i (print-or-recurse (car list-point))))
		    (:rest
		      (r (print-or-recurse '&rest))
		      (i (print-or-recurse (car list-point))))
		    (:whole
		      (r (print-or-recurse '&whole))
		      (i (print-or-recurse (car list-point))))
		    (:environment
		      (r (print-or-recurse '&environment))
		      (i (print-or-recurse (car list-point))))
		    (:allow-other-keys
		      (r (print-or-recurse '&allow-other-keys)))
		    ((:optional :key)
		     (if (eq type ':optional)
			 (when (neq state 'optional)
			   (setq state 'optional)
			   (r (print-or-recurse '&optional)))
			 (when (neq state 'key)
			   (setq state 'key)
			   (r (print-or-recurse '&key))))
		     (lt::destructure-optional-or-key
		       (list-point type arg default supplied key)
		       (space)
		       (if (or default (and (not brief) supplied))
			   (progn
			     (write-char #\( stream)
			     (if (eq type ':optional)
				 (i (print-or-recurse arg t))
				 2;; key
0				 (if (or brief (string= (symbol-name arg) (symbol-name key)))
				     (i (prin1 key stream))
				     (write-char #\( stream)
				     (i (prin1 key stream))
				     (write-char #\space stream)
				     (L (print-or-recurse arg t))
				     (write-char #\) stream)))
			     (write-char #\space stream)
			     (if (symbolp default)
				 (L (prin1 default stream))
				 (LS (prin1 default stream)))
			     (when (and (not brief) supplied)
			       (write-char #\space stream)
			       (L (print-or-recurse supplied t)))
			     (write-char #\) stream))
			   (if (eq type ':optional)
			       (I (print-or-recurse arg t))
			       (i (prin1 key stream))))))
		    (:aux
		      ;; &aux has no business appearing in displayed arglist
		      )
		    (:dotted-tail
		      (if (not dotted-is-&rest)
			  (format stream " . ")
			  (r (print-or-recurse '&rest))
			  (space))
		      (i (print-symbol list-point)))
		    (:&-key
		      (i (print-or-recurse (car list-point))))	2;the &thing itself
0		    ))
	      :macro-&keywords t
	      :macro-destructure-p t)
	  (when allow-other-keys
	    (r (print-or-recurse '&allow-other-keys))))))))

