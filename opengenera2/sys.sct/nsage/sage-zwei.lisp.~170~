;;; -*- Syntax: Zetalisp; Mode: LISP; Package: ZWEI; Base: 10; Lowercase: Yes; -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

#|| ;; no callers 6/17/87 --RLB.  Besides, it gets compiler warnings

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL NIL :SMALL) "TVFONT");;; Returns a list of function specs.  This is the cdr of an aarray item
;;; if IMPOSSIBLE-IS-OK is NIL, or if it's not NIL and the string
;;; completes.  Otherwise, a list of a function spec is returned.  The
;;; fspec can be NIL if IMPOSSIBLE-IS-OK is not NIL and the user types
;;; "nil".
(defun READ-SAGE-SPECS-TO-EDIT (prompt &optional default impossible-is-ok completion-aarray)
  (or completion-aarray (setq completion-aarray nsage::*sage-topic-aarray*))
  (or default (setq default (condition-case ()
				(relevant-function-name (point))
			      ;;adding stuff at end of unsectionized buffer blows out so...
			      (sys:unclaimed-message (sectionize-buffer *interval*)
						     (relevant-function-name (point))))))
  (typein-line-accept `((nsage::record-group :aarray ,completion-aarray)
			:allow-any-input ,impossible-is-ok)
		      :additional-blip-chars '(#\sp)
		      :default (when default (list default))
		      :provide-default (and default
					    (or impossible-is-ok
						(if (eq completion-aarray
							nsage::*sage-completion-aarray*)
						    (nsage::documented-p default nil)
						    ;; Seems bogus to me; it can fail when the
						    ;; default is a symbol in one package and
						    ;; the thing in the aarray is a symbol in
						    ;; another package. --rom
						    (si:aarray-lookup
						      (if (and (symbolp default)
							       (eq (symbol-package default)
								   nsage::*doc-package*))
							  (get-pname default)
							  (format nil "~S" default))
						      completion-aarray))))
		      :prompt prompt))
0||#

;;; Routine for prompting for an output device inside Zwei.
(defun READ-SAGE-OUTPUT-DEVICE (&optional (include-screen-as-device t)
				(description "output device") default)
  (zwei:typein-line-accept
    `((nsage::documentation-destination
	:include-screen ,include-screen-as-device)
      :description ,(string-append
		      (if (cl:member (aref description 0) '(#\a #\e #\i #\o #\u)
				     :test #'char-equal)
			  "an " "a ")
		      description))
    :default (or (and default
		      (or (and (eq default :screen)
			       include-screen-as-device)
			  (nsage::sage-can-deal-with-printer default))
		      default)
		 (and (setq default (and (boundp 'hardcopy:*default-text-printer*)
					 hardcopy:*default-text-printer*))
		      (nsage::sage-can-deal-with-printer default)
		      default)
		 (when (boundp 'nsage::*previous-sage-display-target-printers*)
		   (loop for printer
			     in nsage::*previous-sage-display-target-printers*
			 when (nsage::sage-can-deal-with-printer printer)
			   return printer)))
    :initially-display-possibilities nil))

(defun show-it ()
  (loop with rg-history = (dw::find-accept-history 'sage::record-group)
	for index from 0
	as element = (first (send rg-history :element index))
	while element
	do
    (print element)))
(defun find-rg ()
  (loop with rg-history = (dw::find-accept-history 'sage::record-group)
	for index from 0 to (send rg-history :length)
	as element = (first (send rg-history :element index))
	while element
	while (sage::record-group-killed element)
	finally (return element)))
(defun (2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")typein-line-accept-record-group0 (&rest keys &key default (aarray sage:*topic-aarray*)
					&allow-other-keys)
  (declare (arglist &key aarray prompt default initial-input initial-position initial-complete &allow-other-keys))
  (when (or (null default)			;This is not the same as no default
	    (sage::record-group-killed default))
    (setq default
	  ;; Find a non-dead record in the record-group accept history
	  (loop with rg-history = (dw::find-accept-history 'sage::record-group)
		for index from 0 to (send rg-history :length)
		as element = (first (send rg-history :element index))
		while element
		while (sage::record-group-killed element)
		finally (return element))))
  (let ((record-group
	  (block record-group
	    (let ((result
		    (dw:with-presentation-input-context ('sage:record-group)
							(blip)
			 (si:with-rem-keywords (new-keys keys '(:aarray))
			   (cl:apply #'typein-line-accept
				     `((sage::record-group-topic-set :aarray ,aarray)
				       :description "a record")
				     :default default
				     new-keys))
		       (sage:record-group (dw:presentation-blip-object blip)))))
	      (typecase result
		; clicked or accepted the default
		(sage:record-group (return-from typein-line-accept-record-group result))
		(sage::compressed-record-group
		  (return-from typein-line-accept-record-group
		    (sage::expand-compressed-record-group result))))
	      (scl:destructuring-bind (string . record-groups)
		  result
		(ignore string)
		(when (null (cl:rest record-groups))
		  (return-from record-group
		    (first record-groups)))
		(let ((alist (loop for record-group in record-groups
				   collect (cons (scl:present-to-string
						   (sage:record-group-type record-group)
						   'sage:record-group-type)
						 record-group))))
		  (let ((ptype `((scl:alist-member :alist ,alist))))
		    (typein-line-accept
		      ptype :prompt (with-output-to-string (stream)
				      (dw:describe-presentation-type ptype stream))))))))))
    (let ((history (dw::find-accept-history 'sage:record-group)))
      (when (and history record-group)
	(dw::push-for-presentation-type history record-group 'sage:record-group)))
    (values
      (if (sage::record-group-compressed-p record-group)
	  (sage::expand-compressed-record-group record-group)
	  record-group))))

;;;For finding out which key is bound to a command.  Can't just use the Zwei function
;;;for this because the comtab is unbound in the input editor context.
(defun SAGE-KEY-FOR-COMMAND (command)
  (let ((*comtab* *standard-comtab*))
    (key-for-command command)))

;;;For vanilla formatting
(defun FORMAT-STREAM (in-stream &optional device stream-for-attribute-list title)
  (when (null device)
    (setq device (if (and (variable-boundp *numeric-arg-p*) *numeric-arg-p*)
		     (read-sage-output-device)
		     :screen)))
  (when device
    (let ((parsed-results
	    (let ((plist (and stream-for-attribute-list
			      (fs:read-attribute-list nil stream-for-attribute-list))))
	      (multiple-value-bind (vars vals)
		  (fs:file-attribute-bindings nil :additional-attributes plist)
		(sys:standard-value-progv vars vals
		  (nsage::with-document-and-device-types ()
		    (nsage::sage-parse in-stream)))))))
      (let ((clear-pageheadings
	      (when (and (variable-boundp *numeric-arg*)
			 (zerop *numeric-arg*))
		sage::(making-sage-directives ()
		        (sage-command nil
				      'pageheading
				      '((odd t)
					(immediate t)
					(left nil)
					(center nil)
					(right nil)
					(line nil)))
		        (sage-command nil
				      'pageheading
				      '((even t)
					(immediate t)
					(left nil)
					(center nil)
					(right nil)
					(line nil)))))))
      (when parsed-results
	(when clear-pageheadings
	  (setq parsed-results (append clear-pageheadings parsed-results)))
	(nsage::sage-displayer device
			       title
			       #'nsage::formatted-sage-text-line-source
			       parsed-results))))))

;;This finds (or constructs) a font with nothing in it but whitespace, so
;;Zwei's simple-minded display can be told to indent the right distance.
(defun FIND-SPACES-FONT ()
  (if (and (variable-boundp fonts:spaces) (typep fonts:spaces 'font))
      fonts:spaces
      (let* ((n 128.)
	     (cwt (make-array n :type 'art-8b))
	     (fit (make-array (1+ n) :type 'art-16b)))
	(loop for i below n do (setf (aref cwt i) i))
	(loop for i below (1+ n)
	      sum i into pos
	      do (setf (aref fit i) pos))
	(setq fonts:spaces
	      (tv:make-font :make-array (:type 'art-1b
					 :dimensions (fed:bitbltable-dims #(n+1)*n/2 1))
			    tv:fill-pointer 128.
			    tv:name 'fonts:spaces
			    tv:char-height 1
			    tv:char-width 1
			    tv:raster-height 1
			    tv:raster-width 1
			    tv:baseline 4
			    tv:blinker-width 1
			    tv:blinker-height 5
			    tv:char-width-table cwt
			    tv:indexing-table fit
			    )))))

;;; Zwei Diagram Support
;;; Commented out by rom 8/2/85.  This needs font and character conversion.
#||
(defconst *TITLE-DIAGRAM-FONT* 'fonts:mets)

(defflavor TITLE-DIAGRAM (title-line sage-topic-font) (line-diagram-mixin)
  :settable-instance-variables)

(defmethod (:EDITOR-HEIGHT TITLE-DIAGRAM) (window line)
  (ignore line)
  (+ 4
     (font-char-height (send (send window :screen) :parse-font-descriptor
			     *title-diagram-font*))))

(defmethod (:EDITOR-DRAW TITLE-DIAGRAM) (line window cursor-x cursor-y)
  (declare (values left top right bottom))
  line
  (let* ((width (- (send window :inside-width) cursor-x))
	 (screen (send window :screen))
	 (topic-font (send screen :parse-font-descriptor *title-diagram-font*)))
    (send window :bitblt tv:alu-xor width 2 tv:33%-gray 0 0 cursor-x (+ cursor-y 1))
    (loop with current-font-number = -1
	  with (font cwt)
	  with font-map = (send window :font-map)
	  with x = cursor-x
	  with baseline = (- (font-baseline topic-font) (send window :baseline))
	  with tallest = 0
	  while (< x width)
	  for char being array-elements of title-line
	  for ch = (ldb %%ch-char char)
	  for font-number = (ldb %%ch-font char)
	  when ( font-number current-font-number)
	  do (let ((sage-font (aref font-map font-number)))
	       (setq current-font-number font-number
		     font (if (eq sage-font sage-topic-font) topic-font sage-font)
		     cwt (font-char-width-table font)
		     tallest (max tallest (font-char-height font)))
	       (send window :set-cursorpos x (+ cursor-y 4 baseline)))
	  do
	  (send window :tyo ch font)
	  (incf x (or (and cwt (aref cwt ch)) (font-char-width font)))
	  finally (return (values cursor-x cursor-y x (+ cursor-y 4 tallest))))))
||#

;;; A mostly unrelated thing to type an interval onto a window
;;; Needs font conversion.  NSAGE::WITH-FONT-MAP is gone.
#||
(defun TYPE-INTERVAL (interval &optional (window standard-output))
  (multiple-value-bind (font-alist vsp)
      (let ((top-level (loop for int = interval then superior
			     for superior = (send int :superior)
			     while superior
			     finally (return int))))
	(values (send-if-handles top-level :get :font-alist)
		(send-if-handles top-level :get :vsp)))
    (let ((font-map (mapcar 'cdr font-alist)))
      (nsage::with-font-map (window font-map vsp)
	(stream-copy-until-eof (interval-stream interval) window)))))
||#


;;;Some facility like this should go into the real zwei internals code.  (Moon
;;;agrees but has not audited this code.)
;;;Take a list of aarray elements and remove them from an aarray.
;;;This is made tricky by the fact that aarray elements can have length > 2.
;;;Therefore you can't just take out any elements that are equal (because you'll
;;;miss some things that need taking out) and you can't take out the ones whose
;;;cars are equal (because you'll remove items that shouldn't be removed).
;;;For example suppose ("foo" SI:FOO SOMETHING) is in the aarray; you get ("foo" SI:FOO)
;;;as the thing to remove.  That means you want to be left with ("foo" SOMETHING) in
;;;the aarray.
;;;This function assumes that there are no "duplicate" items in the aarray.  [i.e. No
;;; unmerged items with the same car and either the same or different cdrs]
;;; Removes items from a completion aarray.  Looks up the key of each item
;;; in the aarray.  If the item to be removed is equal to the aarray item,
;;; removes the item from the aarray.  If the two items are not equal, deletes
;;; the cadr of the item to be removed from the existing aarray item.
;--- Aside from the allow-error-typeout hack,
;--- I don't understand how this is different from SI:AARRAY-DELETE,
;--- so I'm just going to change it to that.  -- DLA
(defun REMOVE-AARRAY-ITEMS (aarray item-list &optional (allow-error-typeout t))
  (declare (ignore allow-error-typeout));--
  (si:sort-aarray aarray)
;  (loop for item-to-remove in item-list
;	do (multiple-value-bind (existing-item index)
;	       (si:sorted-aarray-lookup (car item-to-remove) aarray)
;	     (if existing-item
;		 (if (equal item-to-remove existing-item)
;		     (nsage::remove-item-from-array aarray index)
;		     (setf (cdr existing-item)
;			   (delete (cadr item-to-remove) (cdr existing-item))))
;		 (when allow-error-typeout
;		   (format error-output
;			   "~&Warning: Attempt to remove item ~S from the completion ~
;                            aarray, but no existing aarray item has car equal to ~S"
;			   item-to-remove (car item-to-remove))))))
  (loop for item-to-remove in item-list do
    (si:aarray-delete aarray (car item-to-remove) (cadr item-to-remove)))
  )
