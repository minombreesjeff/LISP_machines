;;; -*- Syntax: Common-lisp; Mode: LISP; Base: 10; Package: NSAGE -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>


;;;
;;;============================================================
;;; The Letter Specifications
;;;============================================================
;;;

(define-document-type D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")'letter0)

(define-sage-environment 1LetterDateEnv0 letter generic
			 '((USE Text)
			   (below 1)))
(define-sage-environment 1AddressEnv 0letter generic
			 '((USE Text)
			   NoFill
			   (below 1)))
(define-sage-environment 1SubjectEnv 0letter generic
			 '((USE text)
			   (below 1)
			   (leftmargin "+1.75picas")
			   (indent "-1.75picas")
			   (afterentry "RE:  ")))
(define-sage-environment 1SalutationEnv 0letter generic
			 '((USE Text)
			   (below 1)))
(define-sage-environment 1ClosingEnv 0letter generic
			 '((USE Text)
			   (above 1)
			   (below 4)))
(define-sage-environment 1SignatureEnv 0letter generic
			 '((USE Text)
			   NoFill
			   (below 1)))
(define-sage-environment 1InitialsEnv 0letter generic
			 '((USE Text)
			   NoFill))
;;;We want something like subjectenv except nofill
(define-sage-environment 1CCEnv 0letter generic
			 '((USE Text)
			   ;NoFill
			   (leftmargin "+1.75picas")
			   (indent "-1.75picas")
			   (afterentry "cc:  ")))
(define-sage-environment 1EnclEnv 0letter generic
			 '((USE Text)
			   ;NoFill
			   (leftmargin "+2picas")
			   (indent "-2picas")
			   (afterentry "encl:  ")))

(define-book-design 1letter-generic0 ()
  (use generic-generic)
  (modify (1Hd1
0	    (pagebreak off)))
  (first
    (init initialize-letter-generic)))
(note-book-design-specifics 'letter :generic 'letter-generic)

(defun 1initialize-letter-generic0 ()
  (macrolet ((in (&body body)
	       `(making-sage-directives () (idirs ,@body))))
;    (sage-command () 'style '((LetterStyle Block)))
    (sage-command () 'style '((date "March 1952")))
    (sage-command () 'style '((hyphenation T) (hyphenbreak T)))
    (sage-command () 'pageheading
		  `((immediate nil)
		    (left ())
		    (right ,(in (value page)))
		    (center ())))))

(define-book-design 1letter-screen0 ()
  (use generic-screen)
  (use letter-generic))
(note-book-design-specifics 'letter :screen 'letter-screen) 

(define-book-design 1letter-lgp20 ()
1  (use generic-lgp2)
0  (use letter-generic)
  (1modify
0    (1box0 (BoxFlushRight Yes))
    (1bodystyle0 (spacing 15pts) (spread 3pts)))
1  (first
0    ;;Style
    (envr (text
	    (Paper-Width "8.5in")
	    (LeftMargin "8picas")
	    (RightMargin "8picas")
	    (TopMargin "8picas")
	    (BottomMargin "6picas")))
    ;;Top-level begin
    (envr (Text
	    (Indent "0")
	    (Use BodyStyle)
	    (Spaces Compact)
	    (Font BodyFont)
	    (FaceCode R)
	    (Justification off)
	    (Hyphenation On)
	    (Spaces Compact)))
))
(note-book-design-specifics 'letter :lgp2 'letter-lgp2)



;;;How do we set things up such that when certain of the following
;;;commands have not been included in a letter's contents field, 
;;;we nonetheless see some defaults when the record is formatted.
;;;Dennis suggested something along the following lines
;;;(sage::in-environment (() rfstr) (sage::sage-command () 'sage::value 'sage::date))
;;;inside the initialize form above, but that didn't do it.
;;;For instance, if you don't supply a letterdate, then we want today's date
;;;by default.

(define-sage-command 1letterdate 0(&optional (letterdate :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text LetterDate)0 ()
  (splice-contents-list self environment
     (making-sage-directives ()
       (in-environment (() LetterDateEnv)
         (if (null letterdate)
	     ;; this should really use the prevailing value of @Style(Date) but
	     ;; I'm too lazy to figure out how to get that right this second.
             (format-date-in-style (time:get-universal-time) "March 8, 1952")
	     (princ letterdate)))))
  (splice-box-out self)) 

;;;How do we get this to end with other than a newline.  We want something
;;;like caption except that accepts a newline as part of its argument.
(define-sage-command 1address 0((address :text))
  :text? T :ends-with-newline? nil :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text Address)0 ()
  (splice-contents-list self environment
			(making-sage-directives ()
			  (in-environment (() AddressEnv)
			    (when address
			      (princ address)))))
  (splice-box-out self))

(define-sage-command 1subject 0((subject :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text Subject)0 ()
  (splice-contents-list self environment
			(making-sage-directives ()
			  (in-environment (() SubjectEnv)
			    (when subject
			      (princ subject)))))
  (splice-box-out self))

(define-sage-command 1salutation 0(&optional (recipient :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text Salutation)0 ()
  (splice-contents-list self environment
     (making-sage-directives ()
       (in-environment (() SalutationEnv)
         (if (null recipient)
             (princ "Greetings:")
	     (princ (string-append "Dear " recipient ":"))))))
  (splice-box-out self))

(define-sage-command 1closing 0(&optional (closing :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text Closing)0 ()
  (splice-contents-list self environment
     (making-sage-directives ()
       (in-environment (() ClosingEnv)
         (if (null closing)
             (princ "Sincerely,")
	     (princ closing)))))
  (splice-box-out self))

;;;What we want here is if neither Signature nor jobtitle are supplied,
;;;then go to the namespace to get users name.
(define-sage-command 1Signature 0(&optional (Signature :text)
				       (jobtitle :text))
  :text? T :ends-with-newline? T :starts-with-printing-char? T) 

;;;Can't get multiple args shipped from the command to the method.  See also
;;Notations.
(define-command-gbox-method 1(command-gbox-insert-generated-text Signature)0 ()
  (splice-contents-list self environment
			(making-sage-directives ()
			  (in-environment (() SignatureEnv)
			    (when Signature
			      (princ Signature))
			    (when jobtitle
			      (terpri)
			      (princ jobtitle)))))
  (splice-box-out self))

;;;How do we get this to end with other than a newline.  We want something
;;;like caption except that accepts a newline as part of its argument.

(define-sage-command 1Notations 0(&key (initials :text)
				     (cc :text)
				     (encl :text))
  :text? T :ends-with-newline? t :starts-with-printing-char? T)

(define-command-gbox-method 1(command-gbox-insert-generated-text Notations)0 ()
  (splice-contents-list self environment
			(making-sage-directives ()
			  (when initials
			    (in-environment (() InitialsEnv)
			      (princ initials)))
			  (when cc
			    (in-environment (() CCEnv)
			      (princ cc)))
			  (when encl
			    (in-environment (() EnclEnv)
			      (princ encl)))))
  (splice-box-out self))
