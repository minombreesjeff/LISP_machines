;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: t -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;
;;; Definitions file for the SAGE system.
;;; Things having to do with GET-SAGE-PROPERTY and PUT-SAGE-PROPERTY
;;; Things that call upon this are probably Augean
;;;

;;;Sage properties in property lists.
;;;To avoid proliferating properties holding Sage info.  Motivation: the more properties
;;;there are, the slower accessing them gets.
;;;Bundle all of the documentation-related Sage properties together into one structure
;;;so that a single property list access gets hold of everything you could need.
;;;Use a flavor instance rather than a named structure because it's one word smaller.

;;;The properties with named slots are ones expected to be in almost every record.
;;;Others that are expected to be rare will be on the extended properties list (in
;;;order to avoid using lots of memory for almost-always-empty slots).  In particular,
;;;source-title and source-topic are rare enough for this.
;;;If there is more than one record with a name, the property is a list of these instances.
(defflavor DOCUMENTATION-INFO
	(record-type		;to distinguish multiple structures in a list
	 (tokens nil)		;list of strings
	 (location nil)
	 (source-file nil)
	 (keyword-tokens nil)
	 (source-type nil)
	 (oneliner nil)
	 (callees nil)
	 (extended-properties nil))	;property list (for expansion)
	()
  (:default-init-plist :area *sage-property-area*)
  :initable-instance-variables
  :writable-instance-variables
  :locatable-instance-variables)

(compile-flavor-methods DOCUMENTATION-INFO)	;No methods other than accessors

(defvar *DOC-INFO-PROPERTIES*
	'(tokens location source-file keyword-tokens source-type oneliner callees))

(defvar *EXTENDED-PROPERTIES*			;make it flag an error now on attempt to
	'(t source-topic			;add anything else, for debugging
	    source-title
	    document-type
	    availability			; value of OFF-LINE means files have been deleted
	    ))

;;; Obsolete.
(defvar *SAGE-PROPERTY-AREA* sys:working-storage-area)

(defvar *USE-OLD-SAGE-PROPERTY-MECHANISM* t)	;(setq *use-old-sage-property-mechanism* t)

(defun GET-SAGE-PROPERTY (topic type attribute)
  (cond (*use-old-sage-property-mechanism*
	 (get-sage-property-old topic type attribute))
	(t (setq type (coerce-record-type type 'external))
	   (let* ((record-group (find-record-group-for-topic-and-type topic type))
		  (record (and record-group (find-record-for-lookup record-group))))
	     (when (eq attribute 'tokens)	;yecch!
	       (cerror "use the merged title and keywords token list."
		       "You shouldn't be using (get-sage-property ... 'tokens) now
that you're using the \"new\" record system."))
	     (when record
	       (cond ((listp record)
		      (cond ((eq attribute 'tokens)	;yecch!
			     (doc-record-get-sage-property (first record) 'tokens))
			    (t
			     (loop for r in record
				   collecting
				     (coerce-record-type (doc-record-source-type r) 'property)
				   collecting (doc-record-get-sage-property r attribute)))))
		     (t
		      (doc-record-get-sage-property record attribute))))))))

(defun PUT-SAGE-PROPERTY (topic type attribute value)
  (cond (*use-old-sage-property-mechanism*
	 (put-sage-property-old topic type attribute value))
	(t
	 (setq type (coerce-record-type type 'external))
	 (unless (or type (eq attribute 'tokens))
	   (error "Not safe to remove sage documentation properties without specifying a type."))
	 (let* ((record-group (find-record-group-for-topic-and-type topic type nil t))
		(record (or (find-record-for-lookup record-group)
			    (find-record-for-topic-and-type
			      topic type :installed :create-p t))))
	   (cond ((listp record)
		  ;; must be (eq attributes 'tokens) here...
		  (loop for r in record
			doing
		    (doc-record-put-sage-property r attribute value)))
		 (t (doc-record-put-sage-property record attribute value)))))))

(defun REMOVE-SAGE-PROPERTY (topic type &optional (attribute :all))
  (unless type
    (error "Not safe to remove sage documentation properties without specifying a type."))
  (cond (*use-old-sage-property-mechanism*
	 (remove-sage-property-old topic type attribute))
	(t
	 (setq type (coerce-record-type type 'external))
	 (when (eq attribute :all)
	   (error "Can't remove all properties that way"))
	 (let* ((record-group (find-record-group-for-topic-and-type topic type))
		(record (and record-group (find-record-for-lookup record-group))))
	   (when record
	     (doc-record-put-sage-property record attribute nil))))))

;;;The attribute and the topic are required.  The type can be nil, which for everything
;;;except tokens, just returns the list containing the properties (not a property list).
(defun GET-SAGE-PROPERTY-OLD (topic type attribute)
  (unless (and topic attribute)			;---Gee, this means we can't document NIL
    (error "~S called with nonsensical args" 'get-sage-property))
  (setq type (coerce-record-type type 'property))	;can be nil, for case of tokens
  (let ((info (si:function-spec-get topic 'documentation-info)))
    (cond ((null info) nil)
	  ((eq attribute 'tokens)		;simple property, same for all types
	   (documentation-info-tokens (if (consp info) (first info) info)))
	  ((null type)				;return plist, simulating old code
	   (unless (consp info)
	     (setq info (list info)))
	   (loop for info in info
		 collect (documentation-info-record-type info)
		 collect (multiple-value-bind (slot-location extended-p)
			     (doc-info-slot-location info attribute
						     (documentation-info-record-type info))
			   (if extended-p
			       (and slot-location
				    (getf (location-contents slot-location) attribute))
			       (location-contents slot-location)))))
	  (t
	   (multiple-value-bind (slot-location extended-p)
	       (doc-info-slot-location info attribute type)
	     (if extended-p
		 (and slot-location (getf (location-contents slot-location) attribute))
		 (location-contents slot-location)))))))

(defun PUT-SAGE-PROPERTY-OLD (topic type attribute value)
  (setq type (coerce-record-type type 'property))
  (unless (and (or type (eq attribute 'tokens)) attribute)	;are args sensible?
    (error "~S called with nonsensical arguments" 'put-sage-property))
  (let ((info (si:function-spec-get topic 'documentation-info)))
    (unless (cond ((null type)
		   (not (null info)))
		  ((listp info)
		   (loop for info in info
			 thereis (eq (documentation-info-record-type info) type)))
		  (t
		   (eq (documentation-info-record-type info) type)))
      ;; Need to create a new doc-info instance to hold this record-type
      (let ((new (make-instance 'documentation-info :record-type type)))
	(setq info (cond ((null info) new)
			 ((atom info) (list-in-area *sage-property-area* new info))
			 (t (cons-in-area new info *sage-property-area*))))
	(si:function-spec-putprop topic info 'documentation-info)))
    (cond (type
	   (multiple-value-bind (slot-location extended-p)
	       (doc-info-slot-location info attribute type)
	     (cond ((not extended-p)
		    (setf (location-contents slot-location) value))
		   ((not (null value))
		    (let ((*default-cons-area* *sage-property-area*))
		      (setf (getf (location-contents slot-location) attribute) value)))
		   (t (si:nremprop slot-location attribute)
		      nil))))
	  ((listp info)
	   (dolist (info info)
	     (setf (documentation-info-tokens info) value))
	   value)
	  (t (setf (documentation-info-tokens info) value)))))

(defun DOC-INFO-SLOT-LOCATION (info slot type)
  (declare (values location extended-p))
  (when (consp info)
    (loop named find-info
	  for instance in info
	  when (eq (documentation-info-record-type instance) type)
	    do (return-from find-info (setq info instance))
	  ;; Couldn't find this type in the list of info instances
	  finally (return-from doc-info-slot-location nil)))
  (and (eq (documentation-info-record-type info) type)
       (case slot
	 (tokens (locf (documentation-info-tokens info)))
	 (location (locf (documentation-info-location info)))
	 (source-file (locf (documentation-info-source-file info)))
	 (keyword-tokens (locf (documentation-info-keyword-tokens info)))
	 (source-type (locf (documentation-info-source-type info)))
	 (oneliner (locf (documentation-info-oneliner info)))
	 (callees (locf (documentation-info-callees info)))
	 (otherwise
	  (if (member slot *extended-properties*)
	      (values (locf (documentation-info-extended-properties info)) t)
	      (error "Attempt to add unrecognized property ~S to ~S"
		      slot info))))))

(defun REMOVE-SAGE-PROPERTY-OLD (topic type &optional (attribute :all))
  (unless type
    (error "Not safe to remove sage documentation properties without specifying a type."))
  (setq type (coerce-record-type type 'property))
  (let ((info (si:function-spec-get topic 'documentation-info)))
    (when info
      (cond ((eq attribute :all)
	     (loop for attribute in *doc-info-properties*
		   do (remove-sage-property-internal info type attribute))
	     (loop for attribute in *extended-properties*
		   unless (eq attribute t)	;perpetuate the kludge
		     do (remove-sage-property-internal info type attribute)))
	    (t (remove-sage-property-internal info type attribute))))))

;;;Internal function of remove-sage-property
(defun REMOVE-SAGE-PROPERTY-INTERNAL (info type attribute)
  (multiple-value-bind (slot-location extended-p)
      (doc-info-slot-location info attribute type)
    (if extended-p
	(and slot-location (si:nremprop slot-location attribute))
	(setf (location-contents slot-location) nil))))

;; Probably want to describe the record...
(defun VIEW-SAGE-PROPERTIES (topic)
  (let* ((all-properties (get-sage-property topic nil 'location))
	 (types (loop for (p nil) on all-properties by #'cddr
		      collect p)))
    (cond
      (all-properties
       (format t "~&For topic ~A (tokens ~S):" topic (get-sage-property topic nil 'tokens))
       (loop for type in types
	     do
	     (format t "~%as a ~A" (string-capitalize-words type))
	     (loop for slot in '(location source-file keyword-tokens
					  source-type oneliner callees)
		   for value = (get-sage-property topic type slot)
		   do
		   (if value
		       (format t "~%  ~A: ~S" (string-capitalize-words slot) value)
		       (format t "~%  No ~A." (string-capitalize-words slot))))
	     (loop for (prop value)
		       on (location-contents
			    (doc-info-slot-location
			      (si:function-spec-get topic 'documentation-info) t type))
		       by 'cddr
		   do (format t "~%  ~A: ~S" (string-capitalize-words prop) value))))
      (t (format t "~&~S appears not to be documented in Sage" topic)))))

#||

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL NIL :SMALL) "TVFONT");;; Old version, for doc info structures

;;;Sage properties in property lists.
;;;To avoid proliferating properties holding Sage info.  Motivation: the more properties
;;;there are, the slower accessing them gets.
;;;Bundle all of the documentation-related Sage properties together into one structure
;;;so that a single property list access gets hold of everything you could need.

;;;---Where will these get consed?  Should they be in the property list area?
;;;The properties with named slots are ones expected to be in almost every record.
;;;Others that are expected to be rare will be on the extended properties list (in
;;;order to avoid using lots of memory for almost-always-empty slots).  In particular,
;;;source-title and source-topic are rare enough for this.
(defstruct (DOCUMENTATION-INFO :named-array)
  tokens					;list of strings
  location					;property list, by "type" (:sage-function-rec)
  source-file					;   "
  keyword-tokens				;   "
  source-type					;   "
  oneliner					;   "
  callees					;   "
  extended-properties)				;property list, by property (for expansion)

(defvar *DOC-INFO-PROPERTIES*
	'(tokens location source-file keyword-tokens source-type oneliner callees))

(defvar *EXTENDED-PROPERTIES*			;make it flag an error now on attempt to
	'(t source-topic			;add anything else, for debugging
	    source-title
	    document-type
	    availability			; value of OFF-LINE means files have been deleted
	    ))

(defvar *SAGE-PROPERTY-AREA*			;this is where all the sage property lists
	(make-area :name '*sage-property-area*	;and structures will live
		   :region-size 256000))

(defvar *USE-OLD-SAGE-PROPERTY-MECHANISM* t)	;(setq *use-old-sage-property-mechanism* t)

(defun GET-SAGE-PROPERTY (topic type attribute)
  (cond (*use-old-sage-property-mechanism*
	 (get-sage-property-old topic type attribute))
	(t (setq type (coerce-record-type type 'external))
	   (let ((record (find-record-for-topic-and-type topic type :installed)))
	     (when (eq attribute 'tokens)	;yecch!
	       (cerror "use the merged title and keywords token list."
		       "You shouldn't be using (get-sage-property ... 'tokens) now
that you're using the \"new\" record system."))
	     (when record
	       (cond ((listp record)
		      (cond ((eq attribute 'tokens)	;yecch!
			     (doc-record-get-sage-property (first record) 'tokens))
			    (t
			     (loop for r in record
				   collecting
				     (coerce-record-type (doc-record-source-type r) 'property)
				   collecting (doc-record-get-sage-property r attribute)))))
		     (t
		      (doc-record-get-sage-property record attribute))))))))

(defun PUT-SAGE-PROPERTY (topic type attribute value)
  (cond (*use-old-sage-property-mechanism*
	 (put-sage-property-old topic type attribute value))
	(t
	 (setq type (coerce-record-type type 'external))
	 (unless (or type (eq attribute 'tokens))
	   (error "Not safe to remove sage documentation properties without specifying a type."))
      (let ((record (find-record-for-topic-and-type topic type :installed :create-p t)))
	(cond ((listp record)
	       ;; must be (eq attributes 'tokens) here...
	       (loop for r in record
		     doing
		 (doc-record-put-sage-property r attribute value)))
	      (t (doc-record-put-sage-property record attribute value)))))))

(defun REMOVE-SAGE-PROPERTY (topic type &optional (attribute :all))
  (unless type
    (error "Not safe to remove sage documentation properties without specifying a type."))
  (cond (*use-old-sage-property-mechanism*
	 (remove-sage-property-old topic type attribute))
	(t
	 (setq type (coerce-record-type type 'external))
	 (when (eq attribute :all)
	   (error "Can't remove all properties that way"))
	 (let ((record (find-record-for-topic-and-type topic type :installed)))
	   (when record
	     (doc-record-put-sage-property record attribute nil))))))

;;;The attribute and the topic are required.  The type can be nil, which for everything
;;;except tokens, just returns the list containing the properties (not a property list).
(defun GET-SAGE-PROPERTY-OLD (topic type attribute)
  (unless (and topic attribute)			;---Gee, this means we can't document NIL
    (error "get-sage-property called with nonsensical args"))
  (setq type (coerce-record-type type 'property))	;can be nil, for case of tokens
  (let ((structure (si:function-spec-get topic 'documentation-info)))
    (when structure
      (multiple-value-bind (slot-location extended-p)
	  (doc-info-slot-location structure attribute)
	(cond (extended-p
	       (let ((interior-plist (locf (getf (cdr slot-location) attribute))))
		 (if type			;if type is specified
		     (getf (cdr interior-plist) type)	;get specific value
		     (cdr interior-plist))))	;owise, return whole property list
	      ((eq attribute 'tokens)		;simple property, same for all types
	       (documentation-info-tokens structure))
	      (t (if type			;if type is specified
		     (getf (cdr slot-location) type)	;get specific value
		     (cdr slot-location))))))))	;owise, return whole property list

(defun PUT-SAGE-PROPERTY-OLD (topic type attribute value)
  (setq type (coerce-record-type type 'property))
  (if (and (or type (eq attribute 'tokens)) attribute)	;are args sensible?
      (let* ((exists-p (si:function-spec-get topic 'documentation-info))
	     (structure (or exists-p
			    (let ((sys:default-cons-area *sage-property-area*))
			      (make-documentation-info	;make a new property holder
				:tokens nil
				:location nil
				:source-file nil
				:keyword-tokens nil
				:oneliner nil
				:callees nil
				:extended-properties nil)))))
	(unless exists-p			;install it
	  (si:function-spec-putprop topic structure 'documentation-info))
	(multiple-value-bind (slot-location extended-p)
	    (doc-info-slot-location structure attribute)
	  (let ((sys:default-cons-area *sage-property-area*))
	    (cond (extended-p
		   (let ((interior-plist (locf (getf (cdr slot-location) attribute))))
		     (setf (getf (cdr interior-plist) type) value)))
		  ((eq attribute 'tokens)	;OK
		   (setf (documentation-info-tokens structure) value))
		  (t (setf (getf (cdr slot-location) type) value))))))
      (error "put-sage-property called with nonsensical arguments")))

(defun DOC-INFO-SLOT-LOCATION (structure slot)
  (case slot
    (tokens (locf (documentation-info-tokens structure)))
    (location (locf (documentation-info-location structure)))
    (source-file (locf (documentation-info-source-file structure)))
    (keyword-tokens (locf (documentation-info-keyword-tokens structure)))
    (source-type (locf (documentation-info-source-type structure)))
    (oneliner (locf (documentation-info-oneliner structure)))
    (callees (locf (documentation-info-callees structure)))
    (otherwise
     (if (member slot *extended-properties*)
	 (values (locf (documentation-info-extended-properties structure)) t)
	 (error "Attempt to add unrecognized property ~S to ~S"
		 slot (coerce structure 'list))))))

(defun REMOVE-SAGE-PROPERTY-OLD (topic type &optional (attribute :all))
  (unless type
    (error "Not safe to remove sage documentation properties without specifying a type."))
  (setq type (coerce-record-type type 'property))
  (let ((structure (si:function-spec-get topic 'documentation-info)))
    (when structure
      (cond ((eq attribute :all)
	     (loop for attribute in *doc-info-properties*
		   do (remove-sage-property-internal structure type attribute))
	     (loop for attribute in *extended-properties*
		   unless (eq attribute t)	;perpetuate the kludge
		     do (remove-sage-property-internal structure type attribute)))
	    (t (remove-sage-property-internal structure type attribute))))))

;;;Internal function of remove-sage-property
(defun REMOVE-SAGE-PROPERTY-INTERNAL (structure type attribute)
  (multiple-value-bind (slot-location extended-p)
      (doc-info-slot-location structure attribute)
    (let ((sys:default-cons-area *sage-property-area*))
      (cond (extended-p
	     (let ((interior-plist (locf (getf (cdr slot-location) attribute))))
	       (remf interior-plist type)))
	    ((eq attribute 'tokens)		;OK?  What is other types would still remain?
	     (setf (documentation-info-tokens structure) nil))
	    (t (remf slot-location type))))))

;; Probably want to describe the record...
(defun VIEW-SAGE-PROPERTIES (topic)
  (let* ((all-properties (get-sage-property topic nil 'location))
	 (types (loop for (p x) on all-properties by #'cddr
		      collect p)))
    (cond
      (all-properties
       (format t "~&For topic ~A (tokens ~S):" topic (get-sage-property topic nil 'tokens))
       (loop for type in types
	     do
	     (format t "~%as a ~A" (string-capitalize-words type))
	     (loop for slot in '(location source-file keyword-tokens
					  source-type oneliner callees)
		   for value = (get-sage-property topic type slot)
		   do
		   (if value
		       (format t "~%  ~A: ~S" (string-capitalize-words slot) value)
		       (format t "~%  No ~A." (string-capitalize-words slot)))))
       (format t "~%Extended properties: ~S"
	       (cdr (doc-info-slot-location
		      (si:function-spec-get topic 'documentation-info) t))))
      (t (format t "~&~S appears not to be documented in Sage" topic)))))
0||#

;;;For handling cases where user moves the mouse off a resolve-type menu.
(defmacro CATCH-UNSUPPLIED-TYPE ((&optional (beep-p t)) &body body)
  `(let ((values (multiple-value-list (catch 'no-valid-type
					,@body))))
     (if (eq (first values) 'no-valid-type)
	 (when ,beep-p (beep))
	 (values-list values))))

(defsubst COMPLAIN-ABOUT-INVALID-TYPE ()
  (throw 'no-valid-type 'no-valid-type))

;;;The input is the (contents of the) property list that maps internal type
;;;symbols to external type names.  (use (get-sage-property topic nil 'source-type) for arg)
;;;Find out which one the user wants to see when there is more than one, otherwise
;;;just returns the one internal type.
;;;This returns the internal type (usually called "property")
;;;Every caller of (callers of) resolve-type must be prepared to handle the catch tag
;;; nsage::no-valid-type, which is what you get if the user moves off the menu or
;;; switches "activities".
(defun RESOLVE-TYPE (mapping)
  (cond ((symbolp mapping) (coerce-record-type mapping 'property))
	((= 2 (length mapping))			;e.g. (:sage-function-record macro)
	 (first mapping))
	(t
	 (let* ((types-alist (loop for (internal external) on mapping by #'cddr
				   collect `(,(string-downcase external) ,internal)))
		(type (if (in-zwei-p)
			  (zwei:sage-completing-read-from-user types-alist "type")
			  (zwei:choose-one-from-list types-alist "types"
						     #'string-capitalize-words))))
	   (or type (complain-about-invalid-type))))))

#||
;;; Not used anymore -- rom 2-3-87

;;;Documentation retriever.  Given topic and type, it finds "the documentation"
;;;which is either the xxx-doc-record instance or its disk location, resolving
;;; type ambiguity.  [Thought about having it read in from the disk BUT there would
;;; be performance implications in having to open the same file many times unless I
;;; don't understand when this function gets called.]
(defun DOCUMENTATION-RECORD (topic type)
  ;; --- Kludge alert:  This is here to make old method specs work.
  ;; Remove when new record type system is installed.
  (when (consp topic)
    (setq topic (validate-topic topic (coerce-record-type type 'external))))
  (let ((doc (get-sage-property topic type 'location)))
    (typecase doc
      (basic-doc-record (values doc type))
      (cons
	(cond ((= (length doc) 3)
	       (if (typep (documentation-index-location doc) 'fs:pathname)
		   (values doc type)		;docn still on disk
		   (error "Looks like this isn't disk location or property list: ~S" doc)))
	      (t				;property list
	       (cond ((> (length doc) 2)	;more than one property on list?
		      (let ((type (resolve-type (get-sage-property topic nil 'source-type))))
			(values (cadr (member (coerce-record-type type 'property) doc)) type)))
		     (t (values (second doc) (first doc)))))))	;just one pair
      (otherwise (setq doc (documentation topic))	;the documentation string
		 (if doc (values doc type))))))
||#

;;; Used by undocument-topic routines to find out how many records exist for a topic.
(defun DOCUMENTED-RECORD-COUNT (topic)
  (floor (length (get-sage-property topic nil 'location)) 2))


(defgeneric doc-record-get-sage-property (doc-record attribute)
  (:method-combination :case))

(defmethod (doc-record-get-sage-property doc-record :otherwise) (attribute)
  (cond ((or (member attribute *doc-info-properties*)
	     (member attribute *extended-properties*))
	 (error "NSage implementors forgot to write a case for ~s" attribute))
	(T (error "~s called with nonsensical args ~s" 'get-sage-property attribute))))


(defmethod (doc-record-get-sage-property doc-record tokens) ()
  tokens)

;; We imagine the callers are looking for a disk-location or for an old-style doc record,
;; and we refuse to supply them with the latter.
(defmethod (doc-record-get-sage-property doc-record location) ()
  disk-location)

(defmethod (doc-record-get-sage-property doc-record source-file) ()
  source-file)

;;;--- Old-style keyword-tokens are new-style tokens, but this needs to be
;;; rethought
(defmethod (doc-record-get-sage-property doc-record keyword-tokens) ()
  tokens)
(defmethod (doc-record-get-sage-property doc-record source-type) ()
  source-type)

(defmethod (doc-record-get-sage-property doc-record oneliner) ()
  oneliner)
(defmethod (doc-record-get-sage-property doc-record callees) ()
  callees)
(defmethod (doc-record-get-sage-property doc-record source-topic) ()
  (record-field-contents (doc-record-source-topic self)))
(defmethod (doc-record-get-sage-property concept-record-type-mixin source-title) ()
  source-title)
(defmethod (doc-record-get-sage-property doc-record document-type) ()
  document-type)

;; value of OFF-LINE means files have been deleted
(defmethod (doc-record-get-sage-property doc-record availability) ()
  (if (doc-record-available self)
      ()
      'off-line))

(defgeneric doc-record-put-sage-property (doc-record attribute value)
  (:method-combination :case))

(defmethod (doc-record-put-sage-property doc-record :otherwise) (attribute value)
  (cond ((or (member attribute *doc-info-properties*)
	     (member attribute *extended-properties*))
	 (error "NSage implementors forgot to write a case for ~s" attribute))
	(T (error "~s called with nonsensical args ~s ~s"
		  'put-sage-property attribute value))))


(defmethod (doc-record-put-sage-property doc-record tokens) (value)
  (ignore value)
  (error "You shouldn't be doing put-sage-property of TOKENS anymore.") )

;; We imagine the callers are looking for a disk-location or for an old-style doc record,
;; and we refuse to supply them with the latter.
(defmethod (doc-record-put-sage-property doc-record location) (value)
  (cond ((consp value)
	 (install-disk-location-field self))
	(T nil)))

(defmethod (doc-record-put-sage-property doc-record source-file) (value)
  (setq source-file value))

;; Not supported from record
;(defmethod (doc-record-put-sage-property doc-record keyword-tokens) (value)
;  (setq keyword-tokens value))
(defmethod (doc-record-put-sage-property doc-record source-type) (value)
  (break "Caller has no business trying to set source-type")
  (setq source-type value))

(defmethod (doc-record-put-sage-property doc-record oneliner) (value)
  (setq oneliner value))
(defmethod (doc-record-put-sage-property doc-record callees) (value)
  (setq callees value))
(defmethod (doc-record-put-sage-property doc-record source-topic) (value)
  (break "Caller has no business trying to set source-topic")
  (setq source-topic value))
(defmethod (doc-record-put-sage-property concept-record-type-mixin source-title) (value)
  (setq source-title value))
(defmethod (doc-record-put-sage-property doc-record document-type) (value)
  (setq document-type value))

;; value of OFF-LINE means files have been deleted
(defmethod (doc-record-put-sage-property doc-record availability) (value)
  (cond ((eql value 'off-line)
	 (setf (doc-record-available self) nil)
	 value)
	((eql value nil)
	 (setf (doc-record-available self) T)
	 nil)
	(T (error "Bogus value for availability ~s" value))))

;;;--- Possibly things that think they need this should be dealing with the
;;; record instead.  Needed for now for conversion.
(defgeneric RECORD-GROUP-RECORD-ATTRIBUTE (record-group record-status attribute)
  (:method-combination :case))

(defmethod (RECORD-GROUP-RECORD-ATTRIBUTE RECORD-GROUP :INSTALLED) (attribute)
  (and installed-record
       (doc-record-get-sage-property installed-record attribute)))

(defmethod (RECORD-GROUP-RECORD-ATTRIBUTE RECORD-GROUP :EDITED) (attribute)
  (ignore attribute)
  (error "Record groups maintain a list of edited records.  It makes no ~
          sense to ask for an attribute of \"the\" edited record."))

(defmethod (RECORD-GROUP-RECORD-ATTRIBUTE RECORD-GROUP :PUBLISHED) (attribute)
  (and published-record
       (doc-record-get-sage-property published-record attribute)))
