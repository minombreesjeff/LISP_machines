;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; Lowercase: t -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

;;; Support functions for the document database part of the Sage system.

(defvar D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")*sage-id-pattern*0 0)			;to identify file as Sage binary
(defvar 1*compiled-data-format-version*0 7.)	;lots of version numbers, for generality

;;; Variable controlling redefinition warnings.  Possible values:
;;; NIL -- Query.
;;; :JUST-WARN -- Print a warning but don't query.
;;; Anything else -- Don't query or warn.
(defvar 1*inhibit-redefinition-warnings*0 :just-warn)

;;; Function controlling redefinition warnings.  Returns T if OK to
;;; install record, NIL if not OK, :PROCEED if OK to install and user
;;; doen't want to be asked about other records in this file.
;;; NEW-SOURCE-PATHNAME argument can be string, pathname, or symbol
;;; (meaning not a real pathname).  ALLOW-PROCEED-P means give user the
;;; option of telling you not to ask about other records in this file;
;;; should be NIL if installing only one definition.  RECORDS-SO-FAR is
;;; NIL or a list of record groups
;;; installed already from this file.  This can be NIL if you don't want
;;; to query on encountering duplicate records within this file.  If
;;; Sage ever uses record-source-file-name, this can be flushed.
(defun 1redefine-topic-p0 (record-group new-source-pathname
			 &optional allow-proceed-p records-so-far)
  (let ((inhibit-redefinition-warnings *inhibit-redefinition-warnings*)
	(old-source-pathname))
    (cond ((and (not (null inhibit-redefinition-warnings))
		(neq inhibit-redefinition-warnings :just-warn))
	   ;; User doesn't want to be asked.
	   t)
	  ((null (record-group-published-record record-group))
	   ;; If not documented already, go ahead and install.
	   t)
	  ((not (or (stringp (setq old-source-pathname
				   (doc-record-source-file
				     (record-group-published-record record-group))))
		    (typep old-source-pathname 'fs:pathname)))
	   ;; Existing record isn't a real record -- OK to install.
	   t)
	  ((and fs:this-is-a-patch-file
		(not (member record-group records-so-far)))
	   ;; Record loaded from patch file.  OK to install, unless we've already
	   ;; installed this record once from this file.
	   t)
	  (t
	   (let (new-source-is-pathname-p)
	     (when (or (stringp new-source-pathname)
		       (typep new-source-pathname 'fs:pathname))
	       (setq new-source-pathname
		     (send (fs:parse-pathname new-source-pathname) :new-pathname
			   :type nil :version nil)
		     new-source-is-pathname-p t))
	     (setq old-source-pathname
		   (send (fs:parse-pathname old-source-pathname) :new-pathname
			 :type nil :version nil))
	     (if (and new-source-is-pathname-p
		      (eq (send new-source-pathname :translated-pathname)
			  (send old-source-pathname :translated-pathname))
		      (not (member record-group records-so-far)))
		 ;; Same pathname as old record.  OK to install, unless we've already
		 ;; installed this record once from this file.
		 t
		 ;; Not OK to install.  Have to warn or query.
		 (let* ((fquery-stream *query-io*)
			(old-more-p (send-if-handles fquery-stream :more-p))
			(warning-message
			  (format nil "Warning: Documentation for ~A ~A~
                                         ~:[~* ~;, being installed from file ~A,~&~]~
                                         was previously installed from file ~A."
				  (namespace-type-string record-group)
				  (appropriate-title-rendering record-group 'no-formatting)
				  new-source-is-pathname-p
				  new-source-pathname
				  old-source-pathname)))
		   (case inhibit-redefinition-warnings
		     (:just-warn
		       ;; Warn only, don't query
		       (format fquery-stream "~&~A" warning-message) t)
		     ((nil)
		      (unwind-protect
			  (progn
			    ;; First turn on MORE processing, for benefit of Zwei
			    ;; minibuffer.
			    ;; This sucks, but the fquery prompt and help might be long,
			    ;; and they can't go to the typeout window because you might
			    ;; be in the middle of displaying several records.
			    (send-if-handles fquery-stream :set-more-p t)
			    (fquery
			      `(:choices
				 ,(if (and allow-proceed-p new-source-is-pathname-p)
				      `(((t "Yes, install this record.") #\Y #\T #\space)
					((:proceed
					   ,(format
					      nil
					      "Proceed and don't ask about records in ~A."
					      new-source-pathname)) #\P)
					((nil "No, don't install this record.")
					 #\N #\rubout))
				      '(((t "Yes, install this record.") #\Y #\T #\space)
					((nil "No, don't install this record.")
					 #\N #\rubout)))
				 :stream ,fquery-stream)
			      "~&~A  Install this record anyway? " warning-message))
			(send-if-handles fquery-stream :set-more-p old-more-p)))
		     (otherwise
		       (error
			 "Bogus value for ~S: ~S"
			 '*inhibit-redefinition-warnings*
			 inhibit-redefinition-warnings))))))))))

(fs:define-auxiliary-loadable-file-type :sage-binary
				      :load-stream-function 'sab-load-index-from-stream)

(defun 1sab-load-index-from-stream0 (stream ignore-package ignore-no-message-p)
  (ignore ignore-package ignore-no-message-p)
  (load-index-info stream)
  (values (send stream :pathname) (send stream :truename)))

;; The intention here is that this merely do reading, having no other side effects
(defun 1read-index-info0 (pathname-or-stream &key (close-p t) progress-note-continuation)
  (declare (values index-info sab-attribute-alist closed-stream))
  (when progress-note-continuation
    (funcall progress-note-continuation :next-phase t))
  (flet ((doit (stream)
	   (with-document-and-device-types ()	;---only because loader wants to validate
	     (unless (= *sage-id-pattern* (read-32-bit-number stream))	;dummy, but had better be ...
	       (error "Are you sure ~A is a Sage compiled object file?" (send stream :truename)))
	     (let ((version (read-8-bit-number stream)))
	       (unless (equal version *compiled-data-format-version*)
		 ;; Version 7 is compatible with 6
		 (unless (and (= version 6)
			      (= *compiled-data-format-version* 7))
		   (error "~A was dumped in an incompatible format (~D), now using format ~D."
			  (send stream ':truename) version *compiled-data-format-version*))))
	     (let ((sab-attribute-alist (read-sab-file-attribute-alist stream)))
	       (read-32-bit-number stream)	;throw away the PS pointer
	       (send stream :set-pointer (read-32-bit-number stream))	;go to start of info
	       (let ((index-info (read-sab-index
				   stream
				   :progress-note-continuation progress-note-continuation)))
		 (when close-p
		   ;; Close the file connection while installing the various data
		   (close stream))
		 (values index-info sab-attribute-alist stream)))))
	 (WRITE-AROUND-UNIX-ENCEPHALOPATHY ()
	   #+If-Unix-were-less-braindamaged-this-would-work
	   (fs:merge-pathnames pathname-or-stream
			       (fs:default-pathname () () :sage-binary :newest))
	   (let* ((parsed-pathname (fs:parse-pathname pathname-or-stream))
		  (version (when t ;;---(eq (send parsed-pathname :canonical-type) :sage-binary)
			     (send parsed-pathname :version))))
	     (fs:merge-pathnames
	       parsed-pathname
	       (send parsed-pathname :new-pathname
		     ;; ---This replaces the type, rather than merging against it.
		     :canonical-type :sage-binary
		     :version (or version :newest))))))
    (if (streamp pathname-or-stream)
	(doit pathname-or-stream)
	(with-open-file (stream (write-around-unix-encephalopathy)
				:characters nil :byte-size 8.)
	  (tv:noting-progress ("Reading SAB index")
	    (doit stream))))))

(defun 1load-index-info0 (pathname-or-stream)
  (multiple-value-bind (index-info sab-attribute-alist closed-stream)
      (read-index-info pathname-or-stream)
    (let* ((stream-pathname (send closed-stream :pathname))
	   (generic-pathname (send stream-pathname :generic-pathname))
	   (source-file-unique-id
	     (second (assoc :logical-source-pathname sab-attribute-alist))))
      ;;---Is there any better place to put this?
      (send generic-pathname :putprop sab-attribute-alist :sage-file-attributes)
      (when source-file-unique-id
	(send generic-pathname :putprop
	      (fs:parse-pathname source-file-unique-id) :qfasl-source-file-unique-id))
      (let ((sab-logical-pathname (sab-logical-pathname-from-stream closed-stream)))
	;; ---This really belongs in finish-merging-sage-completion-aarray except that
	;; that's called inside the unwind-protect cleanup clause.  Really the
	;; cleanup should be done only after all files in a batch have been loaded,
	;; i.e., after loading the DOC system or after loading DOC patches.
	;;--- I don't think there's any real reason to do this now.  --DLA
	;; (si:sort-aarray *topic-aarray*)
	(let ((add-word-hash-table (make-hash-table))	;test #'eql -- tokens are unique
	      (remove-word-hash-table (make-hash-table)))
	  (unwind-protect
	      ;;--- If we ever allow pointy hands, etc., in sab files, need to
	      ;; get the attribute string out of the sab-attribute-alist and
	      ;; do file-attribute-bindings here.  Also would need to
	      ;; canonicalize-record-contents later.
	      (install-index-info
		index-info *topic-aarray* add-word-hash-table remove-word-hash-table
		source-file-unique-id sab-logical-pathname)
	    (finish-installing-sage-records add-word-hash-table remove-word-hash-table)))))
    (sys:set-file-stream-loaded-id closed-stream si:pkg-user-package)
    (values (send closed-stream :pathname) (send closed-stream :truename))))

(defun 1sab-logical-pathname-from-stream0 (stream)
  (let ((version (send (send stream :truename) :version)))
    (send (send stream :pathname) :new-version
	  (if (eq version :unspecific)
	      :newest				;Unix encephalopathy
	      version))))

;;; Given the batch of index-info that came out of a sab file, insert 
;;; the information for each record into its record; link the record
;;; into its neighborhood.
(defun 1install-index-info0 (index-info completion-aarray add-word-hash-table
			   remove-word-hash-table source-pathname sab-logical-pathname)
  (let ((records-so-far)
	(suppress-redefinition-queries))
    (tv:dolist-noting-progress (item index-info "Installing doc index info")
      (destructuring-bind (topic type fields) item
	(setq fields (copy-list fields))
	(let (unique-id unique-index)
	  (with-index-field (uid unique-id fields)
	    (setq unique-id uid))
	  (with-index-field (uid unique-index fields)
	    (setq unique-index uid))
	  (multiple-value-bind (record-group)
	      (find-record-group-for-topic-and-type topic type unique-id t unique-index t t)
	    (when (or suppress-redefinition-queries
		      (let ((redefine-p (redefine-topic-p
					  record-group source-pathname t records-so-far)))
			(if (eq redefine-p :proceed)
			    (setq suppress-redefinition-queries t)
			    redefine-p)))
	      (sys:without-aborts
		("Documentation index information for ~A ~A is being installed.~@
                        Aborting now could leave documentation data structures in an~@
                        inconsistent state and cause problems in using the Document Examiner."
		 (namespace-type-string record-group)
		 (appropriate-title-rendering record-group 'no-formatting))
		(let ((version-number))
		  (with-index-field (version version-number fields)
		    (setq version-number version))
		  (let ((record (find-record-for-topic-and-type
				  topic type :published :unique-id unique-id
				  :version-number version-number :create-p t
				  :install-name-p t
				  :supersede-topic-if-different t)))
		    (multiple-value-bind (old-tokens old-callees)
			(install-index-info-1
			  record topic type fields source-pathname
			  sab-logical-pathname :published)
		      (establish-record-in-neighborhood
			record completion-aarray add-word-hash-table remove-word-hash-table
			old-tokens old-callees)
		      (push record-group records-so-far))))))))))))

;;; If 1note-record-modified 0is changed and patched for a world running Concordia version
;;; 406, it must also be included as a patch to Concordia.  This method was migrated from
;;; Concordia in nsage patch 405-18.  If Concordia is loaded after nsage and nsage's
;;; patches, the changes to this method will be overwritten by the method which still
;;; exists in Concordia 406.  If Concordia has been recompiled to version 407 or higher,
;;; please delete this comment and similar comments in this file.
(defmethod 1(note-record-modified doc-record)0 ()
  (when (or (not (doc-record-modified self))
	    (doc-record-published self)
	    (doc-record-checkpointed self))
    (incf version-number)
    (push (make-modification-history-element
	    :version-number version-number
	    :user-id zl:user-id
	    :universal-time (time:get-universal-time))
	  modification-history))
  (setf (doc-record-modified self) t)
  (setf (doc-record-installed self) nil)
  (setf (doc-record-published self) nil)
  (setf (doc-record-checkpointed self) nil))

;;; If 1change-record-type0 is changed and patched for a world running Concordia version
;;; 406, it must also be included as a patch to Concordia.  This function was migrated from
;;; Concordia in nsage patch 405-18.  If Concordia is loaded after nsage and nsage's
;;; patches, the changes to this function will be overwritten by the function which still
;;; exists in Concordia 406.  If Concordia has been recompiled to version 407 or higher,
;;; please delete this comment and similar comments in this file.
(defun 1change-record-type0 (record new-type)
  ;; would like to do this as a method, but that doesn't
  ;; work when changing the instance flavor...
  (note-record-modified record)
  (etypecase record
    (concept-record
      (cond ((concept-type-p new-type)
	     (setf (doc-record-source-type record) new-type))
	    ((lisp-object-type-p new-type)
	     (setf (doc-record-source-type record) new-type)
	     (flavor:change-instance-flavor record 'lisp-record)
	     (unless (record-allows-arglist-field record)
	       (setf (doc-record-arglist record) nil)))
	    (t (error "Don't know how to change the type of ~S to ~S" record new-type))))
    (lisp-record
      (cond ((lisp-object-type-p new-type)
	     (setf (doc-record-source-type record) new-type)
	     (unless (record-allows-arglist-field record)
	       (setf (doc-record-arglist record) nil)))
	    ((concept-type-p new-type)
	     (setf (doc-record-source-type record) new-type)
	     (flavor:change-instance-flavor record 'concept-record))
	    (t (error "Don't know how to change the type of ~S to ~S" record new-type))))))

;;; If 1record-group-highest-version-number0 is changed and patched for a world running
;;; Concordia version 406, it must also be included as a patch to Concordia.  This method
;;; was migrated from Concordia in nsage patch 405-18.  If Concordia is loaded after nsage
;;; and nsage's patches, the changes to this method will be overwritten by the method
;;; which still exists in Concordia 406.  If Concordia has been recompiled to version 407
;;; or higher, please delete this comment and similar comments in this file.
(defmethod 1(record-group-highest-version-number record-group)0 ()
  (let ((vn nil))
    (flet ((collect-version (record)
	     (when record
	       (cond ((null vn)
		      (setq vn (doc-record-version-number record)))
		     (t (maxf vn (doc-record-version-number record)))))))
      (collect-version published-record)
      (collect-version installed-record)
      (mapc #'collect-version edited-records))
    vn))

;;; If 1change-record-group-type0 is changed and patched for a world running Concordia
;;; version 406, it must also be included as a patch to Concordia.  This method was
;;; migrated from Concordia in nsage patch 405-18.  If Concordia is loaded after nsage and
;;; nsage's patches, the changes to this method will be overwritten by the method which
;;; still exists in Concordia 406.  If Concordia has been recompiled to version 407 or
;;; higher, please delete this comment and similar comments in this file.
(defmethod 1(change-record-group-type record-group)0 (new-type &key (mode ':explicit)
							     guilty-record)
  (cond ((eql mode ':explicit)
	 (setq type new-type))
	(t
	 ;; ok, reading in some sab file is trying to change the type of this record
	 ;; group.  Let's look at the guilty record and see if he really has the right to
	 ;; make this change.  He's only allowed to change the record group if his version
	 ;; number is the newest one.
	 (assert (not (null guilty-record))
		 () "No record was passed to change-record-group-type.")
	 (let ((guilty-version-number (doc-record-version-number guilty-record))
	       (highest-version-number (record-group-highest-version-number self)))
	   (when ( guilty-version-number highest-version-number)
	     (setq type new-type)))))

  (flet ((do-it (record)
	   (when (and record
		      (not (eql (doc-record-source-type record) new-type)))
	     (change-record-type record new-type))))
    (case mode
      (:published (do-it published-record))
      ((:explicit :edited)
       (loop for edited-record in edited-records do (do-it edited-record))))
    (do-it installed-record)))

;;; This function exists for future expansion when whoppers or daemons may do something
;;; interesting.
(defmethod 1(change-type-if-necessary doc-record)0 (new-type record-status)
  (change-record-group-type record-group new-type :mode record-status
			    :guilty-record self))

;;; Given a record, topic, type and fields that have come from a sab file,
;;; fill in the record from the field contents.
(defmethod 1(install-index-info-1 doc-record)0 (topic type fields source-pathname
						    sab-logical-pathname record-status)
  (declare (values old-tokens old-callees))
  (setq fields (copy-list fields))
  (change-type-if-necessary self type record-status)
  (setq name topic)
  (setq source-type type)
  (setq source-file source-pathname)
  (with-index-field (location location fields)
    (destructuring-bind (from to) location
      (install-disk-location-field self (list sab-logical-pathname from to))))
  (setf (doc-record-available self) t)
  (setf (doc-record-filled self) nil)
  (let ((old-tokens tokens)
	(old-callees callees))
    ;;--- keywords (from old sab files only)
    (with-index-field (keywords-field keywords fields)
      (setq keywords (make-record-field self record-status keywords-field))
      (when keywords
	(compute-doc-record-tokens self)
	(setq keywords nil)))
    (process-fields-from-sab self fields record-status)
    (values old-tokens old-callees)))

#||
(2 0 (NIL 0) (NIL NIL :SMALLER) "EINY7");;; Use :pass-on so mixins can install things from the field-alist and then delete them
(defgeneric install-index-info-2 (doc-record field-alist source-pathname sab-pathname)
  (declare (values field-alist source-pathname sab-pathname))
  (:method-combination :pass-on :most-specific-first
		       field-alist source-pathname sab-pathname))

(defmethod (install-index-info-2 concept-record-type-mixin)
	   (field-alist source-pathname sab-pathname)
  (with-index-field (source source-title field-alist)
    (setq source-title source))
  (values field-alist source-pathname sab-pathname))

(defmethod (install-index-info-2 doc-record) (field-alist source-pathname sab-pathname)
  (with-index-field (one-liner oneliner field-alist)
    (setq oneliner one-liner))
  (with-index-field (source-top source-topic field-alist)
    (setq source-topic source-top))
  (with-index-field (doc-type document-type field-alist)
    (setq document-type doc-type))
  ;; source-file
  (setq source-file source-pathname)
  ;; availability
  (setf (doc-record-available self) t)
  ;; location
  (with-index-field (location location field-alist)
    (destructuring-bind (from to) location
      (setq disk-location (list sab-pathname from to))))
  ;; tokens
  (with-index-field (token-list tokens field-alist)
    (setq tokens (canonicalize-tokens token-list)))
  ;;--- keywords (from old sab files only)
  (with-index-field (keyword-contents keywords field-alist)
    (setq keywords keyword-contents)
    (when keyword-contents
      (compute-doc-record-tokens self)
      (setq keywords nil)))
  ;; callees
  (with-index-field (callee-stuff callees field-alist)
    (add-callees-from-field-alist self callee-stuff))
  (values field-alist source-pathname sab-pathname))
0||#

(defmethod 1(install-disk-location-field doc-record)0 (new-location)
  (cond ((null disk-location)
	 (setq disk-location (list new-location)))
	((null new-location)
	 disk-location)
	(t (flet ((disk-location-eql (loc1 loc2)
		    (destructuring-bind (path1 from1 to1) loc1
		      (destructuring-bind (path2 from2 to2) loc2
			(and (eql path1 path2)	;---
			     (= from1 from2)
			     (= to1 to2))))))
	     (unless (disk-location-eql new-location (first disk-location))
	       (push new-location disk-location)
	       (setf (cdr disk-location)
		     (delete new-location (cdr disk-location) :test #'disk-location-eql)))
	     disk-location))))

(defmethod 1(add-callees-from-field-alist doc-record)0 (callee-list)
  (flet ((add-call (callee-record-group view)
	   (let ((there (assoc view callees)))
	     (if there
		 (push callee-record-group (rest there))
		 (push (list view callee-record-group) callees)))))
    (setq callees ())
    (dolist (callee-item callee-list)
      (destructuring-bind (callee-topic callee-type view &optional callee-uid) callee-item
	(let ((unique-id nil)
	      (unique-index nil))
	  (if (integerp callee-uid)
	      (setq unique-index callee-uid)
	      (setq unique-id callee-uid))
	  (add-call (find-record-group-for-topic-and-type
		      callee-topic callee-type unique-id t unique-index)
		    view)))))
  (dolist (item callees)
    ;; Restore prior order
    (setf (rest item) (nreverse (rest item)))))

;;;--- Has to be in Nsage until we aren't installing old sab files.
;;; Then move this to NWT.
(defmethod 1(compute-doc-record-tokens doc-record)0 ()
  (setq tokens
	(canonicalize-tokens
	  (zwei:zcollecting-into (result)
	    ;; Put record-title tokens first, even if NIL (e.g., for - function)
	    (zwei:zcollect result (tokens-for-record-title self))
	    (let ((string (string-thin
			    (filtered-string-from-contents-list
			      (canonicalize-contents-list (record-field-contents keywords))
			      t)
			    :remove-bits t :error-if :fat)))
	      (when string
		(let ((word-open-break *word-open-break*)
		      (word-close-break *word-close-break*)
		      (word-close-keep *word-close-keep*))
		  (dw::do-delimited-substrings
		    ((string) (char start end))
		    (sys:with-stack-array (substring (- end start)
						     :element-type 'string-char
						     :displaced-to string
						     :displaced-index-offset start)
		      (let ((token-list (tokenize substring
						  :opening-delims word-open-break
						  :trailing-delims word-close-break
						  :trailing-keep word-close-keep)))
			(when token-list
			  (zwei:zcollect result (nreverse token-list)))))
		    ((#\return) (ignore char))))))
	    result))))

(defun 1token-list-difference0 (list1 list2)
  (declare (values in-list1-not-list2 in-list2-not-list1))
  ;; could be (reduce #'append list)
  (flet ((flatten (list) (loop for sublist in list append sublist)))
    (let ((flat-list1 (flatten list1))
	  (flat-list2 (flatten list2)))
      (values (set-difference flat-list1 flat-list2)
	      (set-difference flat-list2 flat-list1)))))

(defun 1callee-list-difference0 (list1 list2)
  (declare (values in-list1-not-list2 in-list2-not-list1))
  (let* ((list1-not-list2 (set-difference list1 list2 :key #'first))
	 (list2-not-list1 (set-difference list2 list1 :key #'first))
	 (common-elements-list1 (set-difference list1 list1-not-list2)))
    (dolist (list1-element common-elements-list1)
      (destructuring-bind (reference-type-1 . callees-1) list1-element
	(let ((list2-element (find reference-type-1 list2 :key #'first)))
	  (destructuring-bind (reference-type-2 . callees-2) list2-element
	    (let ((list1-element-callees-not-list2 (set-difference callees-1 callees-2))
		  (list2-element-callees-not-list1 (set-difference callees-2 callees-1)))
	      (when list1-element-callees-not-list2
		(push (cons reference-type-1 list1-element-callees-not-list2)
		      list1-not-list2))
	      (when list2-element-callees-not-list1
		(push (cons reference-type-2 list2-element-callees-not-list1)
		      list2-not-list1)))))))
    (values list1-not-list2 list2-not-list1)))

;;; Establishing a record in its neighborhood is done by 
;;; (1) making it known by each of its callees as a caller; 
;;; (2) putting it in the *sage-topic-aarray*, indexed by its topic; 
;;; (3) putting it in *sage-word-hash-table*, indexed by each of its "tokens".
(defmethod 1(establish-record-in-neighborhood doc-record)
0	   (completion-aarray add-word-hash-table remove-word-hash-table old-tokens
			      old-callees &optional old-installed-record (the-record self))
  ;; the-record is important because SELF may be the installed record (i.e. a clone)
  ;; which is by definition transient.
  (multiple-value-bind (callees-to-add callees-to-remove)
      (callee-list-difference callees old-callees)
    (loop for (callee-view . callee-record-groups) in callees-to-add
	  do (dolist (callee-record-group callee-record-groups)
	       (add-record-as-caller callee-record-group the-record callee-view)))
    (loop for (callee-view . callee-record-groups) in callees-to-remove
	  do (dolist (callee-record-group callee-record-groups)
	       (remove-record-as-caller callee-record-group the-record callee-view
					old-installed-record))))
  (multiple-value-bind (tokens-to-add tokens-to-remove)
      (token-list-difference tokens old-tokens)
    (dolist (token tokens-to-add)
      (pushnew record-group (gethash token add-word-hash-table)))
    (dolist (token tokens-to-remove)
      (pushnew record-group (gethash token remove-word-hash-table))))
  (si:aarray-insert completion-aarray
		    (record-group-topic-completion record-group)
		    record-group))
  
;; hand-code something like eliminate-duplicates except 
;; imagine we can preserve a little of the order for Show Overview
(defun 1merge-token-lists0 (&rest lists-of-tokens)
  (let ((result ()))
    (dolist (list lists-of-tokens)
      (dolist (string list)
	(pushnew string result :test #'string-equal)))
    (nreverse result)))

(defun1 canonicalize-tokens0 (token-list)
  (dolist (sublist token-list)
    (mapl (lambda (inner-sublist)
	    (multiple-value-bind (ignore canonical-string)
		(keyword-token-record-groups (first inner-sublist))
	      (setf (first inner-sublist) canonical-string)))
	  sublist))
  token-list)

;;; some cleanup actions after everything has been individually installed
(defun 1finish-installing-sage-records0 (add-word-hash-table remove-word-hash-table)
  (when (and si:*enable-aarray-sorting-after-loads*
	     (not si:*collect-modified-aarrays-for-sorting*))
    (si:sort-aarray *topic-aarray*))
  (tv:noting-progress ("Sage: merging word hash table")
    (sys:without-aborts
      ("The documentation word hash table is being updated.~@
	Aborting not could leave the hash table with obsolete information and~@
	prevent you from looking up topics just installed.")
      (maphash (lambda (key value)
		 (setf (keyword-token-record-groups key)
		       (union-localize (keyword-token-record-groups key) value
				       :area *sage-completion-area*)))
	       add-word-hash-table)
      (maphash (lambda (key value)
		 (setf (keyword-token-record-groups key)
		       (nset-difference (keyword-token-record-groups key) value)))
	       remove-word-hash-table))))

(defun 1union-localize0 (base-set addend-set &key (test #'eql) area)
  (let* ((number-there (length base-set))
	 (items-being-added (set-difference addend-set base-set :test test))
	 (number-being-added (length items-being-added)))
    (cond ((> number-being-added 0)
	   (let ((new (make-list (+ number-there number-being-added) :area area)))
	     (replace new base-set)
	     (replace new items-being-added :start1 number-there)
	     new))
	  (T base-set))))

;;;Load the index-info for a documentation patch
(defun 1load-patch-index0 ()
  (let ((binary-pathname (send sys:fdefine-file-pathname :new-pathname
			       :canonical-type :sage-binary :version :newest)))
    (load-index-info binary-pathname)))

(defun 1tokens-for-record-title0 (record)
  (let ((string
	  (string-thin
	    (let ((*print-pretty* ())
		  (*print-package* si:*scl-package*)
		  (*print-readtable* si:*common-lisp-readtable*))
	      (appropriate-title-rendering
		(doc-record-record-group record) 'no-formatting record))
	    :remove-bits t :error-if :fat)))
    (nreverse (tokenize string
			:opening-delims *word-open-break*
			:trailing-delims *word-close-break*
			:trailing-keep *word-close-keep*))))


;;; Snarf up all the info about records as fast as you can.
(defstruct 1(record-info (:type :list) :conc-name)
0  name
  type
  unique-id
  index-fields
  record-fields)

;;; Change Sage to Concordia in strings that come from old sab files
(defun 1kludge-mode-in-string0 (string)
  (let ((mode-start (string-search "mode:" string)))
    (when mode-start
      (let ((mode-text-start (string-search-not-set *white-space* string
						    :start (+ mode-start 5))))
	(when mode-text-start
	  (let ((mode-text-end
		  (let ((end-token-start
			  (or (string-search-char #\; string :start mode-text-start)
			      (string-search "-*-" string :from-end t))))
		    (and end-token-start
			 (let ((last-text (string-search-not-set
					    *white-space* string :from-end t
					    :end end-token-start)))
			   (and last-text (1+ last-text)))))))
	    (when (and mode-text-end
		       (macrolet ((loser (mode)
				    (let ((length (string-length mode)))
				      `(and (= (- mode-text-end mode-text-start)
					       ,length)
					    (string-equal string ,mode :start1 mode-text-start
							  :end1 mode-text-end)))))
			 (or (loser "sage")
			     (loser "lisp")
			     (loser "writertools"))))
	      (let* ((list-start (string-search "-*-" string))
		     (list-end (let ((end-start (string-search "-*-" string :from-end t)))
				 (and end-start (> end-start list-start) (+ end-start 3)))))
		(using-resource (temp string-temp)
		  (let ((writer-tools-mode (zwei:major-mode-from-keyword :concordia)))
		    (let ((attribute-comment-start
			    (send writer-tools-mode :attribute-comment-start)))
		      (when attribute-comment-start
			(string-nconc temp attribute-comment-start)))
		    (string-nconc temp (substring string (or list-start 0) mode-text-start))
		    (string-nconc temp (send writer-tools-mode :mode-line-name))
		    (string-nconc temp (substring string mode-text-end list-end))
		    (let ((attribute-comment-end
			    (send writer-tools-mode :attribute-comment-end)))
		      (when attribute-comment-end
			(string-nconc temp attribute-comment-end))))
		  (return-from kludge-mode-in-string (copy-string temp))))))))))
  string)

(defun 1get-record-info-from-file0 (pathname &key (progress-note-continuation))
  (declare (values list-of-record-infos sab-attribute-alist stream))
  (flet ((WRITE-AROUND-UNIX-ENCEPHALOPATHY ()
	   #+If-Unix-were-less-braindamaged-this-would-work
	   (fs:merge-pathnames pathname
			       (fs:default-pathname () () :sage-binary :newest))
	   (let* ((parsed-pathname (fs:parse-pathname pathname))
		  (version (when t ;;---(eq (send parsed-pathname :canonical-type) :sage-binary)
			     (send parsed-pathname :version))))
	     (fs:merge-pathnames
	       parsed-pathname
	       (send parsed-pathname :new-pathname
		     ;; ---This replaces the type, rather than merging against it.
		     :canonical-type :sage-binary
		     :version (or version :newest))))))
    (with-open-file (stream (write-around-unix-encephalopathy)
			    :characters nil :byte-size 8.)
      (multiple-value-bind (index-info sab-attribute-alist)
	  (read-index-info stream :close-p nil
			   :progress-note-continuation progress-note-continuation)
	(when progress-note-continuation
	  (funcall progress-note-continuation :next-phase t))
	(let ((attribute-string
		(or (second (cl:assoc :file-attribute-string sab-attribute-alist))
		    "")))
	  (unless (string-equal attribute-string "")
	    (setq attribute-string (kludge-mode-in-string attribute-string))
	    (setf (second (cl:assoc :file-attribute-string sab-attribute-alist))
		  attribute-string))
	  (multiple-value-bind (vars vals)
	      (fs:file-attribute-bindings
		nil :additional-attributes (fs:parse-attribute-list attribute-string))
	    (progv vars vals
	      (with-document-and-device-types ()
		(keeping-sage-files
		  (loop for (nil nil index-fields) in index-info
			with records
			with initialize-p = t
			with denominator = (length index-info)
			for numerator from 1
			do
		    (setq index-fields (copy-list index-fields))

		    (let ((disk-location (second (assoc 'location index-fields))))
		      (unless disk-location
			(signal 'invalid-compressed-sab-file-operation))
		      (destructuring-bind (start-byte end-byte) disk-location
			(ignore end-byte)
			(when initialize-p
			  (send stream :set-pointer start-byte)
			  (setq initialize-p nil))
			(assert (= (send stream :read-pointer) start-byte) ()
			 "Expected the stream to be positioned to ~D, instead it is at ~D"
			 start-byte (send stream :read-pointer))))

		    (let ((unique-id (second (assoc 'unique-id index-fields))))
		      (let ((stuff (read-sab-record-1 stream)))
			(destructuring-bind (sab-type name type fields) stuff
			(assert (eq sab-type 'record))	;what else?
			(push (make-record-info :name name :type type :unique-id unique-id
						:index-fields index-fields
						:record-fields fields)
			      records)
			(when progress-note-continuation
			  (funcall progress-note-continuation
				   :numerator numerator
				   :denominator denominator)))))
			finally (return (values (nreverse records)
						sab-attribute-alist
						stream))))))))))))

(defun 1install-record-info-for-editing0 (record-info-list
					sab-attribute-alist sab-logical-pathname
					&optional (progress-note-continuation))
  (declare (values list-of-records))
  (when progress-note-continuation
    (funcall progress-note-continuation :next-phase t))
  (let ((add-word-hash-table (cl:make-hash-table))
	(remove-word-hash-table (cl:make-hash-table)))
    (zwei:zcollecting-into (list-of-records)
      (loop for record-info in record-info-list
	    with denominator = (length record-info-list)
	    for count from 1
	    do
	(let ((topic (record-info-name record-info))
	      (type (record-info-type record-info))
	      (index-fields (record-info-index-fields record-info))
	      (record-fields (record-info-record-fields record-info)))
	  (let ((unique-id) (version-number))
	    (with-index-field (uid unique-id index-fields)
	      (setq unique-id uid))
	    (with-index-field (version version-number index-fields)
	      (setq version-number version))
	    (let ((record (find-record-for-topic-and-type
			    topic type :edited :unique-id unique-id
			    :version-number version-number :create-p t
			    :supersede-topic-if-different T))
		  (source-pathname
		    (second (assoc :logical-source-pathname sab-attribute-alist))))
	      (multiple-value-bind (old-tokens old-callees)
		  (install-index-info-1
		    record topic type index-fields source-pathname sab-logical-pathname
		    :edited)
		(establish-record-in-neighborhood
		  record sage::*topic-aarray* add-word-hash-table remove-word-hash-table
		  old-tokens old-callees))
	      (process-fields-from-sab record record-fields ':edited)
	      (setf (doc-record-contents-bogus record) ())
	      (setf (doc-record-filled record) T)
	      (when progress-note-continuation
		(funcall progress-note-continuation :numerator count
			 :denominator denominator))
	      (zwei:zcollect list-of-records record)
	      ()))))
      (finish-installing-sage-records add-word-hash-table remove-word-hash-table)
      list-of-records)))

