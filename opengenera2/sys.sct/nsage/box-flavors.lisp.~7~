;;;-*- Syntax: Common-lisp; Mode: Lisp; Package: Nsage; Lowercase: T; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defvar *LAST-SORT-START* #\sp)
(defvar *INHIBIT-SORT-ON-THESE* ())
(defvar *CASE-INHIBIT-SORT-ON-THESE* ())

(defparameter *STANDARD-INHIBIT-LIST*
	      '("a" "an" "and" "as" "at" "be" "between" "by" "for"
		"from" "in" "into" "item"
		"of" "on" "or" "over" "the" "through" "to" "use"
		"using" "with" "yet"))

;;; if found in here (ordinary match)
;;; it is then checked with case-sensitive match
;;; against the list in *standard-inhibit-list*
(defparameter *CASE-SENSITIVE-INHIBIT-LIST* '("from" "to"))

;;; Flavors for the formatter, that were in forpage until a circular dependency arose.
;;; --RWK

(defflavor D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")clump-box
0	(first-line last-included-line)
	(doubly-linked-list-mixin)
  :readable-instance-variables
  :settable-instance-variables
  :writable-instance-variables
  (:constructor 1make-clump-box0 (&key first-line last-included-line ))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1column-box
0	(first-line last-included-line top-y (available-height 0))
	(doubly-linked-list-mixin)
  :settable-instance-variables
  :writable-instance-variables
  (:constructor 1make-column-box0 (&key first-line last-included-line top-y available-height))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor 1page-box
0	((page-number 1)
	 (list-of-columns ())
	 page-environment
	 this-heading (formatted-heading) heading-location
	 this-footing (formatted-footing) footing-location
	 this-tabs (formatted-tabs) formatted-tabs-y-location
	 (auxiliary-page-data)
	 (presentation-stack-leftover-presentations)
	 )
	(doubly-linked-list-mixin)
  :writable-instance-variables
  (:constructor 1make-page-box0 (list-of-columns))
  (:default-init-plist :area *sage-formatter-area*))

(defmethod 1(sys:print-self page-box)0 (stream &rest ignore)
  (si:printing-random-object (self stream :typep)
    (write page-number :stream stream)))

(defflavor 1page-headings
0	((even-left) (even-center) (even-right) (even-second-line)
	 (odd-left) (odd-center) (odd-right) (odd-second-line))
	()
  :writable-instance-variables
  (:constructor 1make-page-headings0 ())
  (:constructor 1copy-page-headings-internal
0   (even-left even-center even-right even-second-line
    odd-left odd-center odd-right odd-second-line))
  (:default-init-plist :area *sage-formatter-area*))

(defflavor page-tabs
	((first-line)
	 (second-line)
	 (y-location))
	()
  :writable-instance-variables
  (:constructor make-page-tabs ())
  (:constructor copy-page-tabs-internal (first-line second-line y-location))
  (:default-init-plist :area *sage-formatter-area*))

(defmethod (copy-page-tabs page-tabs) ()
  (copy-page-tabs-internal first-line second-line y-location))

;(compile-flavor-methods page-tabs)

(defmethod 1(copy-page-headings page-headings)0 ()
  (copy-page-headings-internal even-left even-center even-right even-second-line
			       odd-left odd-center odd-right odd-second-line))

(defflavor 1heading-state
0	(this-heading next-heading
	 this-footing next-footing
	 page-tabs)
	()
  :writable-instance-variables
  (:constructor make-heading-state ())
  (:default-init-plist :area *sage-formatter-area*))

(defmethod 1(make-instance heading-state)0 (&rest ignore)
  (setq this-heading (make-page-headings)
	next-heading (make-page-headings)
	this-footing (make-page-headings)
	next-footing (make-page-headings)
	page-tabs (make-page-tabs)))
