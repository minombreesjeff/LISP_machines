;;; -*- Syntax: Zetalisp; Mode: LISP; Package: ZWEI; Base: 10; -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

;;;This is the place to put spelling correction!! and small-scale custom completion!!
;;;The idea of this function is to not let you go until it identifies which of the valid
;;;set of things you are trying to select.
;;;Conses a completion alist each time.  This is wasteful but it probably doesn't get
;;;called very often and always with small lists.
;;;This works only from Zwei now.  Change the typein-line-accept to accept and it'll work
;;;in a lisp listener.
(defun SAGE-COMPLETING-READ-FROM-USER (alist description
				       &key (item-displayer #'string-capitalize-words)
				       default-item
				       (initially-display-possibilities :without-compression))
  (when alist
    (unless (and (listp (first alist)) (= (length (first alist)) 2))	;is it list or alist?
      (setq alist (loop for ele in alist	;a plain list, make it into alist for complet
			collect `(,(funcall item-displayer ele) ,ele))))
    (let ((new-description
	    (string-append
	      (if (cl:member (aref description 0) '(#\a #\e #\i #\o #\u) :test #'char-equal)
		  "an " "a ")
	      description)))
      (prog1
	(typein-line-accept `((dw:menu-choose :alist ,alist)
			      :description ,new-description)
			    :prompt (format nil "Which ~A?" description)
			    :initially-display-possibilities initially-display-possibilities
			    :default (second default-item)
			    :provide-default (not (null default-item)))
	(send *typeout-window* :make-complete)))))

;;;;This is almost the same as sage-completing-read-from-user but takes number to designate
;;;;a choice rather than a (sub)string.  It is undisciplined to have both but not clear
;;;;which is the more correct approach, short of custom completion.
;;;;Actually, for Zwei, the correct choice was custom completion so that was done instead.
;;;;This function is needed for non-Zwei interaction.  This is the only known
;;;;example of this style of hybrid keyboard menu in the system.
;(defun CHOOSE-ONE-FROM-LIST (alist &optional (item-description "choices") (item-displayer #'string-capitalize-words) (stream t))
;  (unless (and (listp (first alist)) (= (length (first alist)) 2))	;is it list or alist?
;    (setq alist (loop for ele in alist		;a plain list, make it into alist for complet
;		      collect `(,ele ,ele))))
;  (if (> (length alist) 1)		;several possibilities
;      (let (max)
;	(format stream "~&Several possible ~A are available:" item-description)
;	(loop for (external nil) in alist
;	      for i = 1 then (1+ i)
;	      do
;	      (format stream "~%~D  ~A" i (funcall item-displayer external))
;	      finally (setq max i))
;	(second (nth (1- (loop for ans = (prompt-and-read ':number "Choose one by number: ")
;			    until ( 1 ans max)
;			    do (beep)
;			    (format stream "Please enter a number between 1 and ~D" max)
;			    finally (return ans))) alist)))
;      (second (first alist))))			;just one thing, return it

;;;Let's try this again using a menu until we get the key menus working.
(defun choose-one-from-list (alist &optional (item-description "choices") (item-displayer #'string-capitalize-words))
  (unless (and (listp (first alist)) (= (length (first alist)) 2))	;is it list or alist?
    (setq alist (loop for ele in alist		;a plain list, make it into alist for complet
		      collect `(,(funcall item-displayer ele) ,ele))))
  (if (> (length alist) 1)		;several possibilities
      (tv:menu-choose alist
		      (format nil "Pick one from possible ~A:" item-description))
      (second (first alist))))

;;; Takes a list of function specs and returns a list of lists, each
;;; sublist of the form (fspec property-type external-type).  The
;;; argument is typically the cdr of an aarray item.  An fspec in the
;;; argument has a corresponding element in the returned list only if
;;; the fspec is documented, or (when BUFFERS-TOO is not NIL) if the
;;; fspec has a record in a Zmacs buffer, or (when LISP-DEFS-TOO is not
;;; NIL) if the fspec has a Lisp definition.  Impossible-is-OK
;;; completion might result in a list of a list of a single undocumented
;;; function spec.  In that case the argument is returned.  This is a
;;; support routine for functions that are trying to get a topic and
;;; type from the user.
(defun EXPAND-FSPEC-LIST (fspec-list &optional buffers-too lisp-defs-too)
  (loop with list
	for fspec in fspec-list
	when fspec
	  do (loop for (prop type) on (nsage::get-sage-property fspec nil 'nsage::source-type)
			     by 'cddr
		   do (push (list fspec prop type) list))
	when buffers-too
	  do (loop for buffer-prop
		       in (si:eliminate-duplicates
			    (loop for (prop) in (si:function-spec-get fspec 'zmacs-buffers)
				  for type = nil
				  when (memq prop nsage::*record-types*)
				    collect prop
				  when (and lisp-defs-too
					    (setq type
						  (first (get prop 'nsage::sage-equivalent))))
				    collect (nsage::coerce-record-type type 'nsage::property)))
		   do (loop for (spec prop) in list
			    while (eq spec fspec)
			    never (eq prop buffer-prop)
			    finally (push (list fspec buffer-prop
						(first (get buffer-prop
							    'nsage::external-symbols)))
					  list)))
	when lisp-defs-too
	  do (loop with source-file-list = (si:function-spec-get fspec :source-file-name)
		   for def-prop
		       in (typecase source-file-list
			    (:null)
			    (:atom (list (nsage::coerce-record-type
					   (first (get 'defun 'nsage::sage-equivalent))
					   'nsage::property)))
			    (otherwise
			      (si:eliminate-duplicates
				(loop for (def-type) in source-file-list
				      for type = (first (get def-type 'nsage::sage-equivalent))
				      when type
					collect (nsage::coerce-record-type
						  type 'nsage::property)))))
		   do (loop for (spec prop) in list
			    while (eq spec fspec)
			    never (eq prop def-prop)
			    finally (push (list fspec def-prop
						(first (get def-prop 'nsage::external-symbols)))
					  list)))
	finally (return (or list (list fspec-list)))))

;;; Takes an expanded list of function specs, as returned by
;;; EXPAND-FSPEC-LIST, and returns an alist.  Each element of the
;;; argument is a list of the form (fspec property-type external-type).
;;; Each element of the alist is of the form ("External-type Topic"
;;; (fspec property-type external-type)).  The returned alist is sorted
;;; on external-type within topic.  This is a support routine for
;;; choosing among several possible topics.  The alist is given to
;;; something like SAGE-COMPLETING-READ-FROM-USER or
;;; CHOOSE-ONE-FROM-LIST.
(defun ALIST-FROM-EXPANDED-FSPEC-LIST (fspec-list)
  (let ((alist (loop for sublist in fspec-list
		     for (fspec nil type) = sublist
		     collect (list (if (nsage::concept-type-p type)
				       (nsage::coerce-record-type :sage-section-record
								'nsage::print-name)
				       (string-capitalize-words type))
				   (let ((rg (nsage::find-record-group-for-topic-and-type
					       fspec type)))
				     (nsage::appropriate-title-rendering
				       rg 'nsage::no-formatting))
				   sublist))))
    (setq alist (stable-sort (sortcar alist 'string-lessp)
			     #'(lambda (e1 e2) (string-lessp (second e1) (second e2)))))
    (loop for ele in alist
	  do (rplaca ele (string-append (first ele) #\space (second ele)))
	     (rplacd ele (cddr ele)))
    alist))
