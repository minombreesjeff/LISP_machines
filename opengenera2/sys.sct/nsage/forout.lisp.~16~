;;-*- Syntax: Common-lisp; Mode: Lisp; Package: Nsage; Lowercase: T; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This does formatted output with source code specification something like
;;; ShowCase-like, except that it first constructs Sage directives, then uses
;;; the Sage formatter.

#|
The user-level entry points into this file:
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")sage-formatting0 
	(sage-formatting ((2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")local-stream0 &optional 2sage-device0) ...2body0...) 
	Within ...2body0..., all the output to 2local-stream0,
	together with the formatting macros herein, gets collected, passed through
	the Sage formatter, and displayed on 2sage-device0.  It uses 
 	making-sage-directives to help do its thing.
1making-sage-directives
0	(making-sage-directives (2stream0) ...2body0...) binds 2stream0 to a special stream,
	which collects all formatting and output done in ...2body0..., making Sage
	directive structure out of them, which it returns.  It must run in a
	with-sage-device dynamic environment.
1in-environment
0	(in-environment (2stream0 2name0 &rest 2attr0 2val0 2attr0 2val0 ...) ...body...)
	Does body with a Sage environment in effect, as named by 2name0 and adjusted
	by 2attr0/2val0 pairs.  The 2name0,2attr0,2val0 are not evaluated.
1in-environment1
0	(in-environment1 (2stream list0) ...body...)
	Like in-environment, except that the environment spec (name attr val...) 
	is a computed list.  You may want to use backquote.
1in-item
0	(in-item (2stream0) ..body..)
	In a description or itemize environment, put each item in (in-item () ...).
	This hides the implementation detail of paragraph breaks.
1sage-command0 		[Not fully designed]
	For things like (sage-command 2stream0 'tab-to-tab-stop) which is certainly more 
	verbose (and differently cryptic) than @\
1sage-contents-list
0	When you already have a computed Sage contents-list, emit it with
	(sage-contents-list stream contents-list)
1sage-tab0			[Not fully designed]
	Emit a tab.  I won't tell you whether it's a tab-to-tab-stop, or 	
	merely a tab character.  (3 0 (NIL 0) (NIL NIL :SMALLER) "EINY7")Yes I will.  It emits a tab character which0 3gets converted 
0	3into tab-to-tab-stop.  I said it wasn't fully designed.
1sage-paragraph
0	Separate paragraphs (as opposed to enveloping a paragraph) by emitting
	something so Sage thinks there's a paragraph break here.  Today,
	that means two #\Return characters.  This is different from 1in-item0.

Test functions:
1show-dex-help
0	This formats the text that the Document Examiner prints when you
	type †.
1show-overview
0	This formats the text (but not the graph) that DeX's Show Overview
	puts in its little pop-up window.
1function-key-help
0	Formats what „† prints.
|#

(defparameter 1*sage-directive-stream-toplevel-marker*0 '#:toplevel-marker)

(defflavor 1sage-directive-stream
0	((buffer (make-array 1024 :element-type 'string-char :fill-pointer 0))
	 (directive-stack (list (list *sage-directive-stream-toplevel-marker*))))
	(si:output-stream si:character-stream)
  (:constructor make-sage-directive-stream (buffer directive-stack area))
  )

(defmethod 1(:tyo0 1sage-directive-stream)0 (char)
  (check-type char string-char)
  (selector char char=
    (#\return
     (vector-push-extend char buffer)
     (sage-directive-stream-force-buffer self))
    (#\tab
     (sage-directive-stream-force-buffer self)
     (sage-directive-stream-append-directive self (make-sage-command 'tab-to-tab-stop)))
    (otherwise (vector-push-extend char buffer))))

(defmethod 1(:string-out sage-directive-stream)0 (string &optional (start 0) end)
  (dw::do-delimited-substrings ((string :start start :end end)
				(char start-index end-index))
			       (vector-push-portion-extend
				 buffer
				 string start-index end-index)
    ((#\return #\tab)
     (send self :tyo char))))

(defmethod 1(sage-directive-stream-force-buffer sage-directive-stream)0 ()
  (when (> (fill-pointer buffer) 0)
    (sage-directive-stream-append-directive self (string-append buffer))
    (setf (fill-pointer buffer) 0)))

(defmethod 1(sage-directive-stream-append-directive sage-directive-stream)0 (directive)
  (if (null directive-stack)
      (error "Directive stack underflowed before")
      (push directive (first directive-stack))))

(defmethod 1(sage-directive-stream-append-contents-list sage-directive-stream)0 (contents-list)
  (if (null directive-stack)
      (error "Directive stack underflowed before")
      (setf (first directive-stack)
	    (nconc (reverse contents-list) (first directive-stack)))))

(defmethod 1(sage-directive-stream-begin-environment sage-directive-stream)0 (spec)
  (sage-directive-stream-force-buffer self)
  (push (list spec) directive-stack))

(defmethod 1(sage-directive-stream-end-environment sage-directive-stream)0 ()
  (sage-directive-stream-force-buffer self)
  (destructuring-bind ((name . mods) . contents) (nreverse (pop directive-stack))
    (sage-directive-stream-append-directive self (make-sage-envr name mods contents))))

(defmethod 1(sage-directive-stream-finalize-directives sage-directive-stream)0 ()
  (sage-directive-stream-force-buffer self)
  (unless (and (= 1 (length directive-stack))
	       (eq (first (last (first directive-stack)))
		   *sage-directive-stream-toplevel-marker*))
    (error "Directive stack out of sync"))
  (selector (length (first directive-stack)) =
    ((0 1) (list (string-append "")))
    ;; Using reverse here instead of nreverse means that 1collect-table-of-contents
0    ;; can scarf it up again.
    (otherwise (rest (reverse (first directive-stack))))))

(defmacro 1sage-formatting0 ((&optional body-stream &rest sage-device-options)
			   &body body)
  (dw::format-output-macro-default-stream body-stream)
  (when (null sage-device-options)
    (setq sage-device-options `((cli::follow-synonym-stream *standard-output*) :screen)))
  `(let ((.directives. (making-sage-directives (,body-stream) ,@body)))
     (with-presentation-stack ()
       (with-sage-device ,sage-device-options (sage-formatting-1 .directives.)))))

(defun 1sage-formatting-to-standard-output0 ()
  (let ((window (cli::follow-synonym-stream *standard-output*)))
    (unless (typep window 'tv:minimum-window)
      (error "Not sure we can handle things that aren't windows, like ~s" window))
    window))

(defun 1sage-formatting-10 (directives)
  (sage-displayer *current-sage-device* "Formatted Directives"
		  'formatted-sage-text-line-source directives))

(eval-when (eval compile load)
(defun 1sage-directive-stream-convert-body0 (stream body)
  `(progn ,@(map 'list (lambda (x)
			 (if (stringp x)
			     `(send ,stream :string-out ,x)
			     x))
		 body))))

(defmacro 1making-sage-directives0 ((&optional stream) &body body)
  (dw::format-output-macro-default-stream stream)
  `(making-sage-directives-1
     (named-lambda making-sage-directives (,stream) ,@body)))

(defun 1making-sage-directives-10 (continuation)
  (declare (sys:downward-funarg continuation))
  (sys:with-data-stack
    (let* ((buffer (sys:make-stack-array 1024 :element-type 'string-char :fill-pointer 0))
	   ;; no point putting this a stack list
	   (directive-stack (list (list *sage-directive-stream-toplevel-marker*)))
	   (stream (make-sage-directive-stream buffer directive-stack :stack)))
      (funcall continuation stream)
      (sage-directive-stream-finalize-directives stream))))

;; Index Directives
;; I can't believe I have to write a whole new language and code walker
;; to abbreviate this enough that someone could stand to write it.
;;---Split this up into a bunch of little definitions
(defmacro 1idirs0 (&body body)
  (labels ((dir (clause)
	     (typecase clause
	       (string `(write-string ,clause))
	       (symbol `(sage-contents-list T (if (listp ,clause) ,clause (list ,clause))))
	       (cons
		 (ecase (first clause)
		   ((spaces)
		    (destructuring-bind (ignore n) clause
		      `(loop repeat ,n do (sage-command T 'literal-space))))
		   ((L)
		    (destructuring-bind (ignore &body body) clause
		      `(in-environment (T LS) ,@(dirify body))))
		   ((R)
		    (destructuring-bind (ignore &body body) clause
		      `(in-environment (T R) ,@(dirify body))))
		   ((or)
		    `(sage-contents-list T ,clause))
		   ((cond)
		    `(cond ,@(mapcar (lambda (cl)
				       `(,(first cl)
					 ,@(dirify (rest cl))))
				     (rest clause))))
		   ((envr)
		    (destructuring-bind (ignore envr-name &body body) clause
		      (if (consp envr-name)
			  `(in-environment (T ,@envr-name) ,@(dirify body))
			  `(in-environment (T ,envr-name) ,@(dirify body)))))
		   ((when)
		    (destructuring-bind (ignore pred &body body) clause
		      `(when ,pred ,@(dirify body))))
		   ((indexentry)
		    (destructuring-bind (ignore &key entry key number) clause
		      `(sage-command T 'indexentry
				     `((entry ,(making-sage-directives ()
						 (idirs ,@entry)))
				       (key ,(making-sage-directives ()
					       (idirs ,@key)))
				       ,@',(and number '((number T)))))))
		   ((command)
		    (destructuring-bind (ignore command-name &body body) clause
		      `(sage-command T ',command-name
				     ,@body #+Franz(and body
					    (list `(making-sage-directives ()
						     (idirs ,@body)))))))
		   ((value)
		    (destructuring-bind (ignore value-of) clause
		      `(sage-command T 'value '(,value-of))))
		   ((lisp) `(progn ,@(rest clause)))
		   ))
	       (otherwise clause)))
	   (dirify (body)
	     (mapcar #'dir body)))
    `(progn ,@(dirify body))))

(defmacro 1in-environment0 ((stream envr-name &rest envr-mods) &body body)
  (dw::format-output-macro-default-stream stream)
  `(progn
     (sage-directive-stream-begin-environment
       ,stream '(,envr-name
		 ,@(loop for (key thing) on envr-mods by #'cddr
			 collect (list key thing))))
     (multiple-value-prog1
       ,(sage-directive-stream-convert-body stream body)
       (sage-directive-stream-end-environment ,stream))))

(defmacro 1in-environment-case0 ((var &rest cases) &body body)
  `(in-environment1 (T
		      (case ,var
			,@(mapcar (lambda (case)
				    (destructuring-bind (case-id &rest envr-specs) case
				      `(,case-id '(,@envr-specs))))
				  cases)))
     ,@body))

(defmacro 1in-environment10 ((stream envr-name&mods-list) &body body)
  (dw::format-output-macro-default-stream stream)
  `(progn
     (stack-let ((.envr. ,envr-name&mods-list))
       (sage-directive-stream-begin-environment1 ,stream .envr.))
     (multiple-value-prog1
       ,(sage-directive-stream-convert-body stream body)
       (sage-directive-stream-end-environment ,stream))))
  
(defmacro 1in-environment1-if0 (condition stream-envr-name-etc &body body)
  (declare (arglist condition (stream envr-name&mods-list) &body body))
  `(if ,condition
       (in-environment1 ,stream-envr-name-etc ,@body)
       (progn
	 ,@body)))

(defun 1sage-directive-stream-begin-environment10 (stream envr-spec)
  (sage-directive-stream-begin-environment stream (runtime-parse-directive-spec envr-spec)))

(defun 1runtime-parse-directive-spec0 (stuff)
  (cons (first stuff)
	(loop for (key thing) on (rest stuff) by #'cddr
	      collect (list key (si:copy-if-necessary thing)))))

(defmacro 1in-presentation0 ((&optional stream &key type object presentation-options)
			   &body body)
  (dw:format-output-macro-default-stream stream)
  `(in-presentation-1 ,stream ,type ,object ,presentation-options
		      (dw:named-continuation in-presentation
					     (,stream)
			,@body)))

(defun 1in-presentation-10 (stream type object presentation-options continuation)
  (declare (sys:downward-funarg continuation))
  (sage-command stream 'presentation
		`((kind start)
		  (presentation-type ,type)
		  (presentation-object ,object)
		  (presentation-options ,presentation-options)))
  (funcall continuation stream)
  (sage-command stream 'presentation '((kind end))))

(defmacro 1in-item0 ((&optional stream) &body body)
  (dw::format-output-macro-default-stream stream)
  `(multiple-value-prog1 (progn ,@body) (sage-paragraph ,stream)))

(defun 1sage-command0 (stream symbol &rest params)
  (when (member stream '(T nil)) (setq stream *standard-output*))
  (sage-directive-stream-force-buffer stream)
  (sage-directive-stream-append-directive stream
	(apply #'make-sage-command symbol (copy-list params))))
(defun 1sage-contents-list0 (stream contents-list)
  (when (member stream '(T nil)) (setq stream *standard-output*))
  (sage-directive-stream-force-buffer stream)
  (sage-directive-stream-append-contents-list stream contents-list))

(defun 1sage-tab0 (&optional stream)
  (when (member stream '(T nil)) (setq stream *standard-output*))
  (write-char #\tab stream))

(defun 1sage-paragraph0 (&optional stream)
  (when (member stream '(T nil)) (setq stream *standard-output*))
  (dotimes (ignore 2) (terpri stream)))

#||
3(defun (4 0 (NIL 0) (NIL :BOLD :SMALLER) "EINY7")test13 ()
  (sage-formatting ()
    (in-environment1 (() `(i spread "1inches"))
      (sage-paragraph)
      (print 'sys:%p-dpb))))

(defun 4show-dex-help3 ()
  (sage-formatting () ;making-sage-directives
    (in-environment (() text facecode r spacing 0)
      (sage-paragraph)
      (mapc #'princ *dex-self-help-body-text*)
      (sage-paragraph)
      "The single key commands:"
      (terpri)
      (flet ((indent (sign) (format () "~a12" sign)))
	(in-environment1 (() `(description spread 0 above 0
					   indent ,(indent "-") leftmargin ,(indent "+")))
	  (in-item ()
	    (in-environment (() i) "Key" (sage-tab) "Description"))
	  (foo-dex-char-comtab)))
      (sage-paragraph)
      "The named commands:"
      (sage-paragraph)
      (in-environment (() description above 0 spread "0.3lines")
	(in-item () (in-environment (() i) "Name" (sage-tab) "Description"))
	(let ((first (get-sage-property
		       'doc:DOCUMENT\ EXAMINER\ SELF\ HELP 'section 'location)))
	  (when first (princ first)))
	(loop with existing-inclusion-refs
		= (get-sage-property 'doc:DOCUMENT\ EXAMINER\ SELF\ HELP 'section 'callees)
	      for (name text) in *dex-long-name-comtab*
	      for doc-title = (string-upcase-and-intern name "DOC")
	      unless (member doc-title existing-inclusion-refs)
		do (in-item ()
		     (if (documented-p doc-title ())
			 (in-environment1 (() `(transparent
						 mouse-sensitivity
						 (concept ,doc-title :SAGE-SECTION-RECORD)))
			   (princ name))
			 (princ name))
		     (sage-tab)
		     (princ text)))))))

(defun 4foo-dex-char-comtab3 ()
(5 0 (NIL 0) (NIL NIL :SMALL) "TVFONT")  (let ((preferred-order
	  '(#\Scroll #\Meta-Scroll 
	    #\Control-Scroll #\Control-Meta-Scroll
	    #\Help
	    #\Refresh
	    #\Meta-< #\Meta->))
	(refused '(#\Control-V #\Meta-V))
	(preferred ())
	(others ()))
    (loop for stuff in *dex-comtab*
	  for (char text) = stuff
	  do (cond ((member char preferred-order :test #'char=)
		    (push stuff preferred))
		   ((member char refused :test #'char=))
		   (T (push stuff others))))
    (setq preferred
	  (sort preferred
		(lambda (x y)
		  (< (position x preferred-order :test #'char=)
		     (position y preferred-order :test #'char=)))
		:key #'car)
	  others (nreverse others))
    (flet ((wow (list)
	     (loop for (char text) in list
		   do (in-item ()
			(in-environment (() k)
			  (format-proper-text-for-char T char))
			(sage-tab)
			(princ text)))))
      (wow preferred)
      (wow others))))

3(defun 4format-proper-text-for-char3 (format-dest char)
5  (let ((losers '(#\space #\return #\tab #\backspace))
	(code (char-code char)))
    (cond ((and (< code #o200) ( code (char-code #\space)))
	   (format format-dest "~c" char))
	  (T (using-resource (string string-temp)
	       ;;get the bucky chars, on a space.
	       (format string "~c" (make-char #\space (char-bits char)))
	       (decf (fill-pointer string))	;get rid of the space
	       (format format-dest "~a" string))
	     (format format-dest (if (or (member char losers :test #'char-equal)
					 ( code #o200))
				     "~:c"
				     "~c")
		     (code-char code))))))
3
;;This is just to get the indentation computed.
(defmacro 4in-description3 ((stream indent) &body body)
  `(let ((.indent. ,indent))
     (in-environment1 (,stream `(description spread 0 above 0
					     indent ,(format () "~@d" (- .indent.))
					     leftmargin ,(format () "~@d" .indent.)))
       ,@body)))

(defun 4function-key-help3 ()
  (sage-formatting ()
    (in-environment (() text facecode r spacing 0)
      (write-string tv:kbd-esc-help-prologue)
      (let ((to-do tv:*function-keys*))
	(in-description (() (- tv:kbd-esc-help-indent 5))
	  (loop for x = (pop to-do)
		while (and x (first x))
		do (describe-function-key x)))
	(in-description (() (+ 6 tv:kbd-esc-help-indent))
	  (loop while to-do
		do (describe-function-key (pop to-do)))))
      (princ tv:kbd-esc-help-epilogue))))

(defun 4describe-function-key3 (x)
  (destructuring-bind (key nil &optional doc &rest ignore) x
    (when (setq doc (eval doc))
      (in-item ()
	(in-environment (() k)
	  (format T "~:c" key))
	(sage-tab)
	(if (atom doc)
	    (princ doc)
	    (dolist (y doc) (princ y) (terpri)))))))
5
(defun show-overview (topic &optional type device device-type)
  (setq type (coerce-record-type (multiple-value-bind (nil x)
				     (documentation-record topic type)
				   x)
				 'property))
  (let ((name (appropriate-title-rendering topic type 'formatting))
	(document-p (document-p topic type))
	(type-string (namespace-type-string topic type)))
  (fresh-line)
  (sage-formatting (() (or device (cli::follow-synonym-stream *standard-output*))
		    (cond (device-type)
			  (device (sage-type-of-printer device))
			  (t :screen)))
    (in-environment (() text linewidth "500pixels" indent "-4" spread "4 pixels")
      ;;Name of record
      (format T "~a: " type-string)
      (sage-command () 'literal-space)
      (if (concept-type-p type)
	  (in-environment1 (() `(I mouse-sensitivity (concept ,topic ,type)))
	    (map () #'princ name))
	  (sage-command () 'L
			(making-sage-directives () (map () #'princ name))))
      (sage-paragraph)
      ;; summary (if any)
      (let ((summary (filtered-string-from-contents-list
		       (get-sage-property topic type 'oneliner))))
	(unless (or (null summary) (just-white-space summary))
	  (format T "Summary: ~a" summary)
	  (sage-paragraph)))
      ;;  callers of the record
      (let* ((callers (sage-who-calls-internal topic type 'expand))
	     (ncallers (length callers)))
	(unless document-p
	  (cond ((> ncallers 0)
		 (format T "It is included in topic~p: " ncallers)
		 (in-environment (() r)
		   (loop for comma = () then T
			 for (nil nil ctopic ctype) in callers	;wants 'source
			 when comma do (write-string ", ")
			 do (quoted-ref ctopic ctype))))
		(T (princ "It is not currently included in any topic.")))
	  (sage-paragraph)))
      ;;  documents the record appears in
      (let* ((documents (zwei:find-topic-documents topic type))
	     (ndocuments (length documents)))
	(cond (document-p
	       (princ "This is itself a document.")
	       (sage-paragraph))
	      ((> ndocuments 0)
	       (format T "It appears in document~p: " ndocuments)
	       (in-environment (() i)
		 (loop for comma = () then T
		       for dtopic in documents
		       when comma do (write-string ", ")
		       do (quoted-ref dtopic 'section)))
	       (sage-paragraph))
	      (T (princ "It does not currently appear in any document.")
		 (sage-paragraph))))
      ;;  keywords
      (let ((keywords (get-sage-property topic type 'keyword-tokens)))
	(in-environment (() r) "Keywords: ")
	(if (null keywords)
	    (in-environment (() i) "(none)")
	    (in-environment (() r)
	      (dolist (x keywords)
		(write-char #\space)
		(princ x))))
	(sage-paragraph))))))

(defun quoted-ref (topic type)
  (write-char #\")
  (in-environment1 (() `(transparent
			  mouse-sensitivity
			  (,(if (lisp-object-type-p type) 'lisp 'concept)
			   ,topic ,type)))
    (sage-contents-list () (appropriate-title-rendering topic type 'formatting)))
  (write-char #\"))
0||#

(export '(sage-formatting
	   making-sage-directives
	   idirs
	   in-environment
	   in-environment1
	   in-item
	   in-presentation
	   sage-command
	   sage-contents-list
	   sage-tab
	   sage-paragraph))
