;;; -*- Syntax: Common-lisp; Mode: LISP; Package: NSAGE; Base: 10; -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;;

;;;Here's where we collect every piece of necessary info about a book.
(defstruct (D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")registered-book
0	     (:print-function print-registered-book))
  title
  cached-record-group
  mnemonic			  ; "book number" in the new scheme
  extended-properties)

(defun print-registered-book (book stream depth)
  (declare (ignore depth))
  (sys:printing-random-object (book stream :typep)
    (princ (registered-book-title book) stream)))

(defmacro 1define-registered-book-extended-fields0 (zmacs-wants-a-symbol-here
						  &body property-names)
  (let ((parent `(declare (sys:function-parent ,zmacs-wants-a-symbol-here
					       define-registered-book-extended-fields))))
    `(progn
       ,@(loop for property-name in property-names
	       for field-name = (intern (string-append 'registered-book- property-name))
	       for set-field-name = (intern (string-append 'set- field-name))
	       collect
	         `(defun ,field-name (registered-book)
		    ,parent
		    (getf (registered-book-extended-properties registered-book)
			  ',property-name))
	       collect
		 `(defun ,set-field-name (registered-book new-value)
		    ,parent
		    (if new-value
			(setf (getf (registered-book-extended-properties registered-book)
				    ',property-name)
			      new-value)
			(remf (registered-book-extended-properties registered-book) ',property-name))
		    new-value)
	       collect
		 `(defsetf ,field-name ,set-field-name)))))


(define-registered-book-extended-fields define-registered-book-extended-fields
  source-file
  highest-structural-level
  document-type
  cover
  remarks
  symcopy
  doc#
  boilerplate
  effectivedate
  releaseversion
  marketing
  MITCopy
  CLIMCopy
  authorgroup
  authors
  design
  cover-printer
  text-printer
  printer
  confidential doctrademarks
  deferred-home
  )

(defun registered-book-record-group (registered-book)
  (or (registered-book-cached-record-group registered-book)
      (let ((record-group (find-record-group-for-topic-and-type
			    (registered-book-title registered-book)
			    :sage-section-record)))
	(setf (registered-book-cached-record-group registered-book) record-group)
	record-group)))

(defun registered-book-for-record-group (record-group)
  (find record-group *book-registry* :key #'registered-book-record-group))

(defun registered-book-for-title (title)
  (find title *book-registry* :test #'string-equal :key #'registered-book-title))

(defun document-type-for-record-group (record-group)
  (declare (values document-type-or-NIL))
  (let ((rb (registered-book-for-record-group record-group)))
    (and rb (registered-book-document-type rb))))

;;; defbook adds a book to the registry
;;;note: the existing extended-properties-list gets wiped out by the new one passed in.
(defun defbook (topic-string mnemonic-string &optional extended-properties-list)
  (let* ((type :sage-section-record)
	 (record-group (find-record-group-for-topic-and-type topic-string type))
	 (registered-book 
	   (or (and record-group (registered-book-for-record-group record-group))
	       (registered-book-for-title topic-string))))
    (cond (registered-book
	   (setf (registered-book-mnemonic registered-book) mnemonic-string)
	   (setf (registered-book-extended-properties registered-book)
		 extended-properties-list))
	  (T
	   (setq registered-book
		 (make-registered-book :title topic-string
				       :mnemonic mnemonic-string
				       :extended-properties (if extended-properties-list
							       extended-properties-list)))
	   (push registered-book *book-registry*)))))

(defun 1register-book0 (topic-string &key
		      (mnemonic "")
		      document-type
		      highest-structural-level
		      cover
		      remarks
		      boilerplate
		      symcopy
		      doc#
		      effectivedate
		      releaseversion
		      marketing
		      MITCopy
		      (CLIMCopy nil)
		      authorgroup
		      authors
		      design
		      cover-printer
		      text-printer
		      printer
		      confidential
		      doctrademarks
		      deferred-home
                      sage-variables)
  (let* ((buffer (and (boundp 'zwei:*interval*) zwei:*interval*))
	 (source-file (and buffer
			   (zwei:file-buffer-p buffer)
			   (send buffer :pathname)))
	 (type :sage-section-record)
	 (record-group (find-record-group-for-topic-and-type topic-string type))
	 (registered-book 
	   (or (and record-group (registered-book-for-record-group record-group))
	       (registered-book-for-title topic-string))))
    (if registered-book
	;; Set title in case it's being changed
	(setf (registered-book-title registered-book) topic-string)
	(setq registered-book
	      (make-registered-book :title topic-string))
	(push registered-book *book-registry*))
    (when sage-variables
      (assert (listp sage-variables) ()
	      "sage-variables must be in the form of a list of (variable value) pairs")
      (loop for pair in sage-variables
		do
	(assert (listp pair) ()
	      "sage-variables must be in the form of a list of (variable value) pairs")
	(let ((var (first pair))
	      (value (if (stringp (second pair))
			 (second pair)
			 (write-to-string (second pair)))))
	  (when var (set-static-value var value)))))
    (macrolet ((take-care-of-them (&rest fields)
		 `(progn
		    ,@(mapcar (lambda (field)
				`(setf (,(intern (string-append 'registered-book- field))
					registered-book)
				       ,field))
			      fields))))
      (take-care-of-them
	source-file
	mnemonic document-type highest-structural-level
	cover remarks symcopy doc# effectivedate releaseversion marketing
	symcopy MITCopy CLIMCopy authorgroup authors design cover-printer text-printer printer
	confidential boilerplate doctrademarks deferred-home))
    registered-book))


;;(export '(prune-online-document-set))

;;; ========================================
;;; 
;;; (2 0 (NIL 0) (:SWISS :BOLD :LARGE) "HL14B")Documentation Database Pruner
0;;;
;;; There are three parts to the program: its user interface,
;;; the part that understands Sage records and their links,
;;; and the part that deletes the files.
;;; 
;;; ========================================

;;; This would really like to be a command instead of a function.
;;; But in what comtab would the command go?  It can't be right
;;; to make it globally accessible to all users to go trash
;;; their doc host.  We have no site-administration Activity,
;;; which would be a natural place to put it.  So we leave it
;;; a function.
 
(defun 1prune-online-document-set0 ()
  (multiple-value-bind (removes keeps) (choose-topics-to-remove)
    (if removes
	(let ((remove-files (make-hash-table :number-of-values 0))
	      (keep-files (make-hash-table :number-of-values 0)))
	  (dolist (remove removes)
	    (adjoin-files-needed-for-topic remove remove-files))
	  (dolist (keep keeps)
	    (adjoin-files-needed-for-topic keep keep-files))
	  ;; Unmark for removal all those files marked to keep
	  (maphash (lambda (key ignore) (remhash key remove-files))
		   keep-files)
	  (if (zerop (hash-table-count remove-files))
	      (format t "~&No files can be removed because they are all included in some remaining document.")
	      (let ((files-to-remove ()))
		(maphash (lambda (key ignore) (push key files-to-remove)) remove-files)
		(setq files-to-remove (sort files-to-remove #'fs:pathname-lessp))
		(query-and-delete-the-files files-to-remove))))
	(format T "~&No files are being removed.")))
  (values))

;;; The pruner part that queries and deletes the files
(defun 1query-and-delete-the-files0 (files-to-remove)
  (let ((number-of-files (length files-to-remove)))
    (multiple-value-bind (this is)
	(if (= 1 number-of-files)
	    (values "This" "is")
	    (values "These" "are"))
      (format t "~&~a ~d file~:p ~a to be removed:~%~{  ~A~%~}"
	      this number-of-files is files-to-remove)
      (cond ((yes-or-no-p "Delete ~(~a~) ~d file~:p?"
			  this number-of-files)
	     (tv:dolist-noting-progress (f files-to-remove "Deleting files")
	       (condition-case (err)
		    (delete-file f)
		  (fs:file-not-found
		    (format *error-output*
			    "~&The file ~A was apparently deleted previously."
			    f))
		  (fs:file-operation-failure
		    ;; Trap, but display, random errors
		    (format *error-output* "~&~A" err))))
	     (format T "~&Remember to expunge the affected directories, if relevant."))
	    (T (format T "~&No files are being removed."))))))

;;; ========================================
;;; 
;;; The Pruner part that understands Sage records and links
;;; 
;;; ========================================

(defun 1adjoin-files-needed-for-topic0 (record-group file-table)
  ;; Walk the tree of record groups and callee links, collecting
  ;; the files used in each.  The internal function files-needed-by-record-group
  ;; is called on the toplevel (book) record-group, and it calls itself
  ;; recursively for each callee of the r-g it gets.
  (labels ((files-needed-by-record-group (record-group rgs-already)
	     ;; rgs-already is a stack-list of record groups examined along the
	     ;; path to this particular branch (ancestors, sort of).  We must check
	     ;; at each level to make sure we aren't getting stuck in a
	     ;; circular callee chain.
	     (unless (member record-group rgs-already)
	       ;; Add in the files for the published record of this particular record group
	       (adjoin-files-for-record-group record-group file-table)
	       (let ((record (record-group-published-record record-group)))
		 ;; callee information is represented in an alist like 
		 ;; ((EXPAND #<rg> #<rg> ...) (CROSSREFERENCE #<rg> ...) ...)
		 ;; Records, not record groups, maintain callee information.
		 (dolist (callee-item (and record (doc-record-callees record)))
		   (destructuring-bind (called-how . callees) callee-item
		     (case called-how
		       ((crossref crossreference precis topic)
			;; Don't need the file for these views
			)
		       (otherwise ;;(expand contents operation)
			;; Need the file to look up these
			 (cond
			   ((string-equal called-how "Crossref")
			    ;; except for this turkey, which Dennis is fixing
			    )
			   (T
			    ;; The stack-let maintains the callee path as described above
			    (stack-let ((rgs-already (cons record-group rgs-already)))
			      ;; if (null rgs-already), this is a top-level call, the
			      ;; record-group argument is a book, so we offer a progress
			      ;; note while considering its callees.
			      (if (null (rest rgs-already))
				  (tv:dolist-noting-progress
				    (callee callees
					    (format nil "Considering ~a"
						    (appropriate-title-rendering record-group 'no-formatting record)))
				    (files-needed-by-record-group callee rgs-already))
				  (dolist (callee callees)
				    (files-needed-by-record-group callee rgs-already)))))
		       )))))))))
    (files-needed-by-record-group record-group ())))

;;get source file where topic is.
(defun 1adjoin-files-for-record-group0 (record-group file-table)
  (let* ((published-record (record-group-published-record record-group))
	 (files
	   (and published-record
		(let ((locations (doc-record-disk-location published-record)))
		  (loop for (path) in locations collect path)))))
    (when files
      ;; If (null files), no source information is to be found for the record.
      ;; No particular point in telling the user about it: it doesn't matter
      ;; if we delete some files, because the record has no pathname to use anyway.
      (dolist (file files)
	(setf (gethash file file-table) T)))))

;;; ========================================
;;; 
;;; The Pruner User Interface
;;; 
;;; ========================================

;;; The toplevel function for chosing which topics to remove.
(defun 1choose-topics-to-remove0 ()
  (dw::run-program-top-level
    (dw:make-program 'choose-topics-to-remove-program)))

;;; A little structure to cluster a book's record-group,
;;; the record-group's title, and the book's status (:keep or :remove)
(defflavor 1topic-to-choose-to-remove
0	(record-group title status)
	()
  :readable-instance-variables
  (:constructor make-topic-to-choose-to-remove-internal (record-group title status)))

;;; The constructor
(defun 1make-topic-to-choose-to-remove0 (record-group)
  (let ((title (appropriate-title-rendering record-group 'no-formatting)))
    (make-topic-to-choose-to-remove-internal record-group title :keep)))

;;; The End and Exit and Help "buttons" at the bottom of the book menu
(define-presentation-type 1choose-topics-to-remove-program-exit-button0 ()
   :expander T)

;;; This provides a comtab, a command loop, and some state.
;;; We do not use it to get frames and panes and such.
(dw:define-program-framework 1choose-topics-to-remove-program
0  :command-table (:inherit-from '("colon full command" "standard arguments" "standard scrolling")
		  :kbd-accelerator-p T)
  :selectable nil
  :top-level (choose-topics-to-remove-program-top-level)
  :state-variables ((removable-topics)
		    )
  )

;;; The program toplevel function
(defgeneric 1choose-topics-to-remove-program-top-level 0(choose-topics-to-remove-program &rest ignore)
  (declare (values removes keeps))		;this is why I used defgeneric not defmethod
  (:method (choose-topics-to-remove-program)
   (setq removable-topics
	 ;; Examine the *book-registry*
	 (set-up-candidate-topics-to-remove))
   (when removable-topics
     (let ((stream *query-io*))
       (with-character-family (:swiss stream :bind-line-height T)
	 (fresh-line stream)
	 (format stream "Mark documents to remove from your documentation database.
Click on a document name to toggle the removal indicator.
Later you will see the names of all the files to be deleted.~2%")
	 (let ((redisplayer (candidate-topics-to-remove-redisplayer removable-topics)))
	   (dw:do-redisplay redisplayer stream :truncate-p T)
	   (catch 'end-command-executed		;thrown to by the End command
	     (si:with-process-interactive-priority ()
	       ;; The command loop.
	       (loop doing
		 (multiple-value-bind (command arguments)
		     (dw:read-program-command self
					      :echo-stream #'ignore
					      :prompt "A\:>"	;That's a joke, son
					      )
		   (si:with-process-non-interactive-priority ()
		     (apply command arguments)
		     (dw:do-redisplay redisplayer stream)
		     )))))))
       ;; Convert the internal topic representation into two lists (values removes keeps)
       (finalize-candidate-topics-to-remove removable-topics)))))

;;; Examine *book-registry*
;;; If somehow the book doesn't require any files, tell user that some of the files it
;;; doesn't need might end up being deleted.  ("huh?")
(defun 1set-up-candidate-topics-to-remove0 ()
  (block give-up
    (let* ((suspect-books
	     ;; The system index itself doesn't count
	     (remove "System Index" *book-registry*
				  :key #'registered-book-title
				  :test #'string-equal))
	   (record-groups (mapcar #'registered-book-record-group suspect-books)))
      ;; Give a chance to bail out if things are questionable.
      #||
      ;; This is commented out because it's Symbolics' fault if it finds any losers,
      ;; and the user can't do anything about it anyway.
      (flet ((check-losers (this-book it)
	       (format *error-output*
		       "~&Information is missing about the contents of ~a.~@
			We might delete some of the files needed for ~a.~%"
		       this-book it)
	       (let ((losers (loop for book in suspect-books
				   unless (registered-book-record-group book)
				     collect book)))
		 (dolist (losing-book losers)
		   (format *error-output* "   ~a~%" (registered-book-title losing-book)))
		 (unless (yes-or-no-p "Proceed anyway? ")
		   (return-from give-up ())))))
	(let ((number-of-losers (count nil record-groups)))
	  (cond (( number-of-losers 2)
		 (check-losers "these books" "they"))
		((= number-of-losers 1)
		 (check-losers "this book" "it"))
		(T ))))
      ||#
      ;; Construct the internal form
      (map 'vector #'make-topic-to-choose-to-remove
	   (nreverse (delete nil record-groups))))))

;;; Make (and return) a dw:redisplayer to draw the actual books and status.  And buttons.
(defun 1candidate-topics-to-remove-redisplayer0 (removable-topics)
  (dw:redisplayer (stream)
    ;; The books and status
    (formatting-table (stream)
      (dw:with-redisplayable-output (:stream stream
				     :unique-id 'column-headings
				     :cache-value 'column-headings)
	(formatting-column-headings (stream :underline-p T)
	  (formatting-cell (stream) "            ")
	  (formatting-cell (stream) "Document Name")))
      (domap nil ((topic removable-topics))
	(present-removable-topic topic stream)))
    ;; The buttons
    (dw:with-redisplayable-output (:stream stream
				   :unique-id 'buttons
				   :cache-value 'buttons)
      (flet ((button (command format-string &rest format-args)
	       (dw:with-output-as-presentation (:object command
						:type 'choose-topics-to-remove-program-exit-button
						:stream stream)
		 (apply #'format stream format-string format-args))))
	;; There's a way to get this out of comtab, but it's even more complicated.
	;; (see dw:accept-values-display-exit-boxes)
	(button 'com-abort-choose-topics-to-remove-program
		"~C aborts" #\Abort)
	(write-string ", " stream)
	(button 'com-exit-choose-topics-to-remove-program
		"~C uses these selections" #\End)
	(write-string "; " stream)
	(button 'com-help-choose-topics-to-remove-program
		"~C offers help" #\Help)
	))
    (terpri stream)))

;;; The rest of the code to draw the books table
(defmethod 1(present-removable-topic topic-to-choose-to-remove)0 (stream)
  (dw:with-redisplayable-output (:stream stream
				 :unique-id self
				 :cache-value status)
    (dw:with-output-as-presentation (:stream stream
				     :object self
				     :type (type-of self)
				     :single-box T)
      (formatting-row (stream)
	(formatting-cell (stream :align-x :right)
	  (write-string
	    (ecase status
	      (:keep " ")
	      (:remove "Remove  "))		;here's the highlighting
	    stream))
	(formatting-cell (stream)
	  (princ title stream))))))

;;; Convert the sequence of internal structures into two lists
;;; of record-groups: those to remove, and those to keep.
(defun 1finalize-candidate-topics-to-remove0 (removable-topics)
  (declare (values removes keeps))
  (zwei:zcollecting-into (removes keeps)
    (domap () ((topic removable-topics))
      (let ((rg (topic-to-choose-to-remove-record-group topic)))
	(ecase (topic-to-choose-to-remove-status topic)
	  (:keep (zwei:zcollect keeps rg))
	  (:remove (zwei:zcollect removes rg)))
	nil))
    (values removes keeps)))

;;; Here are the command and translator that run when you click on a book in the table.
;;; It toggles the status between :remove and :keep each time you click
;;; on the book.
(dw:define-program-command 1(com-toggle-status choose-topics-to-remove-program)
0			   ((removable-topic 'topic-to-choose-to-remove))
  (toggle-removable-topic-status removable-topic))

(defmethod 1(toggle-removable-topic-status topic-to-choose-to-remove)0 ()
  (setq status (ecase status (:keep :remove) (:remove :keep))))

(define-presentation-to-command-translator 1toggle-removable-topic-status
0   (topic-to-choose-to-remove
     :documentation ((removable-topic)
		     (topic-to-choose-to-remove-mouse-documentation removable-topic :toggle))
     )
   (removable-topic)
  `(com-toggle-status ,removable-topic))

(defmethod 1(topic-to-choose-to-remove-mouse-documentation topic-to-choose-to-remove)0 (which)
  (ecase which
    (:toggle
      ;; I know the style guides say to put book titles in italics, not quotes,
      ;; but you can't read italics in reverse video in a mouse documentation line.
      (format nil "~a \"~a\""
	      (ecase status
		(:keep "Remove")
		(:remove "Keep"))
	      title))))

;;; ========================================
;;; Here are the commands that implement clicks on the buttons at the
;;; bottom.  Each has a corresponding keyboard accelerator.
;;; ========================================

;;; This symbol property is used for mouse documentation
(setf (get 'com-exit-choose-topics-to-remove-program 'i-cant-think-of-one-more-property-name)
      "Use these selections")
(dw:define-program-command (1com-exit-choose-topics-to-remove-program
0			     choose-topics-to-remove-program
			     :keyboard-accelerator #\End)
			   ()
  ;; Exit the command loop
  (throw 'end-command-executed ()))

(dw:define-program-command (1com-abort-choose-topics-to-remove-program
0			     choose-topics-to-remove-program
			     ;; no point in :keyboard-accelerator #\Abort
			     )
			   ()
  ;; Abort out of the whole mess
  (signal 'sys:abort))

(dw:define-program-command (1com-help-choose-topics-to-remove-program
0			     choose-topics-to-remove-program
			     :keyboard-accelerator #\Help)
			   ()
  ;; Use the Sage formatter to pretty this text up a little.
  ;; You get hyphenation, for instance.
  (sage-formatting ()
    (write-string "
After the files for the document set have been installed at your site,
you have the option of removing specific documents from the
documentation database, thereby recovering space on the 
file server.  You would do this when the users at your site need the
extra file system space more than they need the documentation.

The table above shows the titles of books in the online database.  Mark
each book you want to remove by clicking on it.  If you change your
mind, click on it again to remove the marker.  When you are satisfied,
click on the End marker (or press the ")
    (in-environment (() k) "End")
    (write-string " key).  
At that point, the system determines which files are needed for the
remaining books and targets the rest of the files for deletion.
At the end, it shows the list of files to be deleted and queries you
about whether to go ahead.  
")))

;;; This translator runs when you wave the mouse over one of the buttons
;;; at the bottom.
(define-presentation-to-command-translator 1exit-command-from-exit-button
0   (choose-topics-to-remove-program-exit-button
     :documentation ((command-name)
		     ;; If there's canned doc, use it
		     (or (get command-name 'i-cant-think-of-one-more-property-name)
			 ;; Else construct some from the first word of the command name
			 (let* ((string (string command-name))
				(past-com (mismatch "COM-" string)))
			   ;; This would better be computed at compile time, I suppose.
			   (string-capitalize-words
			     (substring string past-com
					(position #\- string :start past-com))))))
     )
   (command-name)
  `(,command-name))

(compile-flavor-methods topic-to-choose-to-remove choose-topics-to-remove-program)


#||
;; This is the older implementation of the pruner.
;; It doesn't work.
    
;;;Note: it would be very dangerous to run this function on anything but
;;;the full list of registered books.  This is because it gets the list
;;;of all the documents (chapters? majorparts?) from the books and then
;;;a list of files to remove by examining the documents the user said to
;;;remove.  Then it "tempers" that list with the knowledge of which
;;;files are needed by the documents that the user said to keep.  I
;;;wonder if this is sufficiently bullet-proof for all sites and
;;;situations?

#+Franz
 (3 0 (NIL 0) (NIL NIL :SMALLER) "EINY7")(defun prune-online-document-set ()
  (let* ((choices '((keep t) (remove nil)))
         (choice-list '((keep "Keep")
                        (remove "Remove")))
         item-list
         keep-documents remove-documents
         files-in-kept-documents files-in-removed-documents)
    
    (flet ((list-maker (document-list)
	     (loop for record-group in document-list
		   nconc (files-needed-by-document record-group))))
      ;; loop over documents in books
      (loop for book-structure in *book-registry*
	    as record-group = (registered-book-record-group book-structure)
	    as installed-record = (record-group-published-record record-group)
	    unless (null installed-record)
	      ;; now loop over book callees getting documents we will present to the user
	      do (loop for (nil . callee-record-groups)
			   in (doc-record-callees installed-record)
		       do
		   (loop for callee-record-group in callee-record-groups
			 as callee-installed-record =
			    (record-group-published-record callee-record-group)
			 when (and (not (null callee-installed-record))
				   (doc-record-available callee-installed-record))
			   do (push (list callee-record-group
					  (appropriate-title-rendering
					    callee-record-group 'no-formatting)
					  choices)
				    item-list)))
	    finally (setq item-list (sort item-list #'string-lessp :key #'second)))
      
      ;; get selection of documents to kill and save via menu
      (loop for (record-group decision) in (tv:multiple-choose
					     "Documents "
					     item-list
					     choice-list '(:point 0 0) 50)
            do (case decision
                 (keep (push record-group keep-documents))
                 (remove (push record-group remove-documents))))
      
      (when remove-documents			;avoid monkey motion when nothing to remove
	(setq files-in-kept-documents (list-maker keep-documents)
	      files-in-removed-documents (list-maker remove-documents))
	(multiple-value-bind (nil nil remove)
	    (list-intersection-and-differences
	      files-in-kept-documents files-in-removed-documents)
	  (if (null remove)			; no files in removed list that weren't also in kept list
	      (format t "~&No files can be removed because they are all included in some remaining document.")
	      ;; query and delete orphaned files
	      (progn
		(format t "~&Files being removed:~%~{  ~A~%~}" remove)
		(when (yes-or-no-p "Delete these files? ")
		  (loop for f in remove
			do (condition-case (err)
				(delete-file f)
			      (fs:file-not-found
				(format *error-output*
					"~&The file ~A was apparently deleted previously."
					f))
			      (fs:file-operation-failure
				;; Trap, but display, random errors
				(format *error-output* "~&~A" err)))
			finally (format t
					"~&Remember to expunge the affected directories, if relevant."))
		  
		  ;; Now that files are deleted, set relevant documents off-line.
		  (loop for record-group in remove-documents
			as installed-record = (record-group-published-record record-group)
			do (setf (doc-record-available installed-record) nil))))))))))

0||#

#|
;;;Issues

The other thing that the document registry needs to record is which document 
type to use for a particular document.
  Now is does

What do we do about patch files?  Make sure they get kept if needed.
  They do

Be sure to prompt at the end.
  It does

Multiple choice boxes need to be mutually exclusive.  Aren't now.
  Their successors (dw hair above) are

defdocument has to be really paranoid about possible spelling problems or changed
titles; must validate the topic names.
  Still credulous.  However, the registry is heavily used for book production
  now, so maybe that testing is adequate.

Bug revealed by document "Flavors".  The list of files doesn't include flav4, which
does contain topics that are in Flavors.
  I failed to observe this

Make sure we deal with "file not found" appropriate in Sage itself.
  We do
|#
