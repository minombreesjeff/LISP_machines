;;; -*- Mode:Lisp; Package:Press; Base:10; Lowercase:yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; ---BUG---
;; The fonts.widths file format, defined by Xerox for Altos and other big-endian machines, 
;; requires in effect that our little-endian system write each defined 16-bit word as two
;; 8-bit bytes, the more significant one first.  Currently, we don't do that; we just write
;; 16-bit words into the file.  That works on the -10(-20, Foonly) because the file server
;; there stores them bigendian anyway, so other programs on such systems (Scribe) read
;; it just fine.  However, when writing to a Unix, our 16-bit words wind up with their
;; bytes stored in little-endian order.  This is currently kludged around by directing
;; our output to a file widths.fonts, and then reversing its bytes into fonts.widths.
;; The right way to fix this is to make an incompatible change to all fonts.widths files,
;; writing 8-bit bytes in bigendian order, and fix all the code here to suit.

;Interesting functions:
; (LOAD-FONT-WIDTHS)
;	loads up the file.  Takes an optional argument of the filename
;	of the widths file (defaults to SYS: PRESS-FONTS; FONTS WIDTHS).
;	If a second optional argument is supplied, it is a list of
;	lists (family-name face-name point-size) and only those
;	specific fonts are loaded.
;	Merges with pre-existing contents of FONT-WIDTH-DATA (set it
;	to NIL first if you want to flush the old data.)
; (GET-FONT-WIDTH-DATA family-name face-name point-size)
;	returns an array of widths in micas (-1 for non-existent chars)
; (GET-FONT-WIDTH-AND-HEIGHT family-name face-name point-size)
;	returns a list of width and height in micas
;	This is gotten from the bounding box since the fixed Y-width
;	seems to be garbage generally.
; (DUMP-FONT-WIDTHS file-name)
;	writes FONT-WIDTH-DATA to a fonts.widths file
; (WRITE-FONT-WIDTHS &optional fonts outfile)
;	reads .BFD files and writes their width info to a fonts.widths file.


;Data structure desired.
;  FONT-WIDTH-DATA is a list of elements:
(defstruct (font-width-entry :list (:constructor ()))
  fw-family-name	;;family-name is a string
  fw-face		;;face-name is a string ("" in the normal case)
			;;structured as {B|L} {I} {C|E}
  fw-size		;;size is 0 for relative sizing, in which case the data are
			;;in thousandths of the nominal point-size of the font,
			;;or else size is the point-size in micas and the data are
			;;in micas.  A mica is 10 microns = 1/2540 inch
			;; A point is exactly 2540./72. = approximately 35.27777 micas
  fw-rotation		;;rotation is normally 0, it is minutes of arc countclockwise
  fw-bounding-box	;;bounding-box is a list of 4 numbers x-offset y-offset width height
			;; In the bounding-box, the x-offset is negative to go to the left,
			;; and the y-offset is negative to go below the baseline.
  fw-xwidths		;;xwidths is a single number or a zero-origin fixnum array
  fw-ywidths		;;ywidths is a single number or a zero-origin fixnum array
			;; A width of -1 means a non-existent character
  fw-bc-ec		;;(lowest-char-code . highest-char-code)
  )

;;Internal-use WidthsSegment data returned by read-segment-data
(defstruct (segment-data :list (:constructor ()))
  segdata-family
  segdata-face
  segdata-size
  segdata-rotation
  segdata-bc
  segdata-ec
  segdata-sa
  segdata-len)
(defsubst flag-x-fixed-width (flags) (bit-test #o100000 flags))
(defsubst flag-y-fixed-width (flags) (bit-test #o40000 flags))

(eval-when (compile eval load)
(defmacro high-byte (word)
  `(lsh ,word -8.))

(defmacro low-byte (word)
  `(logand #o377 ,word))
);eval-when

;Get next 16-bit word from widths-file
(defun next-word (stream)
  (send stream ':tyi "Unexpected EOF on widths file"))

(defun bigendian-longword (stream)
  (dpb (next-word stream) (byte 16. 16.) (next-word stream)))

(defun widths-file-pos (stream)
  (send stream ':read-pointer))

;2's complement form of next-word
(defun next-word2 (stream)
  (let ((wd (next-word stream)))
    (and (> wd #o77777) (setq wd (- wd #o200000)))
    wd))

(defun bcpl-string (n stream) ;n = max-length-including-header-byte and is even
  (let ((wd (next-word stream)))
    (do ((chlist (make-array (high-byte wd) ':type 'art-string))
	 (m (high-byte wd) (1- m))		;Number of characters
	 (i 0 (1+ i))
	 (k (// (- n (high-byte wd) 1) 2)))	;k is number of extra words
	((zerop m)
	 (dotimes (i k)
	   (declare (ignore i))
	   (next-word stream))
	 chlist)
      (cond ((oddp i)
	     (setq wd (next-word stream))
	     (aset (code-char (high-byte wd)) chlist i))
	    (t
	     (aset (code-char (low-byte wd)) chlist i))))))

;Normal face codes are "" for normal, I for italic, B for bold, etc.
;These are strings rather than symbols on the Lisp machine.
;Alternatively the face code can be a list of the normal code,
;the CMU character-set-convention code, and the TEX logical size code.
(defun decode-face (face-code2)
  (let ((l nil)
	(res nil)
	(face-code (\ face-code2 18.))
	(cmu-bullshit (\ (// face-code2 18.) 3))
	(tex-bullshit (if (< face-code2 54.) -1 (- face-code2 54.))))
    (cond ((> face-code 11.)
	   (setq face-code (- face-code 12.))
	   (push #/E l))
	  ((> face-code 5)
	   (setq face-code (- face-code 6))
	   (push #/C l)))
     (cond ((oddp face-code)
	   (setq face-code (1- face-code))
	   (push #/I l)))
    (cond ((> face-code 3)
	   (setq face-code (- face-code 4))
	   (push #/L l))
	  ((> face-code 1)
	   (setq face-code (- face-code 2))
	   (push #/B l)))
    (cond ((not (zerop face-code))
	   (ferror "extra garbage in face-code: ~S" face-code)))
    (setq res (fillarray (make-array (length l) ':type 'art-string) l))
    (cond ((or (not (zerop cmu-bullshit)) (not (minusp tex-bullshit)))
	   (setq res (list res cmu-bullshit))
	   (or (minusp tex-bullshit)
	       (setq res (nconc res (list tex-bullshit))))))
    res))

;Load it up and make the data structure mentioned at front of file
(defun load-font-widths (&optional filename fonts-desired)
  (multiple-value-bind (data pathname info)
      (load-font-widths-1 filename fonts-desired)
    pathname info				;not used anymore
    (cond ((null data)
	   ;; Trap inserted in source 7/7/83 DLW to catch bug.
	   (format error-output "Attempt to set font-width data to NIL!  This is a~@
                                 system bug; please report it to Symbolics."))
	  (t (setq font-width-data data)))))

(defun load-font-widths-1 (filename &optional fonts-desired)
  (with-open-file (stream (or filename "SYS:PRESS-FONTS;FONTS WIDTHS >")
			  :direction :in :byte-size 16. :characters ())
    (let ((new-font-width-data (merge-font-widths stream () fonts-desired)))
      (sys:set-file-stream-loaded-id stream package)
      (values new-font-width-data (send stream ':pathname) (send stream ':info)))))

(defun merge-font-widths (stream existing-data fonts-desired)
  (dolist (seg (read-segment-data stream))
    (let ((gap (- (segdata-sa seg) (widths-file-pos stream))))
      (cond ((minusp gap) (ferror "FONTS.WIDTHS file ~s out of phase" stream)))
      (dotimes (i gap)
	(declare (ignore i))
	(next-word stream)))
    (let ((bounding-box (list (next-word2 stream) (next-word2 stream)
			      (next-word2 stream) (next-word2 stream)))
	  ;;Note that the documentation on this flags word is wrong!
	  (flags (next-word stream)))  
      (cond ((or (null fonts-desired)
		 ;; Also skip entries for fonts not in fonts-desired if it is non-nil.
		 (loop for f in fonts-desired
		       thereis (and (equal (font-family-name f) (segdata-family seg))
				    (equal (font-face f) (segdata-face seg))
				    (or (zerop (segdata-size seg))	;general
					(point-size-equal	;specific
					  (segdata-size seg) (font-size f)))
				    (zerop (segdata-rotation seg))	;no rotation
				    )))
	     (let ((xwidths (read-widths-array (flag-x-fixed-width flags) seg stream))
		   (ywidths (read-widths-array (flag-y-fixed-width flags) seg stream)))
	       ;; Make the data
	       (let ((newdata (list (segdata-family seg) (segdata-face seg)
				    (segdata-size seg) (segdata-rotation seg)
				    bounding-box xwidths ywidths
				    (cons (segdata-bc seg) (segdata-ec seg)))))
		 ;;Eliminate duplications of this font
		 (setq existing-data
		       (del #'(lambda (x y)
				(and (equal (font-family-name x) (font-family-name y))
				     (equal (font-face x) (font-face y))
				     (= (font-size x) (font-size y))
				     (= (font-rotation x) (font-rotation y))))
			    newdata existing-data))
		 (push newdata existing-data))))
	    (T					;Skip this font
	     ;; Skip X-data
	     (if (flag-x-fixed-width flags)
		 (next-word stream)
		 (loop for j from (segdata-bc seg) to (segdata-ec seg)
		       do (next-word stream)))
	     ;; Skip Y-data
	     (if (flag-y-fixed-width flags)
		 (next-word stream)
		 (loop for j from (segdata-bc seg) to (segdata-ec seg)
		       do (next-word stream)))))))
  existing-data)

(defun read-segment-data (stream)
  (let ((code-alist nil)
	(segment-data nil)
	(wd 0))
    (setq wd (next-word stream))
    ;; Read IXN entries (type 1)
    (do () ((not (= (lsh wd -12.) 1)))
      (let ((code (next-word stream))
	    (name (bcpl-string 20. stream)))
	(push (cons code name) code-alist))
      (setq wd (next-word stream)))
    ;; Read WidthIndexEntries (type 4)
    (do () ((not (= (lsh wd -12.) 4)))
      (setq wd (next-word stream))		;family,,face
      (let ((family (let ((code (high-byte wd)))	;Family-name
		      (or (cdr (assoc code code-alist)) (list 'code code))))
	    (face (decode-face (low-byte wd)))	;Face name
	    (bc (progn (setq wd (next-word stream))	;bc,,ec
		       (high-byte wd)))	;First code
	    (ec (low-byte wd))		;Last code
	    (size (next-word stream))
	    (rotation (next-word stream))
	    (sa (bigendian-longword stream))	;Segment SA 
	    (len (bigendian-longword stream)))	;Segment Len
	(push (list family face size rotation bc ec sa len) segment-data))
      (setq wd (next-word stream)))
    ;; Now should have type-0 entry (end of index)
    (or (zerop (lsh wd -12.))
	(ferror "Garbage in file where type 0 IX expected: ~S" wd))
    ;; Sort segments by SA, so we can skip the gaps between WidthSegments.
    (sort segment-data #'(lambda (x y) (< (segdata-sa x) (segdata-sa y))))))


(defun read-widths-array (fixed-width seg stream)
  (if fixed-width
      (next-word stream)
      (let ((width-array (make-array #o400 ':initial-value -1)))
	(loop for i from (segdata-bc seg) to (segdata-ec seg)
	      as k = (next-word stream)
	      do (setf (aref width-array i) (if (= k #o100000) -1 k)))
	width-array)))

;This will return the entry for the particular size if it
;can find it, otherwise the entry for relative size.
;Errors out if no info found.
(defun find-font-data (family-name face-name point-size)
  (or (find-font-data-1 family-name face-name point-size)
      (ferror "No information for font:  ~A ~A ~D" family-name face-name point-size)))

;This will return the entry for the particular size if it
;can find it, otherwise the entry for relative size.
;Returns NIL if no info found.
(defun find-font-data-1 (family-name face-name point-size)
  (setq family-name (string family-name) face-name (string face-name))
  (or (loop for font in font-width-data
	    when (and (equal (fw-family-name font) family-name)
		      (equal (fw-face font) face-name)
		      (point-size-equal (fw-size font) point-size)
		      (zerop (fw-rotation font)))
	    return font)
      (loop for font in font-width-data
	    when (and (equal (fw-family-name font) family-name)
		      (equal (fw-face font) face-name)
		      (zerop (fw-size font))
		      (zerop (fw-rotation font)))
	    return font)))

(defun point-size-equal (internal point-size)
  (and ;(= (// (* internal 72.) 2540.) point-size)
       ;The above does not work.  Apparently Xerox just plain is not consistent
       ;about how many points there are in an inch.  It doesn't help that their
       ;font documentation is riddled with errors.  So we'll do something
       ;extremely forgiving.
       (> internal (// (- (* point-size 2540.) 1270.) 72.))
       (< internal (// (+ (* point-size 2540.) 1270.) 72.))))

; (GET-FONT-WIDTH-DATA family-name face-name point-size)
;	returns an array of widths in micas (-1 for non-existent chars)
(defun get-font-width-data (family-name face-name point-size)
  (let ((dat (find-font-data family-name face-name point-size)))
    (let ((xwidths (fw-xwidths dat)))
      (cond ((not (zerop (fw-size dat)))	;Already got data in micas
	     (if (numberp xwidths)		;Fixed-width font
		 (make-array #o400 ':initial-value xwidths)
		 xwidths))
	    ((numberp xwidths)		;Fixed-width font
	     (make-array #o400 ':initial-value (// (* xwidths point-size 2540.) 72000.)))
	    (T (loop with n = (array-active-length xwidths)
		     with arr = (make-array n)
		     for i below n
		     as m = (aref xwidths i)
		     do (setf (aref arr i) (if (minusp m) -1
					       (// (* m point-size 2540.) 72000.)))
		     finally (return arr)))))))

; (GET-FONT-WIDTH-AND-HEIGHT family-name face-name point-size)
;	returns a list of width and height in micas
;	This is gotten from the bounding box since the fixed Y-width
;	seems to be garbage generally.
; However, the width returned here does not equal the width of all
; the characters in a fixed-width font.  It is not clear what
; it is generally useful for.  The height returned here, however,
; is the right height for a line of text in this font.
(defun get-font-width-and-height (family-name face-name point-size)
  (let* ((dat (find-font-data family-name face-name point-size))
	 (bb (fw-bounding-box dat)))
    (if (not (zerop (fw-size dat)))	;Already got data in micas
	(list (third bb) (fourth bb))
	(list  (// (* (third bb) point-size 2540.) 72000.)
	       (// (* (fourth bb) point-size 2540.) 72000.)))))

(defstruct (file-font-width-data :list :conc-name)
  pathname
  info
  data)

(defvar *font-width-data-file-alist* ())

(defun get-font-width-data-for-printer (printer &optional (probe t))
  (let ((filename (send printer ':fonts-widths-file)))
    (unless (null filename)
      (setq filename (fs:merge-pathnames filename))
      (file-font-width-data-data
	(or (and (not probe) (assq filename *font-width-data-file-alist*))
	    (get-font-width-data-for-file filename))))))

(defun get-font-width-data-for-file (filename)
  (setq filename (fs:merge-pathnames filename))
  (let* ((entry (assq filename *font-width-data-file-alist*))
	 (new-entry-p (not entry)))
    (when new-entry-p
      (setq entry (make-file-font-width-data pathname filename)))
    (when (with-open-file (probe filename ':direction ':probe)
	    (not (equal (file-font-width-data-info entry) (send probe ':info))))
      (multiple-value-bind (data nil info)
	  (load-font-widths-1 filename)
	(setf (file-font-width-data-info entry) info)
	(setf (file-font-width-data-data entry) data)))
    (when new-entry-p
      ;; It's possible that two processes will both try to load the same
      ;; file and will wind up doing duplicate work.  Tough!
      (push entry *font-width-data-file-alist*))
    entry))

(defsubst combine-bytes (high-byte low-byte)
  (dpb high-byte (byte 8. 8.) low-byte))

;;write out a fonts.widths file with all the data from the in-memory representation
;;in PRESS:FONT-WIDTH-DATA.
(defun dump-font-widths (outfile)
  (let ((array (compute-font-widths-array)))
    (with-open-file (stream outfile ':direction ':out ':byte-size 16. ':characters ())
      (dotimes (i (array-active-length array))
	(send stream ':tyo (aref array i)))
      (send stream ':pathname))))

(defun compute-font-widths-array ()
  (let ((array (make-array 1000. ':type 'art-16b ':leader-list '(0)))
	(fonts (mapcar #'(lambda (f) (cons f ())) font-width-data))
	(families (loop with families
			for font in font-width-data
			as fam = (fw-family-name font)
			unless (member fam families)
			do (push fam families)
			finally (return (sort families #'string-lessp)))))
    ;;output the strings for the names
    (loop for family in families
	  for i from 0
	  do (output-ixn-string array i family))
    ;; Now the WidthIndexEntry for each one
    (loop for font&index in fonts
	  as font = (car font&index)
	do (array-push-extend array (dpb 4 (byte 4. 12.) 9.))	;type 4, length 9
	   (array-push-extend array
			      (combine-bytes	;family code,,face code
				(find-position-in-list-equal (fw-family-name font)
							     families)
				(encode-press-face (fw-face font))))
	   (array-push-extend array		;bc,,ec
			      (combine-bytes (car (fw-bc-ec font))
					     (cdr (fw-bc-ec font))))
	   (array-push-extend array (fw-size font))	;size in micas
	   (array-push-extend array (fw-rotation font))	;rotation
	   (setf (cdr font&index) (array-active-length array))
	   (dotimes (i 4)
	     (declare (ignore i))
	     (array-push-extend array -1)))
    (array-push-extend array 0)			;type 0, length 1
    ;; And finally the WidthSegments
    (loop for (font . index) in fonts
	  do (let ((segment-sa (array-active-length array)))
	       ;;bounding box
	       (dolist (b (fw-bounding-box font)) (array-push-extend array b))
	       (let ((xwidths (fw-xwidths font))
		     (ywidths (fw-ywidths font)))
		 ;;flags word
		 (array-push-extend array (dpb (if (numberp xwidths) 1 0)
					       (byte 1. 15.)
					       (dpb (if (numberp ywidths) 1 0)
						    (byte 1. 14.)
						    0)))
		 (if (numberp xwidths)
		     (array-push-extend array xwidths)
		     (loop with (bc . ec) = (fw-bc-ec font)
			   for i from bc to ec
			   as width = (aref xwidths i)
			   do (array-push-extend array (if (minusp width) #o100000 width))))
		 (if (numberp ywidths)
		     (array-push-extend array ywidths)
		     (loop with (bc . ec) = (fw-bc-ec font)
			   for i from bc to ec
			   as width = (aref ywidths i)
			   do (array-push-extend array (if (minusp width) #o100000 width)))))
	       (let ((segment-len (- (array-active-length array) segment-sa)))
		 (setf (aref array index) (ldb (BYTE 16. 16.) segment-sa))
		 (setf (aref array (1+ index)) (ldb (BYTE 16. 0.) segment-sa))
		 (setf (aref array (+ index 2)) (ldb (BYTE 16. 16.) segment-len))
		 (setf (aref array (+ index 3)) (ldb (BYTE 16. 0.) segment-len)))))
    array))

(DEFSTRUCT (FONT-WIDTHS-FONT :LIST (:INCLUDE FONT-ENTRY))
  WIDTH-SEGMENT-INDEX)

(DEFUN LGP-TO-MICAS (X)
  (// (* X 2540.) 240.))

(DEFUN WRITE-FONT-WIDTHS (&OPTIONAL (FONTS "SYS:FONTS;LGP-1;*.BFD")
				    (OUTFILE "SYS:PRESS-FONTS;FONTS.WIDTHS")
			  &AUX ARRAY FAMILIES)
  (AND (OR (TYPEP FONTS 'FS:PATHNAME) (STRINGP FONTS))
       (SETQ FONTS (LOOP FOR FILE IN (CDR (FS:DIRECTORY-LIST FONTS))
			 COLLECT (MULTIPLE-VALUE-BIND (FAMILY FACE SIZE)
				     (DECODE-FONT-NAME (FUNCALL (CAR FILE) ':NAME))
				   (MAKE-FONT-WIDTHS-FONT FAMILY-NAME FAMILY
							  FACE (ENCODE-PRESS-FACE FACE)
							  SIZE SIZE)))))
  (SETQ ARRAY (MAKE-ARRAY 1000. ':TYPE 'ART-16B ':LEADER-LIST '(0)))
  (SETQ FAMILIES (SORT (SI:ELIMINATE-DUPLICATES (MAPCAR 'FONT-FAMILY-NAME FONTS) #'EQUAL)
		       #'STRING-LESSP))
  ;; Output the strings for the names
  (LOOP FOR FAMILY IN FAMILIES
	FOR I FROM 0
	DO (OUTPUT-IXN-STRING ARRAY I FAMILY))
  ;; Now the WidthIndexEntry for each one
  (LOOP FOR FONT IN FONTS
	AS BFD = (FED:GET-LGP-FONT (PRESS-FONT-LGP-FONT-SYMBOL FONT) (FONT-ROTATION FONT))
	AS MICAS = (// (* (FONT-SIZE FONT) 2540.) 72.)
	UNLESS ( (// (- (* (FONT-SIZE FONT) 2540.) 1270.) 72.)
		  MICAS
		  (// (+ (* (FONT-SIZE FONT) 2540.) 1270.) 72.))
	  DO (FERROR NIL "Font ~D is ~D points, not ~D"
		     FONT (// (+ (* MICAS 72.) 1270.) 2540.) (FONT-SIZE FONT))
	DO (ARRAY-PUSH-EXTEND ARRAY (DPB 4 (BYTE 4. 12.) 9.))	;Type 4, length 9
	   (ARRAY-PUSH-EXTEND ARRAY (DPB (FIND-POSITION-IN-LIST-EQUAL
					   (FONT-FAMILY-NAME FONT) FAMILIES)
					 (BYTE 8. 8.) (FONT-FACE FONT)))   ;Family Code,,face
	   (ARRAY-PUSH-EXTEND ARRAY (DPB 0 (BYTE 8. 8.) (1- (FED:BFD-FILL-POINTER BFD)))) ;bc,,ec
	   (ARRAY-PUSH-EXTEND ARRAY MICAS)			;Size in micas
	   (ARRAY-PUSH-EXTEND ARRAY (FONT-ROTATION FONT))	;Rotation
	   (SETF (WIDTH-SEGMENT-INDEX FONT) (ARRAY-ACTIVE-LENGTH ARRAY))
	   (DOTIMES (I 4)
	     (DECLARE (IGNORE I))
	     (ARRAY-PUSH-EXTEND ARRAY -1)))
  (ARRAY-PUSH-EXTEND ARRAY 0)			;Type 0, length 1
  ;; And finally the WidthSegments
  (LOOP FOR FONT IN FONTS
	AS BFD = (FED:GET-LGP-FONT (PRESS-FONT-LGP-FONT-SYMBOL FONT) (FONT-ROTATION FONT))
	WITH MAX-WIDTH AND FIXED-WIDTH
	AS SEGMENTSA = (ARRAY-ACTIVE-LENGTH ARRAY)
	DO (MULTIPLE-VALUE (MAX-WIDTH FIXED-WIDTH)
	     (BFD-WIDTH-INFO BFD))
	   ;; Bounding box, this seems totally random
	   (ARRAY-PUSH-EXTEND ARRAY 0)
	   (ARRAY-PUSH-EXTEND ARRAY 0)
	   (ARRAY-PUSH-EXTEND ARRAY (LGP-TO-MICAS MAX-WIDTH))
	   (ARRAY-PUSH-EXTEND ARRAY (LGP-TO-MICAS (FED:BFD-LINE-SPACING BFD)))
	   (ARRAY-PUSH-EXTEND ARRAY (DPB (IF FIXED-WIDTH 1 0) (BYTE 1. 15.)
					 (DPB 1 (BYTE 1. 14.) 0)))
	   (IF FIXED-WIDTH (ARRAY-PUSH-EXTEND ARRAY (LGP-TO-MICAS MAX-WIDTH))
	       (LOOP FOR I FROM 0 BELOW (FED:BFD-FILL-POINTER BFD)
		     AS BCD = (AREF BFD I)
		     DO (ARRAY-PUSH-EXTEND ARRAY (IF (NULL BCD) #o100000
						     (LGP-TO-MICAS
						       (FED:BCD-SET-WIDTH BCD))))))
	   (ARRAY-PUSH-EXTEND ARRAY (LGP-TO-MICAS (FED:BFD-BASELINE BFD)))
	AS SEGMENTLEN = (- (ARRAY-ACTIVE-LENGTH ARRAY) SEGMENTSA)
	AS WIDTH-SEGMENT-INDEX = (WIDTH-SEGMENT-INDEX FONT)
	DO (ASET (LDB (BYTE 16. 16.) SEGMENTSA) ARRAY WIDTH-SEGMENT-INDEX)
	   (ASET (LDB (BYTE 16. 0.) SEGMENTSA) ARRAY (1+ WIDTH-SEGMENT-INDEX))
	   (ASET (LDB (BYTE 16. 16.) SEGMENTLEN) ARRAY (+ WIDTH-SEGMENT-INDEX 2))
	   (ASET (LDB (BYTE 16. 0.) SEGMENTLEN) ARRAY (+ WIDTH-SEGMENT-INDEX 3)))
  ;; Now we get to write it out finally
  (WITH-OPEN-FILE (STREAM OUTFILE :DIRECTION :OUTPUT :ELEMENT-TYPE '(CL:UNSIGNED-BYTE 16.))
    (LOOP FOR X BEING THE ARRAY-ELEMENTS OF ARRAY
	  DO (FUNCALL STREAM ':TYO X))
    (FUNCALL STREAM ':PATHNAME)))

;;; Given a press type font description, return a font symbol
(DEFUN PRESS-FONT-LGP-FONT-SYMBOL (FONT)
  (INTERN (FORMAT NIL "~A~D~A"
		  (STRING-UPCASE (PRESS:FONT-FAMILY-NAME FONT))
		  (PRESS:FONT-SIZE FONT)
		  (IF (STRINGP (PRESS:FONT-FACE FONT))
		      (PRESS:FONT-FACE FONT)
		      (SELECTOR (PRESS:FONT-FACE FONT) =
			(0 "")
			(1 "I")
			(2 "B")
			(3 "BI")
			(4 "L")
			(5 "LI")
			(6 "C")
			(12. "E"))))
	  SI:PKG-FONTS-PACKAGE))

(DEFUN BFD-WIDTH-INFO (BFD &AUX (MAX-WIDTH NIL) (ALL-WIDTH T))
  (LOOP FOR I FROM 0 BELOW (FED:BFD-FILL-POINTER BFD)
	AS BCD = (AREF BFD I)
	WITH WIDTH
	WHEN BCD
	DO (SETQ WIDTH (FED:BCD-SET-WIDTH BCD))
	   (COND ((NULL MAX-WIDTH) (SETQ MAX-WIDTH WIDTH))
		 (( WIDTH MAX-WIDTH) (SETQ MAX-WIDTH (MAX MAX-WIDTH WIDTH)
					    ALL-WIDTH NIL))))
  (VALUES MAX-WIDTH ALL-WIDTH))

(DEFUN OUTPUT-IXN-STRING (ARRAY CODE STRING)
  (ARRAY-PUSH-EXTEND ARRAY (DPB 1 (BYTE 4. 12.) 12.))	;Type 1, length 12.
  (ARRAY-PUSH-EXTEND ARRAY CODE)		;Code
  (LOOP FOR I FROM 0 BELOW 20.
	WITH HIGH-BYTE = NIL AND LENGTH
	AS BYTE = (COND ((ZEROP I) (SETQ LENGTH (STRING-LENGTH STRING)))
			(( I LENGTH) (CHAR-CODE (AREF STRING (1- I))))
			(T 0))
	DO (IF (NOT (BIT-TEST I 1)) (SETQ HIGH-BYTE BYTE)
	       (ARRAY-PUSH-EXTEND ARRAY (DPB HIGH-BYTE (BYTE 8. 8.) BYTE)))))
