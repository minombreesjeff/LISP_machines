;;; -*- Mode: LISP; Base: 8;  Package: HARDCOPY-INTERNALS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Hardcopy errors (mostly associated with printers for now...)
(DEFFLAVOR HARDCOPY-ERROR
	(PRINTER)
	(ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  (:REQUIRED-INIT-KEYWORDS :PRINTER))

(DEFFLAVOR NONEXISTENT-DEVICE
	()
	(HARDCOPY-ERROR))

(DEFMETHOD (:REPORT NONEXISTENT-DEVICE) (STREAM)
  (FORMAT STREAM "~A, a ~A printer supposedly connected via ~A interface, does not appear to be connected."
	  (SEND PRINTER :PRETTY-NAME)
	  (SEND PRINTER :GET :TYPE)
	  (SEND PRINTER :INTERFACE)))

(DEFFLAVOR DEVICE-NOT-RESPONDING
	((STREAM NIL)
	 STIMULUS-DESCRIPTION
	 EXPECTED-RESPONSE)
	(HARDCOPY-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  (:REQUIRED-INIT-KEYWORDS :STIMULUS-DESCRIPTION :EXPECTED-RESPONSE))

(DEFMETHOD (:REPORT DEVICE-NOT-RESPONDING) (STREAM)
  (FORMAT STREAM "Printer ~A did not respond to ~A.~@
                  It was expected to ~A."
	  (SEND PRINTER :PRETTY-NAME) STIMULUS-DESCRIPTION EXPECTED-RESPONSE))

(DEFFLAVOR IRRECOVERABLE-DEVICE-ERROR
	(DESCRIPTION)
	(HARDCOPY-ERROR)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:REPORT IRRECOVERABLE-DEVICE-ERROR) (STREAM)
  (FORMAT STREAM "Printer ~A has had an irrecoverable error~@[: ~A~].~@
                  Some output destined for it was lost."
	  (SEND PRINTER :PRETTY-NAME)
	  DESCRIPTION))

(DEFFLAVOR NO-SPOOLER-FOR-PRINTER
	()
	(HARDCOPY-ERROR))

(DEFMETHOD (:REPORT NO-SPOOLER-FOR-PRINTER) (STREAM)
  (FORMAT STREAM "No host spools for printer ~A."
	  (SEND PRINTER :PRETTY-NAME)))

;; This condition is used by the printer's serial stream code
;; to signal (usually caught by the printer manager) when 
;; the printer has been "stuck" in Serial-Out or Serial-Finish
;; for longer than the timeout specified on the serial stream.
;; 
;; This is a condition because 1) It's not necessarily an error; lgp2
;; printers may be stuck for long periods of time due to postscript
;; processing. 2) The condition will be handled by the printer manager
;; only (for now). If the print manager is not loaded/running, then 
;; the signalled condition is a noop.
;; 
(DEFFLAVOR DEVICE-OUTPUT-TIMED-OUT
	(PRINTER)
	(CONDITION)
  :INITABLE-INSTANCE-VARIABLES
  :READABLE-INSTANCE-VARIABLES
  (:REQUIRED-INIT-KEYWORDS :PRINTER))


(DEFMETHOD (:REPORT DEVICE-OUTPUT-TIMED-OUT) (STREAM)
  (FORMAT STREAM "The process timed out sending output to Printer ~A. Perhaps ~
  		  the device is stuck." PRINTER))


(DEFMETHOD (:PROCEED DEVICE-OUTPUT-TIMED-OUT :CONTINUE) ()
  "Retry the operation."
  :CONTINUE)


(DEFMETHOD (:DOCUMENT-PROCEED-TYPE DEVICE-OUTPUT-TIMED-OUT :CONTINUE) (STREAM)
  (FORMAT STREAM "Try to continue sending output to the Printer ~A."
	  PRINTER))

(COMPILE-FLAVOR-METHODS NONEXISTENT-DEVICE
			IRRECOVERABLE-DEVICE-ERROR
			DEVICE-NOT-RESPONDING
			NO-SPOOLER-FOR-PRINTER
			DEVICE-OUTPUT-TIMED-OUT)



;;; Hardcopy model terminology:
;;;
;;; Hardcopy protocol
;;;	A set of messages used to create hardcopy output
;;; Hardcopy device
;;;	Where the data representing a hardcopy "job" is sent.
;;;	Typical examples are printers, files, windows etc.
;;;	The function GET-HARDCOPY-DEVICE parses a specification for a hardcopy device and
;;;	returns an object which gets bytes to that device.
;;;	Hardcopy device specifications can be:
;;;		A string - Treated as the name of a printer
;;;		A list of (:WINDOW window)
;;;		A list of (:FILE file-name &optional canonical-type)
;;;			which sends bytes to file-name in format canonical-type.
;;;		:DEBUG - prints messages on terminal-io
;;;		:WINDOW - uses a special window or creates it.
;;; Hardcopy stream
;;;	An object that accepts the hardcopy protocol messages and sends the data
;;;	encoding those messages to a hardcopy device.  This stream translates
;;;	from the hardcopy protocol to a format of data that the device understands.
;;;	The function MAKE-HARDCOPY-STREAM takes a device specification and options,
;;;	and returns a hardcopy stream which will cause data representing the hardcopy
;;;	protocol messages it receives to be sent to the device.
;;; Hardcopy formatter
;;;	A function that takes an input stream, a device, and options, processes data
;;;	from the input-stream and sends hardcopy messages to a hardcopy stream which
;;;	it creates to send output to the device.  A given hardcopy formatter
;;;	usually operates on a certain format of input data (text, press, etc).
;;; Hardcopy option
;;;	A keyword/value pair as specified to the formatter which parameterizes the
;;;	operation of the formatter, the hardcopy stream or the hardcopy device.
;;;
;;; Parse a hardcopy device specification
;;; "foobar" -> printer name
;;; (:FILE "pathname" &optional canonical-type)
;;; (:window &optional window)
;;; (:debug)

(DEFUN GET-HARDCOPY-DEVICE (DEVICE &OPTIONAL (ERROR-P T))
  (TYPECASE DEVICE
    (HARDCOPY-DEVICE-MIXIN DEVICE)
    (:STRING (CONDITION-CASE-IF (NOT ERROR-P) (ERROR)
		 (NET:FIND-OBJECT-NAMED ':PRINTER DEVICE)
	       (NET:OBJECT-NOT-FOUND
		 (FORMAT ERROR-OUTPUT "~&Warning: ~A~%" ERROR))))
    (:SYMBOL
     (SELECTQ DEVICE
       (:WINDOW
	(GET-WINDOW-HARDCOPY-DEVICE))
       (:DEBUG
	(GET-DEBUG-HARDCOPY-DEVICE))
       (OTHERWISE
	(FERROR "Unknown hardcopy device: ~A" DEVICE))))
    (:LIST
     (SELECTQ (CAR DEVICE)
       (:FILE
	(LET* ((PATHNAME (FS:PARSE-PATHNAME (SECOND DEVICE)))
	       (TYPE (OR (THIRD DEVICE)
			 (LET ((CTYPE (SEND PATHNAME :CANONICAL-TYPE)))
			   (AND (SYMBOLP CTYPE) CTYPE))
			 :TEXT))
	       (FLAVOR (GET TYPE :HARDCOPY-FILE-FLAVOR)))
	  (UNLESS FLAVOR
	    (FERROR "File type: ~A unsupported for output" TYPE))
	  (MAKE-INSTANCE FLAVOR :FILENAME PATHNAME :CANONICAL-TYPE TYPE)))
       (:WINDOW
	(GET-WINDOW-HARDCOPY-DEVICE (SECOND DEVICE)))
       (OTHERWISE
	(FERROR "Unknown hardcopy device: ~S" DEVICE))))
    (OTHERWISE
      (FERROR "Unknown hardcopy device: ~S" DEVICE))))

(DEFVAR *SPOOLER-OPTIONS-TO-DEFAULT* '(:TITLE
				      :RECIPIENT
				      :COPIES
				      :REQUESTOR-USER-ID
				      :REQUESTOR-HOST
				      :PRINT-COVER-PAGES
				      :NOTIFY-REQUESTOR
				      :DATA-CREATION-DATE))

(DEFUN MERGE-SPOOLER-OPTIONS-AGAINST-DEFAULTS (SPOOLER-OPTIONS)
  (LET ((DEFAULTED-OPTIONS
	  (LOOP FOR SPOOLER-OPTION IN *SPOOLER-OPTIONS-TO-DEFAULT*
		WHEN (NOT (LOOP FOR (OPTION VALUE) ON SPOOLER-OPTIONS BY #'CDDR
				THEREIS (EQ OPTION SPOOLER-OPTION)))
		  APPEND `(,SPOOLER-OPTION ,(PRINT::GET-REQUEST-PROPERTY-DEFAULT-VALUE SPOOLER-OPTION)))))
    (APPEND SPOOLER-OPTIONS DEFAULTED-OPTIONS)))

(DEFUN MAKE-HARDCOPY-STREAM (DEVICE &REST OPTIONS)
  (SETF DEVICE (GET-HARDCOPY-DEVICE DEVICE))
  (LOOP DOING
    (CATCH-ERROR-RESTART (ERROR "Specify a printer to use instead of ~A." (SEND DEVICE :PRETTY-NAME))
      (RETURN (SEND DEVICE ':MAKE-HARDCOPY-STREAM OPTIONS)))
    (SETQ DEVICE (SCL:ACCEPT 'NET:PRINTER))))

;;; A device for hardcopy output
(DEFFLAVOR HARDCOPY-DEVICE-MIXIN
	((BITMAP-PRINTER-P NIL)
	 DISPLAY-DEVICE-TYPE)
	()
  (:REQUIRED-METHODS :HARDCOPY-STREAM-FLAVOR)
  (:INITABLE-INSTANCE-VARIABLES BITMAP-PRINTER-P DISPLAY-DEVICE-TYPE)
  (:GETTABLE-INSTANCE-VARIABLES BITMAP-PRINTER-P DISPLAY-DEVICE-TYPE)
  (:REQUIRED-INIT-KEYWORDS :DISPLAY-DEVICE-TYPE)) 

(DEFUN EXTRACT-FORMATTER-OPTIONS (OPTIONS)
  (LOOP FOR (OPTION VALUE) ON OPTIONS BY #'CDDR
	FOR HARDCOPY-OPTION = (GET OPTION 'HARDCOPY-OPTION)
	UNLESS HARDCOPY-OPTION
	  DO (FERROR "Unknown hardcopy option: ~A ~A" OPTION VALUE)
	WHEN (MEMQ :FORMATTER (HARDCOPY-OPTION-TYPES HARDCOPY-OPTION))
	  COLLECT OPTION INTO FORMATTER-OPTIONS AND COLLECT VALUE INTO FORMATTER-OPTIONS
	FINALLY (RETURN	FORMATTER-OPTIONS)))

(DEFUN EXTRACT-SPOOLER-OPTIONS (OPTIONS)
  (LOOP FOR (OPTION VALUE) ON OPTIONS BY #'CDDR
	FOR HARDCOPY-OPTION = (GET OPTION 'HARDCOPY-OPTION)
	UNLESS HARDCOPY-OPTION
	  DO (FERROR "Unknown hardcopy option: ~A ~A" OPTION VALUE)
	WHEN (MEMQ :SPOOLER (HARDCOPY-OPTION-TYPES HARDCOPY-OPTION))
	  COLLECT OPTION INTO SPOOLER-OPTIONS AND COLLECT VALUE INTO SPOOLER-OPTIONS
	FINALLY (RETURN	SPOOLER-OPTIONS)))

(DEFINE-HARDCOPY-OPTION :DEFERRED "whether to defer establishing connection" NIL
			:SPOOLER :FORMATTER)

(DEFMETHOD (:MAKE-HARDCOPY-STREAM HARDCOPY-DEVICE-MIXIN) (OPTIONS)
  (LET ((FORMATTER-OPTIONS (EXTRACT-FORMATTER-OPTIONS OPTIONS))
	(SPOOLER-OPTIONS (MERGE-SPOOLER-OPTIONS-AGAINST-DEFAULTS
			   (EXTRACT-SPOOLER-OPTIONS   OPTIONS))))
    ;; Some convoluted code to make sure any "inner" device stream we
    ;; create gets closed in case instantiating the "outer" hardcopy
    ;; protocol stream is aborted.
    (LET ((EXISTING-STREAM (LOOP FOR (OPTION VALUE) ON FORMATTER-OPTIONS
				 THEREIS (AND (EQ OPTION :OUTPUT-STREAM) VALUE)))
	  (DEFERRED (SCL:GETF OPTIONS :DEFERRED)))
      (LET ((S (OR EXISTING-STREAM
		   (IF DEFERRED
		       (MAKE-INSTANCE 'DEFERRED-OPENING-STREAMOID
				      :PRINTER SELF
				      :SPOOLER-OPTIONS SPOOLER-OPTIONS)
		       (SEND SELF :HARDCOPY-DEVICE-STREAM SPOOLER-OPTIONS)))))
	(UNWIND-PROTECT-CASE ()
	    (LEXPR-FUNCALL #'MAKE-INSTANCE
			   (SEND SELF :HARDCOPY-STREAM-FLAVOR FORMATTER-OPTIONS)
			   :ALLOW-OTHER-KEYS T
			   :DEVICE SELF :OUTPUT-STREAM S FORMATTER-OPTIONS)
	  (:ABORT (UNLESS EXISTING-STREAM
		    (SI:CLOSE-OPEN-STREAM S :ABORT))))))))

;;; This seems to be what some people want.
(DEFWHOPPER (:HARDCOPY-STREAM-FLAVOR HARDCOPY-DEVICE-MIXIN) (OPTIONS)
  (OR (GET (LOCF OPTIONS) :HARDCOPY-STREAM-FLAVOR)
      (CONTINUE-WHOPPER OPTIONS)))

(DEFMETHOD (:MULTIPLE-FONT-P HARDCOPY-DEVICE-MIXIN) ()
  NIL)

;;; A device that has multiple-font capability
(DEFFLAVOR MULTIPLE-FONT-HARDCOPY-DEVICE-MIXIN
	((DEFAULT-BODY-CHARACTER-STYLE NIL)
	 (DEFAULT-HEADING-CHARACTER-STYLE NIL))
	(HARDCOPY-DEVICE-MIXIN)
  (:INITABLE-INSTANCE-VARIABLES DEFAULT-BODY-CHARACTER-STYLE DEFAULT-HEADING-CHARACTER-STYLE)
  (:GETTABLE-INSTANCE-VARIABLES DEFAULT-BODY-CHARACTER-STYLE DEFAULT-HEADING-CHARACTER-STYLE))

(DEFMETHOD (:BODY-CHARACTER-STYLE MULTIPLE-FONT-HARDCOPY-DEVICE-MIXIN) ()
  (SEND SELF :GET-CHARACTER-STYLE
	:DEFAULT-BODY-CHARACTER-STYLE DEFAULT-BODY-CHARACTER-STYLE))

(DEFMETHOD (:HEADING-CHARACTER-STYLE MULTIPLE-FONT-HARDCOPY-DEVICE-MIXIN) ()
  (SEND SELF :GET-CHARACTER-STYLE
	:DEFAULT-HEADING-CHARACTER-STYLE DEFAULT-HEADING-CHARACTER-STYLE))

(DEFMETHOD (:GET-CHARACTER-STYLE MULTIPLE-FONT-HARDCOPY-DEVICE-MIXIN :DEFAULT)
	   (PROPERTY-NAME &OPTIONAL CHARACTER-STYLE)
  (OR CHARACTER-STYLE
      (FERROR "No ~A found for device ~A" PROPERTY-NAME SELF)))

(DEFMETHOD (:MULTIPLE-FONT-P MULTIPLE-FONT-HARDCOPY-DEVICE-MIXIN) ()
  T)

;;; Mixin for devices that are files
(DEFFLAVOR HARDCOPY-FILE
	((FILENAME NIL)
	 (CANONICAL-TYPE NIL))
	(HARDCOPY-DEVICE-MIXIN)
  :ABSTRACT-FLAVOR
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:INIT HARDCOPY-FILE :AFTER) (IGNORE)
  (UNLESS (AND FILENAME CANONICAL-TYPE)
    (FERROR "Missing FILENAME or CANONICAL-TYPE in HARDCOPY-FILE"))
  (SETQ FILENAME (FS:MERGE-PATHNAMES
		   FILENAME
		   (SEND (FS:DEFAULT-PATHNAME) ':NEW-CANONICAL-TYPE CANONICAL-TYPE))))

(DEFMETHOD (:TYPE HARDCOPY-FILE) () ':FILE)

(DEFMETHOD (:PRETTY-NAME HARDCOPY-FILE) ()
  (FORMAT NIL "Hardcopy output to file ~A" FILENAME))

(DEFMETHOD (:HARDCOPY-DEVICE-STREAM HARDCOPY-FILE) (SPOOLER-OPTIONS)
  (IGNORE SPOOLER-OPTIONS)
  (LET ((BYTE-SIZE (GET CANONICAL-TYPE :BINARY-FILE-BYTE-SIZE)))
    (OPEN FILENAME
	  :DIRECTION :OUTPUT
	  :CHARACTERS (IF BYTE-SIZE NIL T)
	  :BYTE-SIZE BYTE-SIZE)))

;;; Devices that are windows.
(DEFFLAVOR HARDCOPY-WINDOW ((WINDOW NIL))
	   (MULTIPLE-FONT-HARDCOPY-DEVICE-MIXIN HARDCOPY-DEVICE-MIXIN)
  (:DEFAULT-INIT-PLIST :DEFAULT-BODY-CHARACTER-STYLE '(NIL NIL :SMALLER)
		       :DEFAULT-HEADING-CHARACTER-STYLE '(NIL NIL :SAME)
		       :BITMAP-PRINTER-P T)
  :INITABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:TYPE HARDCOPY-WINDOW) () ':WINDOW)

(DEFMETHOD (:PRETTY-NAME HARDCOPY-WINDOW) ()
  (FORMAT NIL "Hardcopy output to window ~A" WINDOW))

(DEFMETHOD (:HARDCOPY-STREAM-FLAVOR HARDCOPY-WINDOW) (IGNORE)
  'WINDOW-HARDCOPY-STREAM)

(DEFMETHOD (:HARDCOPY-DEVICE-STREAM HARDCOPY-WINDOW) (SPOOLER-OPTIONS)
  (IGNORE SPOOLER-OPTIONS)
  WINDOW)

(DEFVAR *WINDOW-HARDCOPY-DEVICE*)

;;; Useful when debugging
(DEFUN GET-WINDOW-HARDCOPY-DEVICE (&OPTIONAL WINDOW)
  (UNLESS (AND (VARIABLE-BOUNDP *WINDOW-HARDCOPY-DEVICE*)
	       (OR (NULL WINDOW)
		   (EQ *WINDOW-HARDCOPY-DEVICE* WINDOW)))
    (UNLESS WINDOW
      (SETQ WINDOW (TV:MAKE-WINDOW 'TV:WINDOW ':BLINKER-P NIL ':LABEL NIL)))
    (SETQ *WINDOW-HARDCOPY-DEVICE*
	  (MAKE-INSTANCE 'HARDCOPY-WINDOW ':WINDOW WINDOW
			 :DISPLAY-DEVICE-TYPE (SEND WINDOW :DISPLAY-DEVICE-TYPE))))
  *WINDOW-HARDCOPY-DEVICE*)

(DEFFLAVOR DEBUG-HARDCOPY-DEVICE ()
	   (MULTIPLE-FONT-HARDCOPY-DEVICE-MIXIN HARDCOPY-DEVICE-MIXIN)
  (:DEFAULT-INIT-PLIST :DEFAULT-BODY-CHARACTER-STYLE '(:FIX :ROMAN :NORMAL)
		       :DEFAULT-HEADING-CHARACTER-STYLE '(:FIX :BOLD :NORMAL)
		       :BITMAP-PRINTER-P NIL))

(DEFMETHOD (:TYPE DEBUG-HARDCOPY-DEVICE) () ':DEBUG)

(DEFMETHOD (:PRETTY-NAME DEBUG-HARDCOPY-DEVICE) ()
  (FORMAT NIL "Hardcopy debugging stream ~A" SELF)) 

(DEFMETHOD (:HARDCOPY-STREAM-FLAVOR DEBUG-HARDCOPY-DEVICE) (IGNORE)
  'DEBUG-HARDCOPY-STREAM)

(DEFMETHOD (:HARDCOPY-DEVICE-STREAM DEBUG-HARDCOPY-DEVICE) (SPOOLER-OPTIONS)
  (IGNORE SPOOLER-OPTIONS)
  #'SI:NULL-STREAM)

(DEFUN GET-DEBUG-HARDCOPY-DEVICE ()
  (MAKE-INSTANCE 'DEBUG-HARDCOPY-DEVICE
		 ;; +++ Highly Bogus
		 :DISPLAY-DEVICE-TYPE SI:*B&W-SCREEN*))

(COMPILE-FLAVOR-METHODS HARDCOPY-FILE HARDCOPY-WINDOW DEBUG-HARDCOPY-DEVICE)


;;;; Printer objects.

(DEFFLAVOR PRINTER
	((INTERFACE-OPTIONS NIL)
	 (INTERFACE)
	 (CHARACTER-SIZE NIL)
	 (HARDCOPY-INTERNALS:PAGE-SIZE NIL))
	(HARDCOPY-DEVICE-MIXIN NET:OWN-FLAVOR-OBJECT)
  :ABSTRACT-FLAVOR
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:CHANGE-OF-ATTRIBUTES PRINTER) ()
  (SETQ INTERFACE (CL:GETF FLAVOR:PROPERTY-LIST ':INTERFACE)
	;; Mostly for :INTERFACE :SERIAL devices.
	INTERFACE-OPTIONS (LOOP FOR (INDICATOR VALUE)
				IN (CL:GETF FLAVOR:PROPERTY-LIST ':INTERFACE-OPTIONS)
				COLLECT INDICATOR	;global-name
				COLLECT
				;; Serial Units for UX400S are Unix Device specifications
				;; (i.e. unix pathname.) To adapt, any string with
				;; non-digit characters will arbitrally be considered
				;; a unix serial device spec. Any existing unit value
				;; (0 thru 3) with non-digit chars (e.g. #/.) will break.
				  (IF (AND (EQ INDICATOR :UNIT)
					   (CL:FIND-IF #'(LAMBDA (X) (NOT (CL:DIGIT-CHAR-P X)))
						       VALUE))
				      VALUE
				      (SCL:WITH-STANDARD-IO-ENVIRONMENT
					(LET ((SI:*SUPPRESS-READ-EVAL* T))
					  (READ-FROM-STRING VALUE))))
				  ))
  ;; Mostly for :FORMAT :SIMPLE device.
  (LET ((TEM (CL:GETF FLAVOR:PROPERTY-LIST ':CHARACTER-SIZE)))
    (AND TEM (SETQ CHARACTER-SIZE (LIST (PARSE-NUMBER (FIRST TEM) 0 NIL 10. T)
					(PARSE-NUMBER (SECOND TEM) 0 NIL 10. T)))))
  (LET ((TEM (CL:GETF FLAVOR:PROPERTY-LIST ':PAGE-SIZE)))
    (AND TEM (SETQ PAGE-SIZE (LIST (PARSE-NUMBER (FIRST TEM) 0 NIL 10. T)
				   (PARSE-NUMBER (SECOND TEM) 0 NIL 10. T))))))


(DEFMETHOD (:PRETTY-NAME PRINTER) ()
  (STRING (OR (SEND SELF ':GET ':PRETTY-NAME)
	      (SEND SELF ':NAME))))

;;; Return the spooling method given the spooling host's options for a printer.
(DEFUN SPOOLER-OPTIONS-SPOOL-VIA (SPOOLER-OPTIONS)
  (LET ((ELEM (ASSQ :SPOOL-VIA SPOOLER-OPTIONS)))
    (IF ELEM (INTERN (STRING-UPCASE (SECOND ELEM)) "") :NETWORK)))

;;; Return a list of hosts in the same local namespace as the printer
;;; which spool for this printer.  In some priority order: if the local host
;;; is a spooler, it's first.  Else, the host that's connected to the printer comes first.
(DEFUN PRINTER-SPOOLER-HOSTS (PRINTER &KEY (ERROR-P T))
  (STACK-LET ((ATTR `((,PRINTER))))
    (LET* ((SITE (SEND PRINTER :SITE))
	   (NAMESPACE (SEND (SEND PRINTER :NAME) :NAMESPACE))
	   (HOSTS (NET:KEEPING-NAMESPACE-SERVER
		    (NETI:SEARCHING-ONE-NAMESPACE (NAMESPACE)
		      (OR (AND SITE
			       (NETI:SEARCHING-ONE-SITE (SITE)
				 (NET:FIND-OBJECTS-FROM-PROPERTY-LIST
				   :HOST :SPOOLED-PRINTER ATTR)))
			  (NET:FIND-OBJECTS-FROM-PROPERTY-LIST
			    :HOST :SPOOLED-PRINTER ATTR))))))
      (WHEN (AND (NULL HOSTS) ERROR-P)
	(SIGNAL 'NO-SPOOLER-FOR-PRINTER :PRINTER PRINTER))
      (LET ((PREFER (SEND PRINTER :HOST)))
	(WHEN (AND (MEMQ PREFER HOSTS) (NEQ PREFER (FIRST HOSTS)))
	  (SETQ HOSTS (CONS PREFER (REMOVE PREFER HOSTS)))))
      (LET ((PREFER NET:*LOCAL-HOST*))
	(WHEN (AND (MEMQ PREFER HOSTS) (NEQ PREFER (FIRST HOSTS)))
	  (SETQ HOSTS (CONS PREFER (REMOVE PREFER HOSTS)))))
      HOSTS)))

;;; Get a stream which is used to put bytes on the printer, preferring spooled access
;;; to direct access.  If we can't spool, just send it directly to the host that the
;;; printer is attached to, which may be the local host.
;;; Note that this is an 8-bit binary stream, not a character stream.
(DEFMETHOD (:HARDCOPY-DEVICE-STREAM PRINTER) (SPOOLER-OPTIONS)
  (LET ((HOSTS (PRINTER-SPOOLER-HOSTS SELF :ERROR-P NIL)))
    (IF HOSTS
	(LET ((ELEM (SECOND (NETI:NS-ASSQ SELF (SEND (FIRST HOSTS) :SPOOLED-PRINTER)))))
	  (FUNCALL (GET (SPOOLER-OPTIONS-SPOOL-VIA ELEM) 'HARDCOPY-SPOOLER-STREAM-FUNCTION)
		   SELF ELEM SPOOLER-OPTIONS))
	;; No host spools for it, so send it directly to the printer's host
	;; If it is local, the local-hardcopy protocol will do the right thing.
	(LET ((NETI:*INVOKE-SERVICE-AUTOMATIC-RETRY* T))
	  (NET:INVOKE-SERVICE-ON-HOST ':HARDCOPY (SEND SELF ':HOST) SELF SPOOLER-OPTIONS)))))



(DEFFLAVOR BASIC-PRINTER-STREAM
	(PRINTER
	 STATUS-MESSAGE-ROUTING
	 (TIMEOUT-COUNT 0))			; keep track of timeouts per request
	()
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES
  :ABSTRACT-FLAVOR
  (:WRITABLE-INSTANCE-VARIABLES TIMEOUT-COUNT)
  (:REQUIRED-INIT-KEYWORDS :PRINTER :STATUS-MESSAGE-ROUTING))

(DEFMETHOD (RESET-TIMEOUT-COUNTER BASIC-PRINTER-STREAM) ()
  (SETF TIMEOUT-COUNT 0))

(DEFMETHOD (:REPORT-CHANGE-OF-STATE BASIC-PRINTER-STREAM) (STATUS-TYPE DESCRIPTION)
  (SELECTQ (FIRST STATUS-MESSAGE-ROUTING)
    (:PRINTER-MANAGER-NOTIFICATION
     (SEND (SECOND STATUS-MESSAGE-ROUTING)
	   :REPORT-CHANGE-OF-STATE-TO-PRINTER-MANAGER STATUS-TYPE DESCRIPTION))
    (:SCREEN-NOTIFICATION
     (TV:NOTIFY NIL
		(CL:ECASE STATUS-TYPE
		  (:IRRECOVERABLE-DEVICE-ERROR "Irrecoverable error on printer /"~A/": ~A")
		  (:RECOVERABLE-DEVICE-ERROR "Printer /"~A/" needs intervention: ~A")
		  (:OPERATIONAL "Printer /"~A/" is operating again.")
		  (:LOG "Printer /"~A/": ~A"))
		(SEND PRINTER :PRETTY-NAME)
		DESCRIPTION))))

;;; If we have no way of determining whether the printer is connected, assume so.
(DEFMETHOD (:EXISTS-P BASIC-PRINTER-STREAM) ()
  T)

(DEFMETHOD (:INITIALIZE-PRINTER-STREAM BASIC-PRINTER-STREAM) ()
  (UNLESS (SEND SELF :EXISTS-P)
    (SEND SELF :CLOSE :ABORT)
    (SIGNAL 'NONEXISTENT-DEVICE :PRINTER PRINTER)))

(DEFMETHOD (:CLOSE BASIC-PRINTER-STREAM :BEFORE) (&OPTIONAL ABORT-P)
  (UNLESS ABORT-P
    (SEND SELF :FORCE-OUTPUT)
    (SEND SELF :FINISH)))

(DEFFLAVOR BASIC-PRINTER-SERIAL-STREAM
	()
	(BASIC-PRINTER-STREAM)
  :ABSTRACT-FLAVOR
  (:REQUIRED-FLAVORS SERIAL:SERIAL-STREAM)) 

;; We believe a printer is out there if it is asserting Data Terminal Ready.
;; This signal is received on the carrier detect line.
(DEFMETHOD (:EXISTS-P BASIC-PRINTER-SERIAL-STREAM) ()
  (SEND SELF :GET :CARRIER-DETECT))

;; Get-Stream-Timeout returns the output timeout on
;; a stream. The default is no timeout at all.
;; Currently, the only flavor with timeouts is
;; ASCII-TRANSLATING-PRINTER-SERIAL-STREAM.
;;
;; This is only used to get the printer stream's
;; output timeout. Input timeout isn't needed.
;; 
(DEFGENERIC GET-STREAM-TIMEOUT (STREAM)
  (:METHOD (BASIC-PRINTER-STREAM :DEFAULT)
   NIL))

;; Grab the current timeout setting from the stream's interface.
(DEFMETHOD (GET-STREAM-TIMEOUT BASIC-PRINTER-SERIAL-STREAM) ()
  (SEND SELF :GET :TIMEOUT))

(DEFFLAVOR BINARY-PRINTER-SERIAL-STREAM
	()
	(BASIC-PRINTER-SERIAL-STREAM
	 SERIAL:SERIAL-BINARY-STREAM))

(DEFFLAVOR ASCII-TRANSLATING-PRINTER-SERIAL-STREAM
	()
	(BASIC-PRINTER-SERIAL-STREAM
	 SERIAL:SERIAL-CHARACTER-STREAM))

;;; When producing output for devices that want ASCII characters, one sometimes ends up
;;; actually writing to 8-bit LMFS disk buffers (e.g. if the request is spooled).  So,
;;; most such drivers call SI:THIN-CHARACTER-STREAM on such device streams.  This method
;;; handles the case where the device is unspooled and the driver has its actual hands
;;; on the ASCII character stream.
(DEFMETHOD (SI:THIN-CHARACTER-STREAM ASCII-TRANSLATING-PRINTER-SERIAL-STREAM) ()
  SELF)

;; The ELP stream used for printing to hardcopy devices connected by ELP or
;; Centronics interfaces

#||
(DEFFLAVOR BASIC-PRINTER-ELP-STREAM
	()
	(BASIC-PRINTER-STREAM))

(DEFFLAVOR BINARY-PRINTER-ELP-STREAM
	()
	(BASIC-PRINTER-ELP-STREAM
	 SI:BASIC-BINARY-ELP-STREAM))
||#

(COMPILE-FLAVOR-METHODS BASIC-PRINTER-STREAM
			BASIC-PRINTER-SERIAL-STREAM
			BINARY-PRINTER-SERIAL-STREAM
			ASCII-TRANSLATING-PRINTER-SERIAL-STREAM
			;;BASIC-PRINTER-ELP-STREAM
			;;BINARY-PRINTER-ELP-STREAM
			)

(DEFUN GET-HARDCOPY-DEVICE-STREAM
       (INTERFACE-OPTIONS MISC-OPTIONS DEFAULT-INTERFACE-OPTIONS STREAM-MAKER DEFAULT-FLAVOR)
  (LOOP WITH OPTIONS = (APPEND MISC-OPTIONS INTERFACE-OPTIONS)
	FOR (DEFKEY DEFVAL) IN DEFAULT-INTERFACE-OPTIONS
	WHEN (NOT (MEMQ DEFKEY OPTIONS))
	  DO (SETF (CL:GETF OPTIONS DEFKEY) DEFVAL)
	FINALLY (UNLESS (CL:GETF OPTIONS :FLAVOR)
		  (SETF (CL:GETF OPTIONS :FLAVOR) DEFAULT-FLAVOR))
		(RETURN (LEXPR-FUNCALL STREAM-MAKER OPTIONS))))

;;; If you have a foo printer that needs special behavior for any of its interface
;;; types (e.g. the LGP-specific status readback operation) then override this method
;;; with a method on the foo:foo-printer flavor.  (NOT the foo-hardcopy-device-mixin,
;;; otherwise the special behavior will percolate to the foo:foo-hardcopy-file flavor).
(DEFMETHOD (:HARDCOPY-HARDWARE-STREAM PRINTER) (&REST MISC-OPTIONS)
  (SEND SELF :CHECK-VALIDITY)
  (LET ((STREAM NIL))
    (UNWIND-PROTECT-CASE ()
	(SETQ STREAM (SELECTQ (SEND SELF :INTERFACE)
		       (:SERIAL (GET-HARDCOPY-DEVICE-STREAM
				  INTERFACE-OPTIONS
				  MISC-OPTIONS
				  (GET (SEND SELF :GET :TYPE)
				       :DEFAULT-SERIAL-INTERFACE-OPTIONS)
				  #'SI:MAKE-SERIAL-STREAM
				  'BINARY-PRINTER-SERIAL-STREAM))
		       #||
		       (:ELP (GET-HARDCOPY-DEVICE-STREAM
			       NIL
			       MISC-OPTIONS
			       (GET (SEND SELF :GET :TYPE)
				    'DEFAULT-ELP-INTERFACE-OPTIONS)
			       #'SI:MAKE-ELP-STREAM
			       'SI:BINARY-PRINTER-ELP-STREAM))
		       ||#
		       #+IMACH
		       (:APPLETALK (GET-HARDCOPY-DEVICE-STREAM
				     NIL MISC-OPTIONS
				     (GET (SEND SELF :GET :TYPE)
					  'DEFAULT-APPLETALK-INTERFACE-OPTIONS)
				     #'MACINTOSH-INTERNALS::MAKE-PRINTER-VIA-APPLETALK-STREAM
				     'MACINTOSH-INTERNALS::BINARY-PRINTER-APPLETALK-STREAM))
		       (OTHERWISE (SEND SELF :NO-HARDCOPY-HARDWARE-STREAM))))
      (:ABORT (WHEN STREAM (SEND STREAM :CLOSE :ABORT))
       NIL))
    (WHEN STREAM
      ;; Initialize the printer AFTER the stream is built, since it
      ;; may signal an error that will reuse the stream.
      ;; This was previously done in a make-instance whopper (which wasn't right.)
      (SEND STREAM :INITIALIZE-PRINTER-STREAM))
    STREAM))

;;; Implement the overriding of styles in the global *HARDCOPY-DEFAULT-CHARACTER-STYLES*
(DEFMETHOD (:GET-CHARACTER-STYLE PRINTER) (PROPERTY-NAME &OPTIONAL CHARACTER-STYLE)
  (OR (GET (LET* ((NAME (SEND SELF :NAME))	;a namespace name object
		  (QUALIFIED-NAME-STRING (SEND NAME :QUALIFIED-STRING))
		  (NAME-STRING (SEND NAME :STRING)))
	     ;; first look for the qualified name, then for the unqualified
	     (OR (ASS #'STRING-EQUAL QUALIFIED-NAME-STRING *HARDCOPY-DEFAULT-CHARACTER-STYLES*)
		 (ASS #'STRING-EQUAL           NAME-STRING *HARDCOPY-DEFAULT-CHARACTER-STYLES*)))
	   PROPERTY-NAME)
      CHARACTER-STYLE
      (FERROR "No ~A found for device ~A" PROPERTY-NAME (SEND SELF ':PRETTY-NAME))))

(DEFFLAVOR MULTIPLE-FONT-PRINTER ()
	   (MULTIPLE-FONT-HARDCOPY-DEVICE-MIXIN PRINTER))

(DEFMETHOD (:CHANGE-OF-ATTRIBUTES MULTIPLE-FONT-PRINTER) ()
  (LET ((NEW-BCS (CL:GETF FLAVOR:PROPERTY-LIST :DEFAULT-BODY-CHARACTER-STYLE))
	(NEW-HCS (CL:GETF FLAVOR:PROPERTY-LIST :DEFAULT-HEADING-CHARACTER-STYLE)))
    (WHEN NEW-BCS (SETF DEFAULT-BODY-CHARACTER-STYLE NEW-BCS))
    (WHEN NEW-HCS (SETF DEFAULT-HEADING-CHARACTER-STYLE NEW-HCS))))

;;; When a printer doesn't know what to do with an interface.
(DEFMETHOD (:NO-HARDCOPY-HARDWARE-STREAM PRINTER) ()
  (FERROR "Printer ~A is a ~A printer connected via a ~A interface, which is unsupported."
	   (SEND SELF ':PRETTY-NAME) (SEND SELF ':TYPE) (SEND SELF :INTERFACE)))

(DEFFLAVOR ASCII-PRINTER-DISPLAY-DEVICE
	()
	(SI:DISPLAY-DEVICE)) 

(DEFWHOPPER (:GET-MAPPING ASCII-PRINTER-DISPLAY-DEVICE) (CHARSET CHARACTER-STYLE &OPTIONAL INQUIRY-ONLY)
  (IGNORE INQUIRY-ONLY)
  (LET ((SPEC (CONTINUE-WHOPPER CHARSET CHARACTER-STYLE)))
    ;; just a no-op for now
    SPEC))

(COMPILE-FLAVOR-METHODS ASCII-PRINTER-DISPLAY-DEVICE)

(SI:REGISTER-DISPLAY-DEVICE *ASCII-PRINTER* ASCII-PRINTER-DISPLAY-DEVICE) 

(SI:DEFINE-CHARACTER-STYLE-FAMILIES *ASCII-PRINTER* SI:*STANDARD-CHARACTER-SET*
  '(:FAMILY :FIX (:SIZE :NORMAL (:FACE :ROMAN "Placeholder-Font")))) 

(DEFINE-HARDCOPY-FORMAT :ASCII
			"ASCII"
			NIL
			SIMPLE-HARDCOPY-STREAM
			(:TEXT))

(DEFINE-HARDCOPY-DEVICE :ASCII
			:BITMAP-PRINTER-P NIL
			:DISPLAY-DEVICE-TYPE *ASCII-PRINTER*
			:INPUT-FORMATS (:TEXT)
			:OUTPUT-FORMAT :ASCII
			:DEFAULT-SERIAL-INTERFACE-OPTIONS 
			((:BAUD 1200.)
			 (:NUMBER-OF-DATA-BITS 8.)
			 (:XON-XOFF-PROTOCOL T)
			 (:PARITY :EVEN)
			 (:FORCE-OUTPUT NIL)
			 (:FLAVOR ASCII-TRANSLATING-PRINTER-SERIAL-STREAM)))

(DEFMETHOD (:HARDCOPY-STREAM-FLAVOR ASCII-HARDCOPY-DEVICE-MIXIN) (IGNORE)
  'SIMPLE-HARDCOPY-STREAM)

(COMPILE-FLAVOR-METHODS ASCII-HARDCOPY-DEVICE-MIXIN)


(DEFFLAVOR RANDOM-PRINTER () (PRINTER)
  (:DEFAULT-INIT-PLIST :DISPLAY-DEVICE-TYPE *ASCII-PRINTER*))

(DEFMETHOD (:HARDCOPY-STREAM-FLAVOR RANDOM-PRINTER) (&REST IGNORE)
  (FERROR "Don't know how to format hardcopy output for ~S." SELF))

(COMPILE-FLAVOR-METHODS RANDOM-PRINTER)
(NET:DEFINE-NAMESPACE-CLASS-OBJECT-FLAVOR-FUNCTION :PRINTER PRINTER (PLIST)
  (CL:GET (CL:GETF PLIST :TYPE) :PRINTER-TYPE-FLAVOR 'RANDOM-PRINTER))



;;;; Site and network code interfaces

(DEFSTRUCT (HARDCOPY-DEVICE-DEFAULTS :LIST :CONC-NAME)
  SITE						;Previously known site.
  USER-DEFAULT
  LOCAL-HOST-DEFAULT
  SITE-DEFAULT)

(DEFVAR *DEFAULT-TEXT-PRINTER-DEFAULTS* (MAKE-HARDCOPY-DEVICE-DEFAULTS))
(DEFVAR *DEFAULT-BITMAP-PRINTER-DEFAULTS* (MAKE-HARDCOPY-DEVICE-DEFAULTS))

(DEFUN SET-DEFAULT-HARDCOPY-DEVICE-1 (DEFAULTS DEVICE WHERE)
  (UNLESS (EQ (HARDCOPY-DEVICE-DEFAULTS-SITE DEFAULTS) NET:*LOCAL-SITE*)
    ;; If which site is current has changed, presume that any user or
    ;; machine defaults saved out aren't meaningful.  It the same site
    ;; changes itself, leave them alone.
    (SETF (HARDCOPY-DEVICE-DEFAULTS-SITE DEFAULTS) NET:*LOCAL-SITE*)
    (LOOP FOR LIST ON (CDR DEFAULTS)
	  DO (SETF (CAR LIST) NIL)))
  (SETF (NTH (1+ (FIND-POSITION-IN-LIST WHERE '(:USER :HOST :SITE))) DEFAULTS)
	DEVICE)
  (LOOP FOR LIST ON (CDR DEFAULTS)
	THEREIS (CAR LIST)))

(DEFUN SITE-HARDCOPY-INITIALIZE ()
  (SETQ *DEFAULT-TEXT-PRINTER* (SET-DEFAULT-HARDCOPY-DEVICE-1
				    *DEFAULT-TEXT-PRINTER-DEFAULTS*
				    (SEND NET:*LOCAL-SITE* ':DEFAULT-PRINTER)
				    ':SITE))
  (SETQ *DEFAULT-BITMAP-PRINTER* (SET-DEFAULT-HARDCOPY-DEVICE-1
				    *DEFAULT-BITMAP-PRINTER-DEFAULTS*
				    (SEND NET:*LOCAL-SITE* ':DEFAULT-BITMAP-PRINTER)
				    ':SITE))
  (GET-HARDCOPY-DEVICE-ALIST))

(DEFUN SET-DEFAULT-TEXT-PRINTER (DEVICE)
  (SET-DEFAULT-TEXT-PRINTER-2 (GET-HARDCOPY-DEVICE DEVICE NIL)))

(DEFUN SET-DEFAULT-TEXT-PRINTER-2 (DEVICE)
  (DECLARE (SPECIAL ZWEI:*ZMAIL-WINDOW*))
  (SETQ *DEFAULT-TEXT-PRINTER* (SET-DEFAULT-HARDCOPY-DEVICE-1
				    *DEFAULT-TEXT-PRINTER-DEFAULTS* DEVICE ':USER))
  (WHEN (VARIABLE-BOUNDP ZWEI:*ZMAIL-WINDOW*)
    (SEND ZWEI:*ZMAIL-WINDOW* :RESET-HARDCOPY-WHO-LINE-DOCUMENTATION)))

(DEFUN (SET-DEFAULT-TEXT-PRINTER :UNDO-FUNCTION) (IGNORE)
  `(SET-DEFAULT-TEXT-PRINTER-2 ',(HARDCOPY-DEVICE-DEFAULTS-USER-DEFAULT
				      *DEFAULT-TEXT-PRINTER-DEFAULTS*)))

(DEFUN SET-DEFAULT-BITMAP-PRINTER (DEVICE)
  (SET-DEFAULT-BITMAP-PRINTER-1 (GET-HARDCOPY-DEVICE DEVICE NIL)))

(DEFUN SET-DEFAULT-BITMAP-PRINTER-1 (DEVICE)
  (SETQ *DEFAULT-BITMAP-PRINTER* (SET-DEFAULT-HARDCOPY-DEVICE-1
				   *DEFAULT-BITMAP-PRINTER-DEFAULTS* DEVICE ':USER)))

(DEFUN (SET-DEFAULT-BITMAP-PRINTER :UNDO-FUNCTION) (IGNORE)
  `(SET-DEFAULT-BITMAP-PRINTER-1 ',(HARDCOPY-DEVICE-DEFAULTS-USER-DEFAULT
				     *DEFAULT-BITMAP-PRINTER-DEFAULTS*)))

(DEFVAR *LAST-HARDCOPY-DEVICE-LIST* NIL)
(DEFVAR *LAST-HARDCOPY-DEVICE-ALIST* NIL)

(DEFUN GET-HARDCOPY-DEVICE-ALIST ()
  (LET ((LOCAL-PRINTERS (NETI:SEARCHING-ONE-SITE (NET:*LOCAL-SITE*)
			  (NET:FIND-OBJECTS-FROM-PROPERTY-LIST ':PRINTER
							       ':SITE NET:*LOCAL-SITE*))))
    (UNLESS (EQUAL LOCAL-PRINTERS *LAST-HARDCOPY-DEVICE-LIST*)
      (SETQ *LAST-HARDCOPY-DEVICE-ALIST*
	    (COPYLIST (SORTCAR (LOOP FOR PRINTER IN LOCAL-PRINTERS
				     COLLECT (CONS (SEND PRINTER ':PRETTY-NAME)
						   PRINTER))
			       #'STRING-LESSP)))
      (SETQ *LAST-HARDCOPY-DEVICE-LIST* (COPYLIST LOCAL-PRINTERS NETI:NETWORK-CONS-AREA))))
  *LAST-HARDCOPY-DEVICE-ALIST*)

(DEFUN PREFETCH-PRINTERS-AND-THEIR-SPOOLERS ()
  (GET-HARDCOPY-DEVICE-ALIST)
  (NET:KEEPING-NAMESPACE-SERVER
      (DOLIST (PRINTER *LAST-HARDCOPY-DEVICE-LIST*)
	(PRINTER-SPOOLER-HOSTS PRINTER :ERROR-P NIL))))

(ADD-INITIALIZATION "Local hardcopy devices"
		    '(PREFETCH-PRINTERS-AND-THEIR-SPOOLERS)
		    NIL
		    'NETI:COMMONLY-USED-PROPERTY-LISTS)

;;; Allow overriding site default per host.
(DEFUN LOCAL-HOST-HARDCOPY-INITIALIZE ()
  (SETQ *DEFAULT-TEXT-PRINTER* (SET-DEFAULT-HARDCOPY-DEVICE-1
				    *DEFAULT-TEXT-PRINTER-DEFAULTS*
				    (SEND NET:*LOCAL-HOST* ':PRINTER)
				    ':HOST))
  (SETQ *DEFAULT-BITMAP-PRINTER* (SET-DEFAULT-HARDCOPY-DEVICE-1
				   *DEFAULT-BITMAP-PRINTER-DEFAULTS*
				   (SEND NET:*LOCAL-HOST* ':BITMAP-PRINTER)
				   ':HOST)))

(ADD-INITIALIZATION "LOCAL-HOST-HARDCOPY" '(LOCAL-HOST-HARDCOPY-INITIALIZE)
		    '(:NOW) 'NET:LOCAL-NAME-INITIALIZATION-LIST)

(CP:DEFINE-COMMAND (COM-SET-PRINTER :command-table "Printer"
				    :provide-output-destination-keyword nil)
    ((PRINTER 'SYS::PRINTER
	      :DOCUMENTATION
	      "Name of printer on which to do hardcopy by default")
     &KEY
     (OUTPUT-TYPE
       '((CL:MEMBER :BOTH :TEXT :BITMAP) :description "type of output")
       :DEFAULT :BOTH
       :DOCUMENTATION
       "Specifies the type of output to set the printer for:

  Text: output from the Hardcopy File command, and other hardcopy of text;
  Bitmap: output from screen hardcopy, and other graphics;
  Both: both"))
   (LET ((CURRENT-EQ
	   (EQ HARDCOPY:*DEFAULT-TEXT-PRINTER* HARDCOPY:*DEFAULT-BITMAP-PRINTER*))
	 (NEW-TEXT (WHEN (CL:MEMBER OUTPUT-TYPE '(:BOTH :TEXT))
		     (NEQ HARDCOPY:*DEFAULT-TEXT-PRINTER* PRINTER)))
	 (NEW-BITMAP (WHEN (CL:MEMBER OUTPUT-TYPE '(:BOTH :BITMAP))
		       (NEQ HARDCOPY:*DEFAULT-BITMAP-PRINTER* PRINTER))))
     (FLET ((PRINTER-ALREADY-SET (printer text bitmap)
	      (FORMAT T "~& The printer ~A (~A) is already the ~
                 default~:[~; text~]~:[~; and~]~:[~; bitmap~] printer."
		      (send printer :pretty-name)
		      (send printer :type) text (and text bitmap) bitmap))
	    (Printer-currents-set (printer text bitmap remains)
	      (IF printer
		  (FORMAT T "~& The default~:[~; text~]~:[~; and~]~:[~; bitmap~] printer~
			       ~:[ was previously~; is still~] ~A (~A)"
			  text (and text bitmap) bitmap remains
			  (send printer :pretty-name) (send printer :type))
		  (FORMAT T "~& No default~:[~; text~]~:[~; and~]~:[~; bitmap~] printer ~
 			~:[ was previously~; is~] set."
		      text (and text bitmap) bitmap remains)))
	    (printer-now-set (printer text bitmap)
	      (WHEN text
		; gets :Hardcopy File and ZMACS 
		(HARDCOPY:SET-DEFAULT-TEXT-PRINTER PRINTER))
	      (WHEN bitmap
		(HARDCOPY:SET-DEFAULT-BITMAP-PRINTER PRINTER))	; gets FUNCTION-Q
	      (scl:with-character-style ('(nil :italic nil))
		(FORMAT T "~& The printer ~A (~A) is now the default~
			    ~:[~; text~]~:[~; and~]~:[~; bitmap~] printer."
			(send printer :pretty-name)
			(send printer :type) text (and text bitmap) bitmap))
	      (when (and bitmap (null (send printer :bitmap-printer-p)))
		(scl:with-character-style ('(nil :bold nil))
		  (FORMAT T "~& The printer ~A does not currently support bitmap output. ~
			   Bitmap hardcopy operations may fail."
			  (send printer :pretty-name))))))
       (CL:CASE OUTPUT-TYPE
	     (:BOTH
	       (COND ((NULL (OR NEW-TEXT NEW-BITMAP))
		      (printer-already-set printer t t))
		     ((NULL NEW-TEXT)
		      (printer-already-set HARDCOPY:*DEFAULT-TEXT-PRINTER* t nil)
		      (printer-currents-set HARDCOPY:*DEFAULT-BITMAP-PRINTER* nil t nil)
		      (printer-now-set printer nil t))
		     ((NULL NEW-BITMAP)
		      (printer-already-set HARDCOPY:*DEFAULT-BITMAP-PRINTER* nil T)
		      (printer-currents-set HARDCOPY:*DEFAULT-TEXT-PRINTER* t nil nil)
		      (printer-now-set printer t nil))
		     (T
		      (IF CURRENT-EQ
			  (printer-currents-set HARDCOPY:*DEFAULT-TEXT-PRINTER* t t NIL)
			  ;; Current Text  Bitmap
			  (printer-currents-set HARDCOPY:*DEFAULT-TEXT-PRINTER* t nil nil)
			  (printer-currents-set HARDCOPY:*DEFAULT-BITMAP-PRINTER* nil t nil))
		      (printer-now-set printer t t))))
	     (:TEXT
	       (COND ((NULL NEW-TEXT)
		      (printer-already-set printer t nil))
		     (T
		      (Printer-currents-set HARDCOPY:*DEFAULT-TEXT-PRINTER* t nil nil)
		      (printer-now-set printer t nil)))
	       (printer-currents-set HARDCOPY:*DEFAULT-BITMAP-PRINTER* nil t t))
	     (:BITMAP
	       (COND ((NULL NEW-BITMAP)
		      (printer-already-set printer nil t))
		     (T
		      (printer-currents-set HARDCOPY:*DEFAULT-BITMAP-PRINTER* nil t nil)
		      (printer-now-set printer nil t)))
	       (printer-currents-set HARDCOPY:*DEFAULT-TEXT-PRINTER* t nil t)))
   (SI:FRESH-TERPRI)
   (VALUES))))

;;; What are the hardcopy defaults:

(CP:DEFINE-COMMAND (COM-SHOW-PRINTER-DEFAULTS :command-table "Printer"
					      :provide-output-destination-keyword nil)
    ()
   (IF (EQ HARDCOPY:*DEFAULT-TEXT-PRINTER* HARDCOPY:*DEFAULT-BITMAP-PRINTER*)
       (IF (NULL HARDCOPY:*DEFAULT-TEXT-PRINTER*)
	   (FORMAT T "~& No default text or bitmap printer.")
	   (FORMAT T "~& Default printer (for both text and bitmap output): ~A."
		   (SEND HARDCOPY:*DEFAULT-TEXT-PRINTER* :PRETTY-NAME)))
       (IF (NULL HARDCOPY:*DEFAULT-TEXT-PRINTER*)
	   (FORMAT T "~& No default text printer.")
	   (FORMAT T "~& Default text printer: ~A."
		   (SEND HARDCOPY:*DEFAULT-TEXT-PRINTER* :PRETTY-NAME)))
       (IF (NULL HARDCOPY:*DEFAULT-BITMAP-PRINTER*)
	   (FORMAT T "~& No default bitmap printer.")
	   (FORMAT T "~& Default bitmap printer: ~A."
		   (SEND HARDCOPY:*DEFAULT-BITMAP-PRINTER* :PRETTY-NAME))))
   (SI:FRESH-TERPRI)
   (VALUES))

(CP:INSTALL-COMMANDS CP:*GLOBAL-COMMAND-TABLE* '(COM-SET-PRINTER COM-SHOW-PRINTER-DEFAULTS))
