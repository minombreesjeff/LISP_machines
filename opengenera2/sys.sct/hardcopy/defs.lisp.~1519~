;;; -*- Mode: LISP; Base: 10; Package: HARDCOPY-INTERNALS; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;Command tables for use by CP commands related to Hardcopy

(CP::DEFINE-COMMAND-SUBSET *PRINTER-MAINTENANCE-COMMAND-TABLE*	    ; System-level stuff
		       "Printer Maintenance" "Site Administration")

(CP::DEFINE-COMMAND-SUBSET *PRINTER-COMMAND-TABLE*			    ; User-level stuff
		       "Printer")


(defstruct (hardcopy-option (:type :list) :conc-name)
  name						; First for assq
  documentation
  default-value					; Possibly function of output device.
  types)

(defvar *hardcopy-options* nil "List of valid hardcopy options")

(defmacro define-hardcopy-option (name documentation default-value &rest types)
  `(progn
     (let ((option (make-hardcopy-option
		     name ,name
		     documentation ,documentation
		     default-value ,default-value
		     types ',(copylist types)))
	   (tem (assq ,name *hardcopy-options*)))
       (when (record-source-file-name ,name 'define-hardcopy-option)
	 (when tem
	   (setq *hardcopy-options* (delq tem *hardcopy-options*)))
	 (push option *hardcopy-options*)
	 (putprop ',name option 'hardcopy-option)))))

(defmacro define-hardcopy-options (type &body options)
  `(progn 'compile
	  . ,(loop with default-type = (if (listp type)
					   type
					   (list type))
		   for (name documentation default-value) on options by #'cdddr
		   collect `(define-hardcopy-option ,name ,documentation ,default-value
						    . ,default-type))))


;;; Hardcopy formats

(defstruct (hardcopy-format (:type :list) :conc-name)
  name
  documentation
  input-formatter				; Function that reads this format
  input-options					; Options relevant on input
  output-formatter				; Flavor of stream that generates it
  output-options				; Options relevant on output
  canonical-type				; For files containing data in this format
  binary-file-byte-size)			; For files containing data in this format

(defvar *hardcopy-formats* nil "List of valid hardcopy formats")

(defun find-hardcopy-format (name)
  (loop for hardcopy-format in *hardcopy-formats*
	when (eq name (hardcopy-format-name hardcopy-format))
	  return hardcopy-format))

(defmacro define-hardcopy-format (name
				  documentation
				  input-formatter-function
				  output-formatter-flavor
				  canonical-type-info
				  &optional (binary-file-byte-size nil))
  (dlet (((canonical-type default-surface-type . specs) canonical-type-info))
    `(progn (let* ((existing-binary-file-byte-size (get ,canonical-type :binary-file-byte-size))
		   (bfbs (or ,binary-file-byte-size existing-binary-file-byte-size))
		   (hardcopy-format
		     (make-hardcopy-format
		       name ,name
		       documentation ,documentation
		       input-formatter ',(if (listp input-formatter-function)
					     (first input-formatter-function)
					     input-formatter-function)
		       input-options ',(and (listp input-formatter-function)
					    (cdr input-formatter-function))
		       output-formatter ',(if (listp output-formatter-flavor)
					      (first output-formatter-flavor)
					      output-formatter-flavor)
		       output-options ',(and (listp output-formatter-flavor)
					     (cdr output-formatter-flavor))
		       canonical-type ,canonical-type
		       binary-file-byte-size bfbs))
		   (tem (assq ,name *hardcopy-formats*)))
	      (when (record-source-file-name ,name 'define-hardcopy-format)
		(when tem
		  (setq *hardcopy-formats* (delq tem *hardcopy-formats*)))
		(push hardcopy-format *hardcopy-formats*)
		(putprop ',name hardcopy-format :hardcopy-format)
		(when ,default-surface-type
		    (fs:define-canonical-type ,canonical-type ,default-surface-type ,@specs))
		(putprop ,canonical-type ',name :hardcopy-format-for-this-canonical-type)
		;; IWBNI we could do the same type of override-checking as we do for canonical types,
		;; but DEFPROP doesn't store source file names.  Oh well...
		(when bfbs
		  (putprop ,canonical-type bfbs :binary-file-byte-size)))))))

(scl:define-presentation-type hardcopy-format ()
   :history t
   :choose-displayer ((stream object query-identifier &key original-type)
		      (dw:accept-values-choose-from-sequence
			stream *hardcopy-formats* object query-identifier
			:type original-type
			:key #'hardcopy-format-name))
   :parser ((stream &key initially-display-possibilities)
	    (dw:complete-from-sequence
	      *hardcopy-formats* stream
	      :type 'hardcopy-format
	      :name-key #'hardcopy-format-documentation
	      :value-key #'hardcopy-format-name
	      :partial-completers `(#\space)
	      :initially-display-possibilities initially-display-possibilities)))



;;; A macro to bring together all the stuff necessary to define a new type of
;;; printer, with its own data formats
;;; Options are:
;;;	:printer-flavor - defaults to [type]-printer
;;;     :bitmap-printer-p - defaults to NIL
;;;	:multiple-font-p - defaults to NIL
;;;     :display-device-type - defaults to NIL
;;;	:default-body-character-style - defaults to NIL
;;;	:default-heading-character-style - defaults to NIL
;;;     :input-formats - hardcopy formats of stored input understood by this device
;;;     :output-format - hardcopy format of stored output for this device
;;;	:hardcopy-file-flavor - defaults to [type]-hardcopy-file
;;;	:hardcopy-device-mixin - defaults to [type]-hardcopy-device-mixin
;;;     :device-default-init-plist - ???
;;;	:default-serial-interface-options - use ONLY if device can only be attached to
;;;					    a 36xx via serial line
;;;
;;; If the device attached to a 36xx via other than a output-only serial stream,
;;; a :hardcopy-device-stream method must be supplied, and (compile-flavor-methods)
;;; should be called on the printer flavor after all methods are supplied.

(defmacro define-hardcopy-device (device-type &body
				  &key
				  printer-flavor
				  bitmap-printer-p
				  multiple-font-p
				  display-device-type
				  default-body-character-style
				  default-heading-character-style
				  input-formats
				  output-format
				  hardcopy-file-flavor
				  hardcopy-device-mixin
				  device-default-init-plist
				  default-serial-interface-options)
  (let ((pname (get-pname device-type))
	(hardcopy-output-format nil)
	(defaulted-hardcopy-file-flavor nil)
	(defaulted-printer-flavor nil)
	(defaulted-hardcopy-device-mixin nil)
	(hardcopy-stream-flavor nil)
	(canonical-type-for-output nil))
    (unless output-format
      (ferror "You must specify an output format for this hardcopy device."))
    (setf hardcopy-output-format (find-hardcopy-format output-format))
    (setq hardcopy-stream-flavor (hardcopy-format-output-formatter hardcopy-output-format))
    (setq canonical-type-for-output (hardcopy-format-canonical-type hardcopy-output-format))
    (unless (or device-default-init-plist
		(not multiple-font-p)
		(null (or default-body-character-style default-heading-character-style)))
      (setq device-default-init-plist
	    (append (if default-body-character-style
			(list :default-body-character-style default-body-character-style))
		    (if default-heading-character-style
			(list :default-heading-character-style default-heading-character-style)))))
    (unless hardcopy-file-flavor
      (setq hardcopy-file-flavor
	    (intern (string-append pname "-HARDCOPY-FILE"))
	    defaulted-hardcopy-file-flavor t))
    (unless printer-flavor
      (setq printer-flavor (intern (string-append pname "-PRINTER"))
	    defaulted-printer-flavor t))
    (unless hardcopy-device-mixin
      (setq hardcopy-device-mixin (intern (string-append pname "-HARDCOPY-DEVICE-MIXIN"))
	    defaulted-hardcopy-device-mixin t))
    `(progn (when (record-source-file-name ',device-type 'define-hardcopy-device)
	      (putprop ',device-type ',printer-flavor :printer-type-flavor)
	      (putprop ',device-type ',hardcopy-file-flavor :hardcopy-file-flavor)
	      (putprop ',device-type ',input-formats  :input-hardcopy-formats-for-this-device)
	      (putprop ',device-type ',output-format :output-hardcopy-formats-for-this-device)
	      ,@(when default-serial-interface-options
		  `((putprop ',device-type ',default-serial-interface-options
			     :default-serial-interface-options))))
	    ,@(when defaulted-hardcopy-device-mixin
		`((defflavor ,hardcopy-device-mixin ()
			     ,(if multiple-font-p
				  '(multiple-font-hardcopy-device-mixin))
		    ,@(when (or display-device-type device-default-init-plist)
			`((:default-init-plist
			    ,@(when display-device-type
				`(:display-device-type ,display-device-type))
			    ,@device-default-init-plist))))))
	    ,@(when hardcopy-stream-flavor
		`((defmethod (:hardcopy-stream-flavor ,hardcopy-device-mixin) (ignore)
		    ',hardcopy-stream-flavor)))
	    ,@(when defaulted-hardcopy-file-flavor
		`((defflavor ,hardcopy-file-flavor ()
			     ,(list hardcopy-device-mixin 'hardcopy-file)
		    (:default-init-plist
		     :canonical-type ,canonical-type-for-output))))
	    ,@(when defaulted-printer-flavor
		`((defflavor ,printer-flavor ()  ,(list hardcopy-device-mixin
							(if multiple-font-p
							    'multiple-font-printer
							    'printer))
		    ,@(if bitmap-printer-p
			  `((:default-init-plist :bitmap-printer-p ,bitmap-printer-p)))))))))

;;; These are for users to set in init files.
(defvar *hardcopy-default-character-styles* nil)
(defvar *default-text-printer* nil)
(defvar *default-bitmap-printer* nil)
(defvar *background-hardcopy-priority* 0)


;; Gosper's bit-array rotation stuff

(defmacro array-return (array-name)
  `(return-array (prog1 ,array-name (setq ,array-name '()))))

(defmacro with-temporary-array ((array-name array) &body body)
  `(let ((,array-name ,array))
     (prog1 (progn . ,body) (array-return ,array-name))))

(defmacro with-temporary-arrays (name-value-list &body body)
  (if name-value-list
      `(with-temporary-array ,(firstn 2 name-value-list)
	 (with-temporary-arrays ,(rest2 name-value-list) . ,body))
    `(progn . ,body)))

(defsubst next-multiple-of-32 (n)
  (logand (+ n 31.) -32.))

(defsubst previous-multiple-of-32 (n)
  (logand n -32.))

(defun bit-array-rot-90 (width height from-raster from-x from-y
			 &optional (to-raster (make-raster-array
					       (next-multiple-of-32 height) width
					       ':type 'art-1b))
				   (to-x 0) (to-y 0))
  (funcall (if (> height width) #'tall-bit-array-rot-90 #'wide-bit-array-rot-90)
	   width height from-raster from-x from-y to-raster to-x to-y)
  to-raster) 

(defun tall-bit-array-rot-90 (width height from-raster from-x from-y to-raster to-x to-y)
  (when (> width 0)
    (loop with remainder = (\ height width)
	  with right-edge = (+ to-x height)
	  with right-spot = (- right-edge width)
	  for y from remainder by width below height
	  for x = (- right-spot y)
	  do (bitblt tv:alu-seta width width from-raster from-x (+ from-y y)
		     to-raster x to-y)
	     (subsquare-rot-90 width to-raster x to-y)
	  finally (wide-bit-array-rot-90 width remainder
					 from-raster from-x from-y
					 to-raster (- right-edge remainder) to-y)))) 

(defun wide-bit-array-rot-90 (width height from-raster from-x from-y to-raster to-x to-y)
   (when (> height 0)
     (let ((remainder (\ width height)))
       (loop for x from remainder by height below width
	     do (bitblt tv:alu-seta height height from-raster (+ from-x x) from-y
			to-raster to-x (+ to-y x))
		(subsquare-rot-90 height to-raster to-x (+ to-y x)))
       (tall-bit-array-rot-90 remainder height from-raster from-x from-y to-raster to-x to-y))))

(defun subsquare-rot-90 (size raster from-x from-y)
  (horizontal-skew size raster from-x from-y)
  (vertical-skew size raster from-x from-y)
  (horizontal-skew size raster from-x from-y 1)
  raster)

(defun horizontal-skew (size raster from-x from-y &optional (extra-rot 0))
  (with-temporary-array (scratch-row (make-raster-array (next-multiple-of-32 size) 1
				       ':type 'art-1b))
    (loop for row from 0 below size
	  for rot = (\ (+ row extra-rot) size)
	  for y = (+ from-y row)
	  do (bitblt tv:alu-seta rot 1 raster from-x y scratch-row 0 0)
	     (bitblt tv:alu-seta (- size rot) 1 raster (+ from-x rot) y raster from-x y)
	     (bitblt tv:alu-seta rot 1 scratch-row 0 0 raster (+ from-x (- size rot)) y)))
  raster)

(defun vertical-skew (size raster from-x from-y
		      &aux (left-residue (logand from-x #o37))
			   (right-edge (+ from-x size))
			   (from-x-40 (previous-multiple-of-32 from-x))
			   (rounded-width (- (next-multiple-of-32 right-edge) from-x-40))
			   (bottom-edge (+ from-y size)))
  (with-temporary-arrays (scratch-raster (make-raster-array rounded-width size
							    ':type 'art-1b)
			  32b-mask (make-raster-array 32. 1 ':type 'art-1b ':initial-value 1))
    (loop for x from from-x-40 by #o40 below right-edge
	  for local-x = (- x from-x)
	  for y-rotation = (\ (+ local-x (ash size 5)) size)	;fkingfrtrndivide!
	  for offset = left-residue then 0
	  for to-x = from-x then x
	  for width = (min (+ local-x #o40) #o40 (- right-edge to-x))
	  do (bitblt tv:alu-seta #o40 y-rotation raster x (- bottom-edge y-rotation)
		     scratch-raster 0 0)
	     (bitblt tv:alu-seta width (- y-rotation size)
		     raster to-x from-y  raster to-x (+ from-y y-rotation))
	     (bitblt tv:alu-seta width y-rotation scratch-raster offset 0 raster to-x from-y))
    (loop for 2^n = 16. then (ash 2^n -1) until (= 2^n 0)
	  for rotation = (\ 2^n size)
	  do (bitblt tv:alu-seta rounded-width rotation
		     raster from-x-40 (- bottom-edge rotation)  scratch-raster 0 0)
	     (bitblt tv:alu-seta rounded-width (- size rotation) raster from-x-40 from-y
								 scratch-raster 0 rotation)
	     (bitblt tv:alu-xor rounded-width size raster from-x-40 from-y scratch-raster 0 0)
	     (bitblt tv:alu-xor (- 32. 2^n) 1 32b-mask 2^n 0 32b-mask 0 0)
	     (bitblt tv:alu-and rounded-width size 32b-mask 0 0 scratch-raster 0 0)
	     (bitblt tv:alu-xor size size scratch-raster left-residue 0 raster from-x from-y)))
  raster)
