;;; -*- Mode: LISP; Base: 8;  Package: HARDCOPY-INTERNALS -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(DEFUN PRINT-DEVICE-STATUS (&OPTIONAL (DEVICES ':ALL))
  (IF (EQ DEVICES ':ALL)
      (SETQ DEVICES (NET:FIND-OBJECTS-FROM-PROPERTY-LIST ':PRINTER ':SITE NET:*LOCAL-SITE*))
      (UNLESS (LISTP DEVICES) (SETQ DEVICES (LIST DEVICES)))
      (SETQ DEVICES (LOOP FOR DEVICE IN DEVICES
			  WHEN (TYPEP DEVICE 'PRINTER)
			    COLLECT DEVICE
			  ELSE COLLECT (NET:FIND-OBJECT-NAMED :PRINTER DEVICE))))
  (LET (HOSTS FUNCTIONS ARGS)
    (LOOP FOR DEVICE IN DEVICES
	  AS (SPOOLER-HOST SPOOLER-FUNCTION SPOOLER-ARG) = NIL
	  DO (LET ((HOST (FIRST (PRINTER-SPOOLER-HOSTS DEVICE :ERROR-P NIL))))
	       (WHEN HOST
		 (SETQ SPOOLER-HOST HOST)
		 (LET ((ELEM (SECOND (NETI:NS-ASSQ DEVICE (SEND HOST ':SPOOLED-PRINTER)))))
		   (LET ((SPOOLER-TYPE (SPOOLER-OPTIONS-SPOOL-VIA ELEM)))
		     (SETQ SPOOLER-FUNCTION (GET SPOOLER-TYPE
						 'HARDCOPY-SPOOLER-STATUS-FUNCTION)
			   SPOOLER-ARG (AND SPOOLER-FUNCTION
					    (FUNCALL SPOOLER-FUNCTION ':POSSIBLE DEVICE
										 ELEM)))))))
	  WHEN SPOOLER-ARG
	    COLLECT DEVICE INTO SPOOLED-DEVICES
	  AND COLLECT SPOOLER-HOST INTO SPOOLER-HOSTS
	  AND COLLECT SPOOLER-FUNCTION INTO SPOOLER-FUNCTIONS
	  AND COLLECT SPOOLER-ARG INTO SPOOLER-ARGS
	  FINALLY (SETQ DEVICES SPOOLED-DEVICES
			HOSTS SPOOLER-HOSTS
			FUNCTIONS SPOOLER-FUNCTIONS
			ARGS SPOOLER-ARGS))
    (LOOP FOR HOST IN HOSTS
	  FOR DEVICE IN DEVICES
	  FOR FUNCTION IN FUNCTIONS
	  FOR ARG IN ARGS
	  WHEN ARG
	    DO (FORMAT T "~&Status of ~A~@[ (from ~A)~]:"
		       (SEND DEVICE ':PRETTY-NAME) (SEND HOST :PRETTY-NAME))
	       (FUNCALL FUNCTION ':INVOKE DEVICE ARG))))

;;; Get hardcopy service from the local machine.
;;; The printer must be either one we are spooling for or one that
;;; is directly attached to us through an interface.
;;; Use a spooler if it exists, otherwise go direct to the device.
;;; We return a stream which can be written to, which will eventually
;;; or immediately get to the device.
;;; Note that the ':hardcopy-request message returns NIL if the request can not be accepted
;;; by any device.  A better error reporting scheme may exist...
(NET:DEFINE-PROTOCOL :LOCAL-HARDCOPY (:HARDCOPY :LOCAL)
  ;; Low desirability so that :local-printer-queue-hardcopy will be preferred.
  (:DESIRABILITY 0.5)
  (:INVOKE (SERVICE)
    (LET* ((ARGS (NETI:SERVICE-ACCESS-PATH-ARGS SERVICE))
	   (PRINTER (FIRST ARGS))
	   (OPTIONS (SECOND ARGS))
	   (HOST (GET (LOCF OPTIONS) ':HOST)))
      (COND ((AND HOST
		  (NEQ HOST NET:*LOCAL-HOST*)
		  (NETI:NS-ASSQ PRINTER (SEND NET:*LOCAL-HOST* :SPOOLED-PRINTER)))
	     (FERROR "No spooler running for spooled printer ~A" (SEND PRINTER :PRETTY-NAME)))
	    ;; No spooling, but printer is locally attached.
	    ;; Note that any options are ignored.   This may not be the best thing.
	    ((EQ NET:*LOCAL-HOST* (SEND PRINTER :HOST))
	     (SEND PRINTER :HARDCOPY-HARDWARE-STREAM
		   :STATUS-MESSAGE-ROUTING '(:SCREEN-NOTIFICATION)
		   :PRINTER PRINTER))
	    (T
	     (FERROR "Hardcopy requested of printer ~A which is neither directly attached nor ~
		     spooled on this host (~A)"
		     (SEND PRINTER :PRETTY-NAME) NET:*LOCAL-HOST*)))))) 


;;; Conditions

(DEFFLAVOR HARDCOPY-SPOOLER-NETWORK-ERROR ()
	   (FUTURE-COMMON-LISP:SIMPLE-ERROR HARDCOPY-ERROR SYS:NETWORK-ERROR))

(COMPILE-FLAVOR-METHODS HARDCOPY-SPOOLER-NETWORK-ERROR)

(CL:PUSHNEW 'HARDCOPY-SPOOLER-NETWORK-ERROR DBG:*STANDARD-MENU-PROCEED-CONDITIONS*)
(CL:PUSHNEW 'HARDCOPY-SPOOLER-NETWORK-ERROR DBG:*MENU-PROCEED-CONDITIONS*)

(DEFUN HARDCOPY-SPOOLER-NETWORK-ERROR (FORMAT-CONTROL PRINTER &REST MORE-FORMAT-ARGUMENTS)
  (ERROR 'HARDCOPY-SPOOLER-NETWORK-ERROR
	 :PRINTER PRINTER
	 :FORMAT-CONTROL FORMAT-CONTROL
	 :FORMAT-ARGUMENTS (CONS PRINTER (COPYLIST MORE-FORMAT-ARGUMENTS))))


;;; Streams to spooled printers, depending on the spooling type.

(DEFUN (:FILE HARDCOPY-SPOOLER-STREAM-FUNCTION) (DEVICE HOST-OPTIONS REQUEST-OPTIONS)
  DEVICE REQUEST-OPTIONS
  (LET ((FILE-NAME (SECOND (ASSQ ':FILE-NAME HOST-OPTIONS))))
    (OPEN FILE-NAME ':DIRECTION ':OUT ':CHARACTERS NIL ':BYTE-SIZE 8)))

(DEFUN (:ASCII-FILE HARDCOPY-SPOOLER-STREAM-FUNCTION) (DEVICE HOST-OPTIONS REQUEST-OPTIONS)
  DEVICE REQUEST-OPTIONS
  (LET ((FILE-NAME (SECOND (ASSQ ':FILE-NAME HOST-OPTIONS))))
    (OPEN FILE-NAME ':DIRECTION ':OUT)))

(DEFUN (:ITS-DOVER HARDCOPY-SPOOLER-STREAM-FUNCTION) (DEVICE HOST-OPTIONS REQUEST-OPTIONS)
  DEVICE REQUEST-OPTIONS
  (LET ((FILE-NAME (SECOND (ASSQ ':FILE-NAME HOST-OPTIONS))))
    (OPEN (SEND (FS:MERGE-PATHNAMES FILE-NAME)
		':NEW-PATHNAME ':NAME USER-ID ':CANONICAL-TYPE ':TEXT ':VERSION ':NEWEST)
	  ':DIRECTION ':OUT ':CHARACTERS NIL ':BYTE-SIZE 8)))

(DEFSELECT ((:PROPERTY :ITS-DOVER HARDCOPY-SPOOLER-STATUS-FUNCTION))
  (:POSSIBLE (DEVICE SPOOLER-OPTIONS)
   DEVICE
   (SECOND (ASSQ ':STATUS-FILE-NAME SPOOLER-OPTIONS)))
  (:INVOKE (IGNORE FILE)
   (VIEWF FILE)))

(DEFUN (:GOULD HARDCOPY-SPOOLER-STREAM-FUNCTION) (DEVICE HOST-OPTIONS REQUEST-OPTIONS)
  DEVICE
  (LET ((FILE-NAME (SEND (FS:MERGE-PATHNAMES (SECOND (ASSQ ':FILE-NAME HOST-OPTIONS)))
			 ':NEW-PATHNAME ':TYPE "TEXT" ':VERSION ':NEWEST)))
    (IF (GET (LOCF REQUEST-OPTIONS) ':BITMAP-ONLY-P)
	(OPEN (SEND FILE-NAME ':NEW-NAME (LET* ((STR (SEND FILE-NAME ':NAME))
						(STIDX (STRING-REVERSE-SEARCH-NOT-CHAR #/*
										       STR)))
					   (STRING-APPEND (SUBSTRING STR 0
								     (IF STIDX (1+ STIDX) 0))
							  "SCN")))
	      ':DIRECTION ':OUT ':CHARACTERS NIL)
	(FERROR "Text to Gould not supported yet."))))

(DEFUN FIND-PATH-FOR-SERVICE-ON-HOST-USING-SPECIAL-PROTOCOL (HOST SERVICE-NAME SPECIAL-PROTOCOL)
  (LET* ((SPECIAL-PROTOCOL-NAME (NETI:INTERN-GLOBAL-NAME SPECIAL-PROTOCOL))
	 (PATHS (NETI:FIND-PATHS-TO-SERVICE-ON-HOST :HARDCOPY HOST)))
    (LOOP FOR PATH IN PATHS
	  FOR PATH-PROTOCOL-NAME = (NETI:PROTOCOL-NAME (NETI:SERVICE-ACCESS-PATH-PROTOCOL PATH))
	  WHEN (EQ PATH-PROTOCOL-NAME SPECIAL-PROTOCOL-NAME) DO (RETURN PATH)
	  FINALLY (FORMAT T "Can't find path to ~A service on ~A using ~A"
			  SERVICE-NAME HOST SPECIAL-PROTOCOL))))

(DEFUN (:NETWORK HARDCOPY-SPOOLER-STREAM-FUNCTION) (DEVICE IGNORE REQUEST-OPTIONS)
  (LET ((PATHS
	  (OR (LOOP FOR HOST IN (PRINTER-SPOOLER-HOSTS DEVICE :ERROR-P NIL)
		    WHEN (LET* ((ELEM (NETI:NS-ASSQ DEVICE (SEND HOST ':SPOOLED-PRINTER)))
				(SPECIAL-PROTOCOL (SECOND (ASSQ ':PROTOCOL (SECOND ELEM)))))
			   (CONDITION-CASE ()
				(IF SPECIAL-PROTOCOL
					(LIST (FIND-PATH-FOR-SERVICE-ON-HOST-USING-SPECIAL-PROTOCOL
						HOST :HARDCOPY SPECIAL-PROTOCOL))
				    (NETI:FIND-PATHS-TO-SERVICE-ON-HOST ':HARDCOPY HOST))
			      (SYS:NETWORK-ERROR NIL)))
		      APPEND IT)
	      (LET* ((DIRECT-HOST (SEND DEVICE ':HOST))
		     (SPECIAL-PROTOCOLS (SEND DEVICE ':PROTOCOL)))
 	             (IF SPECIAL-PROTOCOLS
			   (LOOP FOR SPECIAL-PROTOCOL IN SPECIAL-PROTOCOLS
                                 FOR PATH =  (FIND-PATH-FOR-SERVICE-ON-HOST-USING-SPECIAL-PROTOCOL
					       DIRECT-HOST :HARDCOPY SPECIAL-PROTOCOL)
                                 WHEN PATH DO (RETURN (LIST PATH)))
			   (NETI:FIND-PATHS-TO-SERVICE-ON-HOST ':HARDCOPY DIRECT-HOST))))))
    (UNLESS PATHS (HARDCOPY-SPOOLER-NETWORK-ERROR "Can't determine a path to ~A" DEVICE))
    (SETQ PATHS (STABLE-SORT PATHS #'NETI:SERVICE-ACCESS-PATH-DESIRABILITY-GREATERP))
    (LOOP FOR PATH IN PATHS
	  WITH ERRORS = `()
	  FOR STREAM = (CONDITION-CASE (ERROR)
			    (NETI:INVOKE-SERVICE-ACCESS-PATH PATH (LIST DEVICE REQUEST-OPTIONS))
			  (SYS:NETWORK-ERROR
			    (PUSH `(,PATH ,ERROR) ERRORS)
			    NIL))
	  WHEN STREAM DO (RETURN STREAM)
	  FINALLY (HARDCOPY-SPOOLER-NETWORK-ERROR
		    "Couldn't get hardcopy service for ~A by any path:~@
~:{~&  ~S:~%      ~~A~~}" DEVICE ERRORS))))

(DEFSELECT ((:NETWORK HARDCOPY-SPOOLER-STATUS-FUNCTION))
  (:POSSIBLE (DEVICE IGNORE)
   (CONDITION-CASE ()
	(LOOP FOR HOST IN (PRINTER-SPOOLER-HOSTS DEVICE)
	      THEREIS (LET* ((ELEM (NETI:NS-ASSQ DEVICE (SEND HOST ':SPOOLED-PRINTER)))
			     (SPECIAL-PROTOCOL (SECOND (ASSQ ':STATUS-PROTOCOL (SECOND ELEM)))))
			(CONDITION-CASE ()
			     (IF SPECIAL-PROTOCOL
				 (FIND-PATH-FOR-SERVICE-ON-HOST-USING-SPECIAL-PROTOCOL
				   HOST :HARDCOPY-STATUS SPECIAL-PROTOCOL)
				 (NETI:FIND-PATH-TO-SERVICE-ON-HOST ':HARDCOPY-STATUS HOST))
			   (SYS:NETWORK-ERROR NIL))))
      (HARDCOPY:NO-SPOOLER-FOR-PRINTER NIL)))
  (:INVOKE (DEVICE SERVICE)
    (CONDITION-CASE (ERROR)
	 (NET:INVOKE-SERVICE-ACCESS-PATH SERVICE (LIST DEVICE))
       (SYS:NETWORK-ERROR
	 (FORMAT T "~&Error getting status of ~A: ~&  ~~A~~%" (SEND DEVICE :PRETTY-NAME) ERROR)))))
