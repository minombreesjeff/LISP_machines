;;; -*- Mode: LISP; Package: HCI; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(dw::define-template-helper define-hardcopy-screen-source *hardcopy-screen-sources*)
(dw::define-template-helper define-hardcopy-screen-destination *hardcopy-screen-destinations*
  :other-properties (:temporary-ok :multi-bit-ok))
(dw::define-template-helper define-hardcopy-screen-trigger *hardcopy-screen-triggers*)

(define-hardcopy-screen-source :whole-screen
  :printer "the entire screen and who lines"
  :value (() `(,(tv:console-screen sys:*console*)
	       :adjoining-window ,(tv:console-who-line-screen sys:*console*)
	       :margins nil)))

(define-hardcopy-screen-source :main-screen
  :printer "the screen without the who lines"
  :value (() `(,(tv:console-screen sys:*console*) :margins nil)))

(define-hardcopy-screen-source :selected-window
  :printer "the selected activity's window or frame"
  :value (()
	  (let ((sw (sys:console-selected-window sys:*console*)))
	    (when sw
	      (list (send sw :alias-for-selected-windows))))))

(define-hardcopy-screen-source :mouse-window
  :prompt "Window under mouse"
  :printer "the window under the mouse"
  :value (()
	  (let ((window (tv:window-under-mouse-internal (sys:console-mouse sys:*console*))))
	    (and window (list window)))))

(define-hardcopy-screen-source :who-line
  :prompt "Status area"
  :printer "the status line and mouse documentation lines"
  :when (() (not (null (tv:console-who-line-screen sys:*console*))))
  :value (() (list (tv:console-who-line-screen sys:*console*) :margins nil)))

(define-hardcopy-screen-source :rectangle
  :prompt "Specify rectangle"
  :printer "a rectangle specified with the mouse"
  :value (()
	  (tv:console-end-selection-input-hold)	;Need the shift keys
	  (let* ((mouse (sys:console-mouse sys:*console*))
		 (sheet (tv:mouse-sheet mouse))
		 (box (let ((mouse-x (sys:mouse-x mouse))
			    (mouse-y (sys:mouse-y mouse)))
			(dw:make-box mouse-x mouse-y (+ mouse-x 100) (+ mouse-y 100)))))
	    (setq box (tv:mouse-reshape-rectangle :initial-box box :abortable t :sheet sheet))
	    (when box
	      `(,sheet :width ,(dw::box-width box) :height ,(dw::box-height box)
		;; :margins nil, so inside coordinates.
		:left ,(- (dw:box-left box) (tv:sheet-left-margin-size sheet))
		:top ,(- (dw:box-top box) (tv:sheet-top-margin-size sheet))
		:margins nil)))))

;;; Let's you squeeze in more than a screenful.
(define-hardcopy-screen-source :output-history
  :prompt "Window history"
  :documentation "Take a window's entire output history, even if multiple screenfuls"
  :reader ((stream &key window)
	   (list :window
		 (scl:accept 'dw:dynamic-window
			     :prompt "  Window" :stream stream
			     :default (or window
					  (loop for window being the array-elements of
						    tv:previously-selected-windows
						when (typep window 'dw:dynamic-window)
						  return window)))) )
  :printer ((stream &key window)
	    (format stream "window history of ~A" window))
  :value ((&key window)
	  (multiple-value-bind (image width height)
	      (send window :output-history-as-bitmap)
	    (list image :width width :height height))))

(define-hardcopy-screen-destination :printer
  :documentation "Print on a hardcopy printer or to a hardcopy record file"
  :reader ((stream &key (printer *default-bitmap-printer*) zoom orientation)
	   (let ((printer (scl:accept '((scl:token-or-type (:file) sys:printer))
				      :prompt "  Printer" :stream stream
				      :default printer)))
	     (when (eq printer :file)
	       (setq printer (get-hardcopy-device
			       (list :file (scl:accept 'scl:pathname
						       :default (send (fs:user-homedir)
								      :new-pathname
								      :name "SCREEN"
								      :type :lgp2)
						       :prompt "  Record file"
						       :stream stream)))))
	     (list :printer printer
		   :zoom (if (and printer (eq (send printer :type) :lgp2))
			     (scl:accept scl:'((token-or-type (("Best-fit" . nil)) integer))
					 :prompt "  Scale factor" :stream stream
				         :default zoom)
			     ;; Other kinds of printers have an incompatible calling sequence
			     ;; for :show-bitmap.
			     )
		   :orientation (when printer
				  (scl:accept '((scl:member :landscape :portrait :best-fit))
					      :prompt "  Orientation" :stream stream
					      :default (or orientation :best-fit))))))
  :printer ((stream &key (printer *default-bitmap-printer*)
		         (orientation :best-fit) zoom)
	    (when (null printer)
	      (throw 'call-helper-abort nil))
	    (format stream "~A" printer)
	    (unless (eq orientation :best-fit)
	      (format stream " orientation ~(~A~)" orientation))
	    (when zoom
	      (format stream " zoom factor ~D" zoom)))
  :temporary-ok t
  :multi-bit-ok t
  :value ((image &rest args
		 &key (printer *default-bitmap-printer*)
		 &allow-other-keys)
	  (when (null printer)
	    (throw 'call-helper-abort nil))
	  (si:with-rem-keywords (some-args args '(:printer))
	    (cl:apply #'hardcopy-image image printer some-args))))

(define-hardcopy-screen-trigger :mode-lock
  :documentation "Wait until the MODE LOCK key is depressed before snapshotting"
  :printer " after MODE LOCK is depressed"
  :value (() (process-wait "Mode lock" #'dbg:when-mode-lock-internal)))

(define-hardcopy-screen-trigger :time
  :prompt "Time delay"
  :documentation "Wait a specified amount of time before snapshotting"
  :printer ((stream delay)
	    (format stream " after waiting ")
	    (scl:present delay 'time:time-interval :stream stream))
  :reader ((stream &optional (delay 5))
	   (list (scl:accept 'time:time-interval :prompt "  Delay" :stream stream
			     :default delay)))
  :value ((delay) (cl:sleep delay)))

(define-hardcopy-screen-trigger :none)

(defvar *hardcopy-screen-default*
  '((:whole-screen) (:printer)))

(defvar tv:*screen-hardcopy-announcement* :beep)

(defun hardcopy-screen (&optional arg)
  (when arg
    (destructuring-bind (source destination
			 &key (close-blinkers nil)
			      (announcement tv:*screen-hardcopy-announcement*)
			      (trigger '(:none)))
			*hardcopy-screen-default*
      (let ((tv:*asynchronous-window-operation* nil))	;We know what we're doing.
	(dw:accepting-values (t :own-window t
				:superior (tv:mouse-sheet (sys:console-mouse sys:*console*))
				:label "Screen hardcopy"
				:resynchronize-every-pass t)
	  (setq source (dw::call-helper-accept source "Source" *hardcopy-screen-sources*
					       "Take "))
	  (unless (eq (first source) :output-history)
	    (setq close-blinkers (scl:accept 'scl:boolean
					     :prompt "Include blinkers and mouse cursor"
					     :default close-blinkers)))
	  (setq destination (dw::call-helper-accept destination "Destination"
						    *hardcopy-screen-destinations*
						    "Copy image to "))
	  (setq announcement (scl:accept '((scl:null-or-type ((scl:member :beep :flash))))
					 :default announcement
					 :prompt "Announcement method"))
	  (setq trigger (dw::call-helper-accept trigger "Shutter trigger"
						*hardcopy-screen-triggers*)))
      (setq *hardcopy-screen-default* (list source destination
					    :close-blinkers close-blinkers
					    :announcement announcement
					    :trigger trigger)))))
  (block noerror
    (catch 'call-helper-abort
      (return-from noerror
	(apply #'hardcopy-screen-1 *hardcopy-screen-default*)))
    (beep)))

(defun hardcopy-screen-1 (source destination &rest args
					     &key (trigger '(:none)) &allow-other-keys)
  (declare (arglist source destination
		    &key (close-blinkers nil)
			 (announcement tv:*screen-hardcopy-announcement*)
			 (trigger '(:none))))
  (dw::call-helper-value trigger *hardcopy-screen-triggers*)
  (let ((copy-args (dw::call-helper-value source *hardcopy-screen-sources*)))
    (when (null copy-args)
      (return-from hardcopy-screen-1 nil))
    (setq copy-args (append copy-args
			    (si:rem-keywords args '(:trigger))
			    (list :temporary-ok
				    (dw::get-helper-property destination
							     *hardcopy-screen-destinations*
							     :temporary-ok)
				  :multi-bit-ok
				    (dw::get-helper-property destination
							     *hardcopy-screen-destinations*
							     :multi-bit-ok))))
    (multiple-value-bind (image options temporary-p)
	(cl:apply #'copy-screen-image copy-args)
      (unwind-protect
	  (cl:apply #'dw::call-helper-value destination *hardcopy-screen-destinations*
		    image options)
	(when temporary-p
	  (tv:deallocate-temp-sheet-raster-and-header image))))))

(defun copy-screen-image (window &key (margins t)
				      (adjoining-window nil)
				      (close-blinkers nil)
				      (announcement tv:*screen-hardcopy-announcement*)
				      (left 0) (top 0) width height
				      temporary-ok multi-bit-ok)
  (declare (values image options temporary-p))
  (when (arrayp window)
    (let ((options nil))
      (when width
	(cl:setf (cl:getf options :width) width))
      (when height
	(cl:setf (cl:getf options :height) height))
      (return-from copy-screen-image
	(values window options nil))))
  (multiple-value-bind (total-width total-height)
      (send window (if margins :size :inside-size))
    (when (null width)
      (setq width total-width))
    (when (null height)
      (setq height total-height)))
  (let ((total-height height))
    ;; Allocate space for the who-line screen.
    (when adjoining-window
      (incf total-height (send adjoining-window (if margins :height :inside-height))))
    (let* ((sheet-type (tv:sheet-array-type window))
	   (copy-type (if multi-bit-ok sheet-type 'art-1b))
	   (bit-reduce (neq sheet-type copy-type))
	   (rounded-width (tv:raster-width-for-bitblt width copy-type))
	   (copy-array (stack-let ((dims (list total-height rounded-width)))
			 (if temporary-ok
			     (tv:allocate-temp-sheet-raster-and-header dims :type copy-type)
			     (make-array dims :type copy-type)))))
      (when (eq announcement :flash)
	(tv:complement-bow-mode))
      (tv:prepare-sheet (window)
	(when close-blinkers
	  (let* ((mouse (tv:sheet-mouse window))
		 (blinker (tv:mouse-blinker mouse)))
	    (tv:mouse-halt-fast-tracking mouse)
	    (setf (send blinker :visibility) t)
	    (setf (tv:mouse-reconsider mouse) t))
	  (labels ((close-blinkers (sheet)
		     (dolist (blinker (tv:sheet-blinker-list sheet))
		       (when (and (member (tv:blinker-visibility blinker)
					  '(:blink t :on))
				  (null (tv:blinker-phase blinker)))
			 (tv:blink blinker)))
		     (dolist (inferior (tv:sheet-exposed-inferiors sheet))
		       (close-blinkers inferior))))
	    (close-blinkers (tv:sheet-screen window))))
	(unless margins
	  (multiple-value-bind (x-offset y-offset)
	      (send window :margins)
	    (incf left x-offset)
	    (incf top y-offset)))
	(if bit-reduce
	    (tv:sheet-read-1-bit-raster width height nil left top copy-array 0 0 window)
	    (tv:sheet-bitblt cl:boole-1 width height nil left top copy-array 0 0 window)))
      (when adjoining-window
	(multiple-value-bind (x-offset y-offset)
	    (if margins
		(values 0 0)
		(send adjoining-window :margins))
	  (tv:prepare-sheet (adjoining-window)
	    (if bit-reduce
		(tv:sheet-read-1-bit-raster width (- total-height height)
					    nil x-offset y-offset
					    copy-array 0 height adjoining-window)
		(tv:sheet-bitblt cl:boole-1 width (- total-height height)
				 nil x-offset y-offset
				 copy-array 0 height adjoining-window)
		))))
      (cl:case announcement
	(:beep (tv:beep))
	(:flash (tv:complement-bow-mode)))

      (let ((options (list :width width :height total-height)))

	(unless bit-reduce
	  (cl:case (color:color-stream-p window)
	    (:local
	      (when (variable-boundp #'images:make-color-map)
		(let ((color-map (images:make-color-map)))
		  (send color-map :read-screen-map (send window :screen))
		  (cl:setf (cl:getf options :color-map) color-map))))))

	(values copy-array options temporary-ok)))))

(defun hardcopy-image (image &optional (printer *default-bitmap-printer*)
			     &key width height zoom (title "Screen Hardcopy")
				  (orientation :best-fit) (attempt-rle nil)
				  (color-map nil))
  (unless (and width height)
    (multiple-value-bind (rwidth rheight)
	(decode-raster-array image)
      (unless width (setq width rwidth))
      (unless height (setq height rheight))))
  (with-open-stream (stream (make-hardcopy-stream printer :bitmap-only-p t
							  :title title))
    (when (eq orientation :best-fit)
      (setq orientation (multiple-value-bind (pwidth pheight)
			    (send stream :inside-size :pixel)
			  (cond ((and (< width pwidth) (< height pheight))
				 :portrait)	; Screen copy fits unrotated
				((and (< width pheight) (< height pwidth))
				 :landscape)	; Screen copy fits sideways
				((or (and (< width height)
					  (< pheight pwidth))
				     (and (< height width)
					  (< pwidth pheight)))
				 :landscape)
				(t :portrait)))))
    (when attempt-rle
      (send-if-handles stream :set-run-length-encode-images t))
    ;; Add something here to pre-rotate if stream doesn't support rotation?
    (stack-let ((args (list :rotate (if (eq orientation :landscape) 3 0))))
      (stack-let ((more-args (list* :zoom zoom args)))
	(when zoom
	  (setq args more-args))
	(stack-let ((more-args (list* :color-map color-map args)))
	  (when color-map
	    (setq args more-args))
	  (lexpr-send stream :show-bitmap image width height args))))))

;;; Compatibility
(defun hardcopy-window (window &key (printer *default-bitmap-printer*)
				    (margins t)
				    (title "Screen Hardcopy")
				    (zoom)
				    (adjoining-window nil)
				    (close-blinkers nil))
  (multiple-value-bind (image options temporary-p)
      (copy-screen-image window :margins margins :adjoining-window adjoining-window
			 :close-blinkers close-blinkers :temporary-ok t)
    (unwind-protect
	(destructuring-bind (&key width &allow-other-keys) options
	  (when (and width (not (eq image window)))
	    ;; Don't lie if we pass the original image.  If we made a
	    ;; copy, try to increase it's width to a multiple of 8.  As
	    ;; of now, it will always be a multiple of 32, (for
	    ;; BITBLT's benefit), so this is excessively conservative.
	    (setq width (min (decode-raster-array image) (* (ceiling width 8) 8))))
	  (cl:apply #'hardcopy-image image printer
		    :width width
		    :zoom zoom :title title
		    options))
      (when temporary-p
	(tv:deallocate-temp-sheet-raster-and-header image)))))

;;; HARDCOPY-WINDOW is the needed functionality for the "Hardcopy" operation on the
;;; current window, offered in the System Menu.  Add it to the menu at this time, now
;;; that the Hardcopy system is loaded.
(tv:add-to-system-menu-this-window-column "Hardcopy" 'tv:system-menu-hardcopy-window
  "Hardcopy the window that the mouse is over.  Mouse-Left: the window; Mouse-Right: menu."
  "Expand" 'tv:system-menu-hardcopy-window-menu)

(defun document-hardcopy-screen ()
  (with-output-to-string (stream)
    (cl:write-line "Hardcopy the screen." stream)
    (let ((loc (send stream :read-pointer)))
      (cl:write-string "Without an argument, copy " stream)
      (destructuring-bind (source destination
			   &key (close-blinkers nil)
				(trigger '(:none))
			   &allow-other-keys)
			  *hardcopy-screen-default*
	(block noerror
	  (catch 'call-helper-abort
	    (dw::call-helper-printer source *hardcopy-screen-sources* stream)
	    (when close-blinkers
	      (cl:write-string ", including blinkers, " stream))
	    (cl:write-string " to " stream)
	    (dw::call-helper-printer destination *hardcopy-screen-destinations* stream)
	    (dw::call-helper-printer trigger *hardcopy-screen-triggers* stream)
	    (format stream ".~%")
	    (return-from noerror))
	  (send stream :set-pointer loc))))
    (cl:write-string "With an argument, gives a menu for changing these defaults." stream)))

(tv:add-function-key #\Q 'hardcopy-screen '(document-hardcopy-screen)
		     :typeahead :process "Hardcopy screen")

#||	;Include these forms if you require strict compatibility
(defun kbd-hardcopy-selected-window (ignore)
  (hardcopy-screen-1 '(:selected-window) '(:printer)))

(tv:add-function-key
  #/c-Q 'kbd-hardcopy-selected-window
  '(and *default-bitmap-printer*
	(format nil "Hardcopies the selected window on ~A."
		(send *default-bitmap-printer* :pretty-name)))
  :process "Screen Hardcopy")

(defun kbd-hardcopy-screen-without-status (ignore)
  (hardcopy-screen-1 '(:main-screen) '(:printer)))

(tv:add-function-key
  #/m-Q 'kbd-hardcopy-screen-without-status
  '(and *default-bitmap-printer*
	(format nil "Hardcopies the screen, without the status line, on ~A."
		(send *default-bitmap-printer* :pretty-name)))
  :process "Screen Hardcopy")
||#

(scl:define-presentation-action hardcopy-marked-text
   (t si:input-editor
    :tester ((ignore &key window)
	     (send-if-handles window :marked-text))
    :documentation "Hardcopy marked text"
    :gesture nil
    :menu :marking-and-yanking
    :blank-area t)
   (ignore &key window)
  (let ((string (send window :marked-text :return-as-string t :unmark t)))
    (when string
      (si:with-ie-typeout-if-appropriate ()
	;; Cannot push and get heading both
	(with-input-from-string (stream string)
	  (hardcopy-from-stream :text stream *default-text-printer*
				:title (format () "Marked text from ~A" window)))))))

;;; Embedding

(hardcopy:define-hardcopy-screen-source :whole-host-screen
  :printer "the entire screen of the embedded host"
  :when (() (operation-handled-p sys:*console* 'tv:remote-console-get-whole-screen-image))
  :value (() (multiple-value-bind (image width height)
		 (tv:remote-console-get-whole-screen-image sys:*console*)
	       (list image :width width :height height))))
