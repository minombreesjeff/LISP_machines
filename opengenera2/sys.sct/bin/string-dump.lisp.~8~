;;; -*- Mode: LISP; Syntax: Common-lisp; Package: BIN; Base: 10; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>



#||

(defun test (&key dimensions leader-list displaced (base-string "TD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")h0i1s0 (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")i1s0 2a0 1t2e1s2t0.1.2.011203")
	     displaced-index-offset (element-type 'string-char)
	     (stream-element-type '(unsigned-byte 8)))
  (let ((array (if displaced
		   (make-array (or dimensions (string-length base-string))
			       :element-type 'string-char
			       :leader-list leader-list
			       :displaced-to displaced
			       :displaced-index-offset displaced-index-offset)
		 (make-array (or dimensions (string-length base-string))
			     :element-type element-type
			     :leader-list leader-list))))
    (unless displaced
      (copy-array-contents base-string array))
    (with-open-file (base "Y:>rwk>foo.test" :direction :output
			  :element-type stream-element-type)
      (with-character-dumper (dumper base :dump-leader t)
	(send dumper :dump-string array)))))

||#


(defun integer-bytes (integer)
  (etypecase integer
    ((unsigned-byte 8) 1)
    ((unsigned-byte 16) 2)
    ((unsigned-byte 24) 3)
    ((unsigned-byte 32) 4)))

;;; The basic flavor.
;;; The instance variable is1 si:stream0 because 1si:basic-dumping-stream0 is mis-modularized,
;;; with a whole bunch of stuff in it that should be in a higher-level stream.  I didn't
;;; want to end up with a 1bin:stream0 and an 1si:stream0; too much confusion.  Fix
;;; 1si:basic-dumping-stream0 later.

(defflavor binary-dumper
	((char-type-table (cl:make-hash-table :rehash-threshold 20))	;Type to Index
	 (char-type-index -1)			;Highest allocated, not next allocated.
	 (object-dumper #'default-character-dump-object)
	 (supplied-object-dumper nil)
	 (char-type-table-continuation nil)
	 dump-leader
	 use-fill-pointer
	 (si:stream nil)
	 ;; --- Combine these.
	 n-bit-flag				;A flag saying the underlying stream is n bits
	 dump-character-types-p			;whether to dump character-types
	 (buffer)				;A buffer from the stream
	 buffer-start				;Where we started on this buffer (debugging)
	 buffer-pointer				;Where we are in the buffer
	 buffer-end)				;Where the end of the buffer is
	(si:basic-dumping-stream)
  (:settable-instance-variables)
  (:gettable-instance-variables si:stream))
  
;;; Initialize the state of the object from the macro.

(defmethod (:initialize-dumper binary-dumper)
	   (cont cont-p leader use-fill-pointer-p
		 underlying-stream char-type-cont dump-character-types
		 &key reuse-char-type-table-p)
  (cond (reuse-char-type-table-p
	 (setq char-type-table reuse-char-type-table-p
	       char-type-index (loop for e being the hash-elements of reuse-char-type-table-p
				     maximize e)))
	(t
	 (send char-type-table :clear-hash)
	 (send char-type-table :put-hash 0 0)
	 (setq char-type-index 0)))		;Highest allocated, not next allocated.
  (setq object-dumper cont
	supplied-object-dumper cont-p
	dump-leader leader
	use-fill-pointer use-fill-pointer-p
	dump-character-types-p dump-character-types
	buffer nil
	char-type-table-continuation char-type-cont
	si:stream underlying-stream)
  (if si:stream
      (let ((stream-type (stream-element-type si:stream)))
	(setq n-bit-flag (if (subtypep '(unsigned-byte 32) stream-type)
			     :32bit
			     (if (subtypep '(unsigned-byte 16) stream-type)
				 :16bit
				 (if (subtypep '(unsigned-byte 8) stream-type)
				     :8bit
				     (error "Unknown stream element type ~S for stream ~S."
					    stream-type si:stream))))))
      (variable-makunbound n-bit-flag)))

;;; Initialize the state of the object by hand
(defmethod (:prepare-dumper binary-dumper)
	   (&key (stream si:stream)
		 ((:object-dumper obj-dumper) object-dumper object-dumper-p)
		 ((:dump-leader leader) dump-leader)
		 ((:char-type-continuation char-type-cont) char-type-table-continuation)
		 ((:dump-char-types-p dump-char-types) t)
		 ((:use-fill-pointer fill-pointer-p) use-fill-pointer))
  (send self :initialize-dumper obj-dumper object-dumper-p leader fill-pointer-p stream
	char-type-cont dump-char-types))

;;; Clear our table of defined character types
(defmethod (:reset-character-types binary-dumper) ()
  (send char-type-table :clear-hash)
  (send char-type-table :put-hash 0 0)
  (setq char-type-index 0))			;Highest allocated, not next allocated.

;;; Print in a way that conveys where we're dumping to.
(defmethod (:print-self binary-dumper) (str ignore ignore)
  (si:printing-random-object (self str :typep)
    (if (not si:stream)
	(princ "<disconnected>" str)
      (let ((path (send-if-handles si:stream :pathname)))
	(if path
	    (format str "\"~A\"" path)
	  (princ si:stream str))))))

;;; Invoke the supplied object dumper.  Put a :before daemon on here
;;; to pad before invoking a supplied object dumper.

(defmethod (:invoke-object-dumper binary-dumper) (arg)
  (when supplied-object-dumper
    (when buffer
      ;; Can't hold buffers while we give control to someone else.
      (send si:stream :advance-output-buffer buffer-pointer)
      (setq buffer nil)))
  (funcall object-dumper arg self si:stream)
  (unless buffer
    ;; 1with-output-buffering0 assumes buffers don't go away.
    (send self :next-output-buffer)))

;;; Invoke a (possibly) supplied char-type-table entry creation hook. 
;;; Put a :before daemon on here to pad before invoking a supplied hook.

(defmethod (:invoke-char-type-table-continuation binary-dumper)
	   (index char-type char-set char-style bits offset)
  (when char-type-table-continuation
    (funcall char-type-table-continuation index char-type char-set char-style bits offset)))

;;; Dumper for dumping to 16-bit streams.

(defflavor unsigned-byte-16-dumper
	((pending-byte))			;A byte not yet completed.
	(binary-dumper))

;;; Dumper for dumping to 8-bit streams.

(defflavor unsigned-byte-8-dumper ()
	   (binary-dumper))

;;; Dumper for dumping to 32-bit streams.

(defflavor unsigned-byte-32-dumper
	((pending-bytes (make-array 3 :element-type 'cl:fixnum))
	 (pending-count 0))
	(binary-dumper))

;;; Only define this for 32 since no one else needs it.
(defflavor unsigned-byte-32-dumper-sizing-mixin
	((size 0))
	(unsigned-byte-32-dumper))

;;; Resources.  Put them here so WITH-CHARACTER-DUMPER knows about them.

(defresource unsigned-byte-8-dumper ()
  :constructor (make-instance 'unsigned-byte-8-dumper))

(defresource unsigned-byte-16-dumper ()
  :constructor (make-instance 'unsigned-byte-16-dumper))

(defresource unsigned-byte-32-dumper ()
  :constructor (make-instance 'unsigned-byte-32-dumper))

(defresource unsigned-byte-32-dumper-sizing-mixin ()
  :constructor (make-instance 'unsigned-byte-32-dumper-sizing-mixin))

(defmethod (:initialize-dumper unsigned-byte-16-dumper :after) (&rest ignore)
  (setq pending-byte nil))

(defmethod (:initialize-dumper unsigned-byte-32-dumper :after) (&rest ignore)
  (let ((pending-bytes pending-bytes))
    (declare (sys:array-register pending-bytes))
    (setq pending-count 0)
    (loop for i from 0 below 3 do (setf (aref pending-bytes i) 0))))

(defmethod (:initialize-dumper unsigned-byte-32-dumper-sizing-mixin :after) (&rest ignore)
  (setq pending-count 0 size 0 buffer (make-array 0)))

(defmethod (:invoke-object-dumper unsigned-byte-16-dumper :before) (ignore)
  (when supplied-object-dumper
    (send self :empty-buffer)))

(defmethod (:invoke-object-dumper unsigned-byte-32-dumper :before) (ignore)
  (when supplied-object-dumper
    (send self :empty-buffer)))

;;; The workhorse for the standard interface.

(defun with-character-dumper-internal (body underlying-stream
					      object-dumper object-dumper-p
					      dump-leader use-fill-pointer)
  (declare (sys:downward-funarg body object-dumper))
  (labels ((continue (dumper)
	     2;; Do the work, once we figure what kind of dumper to use.
0	     (unwind-protect
		 (progn
		   (send dumper :initialize-dumper object-dumper
			 object-dumper-p dump-leader use-fill-pointer
			 underlying-stream nil t)
		   (funcall body dumper)
		   (send dumper :finish-output))
	       2;; Clear it out when we exit, especially the possibly-stack-consed
0	       2;; object-dumper
0	       (send dumper :initialize-dumper #'default-character-dump-object
		     nil nil nil nil nil t))))
    (let ((element-type (stream-element-type underlying-stream)))
      (cond ((subtypep element-type '(unsigned-byte 8))
	     (using-resource (dumper unsigned-byte-8-dumper)
	       (continue dumper)))
	    ((subtypep element-type '(unsigned-byte 16))
	     (using-resource (dumper unsigned-byte-16-dumper)
	       (continue dumper)))
	    ((subtypep element-type '(unsigned-byte 32))
	     (using-resource (dumper unsigned-byte-32-dumper)
	       (continue dumper)))
	    (t (error "Unknown stream element type ~S for stream ~S."
		      element-type underlying-stream))))))

;;; This is the standard way to write a string.

(defmethod (:dump-string binary-dumper)
	   (string &optional (start 0) end reuse-transition-table)
  (etypecase string
    ((array string-char)
     (send self :dump-simple-string string start end))
    ((array character)
     (if reuse-transition-table
	 (setq si:transition-table reuse-transition-table)
	 (send self :set-up-transition-table string start end))
     (let ((transitions (fill-pointer si:transition-table))
	   (length (- (or end (if use-fill-pointer
				  (zl:array-active-length string)
				  (array-total-size string)))
		      start)))
       (cond ((< transitions (ceiling length 2))
	      (send self :dump-string-run-length-encoded string
		    start end))
	     ((< transitions 256)
	      ;; or if there are fewer than 256 total types, but that's a pain
	      ;; and this lets us test the general format!  Do fix this later!
	      (send self :dump-string-16-bit-encoded string
		    start end))
	     (t (send self :dump-string-general-encoded string
		      start end))))))
  ;; Before returning to our caller, we must give up the stream.
  (send self :finish-output))

(defmethod (:dump-simple-string binary-dumper) (string &optional (start 0) end)
  (unless end
    (setq end (if use-fill-pointer
		  (zl:array-active-length string)
		(array-total-size string))))
  (send self :dump-string-header dump-string-op-simple string start end)
  (send self :8string-out string start end))

(defmethod (:dump-string-bytes-needed unsigned-byte-32-dumper-sizing-mixin) ()
  (multiple-value-bind (needed extra)
      (ceiling size 4)
    (+ needed (if (zerop extra) 1 0))))

(defun array-header-dimension-length (array)
  (max (integer-bytes (or (array-leader-length array) 0))
       (loop for i below (array-rank array)
	     for dim = (array-dimension array i)
	     maximize (integer-bytes dim))))

(defmethod (:dump-string-header binary-dumper) (opcode string start end)
  (let* ((array-rank (array-rank string))
	 (leader-flag (and dump-leader (array-has-leader-p string)))
	 (leader-length-only (and leader-flag (eq dump-leader :length-only)))
	 (named-flag (named-structure-p string))
	 (long-flag (or leader-flag ( array-rank 1)))
	 (very-long-flag named-flag)		;Or conformally or fat&displaced
	 (max-size (if (= array-rank 1)
		       (- end start)
		     (array-header-dimension-length string)))
	 (nbytes (integer-bytes max-size))
	 (header (make-string-header :long-flag (if long-flag 1 0)
				     :very-long-flag (if very-long-flag 1 0)
				     :leader-flag (if leader-flag 1 0)
				     :leader-length-only (if leader-length-only 1 0)
				     :named-flag (if named-flag 1 0)
				     :opcode opcode
				     :dimension-count array-rank)))
    (setf (string-header-nbytes header) nbytes)
    (send self :8byte-out (ldb (byte 8 0) header))
    (when long-flag
      (send self :8byte-out (ldb (byte 8 8) header)))
    (when very-long-flag
      (send self :8byte-out (ldb (byte 8 16) header)))
    (when leader-flag
      (send self :write-nbyte-integer nbytes (array-leader-length string)))
    (if (= array-rank 1)
	(send self :write-nbyte-integer nbytes (- end start))
      (loop for i below array-rank
	    for length = (array-dimension string i)
	    do (send self :write-nbyte-integer nbytes length)))
    (send self :dump-string-leader string)))

(defmethod (:dump-string-leader binary-dumper) (string)
  (when dump-leader
    (let ((leader-length (array-leader-length string)))
      (when leader-length
	(ecase dump-leader
	  ((t)
	   (loop for i below leader-length
		 do (send self :invoke-object-dumper (array-leader string i))))
	  (:length-only))))))

;;;		   1Run-Length String Data Format
0;;;
;;; +-------+-------+------~  ~-----+-------+-------+-------+-------+
;;; | len-1 |  type |   bytes ...   | len-1 |  type |   bytes ...
;;; +-------+-------+------~  ~-----+-------+-------+-------+-------+

(defmethod (:dump-string-run-length-encoded binary-dumper)
	   (string &optional (start 0) end)
  (unless end
    (setq end (if use-fill-pointer
		  (zl:array-active-length string)
		(array-total-size string))))
  (send self :dump-string-header dump-string-op-run-length-encoding string start end)
  (send self :dump-character-types string start end)
  (map-over-transition-table si:transition-table
			     ((substring substring-start substring-end) string start end)
    (let* ((char (sys:%1d-aref string substring-start))
	   (type-index (lookup-char-type (si:char-type char))))
      (loop for s-beg from substring-start below substring-end by 255.
	    for s-end = (min (+ s-beg 255.) substring-end)
	    do (send self :8byte-out (- s-end s-beg))
	       (send self :write-nbyte-integer 1 type-index)
	       (send self :8string-out substring s-beg s-end)))))

;;;		 116-bit String Data Format
0;;;
;;; +---+-~  ~-+---+------+--------+------+--------+----
;;; | N | defs |pad| char | index  | char | index  | ...
;;; +---+-~  ~-+---+------+--------+------+--------+----

(defmethod (:dump-string-16-bit-encoded binary-dumper)
	   (string &optional (start 0) end)
  (unless end
    (setq end (if use-fill-pointer
		  (zl:array-active-length string)
		(array-total-size string))))
  (send self :dump-string-header dump-string-op-16-bit string start end)
  (send self :dump-character-types string start end)
  (send self :empty-buffer)
  (map-over-transition-table si:transition-table
			     ((substring substring-start substring-end) string start end)
    (with-output-buffering (substring)		;do we need to fix this up?
      (let* ((char (sys:%1d-aref substring substring-start))
	     (type-index (lookup-char-type (si:char-type char))))
	(case n-bit-flag
	  (:32bit
	    (loop for i from substring-start below substring-end
		  do (send self :16byte-out (string-byte i) type-index)))
	  (:16bit
	    (loop for i from substring-start below substring-end
		  do (store-2byte (string-byte i) type-index)))
	  (:8bit
	    (loop for i from substring-start below substring-end
		  do (store-byte (string-byte i))
		     (store-byte type-index)))))))
  (send self :empty-buffer))

;;; Some Low level output routines output bytes and bytes from strings.

(defmethod (:empty-buffer unsigned-byte-16-dumper) ()
  (when pending-byte
    (send self :8byte-out 0))			;Force it out.
  (send si:stream :advance-output-buffer buffer-pointer))

(defmethod (:empty-buffer unsigned-byte-32-dumper) ()
  (unless (zerop pending-count)
    (loop repeat (- 4 pending-count) do
      (send self :8byte-out 0))			;Force it out.
    (setq pending-count 0))
  (send si:stream :advance-output-buffer buffer-pointer))

;;; ensure that there are 16 bits left in the buffer
(defmethod (:empty-buffer unsigned-byte-32-dumper-sizing-mixin) ()
  (unless (zerop pending-count)
    (incf size (- 4 pending-count))
    (setq pending-count 0)))

(defmethod (:empty-buffer binary-dumper) ()
  ())

;;; Write a variable-length integer
(defmethod (:write-nbyte-integer unsigned-byte-8-dumper) (nbytes integer)
  (with-output-buffering ()
    (unless nbytes
      (setq nbytes (integer-bytes integer)))
    (loop for i from 0 by 8
	  repeat nbytes
	  do (store-byte (ldb (byte 8 i) integer)))))

(defmethod (:write-nbyte-integer unsigned-byte-16-dumper) (nbytes integer)
  (with-output-buffering ()
    (unless nbytes
      (setq nbytes (integer-bytes integer)))
    (loop for i from 0 by 8
	  repeat nbytes
	  do
      (if (not pending-byte)
	  (setq pending-byte (ldb (byte 8 i) integer))
	(store-2byte pending-byte (ldb (byte 8 i) integer))
	(setq pending-byte nil)))))

(defmethod (:write-nbyte-integer unsigned-byte-32-dumper) (nbytes integer)
  (with-output-buffering (nil buf)
    (unless nbytes
      (setq nbytes (integer-bytes integer)))
    (let ((pending-bytes pending-bytes))
      (declare (sys:array-register pending-bytes))
      (loop for i from 0 by 8
	    repeat nbytes
	    do
	(cond ((< pending-count 3)
	       (setf (aref pending-bytes pending-count) (sys:%logldb (byte 8 i) integer))
	       (incf pending-count))
	      (t (store-4byte (aref pending-bytes 0)
			      (aref pending-bytes 1)
			      (aref pending-bytes 2)
			      (sys:%logldb (byte 8 i) integer))
		 (loop for i from 0 repeat 3 do (setf (aref pending-bytes i) 0))
		 (setq pending-count 0)))))))

(defmethod (:write-nbyte-integer unsigned-byte-32-dumper-sizing-mixin) (nbytes integer)
  (unless nbytes
    (setq nbytes (integer-bytes integer)))
  (incf size nbytes))

;;; Output a single 8-bit byte.

(defmethod (:8byte-out unsigned-byte-32-dumper) (byte)
  (with-output-buffering (nil buf)
    (let ((pending-bytes pending-bytes))
      (declare (sys:array-register pending-bytes))
      (cond ((< pending-count 3)
	     (setf (aref pending-bytes pending-count) byte)
	     (incf pending-count))
	    (t (store-4byte (aref pending-bytes 0)
			    (aref pending-bytes 1)
			    (aref pending-bytes 2)
			    byte)
	       (loop for i from 0 repeat 3 do (setf (aref pending-bytes i) 0))
	       (setq pending-count 0))))))

(defmethod (:8byte-out unsigned-byte-32-dumper-sizing-mixin) (&rest ignore)
  (incf size))

(defmethod (:8byte-out unsigned-byte-16-dumper) (byte)
  (with-output-buffering ()
    (if (not pending-byte)
	(setq pending-byte byte)
      (store-2byte pending-byte byte)
      (setq pending-byte nil))))

(defmethod (:8byte-out unsigned-byte-8-dumper) (byte)
  (with-output-buffering ()
    (store-byte byte)))

;;; Output the subindex bytes of a string to a 32-bit stream.
;;; The bytes are 2not0 word aligned.

(defmethod (:8string-out unsigned-byte-32-dumper) (string &optional (start 0) end)
  (unless end
    (setq end (string-length string)))
  (with-output-buffering (string buf)
    (unless ( start end)
      (unless (zerop pending-count)
	(let ((nbytes (- 4 pending-count)))
	  (loop for i from start repeat nbytes
		while (< i end)
		do
	    (send self :8byte-out (string-byte i))
		finally
		  (setq buf buffer)		;:8byte-out might have changed the buffer
		  (setq start i))))
      (multiple-value-bind (repeat extra)
	  (floor (- end start) 4)
	(loop for i from start by 4
	      repeat repeat
	      do
	  (store-4byte (string-byte i) (string-byte (1+ i))
		       (string-byte (+ i 2)) (string-byte (+ i 3)))
	      finally
		(when (< start end)
		  ;; Dump any extra bytes (0 thru 3)
		  (let ((pending-bytes pending-bytes))
		    (declare (sys:array-register pending-bytes))
		    (loop for i from i
			  repeat extra do
		      (setf (aref pending-bytes pending-count) (string-byte i))
		      (incf pending-count)))))))))

(defmethod (:8string-out unsigned-byte-32-dumper-sizing-mixin)
	   (string &optional (start 0) end)
  (unless end
    (setq end (string-length string)))
  (unless ( start end)
    (incf size (- end start))))

;;; Output the subindex bytes of a string to an 16-bit stream.
;;; The bytes are 2not0 word aligned.

(defmethod (:8string-out unsigned-byte-16-dumper) (string &optional (start 0) end)
  (unless end
    (setq end (length string)))
  (with-output-buffering (string)
    (unless ( start end)
      (when pending-byte
	(store-2byte pending-byte (string-byte start))
	(incf start)
	(setq pending-byte nil))
      (multiple-value-bind (repeat extra)
	  (floor (- end start) 2)
	(loop for i from start by 2
	      repeat repeat
	      do
	  (store-2byte (string-byte i) (string-byte (1+ i)))
	      finally
		;; Dump any extra bytes (either 0 or 1)
		(unless (zerop extra)
		  (setq pending-byte (string-byte i))))))))

;;; Output the subindex bytes of a string to an 8-bit stream.

(defmethod (:8string-out unsigned-byte-8-dumper) (string &optional (start 0) end)
  (unless end
    (setq end (length string)))
  (with-output-buffering (string)
    (loop for in from start
	  repeat (- end start)
	  do
      ;; Read the string and write the buffer, converting, courtesy of 1with-output-buffering0.
      (store-byte (string-byte in)))))

;;; Output a 16-bit byte.  On a 16-bit boundary if a 16-bit file.

(defmethod (:16byte-out unsigned-byte-8-dumper) (byte0 &optional byte1)
  (with-output-buffering ()
    (store-byte (ldb (byte 8 0) byte0))
    (if byte1
	(store-byte (ldb (byte 8 0) byte1))
      (store-byte (ldb (byte 8 8) byte0)))))

(defmethod (:16byte-out unsigned-byte-16-dumper) (byte0 &optional byte1)
  (with-output-buffering ()
    (when pending-byte
      ;; Pad if necessary.
      (store-byte (ldb (byte 8 0) pending-byte))
      (setq pending-byte nil))
    (if byte1
	(store-2byte (ldb (byte 8 8) byte0) byte1)
      (store-byte byte0))))

(defmethod (:16byte-out unsigned-byte-32-dumper) (byte0 &optional byte1)
  (with-output-buffering (nil buf)
    ;; pad if necessary
    (let ((pending-bytes pending-bytes))
      (declare (sys:array-register pending-bytes))
      (when (= pending-count 3)
	(store-4byte (aref pending-bytes 0)
		     (aref pending-bytes 1)
		     (aref pending-bytes 2)
		     0)
	(setq pending-count 0))
      (cond ((and (= pending-count 2) byte1)
	     (store-4byte (aref pending-bytes 0)
			  (aref pending-bytes 1)
			  byte0
			  byte1)
	     (setq pending-count 0))
	    (t
	     (setf (aref pending-bytes pending-count) byte0)
	     (incf pending-count)
	     (setf (aref pending-bytes pending-count) (or byte1 0))
	     (incf pending-count))))))

(defmethod (:16byte-out unsigned-byte-32-dumper-sizing-mixin) (&rest ignore)
  (incf size 2))

;;; 1:next-output-buffer0 is a subroutine of the 1(ensure-buffer-not-full)
0;;; local macro of 1with-output-buffering0.

(defmethod (:next-output-buffer binary-dumper) ()
  (loop while (or (not buffer) ( buffer-pointer buffer-end))
	do
    ;; Need a new input buffer.  Say the old one was used,
    ;; and grab another
    (when buffer
      (send si:stream :advance-output-buffer buffer-pointer))
    (multiple-value-setq (buffer buffer-pointer buffer-end)
      (send si:stream :get-output-buffer))
    (setq buffer-start buffer-pointer)))	;Remember it for debugging later.


;;; 1:finish-output0 is to output any pending output (including telling
;;; the underlying stream what we've done) so the caller can do output
;;; directly to the underlying stream.

(defmethod (:finish-output binary-dumper) ()
  (when buffer
    (send si:stream :advance-output-buffer buffer-pointer)
    (setq buffer nil)))

(defmethod (:finish-output unsigned-byte-16-dumper :before) ()
  (send self :empty-buffer))

(defmethod (:finish-output unsigned-byte-32-dumper :before) ()
  (send self :empty-buffer))

(defmethod (:finish-output unsigned-byte-32-dumper-sizing-mixin) ()
  (send self :empty-buffer))

;;; Workhorse for 1with-default-dumping0 macro.
(defmethod (:with-default-dumping binary-dumper) (arg dump-opcode opcode max-size body)
  (if (and (neq dump-opcode :locally) supplied-object-dumper)
      (send self :invoke-object-dumper arg)
    (if dump-opcode
	(let ((header (make-string-header :opcode opcode)))
	  (when max-size
	    (let ((nbytes (integer-bytes max-size)))
	      (setf (string-header-nbytes header) nbytes)))
	  (send self :8byte-out header))
      (when (and max-size ( max-size 256))
	(error "~S is too big to dump without an opcode." arg)))
    (funcall body)))


;;;		    1Character Type Definitions
0;;; +-----------+-----------+-----------+-------+----------------
;;; |                                   |   0   | format-specific
;;; | Type Spec | Type Spec | Type Spec |       |    data ...
;;; +-----------+-----------+-----------+-------+----------------
;;;
;;; These are terminated by a zero byte (a "null definition").
;;;
;;; It is done this way rather than by having a count to avoid
;;; the need for doing two passes over the string's transition,
;;; doing two hash-table lookups on the character type.
;;;
;;; Also, it has the advantage of not impossing any limit on the
;;; number of type specs.  This makes it applicable to any future
;;; opcodes which allow more than 256 types.
;;;
;;;		       1Character Type Definition
0;;; +----+----+---~ ~----+----+---+--------+---~  ~--+--~  ~-+-~  ~-+
;;; |  N |Size|  index   |bits|unu| offset | charset | style | font |
;;; |  6 |    |          |    |sed|        |         |       | name |
;;; +----+----+---~ ~----+----+---+--------+---~  ~--+--~  ~-+-~  ~-+
;;;  0-5  6-7             0-3 4-7
;;;  byte 0     byte 1    byte s+2  byte s+1

(defmethod (:dump-character-types binary-dumper)
	   (string &optional (start 0) end)
  (setq end (or end (if use-fill-pointer
			(zl:array-active-length string)
		      (array-total-size string))))
  (map-over-transition-table si:transition-table ((string start ignore) string start end)
    (let* ((char (aref string start))
	   (char-type (si:char-type char)))
      (unless (lookup-char-type char-type)
	(let ((char-style (si:char-style char)))
	  (multiple-value-bind (bits char-set offset)
	      (si:compute-character-type-info char)
	    (let* ((index (incf char-type-index))
		   (index-bytes (integer-bytes index))
		   (size-word (make-char-type)))
	      (when (> index-bytes 1)
		(error "We don't support more than 256 character types yet."))
	      (setf (char-type-index-size size-word) index-bytes)
	      (setf (lookup-char-type char-type) index)
	      (when char-type-table-continuation
		(send self :invoke-char-type-table-continuation
		      index char-type char-set char-style bits offset))
	      (when dump-character-types-p
		(send self :8byte-out size-word)
		(send self :write-nbyte-integer index-bytes index)
		(send self :8byte-out bits)
		(send self :8byte-out offset)
		(send self :invoke-object-dumper char-set)
		(send self :dump-style char-style)
		(send self :simple-string-object-out
		      (string (let ((font (condition-case ()
					       (si:get-font si:*b&w-screen*
							    si:*standard-character-set*
							    (si:merge-character-styles
							      char-style
							      '(:fix :roman :normal))
							    nil t)
					     (si:invalid-character-style-component nil))))
				(etypecase font
				  (null "CPTFONT")
				  ((or string symbol) font)
				  (sys:font (sys:font-name font)))))))))))))
  (when dump-character-types-p
    (send self :8byte-out 0)))


(defmethod (:simple-string-object-out binary-dumper) (string &optional (nbytes 1))
  (let ((length (string-length string)))
    (send self :write-nbyte-integer nbytes length)
    (send self :8string-out string)))


;;;	    1Default Symbol Format
0;;; +----------------+-------------------+
;;; | package string | print-name string |
;;; +----------------+-------------------+

(defmethod (:dump-symbol binary-dumper) (symbol)
  (if (null symbol)
      ;; Optimize NIL
      (with-default-dumping (symbol null)
			    (self t object-op-nil)
	nil)
    (let* ((package-name (package-name (symbol-package symbol)))
	   (symbol-name (symbol-name symbol))
	   (max-length (max (string-length package-name)
			    (string-length symbol-name)))
	   (nbytes (integer-bytes max-length)))
      (if (keywordp symbol)
	  ;; Special case; dump keywords without package overhead
	  (with-default-dumping (symbol keyword)
				(self t object-op-keyword max-length)
	    (send self :simple-string-object-out symbol-name nbytes))
	;; General case
	(with-default-dumping (symbol symbol)
			      (self t object-op-symbol max-length)
	  (send self :simple-string-object-out package-name nbytes)
	  (send self :simple-string-object-out symbol-name nbytes))))))


;;; 		1Default Style Format
0;;; +-+-+---+---------------+-------------+------------+
;;; |D|T| N | family symbol | face symbol | size value |
;;; +-+-+---+---------------+-------------+------------+

(defmethod (:dump-style binary-dumper) (style &optional dump-opcode)
  (with-default-dumping (style si:character-style)
			(self dump-opcode object-op-style)
    ;; When we can tell that a style is non-standard, we should dump the
    ;; definition here.
    (let* ((style-spec (si:unparse-character-style style))
	   (header-byte (make-object-style :fields (length style-spec))))
      (send self :8byte-out header-byte)
      (loop for spec in style-spec
	    do (send self :invoke-object-dumper spec)))))

(defmethod (:dump-fixnum binary-dumper) (fixnum)
  (let ((opcode (if (not (minusp fixnum))
		    object-op-fixnum
		  (setq fixnum (- fixnum))
		  object-op-negative-fixnum)))
    (with-default-dumping (fixnum (unsigned-byte 32))
			  (self t opcode fixnum)
      (send self :write-nbyte-integer nil fixnum))))

(defmethod (:dump-ratio binary-dumper) (ratio)
  (with-default-dumping (ratio ratio)
			(self t object-op-ratio ratio)
    (send self :dump-fixnum (numerator ratio))
    (send self :dump-fixnum (denominator ratio))))

;;; Dump any object that is in our un-augmented domain.

(defun default-character-dump-object (object dumper stream)
  stream
  (prog1
    (etypecase object
      (symbol (send dumper :dump-symbol object))
      (string (send dumper :dump-string object))
      ((or (unsigned-byte 32)
	   (integer 0 (-4294967296)))
       (send dumper :dump-fixnum object))
      (si:character-style
	(send dumper :dump-style object t)))
    ;; Gotta do this here, since we may have been called directly by the user to
    ;; handle something he doesn't.
    (send dumper :empty-buffer)))

;;; Make them real!
(compile-flavor-methods unsigned-byte-8-dumper
			unsigned-byte-16-dumper
			unsigned-byte-32-dumper
			unsigned-byte-32-dumper-sizing-mixin)
