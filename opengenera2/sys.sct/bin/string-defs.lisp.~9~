;;; -*- Mode: LISP; Syntax: Common-lisp; Base: 10; Package: BIN; Lowercase: T -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defconstant *string-dump-format* 1)

(defmacro define-opcode (name value)
  `(eval-when (eval compile load)
     (defconstant ,name ,value)
     (defprop ,name t string-opcode)))

(define-opcode dump-string-op-simple 0)
(define-opcode dump-string-op-run-length-encoding 1)
(define-opcode dump-string-op-16-bit 2)
(define-opcode dump-string-general 3)
(define-opcode object-op-fixnum 4)
(define-opcode object-op-negative-fixnum 5)
(define-opcode object-op-symbol 6)
(define-opcode object-op-style 7)
(define-opcode object-op-nil 8)
(define-opcode dump-string-displaced 9)
(define-opcode object-op-keyword 10)
(define-opcode object-op-ratio 11)

;;; This wants to be a per-flavor SUBST, but such things don't exist yet.
;;; Can't just be a SUBST, because CHAR-TYPE-TABLE is an instance variable.
(defmacro lookup-char-type (type)
  `(send char-type-table :get-hash ,type))

;;; Ditto.
(defmacro remember-char-type (type index)
  `(send char-type-table :put-hash ,type ,index))

;;; Define a D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")setf0able accessor for a field storing 1- the real value.
;;; Takes the name of the field, and an internal accessor name that is
;;; the real DEFSTRUCT accessor.

(defmacro def-1-field (field-name internal-name)
  (let ((object-var (make-symbol "OBJECT")))
    `(progn
       (defsubst ,field-name (,object-var)
	 (1+ (,internal-name ,object-var)))
       (define-setf-method ,field-name (word &environment env)
	 (multiple-value-bind
	   (word-temps word-vals word-stores word-store-form word-access-form)
	     (get-setf-method `(,',internal-name ,word) env)
	   (let ((store (gensym))
		 (vtemp (gensym)))
	     (let ((*simple-variables* word-temps))
	       (values *simple-variables*
		       word-vals
		       (list store)
		       `(sys:let-value ,vtemp ,store
				       ,(lt:let-subst `(,(car word-stores))
						      `((1- ,vtemp))
						      word-store-form
						      env))
		       `(1+ ,word-access-form)))))))))

(defstruct (string-header (:type :fixnum))
  ;; first byte
  ((long-flag 0 :byte (byte 1 0))
   (opcode 0 :byte (byte 5 1))
   (nbytes-1 0 :byte (byte 2 6))
   ;; Second byte
   (dimension-count 0 :byte (byte 4 8))
   (leader-flag 0 :byte (byte 1 12))
   (leader-length-only 0 :byte (byte 1 13))
   (adjustable-flag 0 :byte (byte 1 14))
   (very-long-flag 0 :byte (byte 1 15))
   ;; Third byte
   (conformal-flag 0 :byte (byte 1 16))
   (fat-displaced-flag 0 :byte (byte 1 17))	;1 if displaced fat character string.
   (named-flag 0 :byte (byte 1 18))))

(def-1-field string-header-nbytes string-header-nbytes-1)

;;; This loops over each entry in the transition table, invoking the body
;;; with (2 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")string-var0, 2start-index-var0, and 2end-index-var0 bound to represent
;;; the portion of the string indicated by the transition table as being
;;; all of one character type.  The body should reference the array elements
;;; using 1sys:%1d-aref0.  (Probably 1:set-up-transition-table0 doesn't work on
;;; multi-dimension arrays yet, but that could easily be fixed.)

(defmacro map-over-transition-table (transition-table
				     ((string-var start-index-var end-index-var) string
				      &optional (start 0) end)
				     &body body)
  `(map-over-transition-table-internal
     #'(lambda (,string-var ,start-index-var ,end-index-var)
	 (let ((,string-var ,string-var))
	   (declare (sys:array-register-1d ,string-var))
	   ,@body))
     ,transition-table ,string ,start ,end))

(defun map-over-transition-table-internal (funarg transition-table string start end)
  (declare (sys:downward-funarg funarg))
  (let ((transition-tbl transition-table)
	(string string))
    (declare (sys:array-register transition-tbl)
	     (sys:array-register-1d string))
    (loop with transition-count = (fill-pointer transition-tbl)
	  with final-index = (or end (length string))
	  for i = start then next-style-loc
	  for transition from 0 to transition-count
	  for next-style-loc = (if (< transition transition-count)
				   (aref transition-tbl transition)
				 final-index)
	  unless (= i next-style-loc)
	    do (funcall funarg string i next-style-loc))))

;;;		       1Character Type Definition
0;;; +----+----+---~ ~----+----+---+--------+---~  ~--+--~  ~-+-~  ~-+
;;; |  N |Size|  index   |bits|unu| offset | charset | style | font |
;;; |  6 |    |          |    |sed|        |         |       | name |
;;; +----+----+---~ ~----+----+---+--------+---~  ~--+--~  ~-+-~  ~-+
;;;  0-5  6-7             0-3 4-7
;;;  byte 0     byte 1    byte s+2  byte s+1

(defvar *known-char-type-field-count* 6)

(defstruct (char-type (:type :fixnum))
  ((n-fields *known-char-type-field-count* :byte (byte 6 0))
   (index-size-internal 0 :byte (byte 2 6))))

(def-1-field char-type-index-size char-type-index-size-internal)

;;; 		1Default Style Format
0;;; +-+-+---+---------------+-------------+------------+
;;; |D|T| N | family symbol | face symbol | size value |
;;; +-+-+---+---------------+-------------+------------+

(defstruct (object-style (:type :fixnum))
  ((definition 0 :byte (byte 1 0))		;Says this is character style 2definition
0   (fields 0 :byte (byte 5 3))))		;Says how many fields are present in


;;; Wrap this around the body, use 1store-char0 wherever you want to store into the string,
;;; and use 1ensure-buffer-not-empty0 before accessing the input buffer each time.
;;; (and don't forget to increment the buffer pointer!)
;;; It even takes care of advancing the input buffer when you're done.
;;; 2string0, 2type-table0, 2buffer0, 2buffer-pointer0, and 2buffer-end0 are all
;;; user-supplied variable names.  2String0 and 2buffer0 are bound to themselves
;;; and declared as array registers; 2type-table0 is bound to the type table and
;;; declared as an array register.
;;; Use 1store-char-simple0 when you are just storing into a thin string.

(defmacro with-input-buffering ((&optional string type-table (buffer (make-symbol "BUF")))
				&body body)
  `(progn
     ;; We check for the buffer before the body.  We assume nothing
     ;; will make it go away during execution of the body.
     ;; We have to check it here because the LET does a SETUP-1D-ARRAY-REGISTER
     ;; on it immediately.
     (unless buffer
       (send self :next-input-buffer))
     (let (,@(when string `((,string ,string)))
	   ,@(when type-table `((,type-table char-type-table)))
	   (,buffer buffer))
       (declare (sys:array-register ,@(when string `(,string))
				    ,@(when type-table `(,type-table))
				    ,buffer))
       (macrolet (,@(when string
		      1;; ***0 The way 1store-char0 and 1store-char-simple0 bind a temp rather than
		      1;; ***0 putting the byte computation into the 1setf0 is that there is
		      1;; ***0 currently (324) a bug where 1setf0 creates a 1let0 which introduces
		      1;; ***0 a variable binding the array, sans 1sys:array-register
0		      1;; *** 0declaration.
		      `((store-char (index char-type byte)
			 `(let ((char (si:%make-character
					(dpb ,char-type si:%%char-all-but-subindex ,byte))))
			    (setf (sys:%1d-aref ,',string ,index) char)))
			(store-char-simple (index byte)
			 `(let ((char (si:%make-character ,byte)))
			    (setf (sys:%1d-aref ,',string ,index) char)))))
		  (ensure-buffer-not-empty ()
		    `(when ( buffer-pointer buffer-end)
		       (send self :next-input-buffer)
		       (setq ,',buffer buffer)))
		  (read-byte ()
		   `(progn (ensure-buffer-not-empty)
			   (prog1 (aref ,',buffer buffer-pointer)
				  (incf buffer-pointer)))))
	 ,@body))))

(defmacro with-output-buffering ((&optional string (buffer (make-symbol "BUF")))
				 &body body)
  `(progn
     (unless buffer
       (send self :next-output-buffer))
     ;; We check for the buffer before the body.  We assume nothing
     ;; will make it go away during execution of the body.
     ;; We have to check it here because the LET does a SETUP-1D-ARRAY-REGISTER
     ;; on it immediately.
     (let (,@(when string
	       `((,string ,string)))
	   (,buffer buffer))
       (declare (sys:array-register-1d ,@(when string `(,string)) ,buffer))
       (macrolet (,@(when string
		      `((string-byte (index)
			  `(si:char-subindex (sys:%1d-aref ,',string ,index)))))
		  (store-byte (byte)
		    `(let ((byte ,byte))
		       (ensure-buffer-not-full)
		       (setf (aref ,',buffer buffer-pointer) byte)
		       (incf buffer-pointer)))
		  1;; ***0 The way 1store-byte0 and 1store-2byte0 bind a temp rather than
		  1;; ***0 putting the byte computation into the 1setf0 is that there is
		  1;; ***0 currently (324) a bug where 1setf0 creates a 1let0 which introduces
		  1;; ***0 a variable binding the array, sans 1sys:array-register0 declaration.
		  (store-2byte (byte0 byte1)
		    `(let ((byte0 ,byte0)
			   (byte1 ,byte1))
		       (ensure-buffer-not-full)
		       (let ((byte (dpb byte1 (byte 8 8) byte0)))
			 (setf (aref ,',buffer buffer-pointer) byte)
			 (incf buffer-pointer))))
		  (store-4byte (byte0 byte1 byte2 byte3)
		    `(let ((byte0 ,byte0)
			   (byte1 ,byte1)
			   (byte2 ,byte2)
			   (byte3 ,byte3))
		       (ensure-buffer-not-full)
		       (let ((byte (sys:%logdpb byte3 (byte 8 24)
						(sys:%logdpb byte2
							     (byte 8 16)
							     (sys:%logdpb byte1
									  (byte 8 8)
									  byte0)))))
			 (setf (aref ,',buffer buffer-pointer) byte)
			 (incf buffer-pointer))))
		  ;; A solution in wait for a problem.  If where we are currently sending
		  ;; 1:8byte-out0's is too slow and we want to buffer these, move 1pending-byte
0		  ;; to the 1binary-dumper0 flavor, unbound except in the 16-bit variety, and
		  ;; add 16bit-flag to 1binary-dumper0.
		  #+IGNORE
		  (8byte-out (byte)
		    `(if 16bit-flag
			 (if pending-byte
			     (store-2byte pending-byte ,byte)
			   (setq pending-byte byte))
		       (store-byte byte)))
		  (ensure-buffer-not-full ()
		    `(when ( buffer-pointer buffer-end)
		       (send self :next-output-buffer)
		       (setq ,',buffer buffer))))
	 ,@body))))

;;; This macro checks the type to be sure it's what is expected,
;;; dumps with or without a type header, depending on 1dump-opcode0.
;;; 1max-size0 is checked to determine the 1nbytes0 header field if needed.
;;; If an object dumper has been supplied, this macro takes care of
;;; using that instead.

(defmacro with-default-dumping ((arg type) (dumper dump-opcode opcode &optional max-size)
				&body body)
  `(progn
     (check-type ,arg ,type)
     (send ,dumper :with-default-dumping
	   ,arg ,dump-opcode ,opcode ,max-size
	   #'(lambda ()
	       (declare (sys:downward-function))
	       ,@body))))

;;; This macro loads with or without a type header, depending on 1expect-opcode0.
;;; If a header is expected, it checks the opcode to be sure it's what is expected.
;;; If an object loader has been supplied, this macro takes care of using that instead.
;;;
;;; The body-function gets passed the following keyword arguments:
;;; 1:opcode :nbytes :dimension-count :leader :named :conformal :adjustable

0(defmacro default-loading-case ((loader expect-opcode
					&optional supplied-opcode supplied-nbytes)
				keyword-arglist
				&body clauses)
  (when (and (not expect-opcode)
	     (not supplied-opcode)
	     (> (length clauses) 1))
    (warn "Multiple clauses are illegal unless always expecting an opcode."))
  (let ((opcode-var (make-symbol "OPCODE"))
	(all-opcodes nil)
	(expected-opcodes nil))
    (labels ((process-one-clause (clause)
	       (when all-opcodes
		 ;; We've already seen an OTHERWISE clause; time to punt!
		 (warn "Unreachable DEFAULT-LOADING-CASE clause for ~S." (car clause)))
	       (if (atom (car clause))
		   (process-atom-clause clause)
		 `(,(block t-clause
		      `(or ,@(loop for form in (car clause)
				   when (string-equal form "OTHERWISE")
				     do (setq all-opcodes t)
					(return-from t-clause t)
				   unless (get form 'string-opcode)
				     do (warn "~S is not a defined string opcode." form)
				   collect `(eql ,opcode-var ,form)
				   do (push form expected-opcodes))))
		   ,@(cdr clause))))
	     (process-atom-clause (clause)
	       (cond ((string-equal (car clause) "OTHERWISE")
		      (setq all-opcodes t)
		      `(t ,@(cdr clause)))
		     (t (push (car clause) expected-opcodes)
			`((eql ,opcode-var ,(car clause)) ,@(cdr clause))))))
      (let ((cond-clauses (loop for clause in clauses
				collect (process-one-clause clause))))
	`(send ,loader :with-default-loading
	       ,expect-opcode ,supplied-opcode ,supplied-nbytes ,(first expected-opcodes)
	       ;; &rest dont-ignore below needed due to compiler bugs.  Don't name it
	       ;; ignore, and don't delete it, until the bugs are fied.
	       #'(lambda (,opcode-var &rest dont-ignore
			  &key ,@keyword-arglist &allow-other-keys)
		   (declare (sys:downward-function)
			    (ignore dont-ignore))
		   (cond ,@cond-clauses
			 ,@(unless all-opcodes
			     `((t (error "Opcode ~S where one of ~S was expected."
					 ,opcode-var ',expected-opcodes)))))))))))


(defmacro with-character-dumper
	  ((dumper-var stream
		       &key (object-dumper '#'default-character-dump-object
						  object-dumper-p)
		       (dump-leader object-dumper-p)
		       use-fill-pointer)
	   &body body)
  `(with-character-dumper-internal #'(lambda (,dumper-var) ,@body)
					  ,stream ,object-dumper
					  ,object-dumper-p
					  ,dump-leader ,use-fill-pointer))

;;; The standard interface.

(defmacro with-character-loader
	  ((loader-var stream
		       &key (object-loader '#'default-character-load-object
						  object-loader-p))
	   &body body)
  `(with-character-loader-internal #'(lambda (,loader-var) ,@body)
				   ,stream ,object-loader ,object-loader-p))
