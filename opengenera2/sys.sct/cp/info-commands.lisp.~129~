;;; -*- Syntax: Zetalisp; Mode: LISP; Package: SYSTEM-INTERNALS; Base: 8; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Command Processor commands that provide information of any type, are
;;; included in this source, along with supporting routines.  There are
;;; a few exceptions like Show Directory, which seemed to need to be
;;; included in File-Commands.


(cp:define-command com-help
    (&key
      (format '((cl:member :brief :detailed)) :default ':brief	;
	      :documentation "/"Detailed/" shows all commands.  /"Brief/" uses compression."))
   (cp::show-command-name-help cl:*standard-output* format))

; For historical reference, this is what this used to do:
;(scl:format-item-list (mapcar
;			#'second
;			(cp::command-table-complete "" cp:*command-table* :possibilities))
;		      :presentation-type `cp:command-name))



(defgeneric help-with (program key &rest options)
  (:method-combination :case))

(defmethod (help-with dw::program :otherwise) (ignore) '())

(defgeneric options-for-help-with (program key)
  (:method-combination :case))

(defmethod (options-for-help-with dw::program :otherwise) (ignore) '())

(defun generic-help-additional-arguments (category)
  (selectq category
    ((:all) '())
    ((:keyboard) '())
    ((:commands) '((:format '((cl:member :brief :full :detailed))
		    :default ':brief
		    :mentioned-default ':full
		    :documentation
		    "The level of detail to show.
  D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")Brief0     Shows any locally available commands, and the next level command categories.
  1Full0      Shows all commands, but in an abbreviated fashion.
  1Detailed0  Shows all commands.")
		   (:command-table 'cp:command-table
		    :default cp:*command-table*
		    :prompt "named"
		    :documentation
		    "The command table to show.")))
    (otherwise
      (if (variable-boundp dw:*program*)
	  (options-for-help-with dw:*program* category)
	  '()))))



(cp:define-command (com-generic-help :name "Help"
				     :command-table "Documentation"
				     :provide-output-destination-keyword nil)
    ((with `((token-or-type (:all)
			    ((cl:member :commands :keyboard
					,@(when (boundp 'dw:*program*)
					    (help-with dw:*program* :which-operations)))
			     :description "a help category")))
	   :default :all
	   :prompt "with"
	   :documentation "A token which indicates what you want help with.")
      (options `((dw::keyword-value-pairs ,(generic-help-additional-arguments with)))
	       :display-default nil
	       :provide-default t
	       :default '()
	       :prompt "keywords"))
   (setq options (dw::merge-keyword-value-pairs
		   options
		   (generic-help-additional-arguments with)))
   (terpri)
   (selectq with
     ((:all)
      (dw:formatting-table (t :inter-column-spacing
			       (* 3 (send cl:*standard-output* :char-width)))
	(formatting-row ()
	  (dw:formatting-cell ()) ;force indentation
	  (dw:formatting-cell () (princ "1This command...0"))
	  (dw:formatting-cell () (princ "1Gets you information about ...0")))
	(dolist (key (sort (cl:copy-list
			     (list* ':commands ':keyboard 
				    (when (boundp 'dw:*program*)
				      (help-with dw:*program* :which-operations))))
			   #'string-lessp))
	  (dw:formatting-row ()
	    (dw:formatting-cell ()) ;force indentation
	    (dw:formatting-cell ()
	      (let ((command `(si:com-generic-help ,key)))
		(dw:with-output-as-presentation (:object command
						 :type 'cp:command
						 :single-box t)
		  (if (eq cp:*dispatch-mode* :form-preferred) (cl:write-char #\:))
		  (present command 'cp:command))))
	    (dw:formatting-cell ()
	       (selectq key
		 ((:commands)
		  (format t "The current command table (~A).~
			   ~%The :Format keyword argument controls the level of detail.~
			   ~%The :Command Table keyword argument allows you to ~
			   ~% specify an alternate command table to use instead of ~:*~A."
			  (cp:command-table-name cp:*command-table*)))
		 ((:keyboard)
		  (format t "Commands available on a single keystroke ~
			     (e.g., editing commands)."))
		 (otherwise
		   (let ((doc (help-with dw:*program* :case-documentation key)))
		     (if doc
			 (princ doc)
			 (format t "Help with ~:(~A~)." key))))))))))
     ((:commands)
      (cp::show-command-help :format (getf options :format)
			     :command-table (or (getf options :command-table)
						cp:*command-table*)
			     :detailed-command `(com-generic-help ,with (:format :detailed))))
     ((:keyboard)
      (cp::control-character-etc-help cl:*standard-output*))
     (otherwise
       (if (and (boundp 'dw:*program*)
		(member with (help-with dw:*program* :which-operations)))
	   (cl:apply #'help-with dw:*program* with options)
	   (format t "~&Help with ~:(~A~) is not available in this context.~%" with))))
   (si:fresh-terpri))



;;; Show commands


(cp:define-command (com-show-disabled-services :command-table "Networks")
    ()
   (cond ((null net:*services-enabled*)
	  (format t "~&Services to other machines are disabled globally."))
	 (t
	  (let ((disabled-services
		  (loop for server in neti:*servers*
			as protocol-name = (neti:server-protocol-name server)
			when (not (neti:service-enabled-p protocol-name))
			  collect protocol-name)))
	    (if (null disabled-services)
		(format t "~&Services to other machines are enabled globally.")
		(format t "~&The following service~:[s are~; is~] disabled individually:~%"
			(= (length disabled-services) 1))
		(format-textual-list disabled-services
				     #'(lambda (o s)
					 (present o '((neti:service :enabled-p nil))
						  :stream s))
					 :conjunction "and"))))))

(cp:define-command (com-show-gc-status :name "Show GC Status"
				       :command-table "Garbage Collection")
    ()
   (gc-status)
   (fresh-terpri)
   (values))

(cp:define-command (com-show-herald :command-table "Session")
    (&key
      (detailed '((alist-member :alist (("Yes" . T) ("Normal" . :normal) ("No" . NIL))))
		:default :normal
		:mentioned-default t
		:documentation
		"Whether to print version information in full detail:
  1Yes0     Full and complete detail.
  1Normal0  All system versions, but omitting some detail.
  1No0      Terse form, only machine information and release level."))
   (print-herald :verbose (eq detailed t) :brief (eq detailed nil))
   (fresh-terpri)
   (values))

(defconst *important-legal-notices-for-fonts* "
   The software, data, and information contained herein 
are proprietary to, and comprise valuable trade secrets
of, Symbolics, Inc., and Bitstream, Inc.  They are given 
in confidence by Symbolics pursuant to a written license 
agreement, and may be used, copied, transmitted, and 
stored only in accordance with the terms of such license.
")

(defconst *legal-notice-accessibility-disclaimer-format*
	  "The file ~A, in which the current edition of the legal
notices resides, is inaccessible at this time.  The legal notices consist
of at least the following:~%  ~~A~")

(cl:defparameter *source-head-legal-notices* nil)

(defvar *legal-notice-pathnames* nil)
(defvar *important-legal-notices* "")
(defvar *initial-legal-notice-pathname* "SYS:SITE;NOTICE.TEXT")

(cl:defparameter *initial-important-legal-notices* nil)

;;; Initializes the fallback legal notices from SYS:SITE;NOTICE.TEXT --
;;;    This function is invoked when this file is loaded as part of the QLD process and
;;;    in the System system patch which sets SCT:*RELEASES* before building final
;;;    distribution worlds.  Therefore, if the function can't find SYS:SITE;NOTICE.TEXT,
;;;    something's very wrong which is why there's no error handling in this function.
(defun read-legal-notices-from-file (symbol include-further-trademarks-p)
  (let ((notices (string-trim '(#\Return)
			      (with-output-to-string (s)
				(with-open-file (f *initial-legal-notice-pathname*)
				  (stream-copy-until-eof f s))))))
    (if include-further-trademarks-p
	(set symbol (string-append #\Return notices #\Return))
	(set symbol (string-append #\Return
				   (substring notices 0
					      (string-reverse-search
						(string-append #\Return
							       "FURTHER TRADEMARK NOTICES")
						notices)))))))

;;; Adds to the list of files displayed by 1:Show Legal Notice0 or to the fallback text
;;; displayed when a file is missing or to both1 --
0;;;    Layered products (e.g., C) which use this function should not call it with
;;;    RESET-VARIABLES-P set to T; otherwise, the information from other layered
;;;    products will be lost.  Use of this optional parameter is reserved to the System system.
(defun append-legal-notices (additional-text additional-pathname &optional reset-variables-p)
  (when reset-variables-p
    (setq *important-legal-notices* ""
	  *legal-notice-pathnames* nil))
  (when (and additional-pathname
	     (not (memq additional-pathname *legal-notice-pathnames*)))
    (setf *legal-notice-pathnames*
	  (append *legal-notice-pathnames* (list additional-pathname))))
  (when additional-text
    (setf *important-legal-notices* (string-append *important-legal-notices*
						   additional-text))))

;;; Initialize fallback legal notices, *legal-notice-pathnames* and *important-legal-notices*
;;;    Run this function as part of the System system patch which sets SCT:*RELEASES*.
;;;    In this way, we can guarantee that the fallback notices are as up-to-date as
;;;    possible in the distribution worlds.
(defun initialize-legal-notices ()
  (read-legal-notices-from-file '*source-head-legal-notices* nil)
  (read-legal-notices-from-file '*initial-important-legal-notices* t)
  (append-legal-notices *initial-important-legal-notices* *initial-legal-notice-pathname* t))

(add-initialization "Initialize legal notices" '(initialize-legal-notices) '(:once))

(cp:define-command (com-show-legal-notice :command-table "Utilities")
    ()
   (let ((error? nil))
     (flet ((get-file-contents (file)
	      (condition-case ()
		   (with-output-to-string (string)
		     (with-open-file (stream file)
		       (stream-copy-until-eof stream string))
		     string)
		 (error
		   (if error? 
		       ""
		       (setq error? t)
		       (format nil *legal-notice-accessibility-disclaimer-format*
			       file *important-legal-notices*))))))
       (fs:with-automatic-login-to-sys-host
	 (let ((legal-notices ""))
	   (loop for pathname in *legal-notice-pathnames*
		 do
	     (setq legal-notices
		   (string-append legal-notices (get-file-contents pathname))))
	   (filling-output (cl:*standard-output* :after-line-break "    ")
	     (format t "~%  ~~A~" legal-notices)))))))

(cp:define-command (com-show-notifications :command-table "Session")
    (&key
      (before 'time:universal-time
	      :prompt "date"
	      :documentation "Show all notifications before this date")
      (from 'cl:integer
	    :prompt "number"
	    :documentation
	    "Show all notifications starting with this number")
      (matching '((cl:sequence string))
		:prompt "strings"
		:documentation
		"Show each notification with a substring matching these strings")
      (excluding '((cl:sequence string))
		 :prompt "strings"
		 :documentation
		 "Do not show any notification with a substring matching these strings")
      (newest 'cl:integer
	      :default nil
	      :mentioned-default 1
	      :prompt "how many"
	      :documentation
	      "Show this many most recent notifications")
      (oldest 'cl:integer
	      :default nil
	      :mentioned-default 1
	      :prompt "how many"
	      :documentation
	      "Show this many oldest notifications")
      (since '((time:universal-time) :past-p t)
	     :prompt "date"
	     :documentation "Show all notifications on this date and later")
      (through 'cl:integer
	       :prompt "number"
	       :documentation
	       "Show all notifications through this number, inclusive"))
   
;;; Specify something about the kind of notifications that you want to
;;; see.  Args: :newest n specifies the latest N notices to arrive,
;;; :oldest N specifies oldest etc.   :matching lets you give a string,
;;; so you could look for specific kinds of notices.  The active code
;;; below contains a start toward a combinatorial facility.  The earlier
;;; version, which provides a simple "or" of all the specifications
;;; given, is preserved for future use, if a combinatorial control
;;; argument is added. 
   
   #|  (let ((n (1- (length tv:notification-history))))	;"index" of oldest one
    (cond-every
      (newest					;the newest N notices
	(print-notifications 0 (1- newest)))
      (oldest					;the oldest N notices
	(print-notifications (1+ (- n oldest)) n))
      (matching					;each notice containing a string
	(let ((notice-list
		(loop for note in tv:notification-history
		      for (timestamp notice) = note
		      when (string-search matching notice)
		        collect note)))
	  (format t "~& ~:[No notifications.~;~
                          ~D matching notification~:P, most recent first:~]~%"
		  notice-list (length notice-list))
	  (loop for note in notice-list
		do (send standard-output :fresh-line)
		   (display-notification standard-output note))))
      ((or before since)			;notices in a certain time range
       (unless since
	 (setq since (third (first login-history))))	;default to oldest possible
       (unless before
	 (setq before (time:get-universal-time)))	;default is newest possible
       (let ((notice-list
	       (loop for note in tv:notification-history
		     for (timestamp notice) = note
		     when (and (< timestamp before)
			       (< since timestamp))
		       collect note)))
	 (format t "~& ~:[No notifications.~;~
                          ~D notification~:P, most recent first:~]~%"
		 notice-list (length notice-list))
	 (loop for note in notice-list
		do (send standard-output :fresh-line)
		   (display-notification standard-output note))))
      ((or from through)	;notices in certain "index" range
       (print-notifications (or from 0)
			    (or through (1- (length tv:notification-history)))))
      (otherwise				;nothing specified, show all not none
	(print-notifications))))
|#						;preserve this for the "or" case
   
   ;; The following code compounds restrictions as follows: the
   ;; complete set of notifications is first restricted to only one of
   ;; the the following cases, whichever is encountered first: Newest
   ;; N, Oldest N, From M and/or Through N, Since D1
   ;; and/or Before D2.  Then it is further restricted to those that
   ;; match the Matching and Excluding strings, if given.  Then the resulting list is
   ;; printed.
   (let ((n (length tv:notification-history))
	 (notice-list tv:notification-history)
	 (restrictions (or newest oldest from through
			   before since matching excluding)))
     (cond
       (newest					;the newest N notices
	(setq notice-list (firstn (max (min newest n) 0) notice-list)))
       (oldest					;the oldest N notices
	(setq notice-list (nthcdr (max (- n oldest) 0) notice-list)))
       ((or from through)			;notices in certain "index" range
	(setq from (max (or from 0) 0))
	(setq through (min (or through (1- n)) n))
	(setq notice-list
	      (firstn (max (1+ (- through from)) 0)
		      (nthcdr from notice-list)))))
     (when (or before since)			;notices in a certain time range
       (unless since
	 (setq since (third (first login-history))))	;default to oldest possible
       (unless before
	 (setq before (time:get-universal-time)))	;default is newest possible
       (setq notice-list
	     (loop for note in notice-list
		   for (timestamp notice) = note
		   do (ignore notice)
		   when (and (< timestamp before)
			     (< since timestamp))
		     collect note)))
     (when (or matching excluding)			;each notice containing a string
       (setq notice-list
	     (loop for note in notice-list
		   for (timestamp notice) = note
		   do (ignore timestamp)
		   when (and (or (null matching)
				 (cl:some (lambda (match) (string-search match notice))
					  matching))
			     (cl:notany (lambda (exclude) (string-search exclude notice))
					excluding))
		     collect note)))
     (format t "~% ~:[No notifications~*~:[~; chosen~].~;~
                          ~D notification~:P~:[~; chosen~]~@[, most recent first~]:~]~%"
	     notice-list (length notice-list) restrictions ( (length notice-list) 1))
     (loop for note in notice-list
	   do (send standard-output :fresh-line)
	      (display-notification standard-output note)))
   (fresh-terpri)
   (values))


