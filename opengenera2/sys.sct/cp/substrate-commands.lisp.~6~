;;; -*- Mode: LISP; Syntax: Common-lisp; Package: CP; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun window-top-frame (window)
  (loop for window = (or window (cli::follow-synonym-stream *query-io*)) then superior
	as superior = (send-if-handles window :superior)
	when (or (null superior) (typep superior 'tv:screen))
	  return window))

(defun find-window-for-scrolling (&key window typeout-window coordinate)
  (when (and typeout-window (null window) (send-if-handles *terminal-io* :typeout-window-p))
    (return-from find-window-for-scrolling *terminal-io*))
  (let ((next-best nil))
    (labels ((do-one (window &optional (do-inferiors t))
	       (if typeout-window
		   (let ((tw (send-if-handles window :typeout-window)))
		     (when tw
		       (return-from find-window-for-scrolling tw)))
		   (check-one window))
	       (when do-inferiors
		 (map () #'do-one (send-if-handles window :exposed-inferiors))))
	     (check-one (window)
	       (when (and (not next-best) (operation-handled-p window :viewport-position))
		 (setq next-best window))
	       (dolist (component
			 (send-if-handles (if (send-if-handles window :typeout-window-p)
					      ;; Typeout windows share scroll-bars
					      ;; with their immediate superior.
					      (send window :superior)
					    window)
					  :margin-components))
		 (when (and (typep component 'dw:margin-scroll-bar)
			    (or (null coordinate)
				(member (dw::margin-scroll-bar-margin component)
					(ecase coordinate
					  ((:y) '(:left :right :default))
					  ((:x) '(:top :bottom))))))
		   (return-from find-window-for-scrolling window)))))
      (when window
	(do-one window nil))
      (do-one (window-top-frame window)))
    (let ((window-for-scrolling
	    (or next-best
		(cli::follow-synonym-stream *standard-output*))))
      (and (operation-handled-p window-for-scrolling :viewport-position)
	   window-for-scrolling))))

(define-command (com-scroll-window :command-table "Standard scrolling"
				   :provide-output-destination-keyword nil)
		((type '((member :screen :line :beginning :end :point-at-top))
		       :prompt "by" :default :screen)
		 (count 'integer :default +1 :prompt "repeat count")
		 (coordinate '((member :y :x)) :default :y)
		 (typeout-window 'boolean :default nil))
  (scroll-window-command-internal type count coordinate nil typeout-window))

(defvar *scroll-one-screenful-number-of-lines-left* 1)

(defun scroll-window-command-internal (type count coordinate &optional stream typeout-window)
  (setq stream (find-window-for-scrolling :window stream
					  :typeout-window typeout-window
					  :coordinate coordinate))
  (unless stream
    (beep)
    (return-from scroll-window-command-internal))
  (multiple-value-bind (message arg-1 arg-2)
      (ecase type
	(:beginning
	  (values (ecase coordinate
		    (:y :y-scroll-to)
		    (:x :x-scroll-to))
		  0 :absolute))
	(:end
	  (values (ecase coordinate
		    (:y :y-scroll-to)
		    (:x :x-scroll-to))
		  (max 0 (send stream
			       (ecase coordinate
				 (:y :maximum-y-position)
				 (:x :maximum-x-position))))
		  :absolute))
	(:point-at-top
	  (values (ecase coordinate
		    (:y :y-scroll-to)
		    (:x :x-scroll-to))
		  (multiple-value-bind (x y)
		      (send stream :read-cursorpos)
		    (ecase coordinate (:y y) (:x x)))
		  :absolute))
	(:screen
	  (if (and (= (abs count) 1)
		   (operation-handled-p stream :scroll-relative))
	      (if (and (plusp *scroll-one-screenful-number-of-lines-left*)
		       (eq coordinate :y)
		       (operation-handled-p stream :scroll-one-screenful))
		  (values :scroll-one-screenful (minusp count)
			  *scroll-one-screenful-number-of-lines-left*)
		  (multiple-value-bind (from to)
		      (ecase coordinate
			(:y (values :top :bottom))
			(:x (values :left :right)))
		    (when (plusp count)
		      (rotatef from to))
		    (values :scroll-relative from to)))
	      (values
		(ecase coordinate
		  (:y :y-scroll-to)
		  (:x :x-scroll-to))
		(multiple-value-bind (x y)
		    (send stream :size-in-characters)
		  (* count
		     (1- (ecase coordinate (:y y) (:x x)))))
		:relative)))
	(:line
	  (values (ecase coordinate
		    (:y :y-scroll-to)
		    (:x :x-scroll-to))
		  count
		  :relative-jump)))
    (if (not (operation-handled-p stream message))
	(beep)
	(when typeout-window
	  (send-if-handles stream :output-hold-exception)
	  (send-if-handles stream :make-incomplete))
	(send stream message arg-1 arg-2))))

(define-command-accelerator scroll-window-forward-y "Standard scrolling" (#\Scroll)
			    (:echo nil) (numeric-arg-p numeric-arg)
  `(com-scroll-window
     ,(case numeric-arg-p
	((nil :sign) :screen)
	(:infinity :end)
	(otherwise :line))
     ,numeric-arg))

(define-command-accelerator scroll-window-backward-y "Standard scrolling"
			    (#\m-scroll #\Keyboard:Back-Scroll)
			    (:echo nil) (numeric-arg-p numeric-arg)
  `(com-scroll-window
     ,(case numeric-arg-p
	((nil :sign) :screen)
	(otherwise :line))
     ,(- numeric-arg)))

(define-command-accelerator scroll-window-beginning "Standard scrolling"
			    (#\m-< #\Keyboard:Home)
			    (:echo nil) ()
  `(com-scroll-window :beginning))

(define-command-accelerator scroll-window-end "Standard scrolling" (#\m->)
			    (:echo nil) ()
  `(com-scroll-window :end))

(define-command-accelerator scroll-window-forward-x "Standard scrolling" (#\s-scroll)
			    (:echo nil) (numeric-arg-p numeric-arg)
  `(com-scroll-window
     ,(case numeric-arg-p
	((nil :sign) :screen)
	(:infinity :end)
	(otherwise :line))
     ,numeric-arg
     :x))

(define-command-accelerator scroll-window-backward-x "Standard scrolling"
			    (#\m-s-scroll #\s-Keyboard:Back-Scroll)
			    (:echo nil) (numeric-arg-p numeric-arg)
  `(com-scroll-window
     ,(case numeric-arg-p
	((nil :sign) :screen)
	(otherwise :line))
     ,(- numeric-arg)
     :x))

(define-command-accelerator scroll-window-forward-typeout "Standard scrolling" (#\c-scroll)
			    (:echo nil) (numeric-arg-p numeric-arg)
  `(com-scroll-window
     ,(case numeric-arg-p
	((nil :sign) :screen)
	(:infinity :end)
	(otherwise :line))
     ,numeric-arg
     :y t))

(define-command-accelerator scroll-window-backward-typeout "Standard scrolling"
			    (#\c-m-scroll #\c-Keyboard:Back-Scroll)
			    (:echo nil) (numeric-arg-p numeric-arg)
  `(com-scroll-window
     ,(case numeric-arg-p
	((nil :sign) :screen)
	(otherwise :line))
     ,(- numeric-arg)
     :y t))

(defvar *position-q-regs* (make-hash-table :test 'char-equal))

(define-command (com-save-scroll-position :command-table "Standard scrolling"
					  :provide-output-destination-keyword nil)
    ()
   (let ((window (find-window-for-scrolling)))
     (unless window
       (dw:command-error))
     (let* ((pos (cons window (multiple-value-list (send window :viewport-position))))
	    (q-reg (accept 'character :prompt "Save position in" :default nil)))
       (setf (gethash q-reg *position-q-regs*) pos)
       (lexpr-send window :set-viewport-position (rest pos)))))

(define-command-accelerator save-scroll-position "Standard scrolling" (#\c-m-S)
			    (:echo nil) ()
  `(com-save-scroll-position))

(define-command (com-restore-scroll-position :command-table "Standard scrolling"
					     :provide-output-destination-keyword nil)
    ()
  (let ((window (find-window-for-scrolling)))
    (unless window
      (dw:command-error))
    (let* ((q-reg (accept 'character :prompt "Restore position from" :default nil))
	   (pos (gethash q-reg *position-q-regs*)))
      (unless (and pos (eq (first pos) window))
	(dw:command-error))
      (lexpr-send window :set-viewport-position (rest pos)))))

(define-command-accelerator restore-scroll-position "Standard scrolling" (#\c-m-R)
			    (:echo nil) ()
  `(com-restore-scroll-position))

(define-command (com-scroll-search :command-table "Standard scrolling"
				   :provide-output-destination-keyword nil)
    ((direction '((member :forward :backward)) :default :forward))
  (scroll-search-command-internal :direction direction))

(defun scroll-search-command-internal (&key window direction)
  (setq window (find-window-for-scrolling :window window))
  (unless (and window (send-if-handles window :displayed-strings))
    (beep)
    (return-from scroll-search-command-internal))
  (dw::scroll-search-internal
    window direction
    (ecase direction
      (:forward (send window :viewport-displayed-strings-start-index))
      (:backward (send window :viewport-displayed-strings-end-index)))))

(define-command-accelerator scroll-search-forward "Standard scrolling" (#\c-S #\s-S)
			    (:echo nil) ()
  `(com-scroll-search :forward))

(define-command-accelerator scroll-search-backward "Standard scrolling" (#\c-R #\s-R)
			    (:echo nil) ()
  `(com-scroll-search :backward))

(defun windows-for-marking-and-yanking (&key window)
  (let ((list nil))
    (labels ((do-one (window)
	       (unless (member window list)
		 (when (operation-handled-p window :marked-text)
		   (push window list))
		 (map () #'do-one (send-if-handles window :exposed-inferiors))
		 (let ((tw (send-if-handles window :typeout-window)))
		   (when tw
		     (do-one tw))))))
      (do-one (window-top-frame window)))
    (nreverse list)))

(define-command (com-kill-ring-push-all-marked-text :command-table "Marked text"
						    :provide-output-destination-keyword nil)
    ()
   (kill-ring-push-all-marked-text))

(defun kill-ring-push-all-marked-text (&key window)
  (let ((strings (loop for window in (windows-for-marking-and-yanking :window window)
		       as text = (send window :marked-text :return-as-string t :unmark t)
		       when text collect text)))
    (when strings
      (apply #'zwei:kill-ring-push strings))))

(define-command-accelerator kill-ring-push-all-marked-text "Marked text" (#\s-W #\m-W)
			    (:echo nil) ()
  `(com-kill-ring-push-all-marked-text))

(define-command (com-console-kill-ring-push-all-marked-text
		  :command-table "Marked text"
		  :provide-output-destination-keyword nil)
    ((delete 'boolean :default nil))
   (let ((strings (loop for window in (windows-for-marking-and-yanking)
			as text = (send window :marked-text :return-as-string t :unmark t
					:delete delete)
			when text collect text)))
     (when strings
       (apply #'zwei:kill-ring-push strings)
       (let ((history (sys:console-kill-history (tv:sheet-console (window-top-frame nil)))))
	 (unless (null history)
	   (send history :push (apply #'string-append strings)))))))

(define-command-accelerator console-kill-ring-cut "Marked text" (#\Keyboard:Cut)
			    (:echo nil) ()
  `(com-console-kill-ring-push-all-marked-text t))

(define-command-accelerator console-kill-ring-copy "Marked text" (#\Keyboard:Copy)
			    (:echo nil) ()
  `(com-console-kill-ring-push-all-marked-text nil))

(define-command (com-clear-marked-text :command-table "Marked text"
				       :provide-output-destination-keyword nil)
    ()
   (unless (clear-all-marked-text)
     (dw:command-error)))

(defun clear-all-marked-text (&key window)
  (loop for window in (windows-for-marking-and-yanking :window window)
	when (send window :marked-text :unmark t)
	  collect window))

(define-command-accelerator clear-marked-text "Marked text" (#\s-G) (:echo nil) ()
  `(com-clear-marked-text))

(define-command (com-noop :command-table "Input editor compatibility"
			  :provide-output-destination-keyword nil)
    ()
   )

(define-command-accelerator noop "Input editor compatibility"
			    (#\Return #\Space #\Clear-Input #\Rubout #\Tab) (:echo nil)
			    (ignore ignore)
  `(com-noop))

(define-command (com-refresh :command-table "Input editor compatibility"
			     :provide-output-destination-keyword nil)
    ()
   (let ((window (window-top-frame nil)))
     (let ((tv:*asynchronous-window-operation* t))
       (send window :refresh))))

(define-command-accelerator refresh "Input editor compatibility" (#\Refresh) (:echo nil) ()
  `(com-refresh))
