;;; -*- Mode: LISP; Syntax: Common-lisp; Package: COMMAND-PROCESSOR; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; :Show Processes
(define-command (si:com-show-processes :command-table "Process")
    (&key (order '((member :none :percent :name :idle))
		 :default :none
		 :documentation "Sorting method for processes list.")
	  (name '((sequence ((type-or-string si:process)
			      :description "a process name or a string"
			      :string-if-quoted t)))
		 :prompt "process names or substrings"
		 :default nil
		 :documentation
		 "Shows only the named processes or, for any name which is a string, 
shows all processes which have a name containing that string.")
	  (state 'string :default nil :prompt "matching substring"
		 :documentation "Show only processes whose states contain this substring.")
	  (system 'boolean :default t :prompt "system processes"
		  :documentation "Show system processes too.")
	  (priority-above 'integer :default nil
			  :documentation "Show only processes of higher priority than this.")
	  (priority-below 'integer :default nil
			  :documentation "Show only processes of lower priority than this.")
	  (unarrested 'boolean :default nil :prompt "unarrested processes only"
		      :mentioned-default 'T
		      :documentation "Show only processes are not arrested.")
	  (active 'time:time-interval :default nil :prompt "within last"
		  :mentioned-default #.(accept-from-string 'time:time-interval "1 minute")
		  :documentation "Show only processes that have run this recently. (Obsolete, use :Recent)")
	  (recent 'time:time-interval :default nil :prompt "within last"
		  :mentioned-default #.(accept-from-string 'time:time-interval "1 minute")
		  :documentation "Show only processes that have run this recently.")
	  (idle 'time:time-interval :default nil :prompt "for at least"
		:mentioned-default #.(accept-from-string 'time:time-interval "1 minute")
		:documentation "Show only processes that have not run for this amount of time.")
	  (detailed 'boolean :default process::*show-detailed-process-utilization*
		    :mentioned-default 'T
		    :documentation "Show more detailed internal breakdown of process utilization."))
   ;;--- Reconcile argument name Active, which is documented as obsolete.
   (when active
     (if recent
	 (setq recent (min active recent))
	 (setq recent active)))
   (let ((possible-processes nil)
	 (name-strings nil)
	 (processes nil))			;Sortable list of processes we'll display.
     ;; Get the set of processes to consider, and the possible matching names.
     (dolist (frob
	       (if (listp name) name (list name))) ;Compatibility with old calling sequence.
       (if (process:process-p frob)
	   (pushnew frob possible-processes)
	   (pushnew frob name-strings)))
     ;; Filter the processes according to the options.
     ;; If user specified processes only, then match other options against that set.
     ;; If there are name-strings as well, match the union of specified processes
     ;; and any matching substrings against the other options.
     (let ((name-matched nil) (state-matched nil) (priority-above-matched nil)
	   (priority-below-matched nil) (unarrested-matched nil) (recent-matched nil)
	   (idle-matched nil) (system-matched nil))
       (flet ((string-member (list item)
		(member item list :test #'(lambda (string key) (string-search key string)))))
	 (macrolet ((foo (predicate test accessor matched)
		      `(and (or (null ,test) (,predicate ,test (,accessor process)))
			    (setq ,matched t)))
		    (process-idle-time (process)
		      `(or (send ,process :idle-time) most-positive-fixnum)))
	   (dolist (process (or (and (not name-strings) possible-processes)
				process:*all-processes*))
	     (let* ((name-ok (foo string-member name-strings process-name
				  name-matched))
		    (state-ok (foo string-search state tv:peek-process-whostate
				   state-matched))
		    (priority-above-ok (foo < priority-above process-priority
					    priority-above-matched))
		    (priority-below-ok (foo > priority-below process-priority
					    priority-below-matched))
		    (recent-ok (foo  recent process-idle-time recent-matched))
		    (idle-ok (foo  idle process-idle-time idle-matched))
		    (unarrested-ok (and
				     (or (null unarrested)
					 (and (si:process-run-reasons process)
					      (null
						(si:process-arrest-reasons process))))
				     (setq unarrested-matched t)))
		    (system-ok
		      (and
			(or system
			    (not (ldb-test process::process-debug-system-process
					   (process::process-debug-flag process))))
			(setq system-matched 't))))
	       (when (and (or name-ok
			      (and name-strings (member process possible-processes)))
			  state-ok priority-above-ok priority-below-ok
			  recent-ok unarrested-ok idle-ok system-ok)
		 (pushnew process processes))))))
       ;; If we didn't find any processes to show, explain that.
       (when (null processes)
	 (return-from si:com-show-processes
	   (let ((or (not (and name-matched state-matched priority-above-matched
			       priority-below-matched recent-matched unarrested-matched
			       idle-matched system-matched))))
	     (macrolet ((foo (&rest specs)
			  `(nconc ,@(loop for (matched format test) in specs
					  collect `(when (if or (not ,matched) ,test)
						     `((,,format ,,test)))))))
	       (format t "~&No process exists ")
	       (format-textual-list
		 (foo (name-matched
			"with ~{~#[nothing~;~S~;~S or ~:;~S, ~]~:} as a substring of its name"
			name-strings)
		      (state-matched "with ~S as a substring of its state" state)
		      (priority-above-matched "with priority > ~D" priority-above)
		      (priority-below-matched "with priority < ~D" priority-below)
		      (recent-matched "with idle time  ~\\time-interval\\" recent)
		      (system-matched "that wasn't a system process" system)
		      (unarrested-matched "that wasn't arrested" active)
		      (idle-matched "with idle time  ~\\time-interval\\" idle))
		 (lambda (item stream) (apply #'format stream item))
		 :filled t :conjunction (if or "or" "and"))
	       (format t ".~%")))))
       ;; Sort and show the processes.
       (dw:with-resortable-output ((processes order)
				   (:none nil)
				   (:percent (lambda (p-1 p-2)
					       (> (send p-1 :percent-utilization)
						  (send p-2 :percent-utilization))))
				   (:name (lambda (p-1 p-2)
					    (string-lessp (send p-1 :name)
							  (send p-2 :name))))
				   (:idle (lambda (p-1 p-2)
					    (< (or (send p-1 :idle-time) 1000000)
					       (or (send p-2 :idle-time) 1000000)))))
				  ()
	 (formatting-table ()
	   (formatting-column-headings (t :underline-p t)
	     (with-character-face (:italic)
	       (formatting-cell () "Process Name")
	       (formatting-cell () "State")
	       (formatting-cell () "Priority")
	       (formatting-cell () "Idle")
	       (if detailed
		   (progn
		     (formatting-cell () " real%")
		     (formatting-cell () " %cpu")
		     (formatting-cell () " %page"))
		   (formatting-cell () " % utilization"))))
	   (dolist (process processes)
	     (formatting-row ()
	       (formatting-cell ()
		 (present process))
	       (format-cell (tv:peek-process-whostate process) #'write-string)
	       (format-cell (tv:peek-process-priority process) #'write-string)
	       (formatting-cell ()
		 (present (send process :idle-time) 'process-idle-time))
	       (if detailed
		   (progn
		     (formatting-cell ()
		       (format t "~1,1,4$%" (process::percent-utilization process)))
		     (formatting-cell ()
		       (format t "~1,1,4$%" (process::percent-cpu process)))
		     (formatting-cell ()
		       (format t "~1,1,4$%" (process::percent-paging process))))
		   (formatting-cell ()
		     (format t "~1,1,4$%" (process::percent-utilization process)))))))))))


(define-command (com-monitor-system-status :command-table "Debugging"
					   :provide-output-destination-keyword nil)
    (&key (truncate-long-fields 'sys:boolean :default t
				:documentation
				"Whether to inhibit truncation of long field contents.")
	  (minimum-utilization '((number 0 100) :description "percentage") :default 0.1
			       :documentation
			       "Less than this percent usage is not interesting."))
   "A low-tech variation of Peek for use on home terminals."
  (labels ((default-mail-file-name ()
	     (dolist (mf (zwei:possible-default-mail-file-pathnames
			   (fs:user-homedir
			     (second (send si:*user* :mail-address)))))
	       (let ((path (zwei:default-inbox-pathname mf)))
		 (if path (return path)))))
	   (find-mail-file ()
	     (ignore-errors (send (default-mail-file-name) :new-version :newest)))
	   (maybe-truncate (string n)
	     (cond ((not truncate-long-fields) string)
		   ((<= (string-length string) n) string)
		   (t
		    (format nil "~A~C"
			    (substring string 0 (- n 1))
			    (if (sys:remote-terminal-p) #\* #\ )))))
	   (tabber (n)
	     #'(lambda ()
		 (let ((column (send *standard-output* :read-cursorpos :character)))
		   (when (>= column n) (terpri) (setq column 0))
		   (write-string (make-string (- n column) :initial-element #\Space))))))
    (let ((mail-file (find-mail-file)))
      (flet ((mail-file-info () (condition-case (condition)
				    (cadr (fs:directory-list
					    (or mail-file (setq mail-file (find-mail-file)))))
				  (sys:error condition))))
	(do ((flag nil t)
	     (mail-p (ignore-errors (getf (cdr (mail-file-info)) :modification-date))))
	    ((and flag
		  (let ((c (send *terminal-io* :tyi-no-hang)))
		    (cond ((not c) nil)
			  ((member c '(#\End #\Rubout #\Return)) t)
			  ((member c '(#\Space)) nil)
			  (t (send *terminal-io* :untyi c) t))))
	     (multiple-value-bind (ignore ypos)
		 (send *terminal-io* :read-cursorpos)
	       (send *terminal-io* :set-cursorpos 0 ypos)
	       (send *terminal-io* :clear-rest-of-line)))
	  (send *terminal-io* :clear-window)
	  ;; ==========================================================================
	  (format t "~\\DATIME\\  ")
	  (cond ((or (not zl:user-id) (string-equal zl:user-id ""))
		 (format t "No one is logged in.~%"))
		(t
		 (format t "Machine is being used by ~A~@[ (~A)~].~%"
			 zl:user-id
			 (ignore-errors
			   (si:parse-personal-name
			     (send (net:find-object-named :user zl:user-id)
				   :personal-name))))))
	  (format t "~&You are in ~A. The current package is ~A.~%"
		  *terminal-io* (si:pkg-name *package*))
	  (if (not tv:selected-window)
	      (format t "~&No window is selected.~2%")
	      (format t "~&~A is the selected window.~2%" tv:selected-window))
	  ;; ==========================================================================
	  ;; 25 of process name, 1 space, 20 of state, 1 space, 9 of priority, 1 space
	  ;; 5 (nn.m%) of percentage, 2 spaces, idle time (up to 15 chars)
	  ;; Designed to fit on an 80-column terminal
	  (format t  "~&~A~26T~A~47T~A~58T~A~65T~A"
		  "Process Name" "State" "Priority" "Usage" "Idle")
	  (if (operation-handled-p *standard-output* :draw-line)
	      (multiple-value-bind (x y)
		  (send *standard-output* :read-cursorpos :pixel)
		(terpri)
		(multiple-value-setq (nil y)
		  (send *standard-output* :read-cursorpos :pixel))
		(decf y 2)
		(send *standard-output* :draw-line 0 y x y))
	      (terpri))
	  (dolist (process sys:all-processes)
	    (when (>= (send process :percent-utilization) minimum-utilization)
	      (format
		t "~A~Q~A~Q~A~Q ~1,1,4$% ~\\PEEK-PROCESS-IDLE-TIME\\~%"
		(maybe-truncate (process-name process) 25.) (tabber 26.)
		(maybe-truncate (tv:peek-process-whostate process) 20.) (tabber 47.)
		;; Don't try to truncate a priority. Too confusing!
		(tv:peek-process-priority process) (tabber 57.) ;was (SEND PROCESS :PRIORITY)
		(send process :percent-utilization) (send process :idle-time))))
	  ;; ==========================================================================
	  (format t "~2&~:[No open files.~;O~pen file~P:~Q~~]~%"
		  (fs:all-open-files) (length (fs:all-open-files)) #'si:show-open-files)
	  ;; ==========================================================================
	  (let ((info (mail-file-info)))
	    (cond ((not info)
		   (format t "There is no mail in ~A.~%" mail-file)
		   (setq mail-p nil))
		  ((atom info)
		   (format t "Cannot access mail file~@[ ~A~].~%" mail-file))
		  (t
		   (let ((modification-date (getf (cdr info) :modification-date))
			 (reference-date (getf (cdr info) :reference-date)))
		     (unless (equal mail-p modification-date) (beep))
		     (setq mail-p modification-date)
		     (format t "There is~:[~; new~] mail in ~A~@[ (~\\TIME\\)~].~%"
			     (and modification-date reference-date
				  (>= (getf (cdr info) :modification-date)
				      (getf (cdr info) :reference-date)))
			     (car info)
			     modification-date)))))
	  ;; ==========================================================================
	  (format t "~%Press Space to update, or End to exit.")
	  (send *terminal-io* :clear-rest-of-window)
	  (process-wait-with-timeout "Input or Timeout"
				     #.(* 30 60)	;(* seconds jiffies)
				     #'(lambda (stream) (send stream :listen))
				     *terminal-io*))))))


;;; Lifted from TV:WHO-LINE-RUN-STATE-UPDATE, more or less
(defun tv:peek-process-whostate (process)
  (cond ((process:active-p process) (process:process-whostate process))
	((eq (process:process-state process) 'process::dead) "Dead")
	((not (null (process:process-arrest-reasons process))) "Arrest")
	((null (process:process-run-reasons process)) "Stopped")
	(t (string (process:process-state process)))))

(defun tv:peek-process-priority (process)
  (with-output-to-string (s)
    (flet ((print-priority (class priority)
	     (select class
	       (process::*process-priority-class-idle-time*
		(format s "NA"))
	       (process::*process-priority-class-batch*
		(format s "Batch"))
	       ((process::*process-priority-class-interactive*
		  process::*process-priority-class-foreground*)
		(if (zerop (ldb process::%%scheduler-priority-preemption-field priority))
		    (write-char #\space s)
		    (write-char #\P s))
		(format s "~A:~D"
			(if (eql class process::*process-priority-class-interactive*) "I" "F")
			(process::back-convert-foreground-priority priority)))
	       (process::*process-priority-class-deadline*
		(if (zerop (ldb process::%%scheduler-priority-preemption-field priority))
		    (write-char #\space s)
		    (write-char #\P s))
		(format s "D:~D"
			(dpb 0 process::%%scheduler-priority-preemption-field
			     (ldb process::%%scheduler-priority-priority priority))))
	       (otherwise
		(format s "~D:~D" class priority)))))
      (let* ((base (process::process-base-process-priority process))
	     (promotion (process::process-process-priority process))
	     (class (process::scheduler-priority-class base))
	     (priority (process::scheduler-priority-priority base)))
	(print-priority class priority)
	(unless (eql promotion base)
	  (let* ((class-2 (process::scheduler-priority-class promotion))
		 (priority-2 (process::scheduler-priority-priority promotion)))
	    (if (eql class class-2)
		(select class
		  ((process::*process-priority-class-interactive*
		     process::*process-priority-class-foreground*)
		   (format s "~@D"
			   (- (process::back-convert-foreground-priority priority-2)
			      (process::back-convert-foreground-priority priority))))
		  (process::*process-priority-class-deadline*
		   (format s "~@D" (- priority-2 priority))))
		(write-char #\> s)
		(print-priority class-2 priority-2))))))))

;;; No reason for this to be a presentation type, as opposed to a subroutine or
;;; a defformat, really.
(define-presentation-type process-idle-time ()
   :printer ((idle-time stream)
	     (cond ((null idle-time) (write-string "forever" stream))
		   ((zerop idle-time))
		   ((< idle-time 60) (format stream "~D sec" idle-time))
		   ((< idle-time 3600) (format stream "~D min" (floor idle-time 60)))
		   (t (format stream "~D hr" (floor idle-time 3600))))))

(define-presentation-type process:process ()
   :no-deftype t
   ;; It works to inherit this from PRINC, of course, but I'd rather that PRINC inherited
   ;; this.
   :printer ((process stream)
	     (write-string (process:process-name process) stream))

   :parser ((stream &key initially-display-possibilities)
	    (dw:completing-from-suggestions (stream :partial-completers '(#\space)
						    :type 'process:process
						    :initially-display-possibilities
						    initially-display-possibilities)
	      (process:map-over-all-processes
		#'(lambda (process)
		    (dw:suggest (process:process-name process) process)))))

   :description "a process")

(define-command (si:com-set-process-priority :command-table "Process"
					     :provide-output-destination-keyword nil)
    ((process 'si:process :default *current-process* :prompt "of process")
     (priority '((scl:token-or-type (:background) integer)) :prompt "to"))
  (setf (process-priority process) priority))

(define-command (si:com-halt-process :command-table "Process"
				     :provide-output-destination-keyword nil)
    ((process 'si:process))
  (process-enable-arrest-reason process))

(define-presentation-to-command-translator com-halt-process
   (si:process :gesture nil)
   (process)
  `(si:com-halt-process ,process))

(define-command (si:com-start-process :command-table "Process"
				      :provide-output-destination-keyword nil)
    ((process 'si:process))
  (dolist (reason (si:process-arrest-reasons process))
    (process-disable-arrest-reason process reason)))

(define-presentation-to-command-translator com-start-process
   (si:process :gesture nil)
   (process)
  `(si:com-start-process ,process))

(define-command (si:com-restart-process :command-table "Process"
					:provide-output-destination-keyword nil)
    ((process 'si:process :confirm t)
     &key
     (confirm '(token-or-type (:mouse) boolean)
	      :default nil
	      :mentioned-default t
	      :documentation
	      "Request confirmation before restarting the process"))
  (when (confirm-destructive-process-command process confirm "Reset")
    (process-reset process)))

(define-presentation-to-command-translator com-restart-process
   (si:process :gesture nil)
   (process)
  `(si:com-restart-process ,process :confirm :mouse))

(define-command (si:com-flush-process :command-table "Process"
				      :provide-output-destination-keyword nil)
    ((process 'si:process :confirm t)
     &key
     (confirm '(token-or-type (:mouse) boolean)
	      :default nil
	      :mentioned-default t
	      :documentation
	      "Request confirmation before flushing the process"))
   (when (confirm-destructive-process-command process confirm "Flush")
     (process-flush process)))

(define-presentation-to-command-translator com-flush-process
   (si:process :gesture nil)
   (process)
  `(si:com-flush-process ,process :confirm :mouse))

(define-command (si:com-kill-process :command-table "Process"
				     :provide-output-destination-keyword nil)
    ((process 'si:process :confirm t)
     &key
     (confirm '(token-or-type (:mouse) boolean)
	      :default nil
	      :mentioned-default t
	      :documentation
	      "Request confirmation before killing the process"))
  (when (confirm-destructive-process-command process confirm "Kill")
    (process-kill process)))

(define-presentation-to-command-translator com-kill-process
   (si:process :gesture nil)
   (process)
  `(si:com-kill-process ,process :confirm :mouse))

(define-command (si:com-debug-process :command-table "Process"
				      :provide-output-destination-keyword nil)
    ((process 'si:process :confirm t))
  (dbg:dbg process))

(define-presentation-to-command-translator com-debug-process
   (si:process :gesture :describe)
   (process)
  `(si:com-debug-process ,process))

(defun confirm-destructive-process-command (process type string)
  (cond ((eq type t)
	 (yes-or-no-p "~A process ~A" string process))
	((eq type :mouse)
	 (tv:mouse-y-or-n-p (format nil "~A process ~A" string process)))
	(t t)))

(define-command (si:com-report-bug :provide-output-destination-keyword nil
				   :command-table "Debugging")
    ((system 'string
	     :prompt "about system"
	     :default (if (zerop dbg:*debugger-level*)
			  (or dbg:*default-bug-report-recipient-system*
			      dbg:*default-default-bug-report-recipient-system*)
			  (dbg:bug-report-recipient-system dbg:*error*))
	     :documentation
	     "System, such as Zmail, for which to report a problem"))
   (fs:force-user-to-login)			;Before switching processes, windows
   (dbg:mail-bug-report-1 :process-name "Mail from Report Bug command"
			  :system system))

;; --- Assumes fixed format FEP output
#+3600
(defun interpret-fep-crash-data (crash-data-string
				 &optional
				 (stream *standard-output*)
				 (world (sys:loaded-band-name))
				 (microcode sys:%microcode-version)
				 (mic-version (sys:microcode-version-number sys:%microcode-version)) 
				 (load-symbol-table :ask))
  (unless (equalp world (sys:loaded-band-name))	;--- Future
    (error "Don't know how to interpret in other worlds yet."))
  (let ((index (cl:position #\/ crash-data-string)))
    (unless index				;Don't grok.
      (format stream "~&~,2@T~~A~~%" crash-data-string)
      (return-from interpret-fep-crash-data nil))
    (let ((end-fixed (or (cl:position #\Return crash-data-string :end index :from-end t)
			 (length crash-data-string)))
	  (current-index (or (cl:position #\ crash-data-string :start index) 0)))
      (flet ((odd-pc ()
	       (setf index (or (cl:position #\Close crash-data-string :start index) index))
	       (equalp (cl:elt crash-data-string (1- index)) #\d))
	     (next-integer ()
	       (when index
		 (multiple-value-bind (integer next-index)
		     (cl:parse-integer
		       crash-data-string :start (1+ index) :radix 8 :junk-allowed t)
		   (setf index (cl:position #\/ crash-data-string :start next-index))
		   integer))))
	(let* ((odd-p (odd-pc))
	       (macro-pc (sys:%make-pointer (if odd-p sys:dtp-odd-pc sys:dtp-even-pc) (next-integer)))
	       (vma (sys:%make-pointer sys:dtp-locative (next-integer)))
	       (sys:fp (sys:%make-pointer sys:dtp-locative (next-integer)))
	       (sys:sp (sys:%make-pointer sys:dtp-locative (next-integer)))
	       (exec-pc (if (< current-index index) -1 0))
	       (cpc (next-integer))
	       (upcs (loop as next = (next-integer)
			   while next
			   when (evenp count)
			     collect next into even
			   else
			     collect next into odd
			   count next into count
			   finally (return (nconc even odd)))))
	  (format stream "~&~,2@T~~A~~2%" (substring crash-data-string 0 end-fixed))
	  ;; --- some of these could create mouse-sensitive landmines
	  (format stream "~@{~&~,4@T~~A/~,11@T~\\presentation\\~~}~%"
		  "Macro PC" macro-pc 'vma vma 'sys:fp sys:fp 'sys:sp sys:sp)
	  (format stream "~@[~,6@T~~A~~]~%" (ignore-errors
						(with-output-to-string (*standard-output*)
						  (describe macro-pc t))))
	  (let ((model (si:machine-model))
		(error-table (dbg:current-error-table)))
	    (format stream "~,2@T~~A~~2%"
		    (with-output-to-string (*standard-output*)
		      (loop for micro-pc in (cons cpc upcs)
			    as name = "CPC" then "OPC+"
			    for index upfrom -1
			    as info = (with-output-to-string (*standard-output*)
					(dbg:decode-micro-pc-internal
					  micro-pc model error-table
					  #'(lambda ()
					      (prog1 (dbg:find-symbol-table
						       microcode mic-version
						       :load-symbol-table load-symbol-table)
						     (setf load-symbol-table nil)))
					  nil))
			    do
			(format t "~&~:[~;~]~,2@T~A~:[~O~;~*~]/~,11@T~~A~"
				(= index exec-pc) name (minusp index) index info)))))
	  t)))))

;; Also called by zwei:com-insert-crash-data
#+3600
(defun si:show-crash-data (&optional (stream *standard-output*) (interpreted nil))
  (setf (fill-pointer si:*crash-data*) 0)
  (setq sys:*crash-data-request* si:*crash-data*)
  (process-wait-with-timeout "Data from FEP" (* 60. 10.)
    #'(lambda () (not sys:*crash-data-request*)))
  (when (cl:shiftf sys:*crash-data-request* nil)
    (error "The FEP didn't respond to a request to get the crash data."))
  (if interpreted
      (interpret-fep-crash-data si:*crash-data* stream)
      (format stream "~&~2@T~~A~~%" si:*crash-data*)))

#+IMach
(defvar si:*crash-data-length* 10000)

#+IMach
(defun si:show-crash-data (&optional (stream *standard-output*) (interpreted nil))
  (declare (ignore interpreted))
  (loop for guess = si:*crash-data-length* then (* guess 2)
	as crash-data = (cl:make-string guess :initial-element #\ )
	do (sys:fep-crash-data-request crash-data)
	until (eql (cl:char crash-data (1- guess)) #\ )
	finally (setq si:*crash-data-length* guess)
		(format stream "~&~2@T~~A~~%" (string-trim '(#\ ) crash-data))))

(define-command (si:com-show-crash-data :command-table "Debugging")
    (&key
      (interpreted 'scl:boolean
		   :default nil
		   :mentioned-default t
		   :documentation
		   "Interpret the data in the current world"))
   (si:show-crash-data *standard-output* interpreted))

(define-command (si:com-show-object :command-table "Inspection")
    ((object 'string
	     :prompt "any name"
	     :documentation "Name of object to show description of")
     &key
     (type '((cl:member :all :area :structure :package :pathname :system
			:variable :function :flavor :resource
			;; :logical-host :partition  ; to be added
			))
	   :default :all
	   :documentation "Type of object to find by that name"))
   (let ((obj object)
	 (quoted (equal 0 (string-search-char #\' object)))
	 (pkg))
     (when quoted
       (setq obj (substring obj 1)))
     (case type
       ((:all :variable :function :flavor :resource :area :structure)
	(let ((tem (string-search-char #\: obj)))
	  (when tem
	    (setq pkg (substring obj 0  tem))
	    (setq obj (substring obj (1+ tem)))
	    (when (string-equal ":" obj :end2 1)	;Tolerate ::
	      (setq obj (substring obj 1))
	      (when (string-equal ":" obj :end2 1)	;Hack :::
		(let* ((tem  (string-search #\: obj :start2 1))
		       (tem1 (substring obj 1 tem)))
		  (setq pkg
			(or (sys:find-package-for-syntax tem1 pkg :find)
			    (progn
			      (format t "~& Can't find package ~:@(~A~) for syntax ~:@(~A~)."
				      tem1 pkg)
			      (return-from si:com-show-object))))
		  (setq obj (substring obj (1+ tem)))
		  (when (string-equal ":" obj :end2 1)	;Tolerate :: (again)
		    (setq obj (substring obj 1)))))))
	  (if (not (setq obj (intern-soft (string-upcase obj) pkg)))
	      (format t "~& Can't find the object \"~A\"." object)
	      (case type
		(:all
		 (if quoted (describe obj)
		     (if (boundp obj) (describe (symbol-value obj))
			 (format t "~& ~A is unbound." obj))))
		(:variable
		 (if (boundp obj) (describe (symbol-value obj))
		     (format t "~& ~A is unbound." obj)))
		(:function
		 (if (fboundp obj) (describe (symbol-function obj))
		     (format t "~& ~A is not defined as a function." obj)))
		(:flavor
		 (if (flavor:find-flavor obj nil)
		     (describe (flavor:find-flavor obj nil))
		     (format t "~& ~A is not defined as a flavor." obj)))
		(:resource
		 (if (get obj 'defresource) (describe (get obj 'defresource))
		     (format t "~& ~A is not defined as a resource." obj)))
		(:area
		 (if (member obj sys:area-list) (describe-area (symbol-value obj))
		     (format t "~& ~A is not defined as an area." obj)))
		(:structure
		 (if (boundp obj)
		     (let ((nss (named-structure-p (symbol-value obj))))
		       (if (and nss (get nss 'defstruct-description))
			   (describe-defstruct (symbol-value obj))
			   (format t "~& ~A does not have a structure definition." (symbol-value obj))))
		     (format t "~& ~A is unbound." obj)))))))
       (:package
	(let ((pkg (pkg-find-package object :find)))
	  (if pkg (describe pkg)
	      (format t "~& \"~A\" is not a package." object))))
       (:pathname
	(let ((pathname (fs:parse-pathname object)))
	  (format t "~& I don't fully understand how to do pathnames yet.~%")
	  (describe pathname)))
       (:system
	(let ((sys:system (sct:find-system-named object nil nil)))	;loaded systems only, for now
	  (if sys:system (describe sys:system)
	      (format t "~& \"~A\" is not a loaded system." object))))
       (otherwise
	(format t "~& I don't know how to show ~A objects." type)))))


;;;Command tables

(defun show-command-table (command-table
			   &key fresh-line-first show-more
			   (show-commands t) locally multiple-columns)
  (if fresh-line-first (fresh-line))
  (labels ((show (c i brief)
	     ;; Brief allows us to dive an extra half level when Locally is used
	     (dw:formatting-row ()
	       (dw:formatting-cell ()
		 (dw:with-output-as-presentation (:object c :type 'command-table)
		   (princ (format nil "~VT~'b~A~~:[~; ...~]"
				  i c
				  ;; Distinguish between the case where there was nothing
				  ;; more to print and the case where things were truncated.
				  (and show-more
				       brief
				       (or (and show-commands
						(cp::command-table-command-alist c))
					   (cp::command-table-inherit-from c))))))))
	     (unless brief
	       (when show-commands 
		 (dolist (x (cp::command-table-command-alist c))
		   (dw:formatting-row ()
		     (dw:formatting-cell ()
		       (dw:with-output-as-presentation
			   (:object (if (atom (cdr x)) (cdr x) (cadr x)) ;;Who knows?? -kmp
			    :type `(command-name :command-table ,c))
			 (princ (format nil "~VT~'i~A~" (+ i 2) (car x))))))))
	       (mapcar #'(lambda (x) (show x (+ i 2) locally))
		       (sort (copy-list (cp::command-table-inherit-from c))
			     #'string-lessp 
			     :key #'cp::command-table-name)))))
    (dw:formatting-table (t :multiple-columns multiple-columns)
      (show (find-command-table command-table) 0 nil))))

(define-command (com-show-command-table :command-table '("Inspection" "Documentation"))
    ((command-table 'command-table
		    :default (find-command-table "Global")
		    :prompt "named"
		    :documentation "Table of which to show the underlying tree")
     &key
     (show-commands 'scl:boolean
		    :default t
		    :prompt "as well as tables"
		    :documentation "Whether to show the commands in the tree, also")
     (locally 'scl:boolean
	      :default nil
	      :mentioned-default t
	      :documentation "Whether to descend into inherited command tables")
     (multiple-columns '((or scl:boolean ((integer 1)))
			 :description "a boolean or a number of columns")
		       :default nil
		       :mentioned-default t
		       :documentation "Whether to use multiple columns, or how many to use"))
   (show-command-table command-table
		       :fresh-line-first t
		       :show-more t
		       :locally locally
		       :show-commands show-commands
		       :multiple-columns multiple-columns))

(define-presentation-to-command-translator com-show-command-table
   (command-table :gesture :describe)
   (table)
  `(com-show-command-table ,table :locally t))

(defun climb-tree (node parents-fn &key (test #'eql) roots)
  ;;  Given a in a tree and way to find the superiors, constructs a list representation
  ;;  of the shape of the tree and returns the requested roots, or a list of all roots.
  ;;
  ;; e.g.,
  ;;  (DEFPROP W (Y Z) PARENTS)
  ;;  (DEFPROP Y (X)   PARENTS)
  ;;  (DEFPROP Z (X)   PARENTS)
  ;;  (DEFPROP X ()    PARENTS)
  ;;  (CLIMB-TREE 'W #'(LAMBDA (X) (GET X 'PARENTS)))
  ;;  => ((X (Z (W)) (Y (W))))
  (let ((branches '()))
    (labels ((climb (branch)
	       (or (find branch branches :test test :key #'car)
		   (let ((entry (list* branch t '())))
		     (push entry branches)
		     (dolist (parent (funcall parents-fn branch))
		       (setf (cadr entry) nil)
		       (pushnew entry (cddr (climb parent)) :test test :key #'car))
		     entry))))
      (climb node)
      (let ((roots (remove-if-not #'(lambda (x)
				      (if roots
					  (member (car x) roots :test test)
					  (cadr x)))
				  branches)))
	(dolist (entry branches) (setf (cdr entry) (cddr entry)))
	roots))))

(define-command (com-find-command-table :command-table "Inspection")
    ((command-table 'cp:command-table
		    :prompt "named"
		    :documentation "Command table to find")
     &key
     (relative-to '((token-or-type (:any) ((sequence cp:command-table))))
		  :prompt "command tables"
		  :default (list *command-table*)
		  :mentioned-default :any
		  :documentation "Command tables relative to which position is to be shown")
     (format '(member :tree :table)
	     :default ':table
	     :documentation "The style of output to use."))
  (if (eq relative-to :any) (setq relative-to nil))
  (let ((trees (climb-tree command-table #'cp::command-tables-inheriting-from
			   :roots relative-to)))
    (cond ((not trees)
	   (format t "~&Command table ~A is not inherited by ~{~A~^ or ~}.~%"
		   command-table relative-to))
	  ((and (= (length trees) 1)
		(= (length (first trees)) 1)
		(eq (first (first trees)) command-table))
	   (format t "~&Command table ~A is not inherited by ~{~A~^ or ~}.~%"
		   command-table
		   (if (null relative-to)
		       '("any command table")
		       (mapcar #'(lambda (table)
				   (if (eq table command-table) "itself" table))
			       relative-to))))
	  (t
	   (format t "~&~:[This~;These~] ~\\is-are\\ the path~:P ~
			 from ~{~A~^ and ~} to ~A:~%"
		   (cdr trees) (length trees)
		   (or relative-to '("any command table")) command-table)
	   (ecase format
	     (:table
	       (labels ((show-tree (tree &optional (level 0))
			  (let ((table (car tree))
				(children (cdr tree)))
			    (fresh-line)
			    (dotimes (i (+ 2 (* 2 level))) (ignore i) (write-char #\Space))
			    (format t "~A~%" table)
			    (dolist (child children) (show-tree child (+ level 1))))))
		 (dolist (tree trees) (terpri) (show-tree tree))
		 (terpri)))
	     (:tree
	       (dw:format-graph-from-root trees
					  #'(lambda (x stream)
					      (present (car x) 'command-table
						       :stream stream))
					  #'cdr
					  ;; There's a bug in format-graph-from-root
					  ;; which makes this option suboptimal.
					  ;; Bug mail sent to Bug-DW. -kmp 17-Nov-90
					  :dont-draw-duplicates t
					  :root-is-sequence t
					  :orientation :horizontal)))))))

(define-presentation-to-command-translator com-find-command-table
   (command-table :gesture nil)
   (table)
  `(com-find-command-table ,table))

(define-command (com-find-command-symbol :command-table "Inspection")
    ((command-names '((sequence ((type-or-string defined-command-name)
				 :string-if-quoted t)))
		    :default '()
		    :prompt "for command names"
		    :provide-default nil
		    :documentation "Names of commands to search for."))
   (dolist (command-name command-names)
     (multiple-value-call #'show-command-symbols-found
			  command-name
			  (find-command-symbol command-name))))

