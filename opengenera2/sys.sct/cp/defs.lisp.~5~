;; -*- Mode: LISP; Syntax: Common-Lisp; Package: COMMAND-PROCESSOR; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; The *xxx* variables control the behavior of the Lisp/Command loop.

(defvar *dispatch-mode* :command-preferred)
(defvar *blank-line-mode* :reprompt)
(defvar *prompt* "Command: ")

;; The *default-xxx* variables provide defaults for calls to read-command and
;; read-command-or-form.

(defvar *default-dispatch-mode* :command-preferred)
(defvar *default-blank-line-mode* :reprompt)
(defvar *default-prompt* "Command: ")

;;; Options
(defvar *command-dispatchers* '(#\:))
(defvar *form-dispatchers* '(#\,))

(defvar *arg-terminators* `(#\space))
(defvar *keyword-key-terminators* '(#\space))
(defvar *command-name-terminators* '(#\space))
(defvar *line-terminators* '(#\return #\c-return))
(defvar *command-terminators* '(#\end))

(defvar *command-name-completers* '(#\complete))
(defvar *command-previewers* '(#\m-complete))
(defvar *command-name-partial-completers* '(#\space #\line))
(defvar *keyword-key-partial-completers* '(#\space #\line))

;;; Validation
(defvar *dispatch-modes* '(:form-preferred :command-preferred :form-only :command-only))
(defvar *prompt-alist*
	'((:form-preferred . "") (:command-preferred . "Command: ")
	  (:form-only . "") (:command-only . "Command: ")))

(defvar *blank-line-modes* '(:reprompt :beep :ignore :return-nil :end-returns-nil))

(defmacro check-prompt-arg (arg)
  `(si:check-arg ,arg
	      (validate-prompt-option ,arg)
	      "a valid Command Processor prompt"))

(defmacro check-dispatch-mode-arg (arg)
  `(si:check-arg ,arg
	      (member ,arg *dispatch-modes*)
	      "a valid Command Processor dispatch mode"))

(defmacro check-blank-line-mode-arg (arg)
  `(si:check-arg ,arg
	      (member ,arg *blank-line-modes*)
	      "a valid Command Processor blank line mode"))

(defmacro reset-mode (mode-var mode-validate-var)
  `(progn
     (format t "~&Warning: ~S is not a valid setting for ~A.  ~@
	          Setting it to ~S instead."
	     ,mode-var ',mode-var ,mode-validate-var)
     (setq ,mode-var ,mode-validate-var)))

(defmacro validate-mode (mode-var mode-validate-var mode-possibilities-var)
  `(unless (member ,mode-var ,mode-possibilities-var)
     (reset-mode ,mode-var ,mode-validate-var)))

;; This is called by places which can't shouldn't invoke the debugger.
;; This should also validate the prompt.

(defvar *validate-dispatch-mode* :command-preferred)
(defvar *validate-blank-line-mode* :reprompt)
(defvar *validate-prompt* "Command: ")

(defmacro cp-error (correct-input format-string &rest format-args)
  `(error 'zl:parse-ferror
	  :correct-input ,correct-input
	  :format-string ,format-string
	  :format-args (list .,format-args)))
