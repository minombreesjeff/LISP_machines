;;; -*- Syntax: Zetalisp; Mode: LISP; Package: SYSTEM-INTERNALS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Command Processor commands dealing with the System Construction Tools

(cp:define-command (com-load-patches :command-table "System Maintenance")
    ((system 'scl:(token-or-type (:All :Local)
		    (sequence (sct:system :patchable-only t)))
	     :default :all
	     :prompt "for systems"
	     :documentation "name(s) of system(s) for which to load patches")
     &key
     (query '((cl:member :yes :no :ask))
	    :mentioned-default :yes
	    :default :no
	    :documentation "Whether to ask before loading each patch")
     (include-components 'scl:boolean
			 :default t
			 :documentation
			 "Whether to include component systems")
     (save '((token-or-type (:prompt :no-save) fs:pathname))
	   :default :no-save
	   :mentioned-default :prompt
	   :documentation
	   "File in which to save the resulting world (/"Prompt/" to be prompted later)")
     (show '((cl:member :yes :no :ask))
	   :default :yes
	   :documentation "Whether to print anything while loading")
     (dangerous-patch-action '((cl:member :skip :query :load))
			     :default :skip
			     :documentation "Whether to skip loading /"dangerous/" patches")
     (excluding 'scl:(null-or-type (sequence (sct:system :patchable-only t)))
		:default nil
		:prompt "systems"
		:documentation "Exclude loading patches for these systems")
     (machine-type `(cl:member ,@sct:*all-machine-types*)
		    :default sct:*local-machine-type*
		    :prompt "machine type"
		    :documentation
		      "Load patches for the target machine type"))
  (when (memq system '(:all :local))
    (setq system (list system)))		;--- compatibility kludge
  (when (eq query ':ask)
    (setq query (if (fquery nil "Ask before loading each patch? ")
			 :yes :no)))
  (when (eq query :yes)
    (setq show :yes))
  (when (eq show ':ask)
    (setq show (if (fquery nil "Print informational messages while loading patches? ")
		   :yes :no)))
  (when (eq show :no)
    (format t "~& ..."))
  (when (eq save :no-save)			;dwim
    (setq save nil))
  (let ((services-enabled net:*services-enabled*)
	(something-was-loaded))
    (let-if save ((tv:more-processing-global-enable tv:more-processing-global-enable))
      (catch-error-restart-if save ((error)
				    "Skip disk-saving the resulting world, as well")
	(when save
	  (setq tv:more-processing-global-enable nil)
	  (disable-services))
	(fs:with-automatic-login-to-sys-host	; OPEN will FS:FORCE-USER-TO-LOGIN
	  (loop for sys in system
		as sys-name = (selectq sys
				(:all "all")
				(:local "all locally maintained")
				(otherwise (sct:system-short-name sys)))
		do (when (or (eq query :no)
			     (y-or-n-p (format nil "Load patches for ~:[~A~;~A systems~]? "
					 (memq sys '(:all :local)) sys-name)))
		     (let ((arglist `(:include-components ,include-components
				      :dangerous-patch-action ,dangerous-patch-action
				      :excluding ,excluding
				      :query ,(eq query :yes)
				      :silent ,(eq show :no)
				      :machine-type ,machine-type)))
		       (when (lexpr-funcall #'load-patches
					    (if (memq sys '(:all :local)) sys sys-name)
					    arglist)
			 (setq something-was-loaded t)))))
	  (when save
	    (setq tv:more-processing-global-enable t)
	    (if something-was-loaded
		(disk-save (if (eq save :prompt) nil save))
	      (format query-io "~&World not saved because no patches were loaded."))
	    (when services-enabled (enable-services services-enabled)))
	  (format t "~:[~& ...~;~] Done." (eq show :no))))))
  (fresh-terpri)
  (values))

(cp:define-command (com-load-system :command-table "System Maintenance")
    ((system-spec '((scl:type-or-string sct:system))
		  :default-type 'sct:system
		  :confirm t
		  :documentation "Program system to load")
     &key
     (condition '((cl:member :always :newly-compiled))
		:default :newly-compiled
		:documentation "Under what condition to load each file")
     (query '((cl:member :everything :yes :confirm-only :no))
	    :mentioned-default :everything
	    :default :no
	    :documentation
	    "Whether to ask about loading each file, just confirm the list of files, or don't ask")
     (redefinitions-ok 'scl:boolean
		       :default nil
		       :mentioned-default t
		       :documentation
		       "Whether to proceed through redefinition warnings")
     (version 'sct:system-version
	      :default :released
	      :documentation "Which major version of the system to load")
     (branch `((scl:null-or-type
		 ((sct:system-branch :system ,system-spec))))
	     :documentation "A system branch"
	     :default (and system-spec (not (stringp system-spec))
			   (sct:system-version-controlled system-spec)
			   (sct:system-default-system-branch system-spec))
	     :when (and (cl:member :version-control cl:*features*)
			(or (stringp system-spec)
			    (sct:system-version-controlled system-spec))))
     (silent 'scl:boolean
	     :default nil
	     :mentioned-default t
	     :documentation "Whether to suppress all terminal output")
     (load-patches 'scl:boolean
		   :default t
		   :documentation
		   "Whether to load patches after loading the system")
     (include-components 'scl:boolean
			 :default t
			 :documentation
			 "Whether to include component systems")
     (component-version 'sct:system-version
			:default nil
			:mentioned-default :released
			:documentation "Which version of the component systems to load")
     (simulate 'scl:boolean
	       :prompt "loading"
	       :default nil
	       :mentioned-default t
	       :documentation
	       "Whether to print the plan for loading, without doing it")
     (machine-type `(cl:member ,@sct:*all-machine-types*)
		   :default sct:*local-machine-type*
		   :prompt "machine type"
		   :documentation
		     "Load system for the target machine type"))
   (let ((system (sct:find-system-named system-spec nil nil t))
	 (ok-to-proceed t))
     ;; this check is necessary here because only loaded systems are checked
     ;; in the :system type reader.  This is to prevent reading files,
     ;; extraneous output, long delays and the like during command line input.
     (if (not system)
	 (format t "~& Error: System ~A not found." system-spec)
	 (let ((load-system-options))
	   (setq system-spec			; in case a new sysdcl is loaded
		 (sct:system-short-name system))
	   ;; make the keyword values that we deal in all explicit so they
	   ;; won't be broken by any future changes to defaults!
	   (setq load-system-options
		 (selectq condition
		   (:always (append load-system-options '(:reload t)))
		   (:newly-compiled (append load-system-options '(:reload nil)))))
	   (setq load-system-options
		 (selectq query
		   ((:yes :everything) (append load-system-options '(:query t)))
		   (:confirm-only (append load-system-options '(:query :confirm)))
		   (:no (append load-system-options '(:query :no-confirm)))))
	   (setq load-system-options
		 (append load-system-options
			 `(:no-warn ,(and redefinitions-ok (or silent :just-warn))
			   :silent ,silent
			   :load-patches ,load-patches
			   :version ,version
			   ;; The complex conditional is because the CP dosen't
			   ;; reliably put NIL into variables whose :when's fail.
			   :system-branch ,(and (cl:member :version-control cl:*features*)
						(or (stringp system-spec)
						    (sct:system-version-controlled system-spec))
						branch)
			   :include-components ,include-components
			   :component-version ,component-version)))
	   (if ok-to-proceed
	       (cond (simulate
		      (fresh-terpri)
		      (let ((sct:*current-machine-type* machine-type))
			(lexpr-funcall 'sct:describe-system system-spec :show-files nil
				       :system-op :load load-system-options)))
		     (t
		      (let ((sct:*current-machine-type* machine-type))
			(lexpr-funcall 'sct:load-system system-spec load-system-options))
		      (fresh-terpri)))
	       (format t "~&  Load System aborted.~2&"))))))

(defun cp-patch-pathname (patch-name major-version minor-version)
  (condition-case ()
       (sct:patch-system-pathname patch-name :patch-file major-version minor-version
				  *default-binary-file-type*)
     (fs:file-error
       (condition-case ()
	    (sct:patch-system-pathname patch-name :patch-file major-version minor-version
				       :lisp)	;this needs improvement later...
	  (fs:file-error "No pathname")))))

(defun find-patches-re-date (patch-name major-version patches date relation-function)
  (let* ((undated-patches (loop for item in patches
				unless (sct:version-date item)
				  collect item))
	 (file-list (loop for item in undated-patches
			  as minor-version = (sct:version-number item)
			  collect (cp-patch-pathname patch-name
						     major-version minor-version)))
	 (patch-file-properties
	   (when file-list
	     (loop with plists = (fs:multiple-file-plists file-list)
		   for file in file-list         ; File returned by fs:multiple-file-plists
		   collect (assq file plists)))));  is in random order.  Grr.
    (loop for item in undated-patches
	  for (nil . plist) in patch-file-properties
	  as date = (and plist (get (locf plist) :creation-date))
	  when date
	    do (nconc item (ncons date)))	; cache the dates we have to look up...
    (loop for item in patches
	  as item-date = (sct:version-date item)
	  when (and item-date			; don't include date-less patches
		    (funcall relation-function item-date date))
	    collect item)))

(defun find-patches-after-date (patch-name major-version patches date)
  (find-patches-re-date patch-name major-version patches date #'>))

(defun find-patches-before-date (patch-name major-version patches date)
  (find-patches-re-date patch-name major-version patches date #'<))

(cp:define-command (com-show-system-modifications :command-table "System Maintenance")
    ((system 'scl:((token-or-type (:All :Local)
		    ((sequence ((sct:system :patchable-only t))))))
	     :prompt "for system"
	     :documentation "system whose modifications to show"
	     :default :all)
     &key
     (author 'cl:string
	     :prompt "name"
	     :documentation
	     "Show all modifications whose author's name matches this string")
     (before '((time:universal-time) :past-p t)
	     :prompt "date"
	     :documentation "Show all modifications before this date")
     (from 'cl:integer
	   :prompt "number"
	   :documentation
	   "Show all modifications beginning with this number")
     (matching 'cl:string
	       :prompt "string"
	       :documentation
	       "Show all modifications with a substring in its comment matching this string")
     (newest 'cl:integer
	     :default nil
	     :mentioned-default 1
	     :prompt "how many"
	     :documentation
	     "Show this many most recent modifications")
     (number 'cl:integer
	     :prompt "of patch"
	     :documentation "Show just this modification (patch)")
     (oldest 'cl:integer
	     :default nil
	     :mentioned-default 1
	     :prompt "how many"
	     :documentation
	     "Show this many oldest modifications")
     (reviewer 'cl:string
	       :prompt "name"
	       :documentation
	       "Show all modifications whose reviewer's name matches this string")
     (since '((time:universal-time) :past-p t)
	    :prompt "date"
	    :documentation "Show all modifications on this date and later")
     (through 'cl:integer
	      :prompt "number"
	      :documentation
	      "Show all modifications through this number, inclusive"))
   (cond ((eq system :all)
	  (setq system
		(loop for sys in (sct:all-patchable-systems)
		      collect sys)))
	 ((eq system :local)
	  (setq system
		(loop with local-site = (send net:*local-site* :name)
		      for sys in (sct:all-patchable-systems)
		      as maintaining-sites = (sct:system-maintaining-sites sys)
		      when (or (null maintaining-sites)
			       (memq local-site maintaining-sites))
			collect sys))))
   (loop for sys in system doing
     (when (and (sct:system-patchable sys)
		(sct:system-version-loaded sys)
		(neq (sct:system-version-loaded sys) :incomplete))
       (let* ((patch-info (sct:system-loaded-patches sys))
	      (patch-name (sct:patch-name patch-info))
	      (major (sct:patch-version patch-info))
	      (patches (sct:patch-version-list patch-info))
	      (n-patches (length patches))
	      (restrictions (or newest oldest from through number
				matching author since before)))
	 (when number
	   (setq from number through number))
	 (cond
	   (newest
	    (setq patches (firstn (max (min newest n-patches) 0) patches)))
	   (oldest
	    (setq patches (nthcdr (max (- n-patches oldest) 0) patches)))
	   ((or from through)
	    (let ((last-no (sct:version-number (first patches)))
		  (first-no (sct:version-number (first (last patches)))))
	      (setq from (min (1+ last-no) (max (or from first-no) first-no)))
	      (setq through (max first-no (min (or through last-no) last-no)))
	      (setq patches
		    (loop for bottom-part on patches
			  when ( (sct:version-number (first bottom-part)) through)
			    return (loop for p in bottom-part
					 while ( (sct:version-number p) from)
					 collect p))))))
	 (when matching
	   (setq patches (loop for item in patches
			       when (string-search matching (sct:version-explanation item))
				 collect item)))
	 (when author
	   (setq patches (loop for item in patches
			       when (string-search author (sct:version-author item))
				 collect item)))
	 (when reviewer
	   (setq patches (loop for item in patches
			       when (and (sct:version-reviewer item)
					 (string-search reviewer (sct:version-reviewer item)))
				 collect item)))
	 (when since
	   (setq patches (find-patches-after-date patch-name major patches since)))
	 (when before
	   (setq patches (find-patches-before-date patch-name major patches before)))
	 (format t "~&~:[  No patches~2*~:[~; chosen~] in system ~A.~;~
                    ~%  ~D patch~:[es~;~]~:[~; chosen~] in system ~A:~]"
	   patches (length patches) (= (length patches) 1) restrictions
	   (sct:system-pretty-name (sct:find-system-named sys t nil)))
	 (loop for item in (reverse patches)
	       as item-time = (and (numberp (sct:version-date item))
				   (time:print-brief-universal-time
				     (sct:version-date item) nil))
	       as minor = (sct:version-number item)
	       do
	   (dw:with-output-as-presentation
	       (:type 'fs:logical-pathname
		:object (sct:patch-binary-pathname sys major minor))
	     (format t "~&~D.~D ~ (~A)~@[  (reviewed by ~A)~]~@[  (created ~A)~]~&~A~"
		     major minor
		     (sct:version-author item) (sct:version-reviewer item)
		     item-time (sct:version-explanation item)))
	       finally (when patches (fresh-terpri))))))
   (fresh-terpri)
   (values))

(cp:define-command (com-show-ecos :command-table "System Maintenance" :name "Show ECOs")
    ()
  (if (null sct:*all-ecos*)
      (format t "~&There are no ECOs loaded in this world.")
    (let ((ecos (copylist sct:*all-ecos*)))
      (labels ((system-lessp (sn1 sn2)
		 (let* ((system1 (sct:find-system-named sn1))
			(system2 (sct:find-system-named sn2))
			(sp1 (cl:position system1 sct:*all-systems*))
			(sp2 (cl:position system2 sct:*all-systems*)))
		   (< sp1 sp2)))
	       (eco-lessp (eco1 eco2)
		 (let ((sn1 (sct:eco-system-name eco1))
		       (sn2 (sct:eco-system-name eco2)))
		   (if (eq sn1 sn2)
		       (< (sct:eco-level eco1) (sct:eco-level eco2))
		     (system-lessp sn1 sn2)))))
	;; Sort chronologically by system, then by ECO number
	(setq ecos (sort ecos #'eco-lessp)))
      (dw:formatting-table (t :inter-column-spacing 3)
	(dw::formatting-column-headings ()
	  (scl:with-character-face (:italic)
	    (formatting-cell () (princ "System"))
	    (formatting-cell () (princ "Level"))
	    (formatting-cell () (princ "Description"))))
	(loop for eco in ecos
	      as system = (sct:find-system-named (sct:eco-system-name eco))
	      doing
	  (dw:formatting-row ()
	    (dw:formatting-cell ()
	      (scl:present system 'sct:system))
	    (dw:formatting-cell (t :align-x :right)
	      (format t "~D " (sct:eco-level eco)))
	    (dw:formatting-cell ()
	      (dw:filling-output ()
		(princ (sct:eco-description eco))))))))))
