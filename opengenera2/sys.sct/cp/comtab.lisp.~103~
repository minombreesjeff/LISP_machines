;;; -*- Mode: LISP; Syntax: Common-lisp; Package: CP; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor command-table
	(name
	 inherit-from
	 kbd-accelerator-table
	 (menu-accelerator-table nil)
	 (menu-accelerator-cache nil)
	 command-aarray
	 command-table-delims)
	   ()
  (:init-keywords :inherit-from :command-table-delims :command-table-size
		  :accelerator-case-matters :kbd-accelerator-p)
  (:initable-instance-variables name)
  (:required-init-keywords :name)
  (:readable-instance-variables name command-aarray command-table-delims)
  (:writable-instance-variables inherit-from kbd-accelerator-table menu-accelerator-table))

(defmethod (make-instance command-table) (&rest options
					  &key (command-table-size 15)
					       (kbd-accelerator-p t)
					       (accelerator-case-matters nil)
					  &allow-other-keys)
  (setq command-aarray (zl:make-array command-table-size :type 'zl:art-q-list
							 :leader-list '(0 t))
	kbd-accelerator-table (and kbd-accelerator-p
				   (make-kbd-accelerator-table accelerator-case-matters self)))
  (apply #'command-table-update-options self options))

(defvar *default-command-table-delims* '(#\Space #\Tab #\Return))

(defgeneric command-table-update-options
	    (command-table &rest keys)
  (declare (arglist command-table
		    &key ((:inherit-from new-inherit-from)
			  '("global" "standard arguments"))
			 ((:command-table-delims new-command-table-delims)
			  *default-command-table-delims*)
			 (kbd-accelerator-p t)
			 (accelerator-case-matters nil)))
  (:function (apply (flavor:generic command-table-update-options)
		    (find-command-table command-table)
		    keys)))

(defmethod (command-table-update-options command-table)
	   (&key ((:inherit-from new-inherit-from)
		  '("global" "standard arguments"))
		 ((:command-table-delims new-command-table-delims)
		  *default-command-table-delims*)
		 (kbd-accelerator-p t)
		 (accelerator-case-matters nil)
	    &allow-other-keys)
  (setq inherit-from (loop for command-table in new-inherit-from
			   collect (find-command-table command-table))
	command-table-delims new-command-table-delims)
  (if (not kbd-accelerator-p)
      (setq kbd-accelerator-table nil)
    (unless kbd-accelerator-table
      (setq kbd-accelerator-table (make-kbd-accelerator-table)))
    (setf (kbd-accelerator-table-case-matters kbd-accelerator-table)
	  accelerator-case-matters))
  (command-table-clear-menu-accelerator-cache self))

(defmethod (sys:print-self command-table) (stream ignore slashify-p)
  (if slashify-p
      (sys:printing-random-object (self stream :typep)
	(princ self stream))
      (write-string name stream)))

#|| ;;---This was useful enough to write, but is it useful enough to install?

(defgeneric describe-command-table (command-table &optional (stream *standard-output*)
						  &rest args)
  (:function (apply (flavor:generic describe-command-table)
		      (find-command-table command-table)
		      stream args)))

(defmethod (describe-command-table command-table) (&optional (stream *standard-output*)
							     &rest ignore)
  (format stream "~&Command table ~a:" name)
  (let ((other-comtab (find-command-table name)))
    (unless (eq other-comtab self)
      (format stream "~&It is not the same as (~s ~s), which is ~s"
	      'find-command-table self other-comtab)))
  (format stream "~&It inherits from ")
  (if (null inherit-from)
      (princ "nothing" stream)
      (filling-output (stream)
	(formatting-textual-list (stream :filled T)
	  (dolist (elt inherit-from)
	    (formatting-textual-list-element (stream)
	      (dw:with-output-as-presentation (:stream stream
					       :object elt
					       :type (type-of elt))
		(princ (command-table-name elt) stream)))))))
  (princ "." stream)
  (flet ((ask-if-enough (n)
	   (if (> n 5)
	       (y-or-n-p "Do you want to see them? ")
	       T)))
    (let ((nkbd (and kbd-accelerator-table
		     (floor (kbd-accelerator-table-length kbd-accelerator-table) 2))))
      (cond ((and nkbd (> nkbd 0))
	     (format stream "~&There are ~d keyboard accelerators.  Their case ~a."
		     (floor (kbd-accelerator-table-length kbd-accelerator-table) 2)
		     (if (kbd-accelerator-table-case-matters kbd-accelerator-table)
			 "matters" "doesn't matter"))
	     (flet ((item (stream i)
		      ;;---move out here to work around a compile bug
		      (formatting-row (stream)
			(formatting-cell (stream)
			  (format stream "~:c" (aref kbd-accelerator-table i)))
			(formatting-cell (stream)
			  (present (aref kbd-accelerator-table (1+ i)) 'symbol ;;---'command-name
				   :stream stream)))))
	       (when (ask-if-enough nkbd)
		 (fresh-line stream)
		 (formatting-table (stream)
		   (loop for i below (kbd-accelerator-table-length kbd-accelerator-table) by 2
			 do
		     (item stream i))))))
	    (kbd-accelerator-table
	     (format stream "~&There are no keyboard accelerators.  ~@
				If there were, their case ~a matter."
		     (if (kbd-accelerator-table-case-matters kbd-accelerator-table)
			 "would" "wouldn't")))
	    (T (format stream "~&There are no keyboard accelerators."))))
    (cond (menu-accelerator-table
	   (format stream "~&There are ~d menu accelerators." (length menu-accelerator-table))
	   (when (ask-if-enough (length menu-accelerator-table))
	     (fresh-line stream)
	     (formatting-textual-list (stream :filled T)
	       (map nil (lambda (elt)
			  (formatting-textual-list-element (stream)
			    (dw:with-output-as-presentation (:stream stream
							     :object elt
							     :type (type-of elt))
 			      (princ (dw::command-menu-handler-command-name elt) stream))))
		    menu-accelerator-table))))
	  (T (format stream "~&There are no menu accelerators.")))
    (cond ((and command-aarray (> (length command-aarray) 0))
	   (format stream "~&There are ~d long-named commands." (length command-aarray))
	   (when (ask-if-enough (length command-aarray))
	     (fresh-line stream)
	     (formatting-textual-list (stream :filled T)
	       (map nil (lambda (elt)
			  (formatting-textual-list-element (stream)
			    (present (cdr elt) 'command-name :stream stream)))
		    command-aarray))))
	  (T (format stream "~&There are no long-named commands.")))))

(defun describe-all-command-tables ()
  (map-all-command-tables
    (lambda (x)
      (describe-command-table x)
      (terpri) (terpri))))
||#

;;--- This should do a topological walk
(defun map-over-command-table-inheritance (command-table function)
  (declare (sys:downward-funarg function))
  (setq command-table (find-command-table command-table))
  (labels ((map-internal (command-table)
	     (funcall function command-table)
	     (dolist (command-table (command-table-inherit-from command-table))
	       (map-internal command-table))))
    (map-internal command-table)))

(defun command-table-lookup-command (command-table command-name)
  (map-over-command-table-inheritance command-table
			       #'(lambda (command-table)
				   (let ((elem (si:aarray-lookup
						 command-name
						 (command-table-command-aarray
						   command-table)
						 nil t)))
				     (when elem
				       (return-from command-table-lookup-command
					 (values (cdr elem) command-table))))))) 

(defmethod (command-table-command-alist command-table) () (g-l-p command-aarray))

(defmethod (command-table-kbd-accelerator-p command-table) ()
  (not (null kbd-accelerator-table)))

(defun command-in-command-table-p (command-symbol
				   &optional (command-table *command-table*)
	  				     (need-name t))
  (declare (values found-p under-name in-command-table))
  (let ((tables (let ((command-struc (command-name-command-descriptor-internal
				       command-symbol)))
		  (when command-struc
		    (command-command-table command-struc)))))
    (when tables
      (map-over-command-table-inheritance command-table
	#'(lambda (command-table)
	    ;; First check for being known to be in table.
	    (when (if (listp tables)
		      (member command-table tables)
		      (eql command-table tables))
	      (if need-name
		  (let ((elem (rassoc command-symbol
				      (command-table-command-alist command-table))))
		    (when elem
		      (return-from command-in-command-table-p
			(values t (first elem) command-table))))
		  (return-from command-in-command-table-p
		    (values t nil command-table)))))))))

;;; This is specially optimized for the common case of typing more and more tokens
;;; without intervening editing.  Each new token further restricts the range of the
;;; binary search.
(defun command-table-complete (string-cache completion-bounds-table delimiters
			       string command-table action)
  (dw::command-token-suggestion-completer (string-cache completion-bounds-table
					   delimiters string action)
    (map-over-command-table-inheritance command-table
      (lambda (command-table)
	(dw::make-suggestions (command-table-command-aarray command-table))))))

(defgeneric command-table-install-command
	    (command-table command-symbol &optional command-name)
  (:function (funcall (flavor:generic command-table-install-command)
		      (find-command-table command-table)
		      command-symbol command-name)))

(defmethod (command-table-install-command command-table)
	   (command-symbol &optional command-name)
  (let ((command-struc (command-name-command-descriptor command-symbol)))
    (when (null command-name)
      (setq command-name (command-pretty-name command-struc)))
    (let ((tables (command-command-table command-struc)))
      (unless (eq tables self)
	(setf (command-command-table command-struc)
	      (cons self (if (listp tables) tables (list tables)))))))
  (si:aarray-insert command-aarray command-name command-symbol t))

(defgeneric command-table-delete-command-name
	    (command-table command-name &key (if-does-not-exist :error))
  (:function (funcall (flavor:generic command-table-delete-command-name)
		      (find-command-table command-table)
		      command-name :if-does-not-exist if-does-not-exist)))

(defmethod (command-table-delete-command-name command-table) (command-name &key (if-does-not-exist :error))
  (let ((elem (si:aarray-lookup command-name command-aarray)))
    (if (null elem)
	(ecase if-does-not-exist
	  ((nil) )
	  (:error (error "There is no command named \"~A\" in ~A." command-name self)))
	(si:aarray-delete command-aarray (first elem) (rest elem) t))))

(defgeneric command-table-delete-command-symbol
	    (command-table command-symbol &key (if-does-not-exist :error))
  (:function (funcall (flavor:generic command-table-delete-command-symbol)
		      (find-command-table command-table)
		      command-symbol :if-does-not-exist if-does-not-exist)))

(defmethod (command-table-delete-command-symbol command-table) (command-symbol
						   &key (if-does-not-exist :error))
  (let ((elem (rassoc command-symbol (command-table-command-alist self))))
    (if (null elem)
	(ecase if-does-not-exist
	  ((nil) )
	  (:error (error "The ~S command is not in ~A." command-symbol self)))
	(si:aarray-delete command-aarray (first elem) (rest elem) t))))

(defgeneric command-table-menu-accelerator-cache (command-table)
  (:function (funcall (flavor:generic command-table-menu-accelerator-cache)
		      (find-command-table command-table))))

(defmethod (command-table-menu-accelerator-cache command-table) ()
  (or menu-accelerator-cache
      ;; We need to fill the cache even if there are no menu accelerators in
      ;; this command table, since the superior might have accelerators.
      (setq menu-accelerator-cache (dw::fill-menu-accelerator-cache self))))

(defmethod (command-table-clear-menu-accelerator-cache command-table) ()
  (setq menu-accelerator-cache nil))

(defvar *command-table-registry* (make-hash-table :test 'string-equal))

(defun map-all-command-tables (function)
  (declare (sys:downward-funarg function))
  (maphash (lambda (ignore command-table) (funcall function command-table))
	   *command-table-registry*))

(defun delete-command-symbol-from-all-command-tables (command-symbol)
  (let ((tables nil))
    (flet ((delete-from-one (ct)
	     (let ((command-menu-item (dolist (elem (command-table-menu-accelerator-table ct))
					(let ((func (dw::command-menu-handler-function elem)))
					  (ignore-errors
					    (multiple-value-bind (parent type)
						(sys:function-parent func 'defun)
					      (when (and (eq parent command-symbol)
							 (eq type 'define-command))
						(return elem))))))))
	       (when command-menu-item
		 (setf (command-table-menu-accelerator-table ct)
		       (delete command-menu-item (command-table-menu-accelerator-table ct)))
		 (pushnew ct tables)))
	     (condition-case ()
		  (command-table-delete-command-symbol ct command-symbol)
		(error nil)
		(:no-error (pushnew ct tables)))))
      (let ((struc (command-name-command-descriptor command-symbol :if-does-not-exist nil)))
	(when struc
	  (let ((in-tables (command-command-table struc)))
	    (if (listp in-tables)
		(map () #'delete-from-one in-tables)
		(delete-from-one in-tables))))))
    tables))

(defun find-command-table (name &key (if-does-not-exist :error))
  (if (typep name 'command-table)
      name
      (or (gethash (string name) *command-table-registry*)
	  (ecase if-does-not-exist
	    ((nil) nil)
	    (:error (error "There is no command-table named \"~A\"." name))
	    (:create (make-command-table name))))))

(defun delete-command-table (command-table-or-name)
  (let* ((command-table (find-command-table command-table-or-name))
	 (name (command-table-name command-table)))
    (sys:without-aborts ("Command table ~S is being deleted." name)
      ;; Clean up command table inheritance so that things don't inherit from
      ;; dead command tables.
      (map-all-command-tables
	#'(lambda (table)
	    (let ((i (command-table-inherit-from table)))
	      (when (member command-table i)	; Modify the cell only if needed.
		(setf (command-table-inherit-from table) (remove command-table i))))))
      (remhash name *command-table-registry*)
      t)))

(defun rename-command-table (command-table-or-name new-name)
  (let ((command-table (find-command-table command-table-or-name)))
    (let ((name (command-table-name command-table)))
      (sys:without-aborts ("Command table ~S is being renamed to ~S." name new-name)
	(remhash name *command-table-registry*)
	(setf (symbol-value-in-instance command-table 'name) new-name)
	(setf (gethash new-name *command-table-registry*) command-table)
	command-table))))

(defun command-tables-inheriting-from (command-table)
  (check-type command-table command-table)
  (let ((result '()))
    (map-all-command-tables
      #'(lambda (candidate)
	  (when (member command-table (command-table-inherit-from candidate))
	    (push candidate result))))
    result))

(defun make-command-table (name &rest init-options
				&key (if-exists :error) &allow-other-keys)
  (setq name (string name))
  (si:with-rem-keywords (real-options init-options '(:if-exists))
    (let ((command-table (gethash name *command-table-registry*)))
      (when command-table
	(ecase if-exists
	  ((nil)
	   (return-from make-command-table command-table))
	  (:supersede )
	  (:update-options
	   (apply #'command-table-update-options command-table real-options)
	   (return-from make-command-table command-table))
	  (:error (zl:fsignal "There is already a command-table named ~S.  ~
Resume if you want to replace ~S" name command-table)))))
    (setf (gethash name *command-table-registry*)
	  (apply #'make-instance 'command-table :name name real-options))))

(defvar *standard-command-tables*
	(nconc
	  (mapcar #'(lambda (name)
		      (make-command-table name :inherit-from nil :if-exists :update-options))
		  '("Standard arguments" "Unshifted Arguments" "Colon Full Command"
		    "Standard scrolling" "Marked text"))
	  (ncons
	    (make-command-table "Input editor compatibility"
				:if-exists :update-options
				:inherit-from '("Standard scrolling" "Marked text")))))

(defvar *global-command-table* (make-command-table "Global" :inherit-from nil))
(defvar *user-command-table* (make-command-table "User"))
;;; Bound to the "current" command-table by the command loops.
(zl:defvar-standard *command-table* *user-command-table*)

(defun establish-command-subset (subset-name &optional (superior "Global") &rest keys)
  (let ((existing-table (find-command-table subset-name :if-does-not-exist nil)))
    (if existing-table
	(values existing-table nil)
	(let ((superiors (if (listp superior)
			     (mapcar #'find-command-table superior)
			     (list (find-command-table superior))))
	      (subset (apply #'make-command-table subset-name :inherit-from nil keys)))
	  (if superiors
	      (dolist (superior superiors)
		(pushnew subset (command-table-inherit-from superior))))
	  (values subset t)))))

(defvar *command-subsets* (list (cp:find-command-table "Global"))
  "Registered subsets of the Global comtab.")

(defprop define-command-subset "Command Subset" si:definition-type-name)

(defmacro define-command-subset (variable-name subset-name &optional (superior-name "Global")
							   &rest keys)
  (declare (zwei:indentation 3 2))
  (check-type subset-name string)
  (sys:check-arg superior-name (or (stringp superior-name)
				   (and (listp superior-name)
					(every #'stringp superior-name)))
		 "a string or a list of strings")
  (sys:check-arg keys (and (evenp (length keys))
			   (loop for key on keys by #'cddr
				     always (keywordp (car key))))
		 "a list of keywords and values")
  `(sys:multiple-definition ,variable-name define-command-subset
     (defvar ,variable-name)
     (setq ,variable-name
	   (if (boundp ',variable-name)
	       ;; Keys ignored in this case.  The assumption is (and this may be a poor
	       ;; assumption in some cases, but it's hard to implement the right thing),
	       ;; that if you're really just renaming it, the creation options will likely
	       ;; be the same.
	       (cp::rename-command-subset ,variable-name ',subset-name
					  :new-superior ',superior-name)
	       (establish-command-subset ',subset-name ',superior-name ,@keys)))
     (setq *command-subsets* (sort (adjoin ,variable-name (copy-list *command-subsets*))
				   #'string-lessp
				   :key #'cp::command-table-name))
     ',variable-name))

(defun find-command-subset (subset-or-subset-name &key (if-does-not-exist :error))
  (let ((table nil))
    (sys:check-arg subset-or-subset-name
		   (cond ((and (symbolp subset-or-subset-name)
			       (boundp subset-or-subset-name)
			       (let ((table (symbol-value subset-or-subset-name)))
				 (and (typep table 'command-table)
				      (member table *command-subsets*))))
			  (setq table (symbol-value subset-or-subset-name)))
			 ((setq table
				(and (stringp subset-or-subset-name)
				     (find subset-or-subset-name *command-subsets*
					   :test #'string-equal
					   :key #'command-table-name))))
			 ((and (typep subset-or-subset-name 'command-table)
			       (member subset-or-subset-name *command-subsets*))
			  (setq table subset-or-subset-name))
			 ((eq if-does-not-exist nil) (return-from find-command-subset nil))
			 (t nil))
		   "a command subset, subset name, or subset symbol")
    table))

(defun delete-command-subset (subset-or-subset-name)
  (let ((table (find-command-subset subset-or-subset-name)))
    (sys:without-aborts ("Command subset ~S is being deleted." (command-table-name table))
      (setq *command-subsets* (delete table *command-subsets*))
      (when (symbolp subset-or-subset-name) (makunbound subset-or-subset-name))
      (delete-command-table table)
      t)))

(defprop define-command-subset delete-command-subset zwei:kill-definition)

(defun rename-command-subset (subset-or-subset-name new-name
			      &key new-symbol (new-superior nil new-superior-p))
  (let* ((table (find-command-subset subset-or-subset-name))
	 (old-name (command-table-name table)))
    (check-type new-name string)
    (sys:without-aborts ("Command subset ~S is being renamed to ~S." old-name new-name)
      (rename-command-table table new-name)
      (when new-superior-p
	(let ((new-superiors (if (listp new-superior)
				 (mapcar #'find-command-table new-superior)
				 (list (find-command-table new-superior)))))
	  (dolist (old-superior (command-tables-inheriting-from table))
	    (unless (member old-superior new-superiors)
	      (setf (command-table-inherit-from old-superior)
		    (remove table (command-table-inherit-from old-superior)))))
	  (dolist (new-superior new-superiors)
	    (unless (member table (command-table-inherit-from new-superior))
	      (push table (command-table-inherit-from new-superior))))))
      (when new-symbol
	(when (symbolp subset-or-subset-name) (makunbound subset-or-subset-name))
	(proclaim `(special ,new-symbol))
	(setf (symbol-value new-symbol) table))
      table)))

;;; Some of these command tables may remain empty until other systems are loaded,
;;; but we define this basic set of things now in order to allow for a relaxed 
;;; load order constraint. Comments in the right margin which contain only a system
;;; name or two refer to the place where D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")most0 of the commands are expected to come from,
;;; but there might be exceptions.  They're just hints to people reading the source
;;; code--not any enforced rule.
;;; -kmp 22-May-90

(define-command-subset *editing-command-table*			    ; Development Utilities
		       "Editing")

(define-command-subset *programming-tools-command-table*	    ; System, ...
		       "Programming Tools")

(define-command-subset *debugging-command-table*		    ; System, ...
		       "Debugging" "Programming Tools")

(define-command-subset *tracing-command-table*			    ; Development Utilities
		       "Tracing" "Debugging")

(define-command-subset *timer-queue-command-table*		    ; Development Utilities
		       "Timer Queue" NIL)  ;;an Orphan--not part of Global

(define-command-subset *process-command-table*			    ; Development Utilities
		       "Process" "Debugging")

(define-command-subset *presentation-command-table*		    ; Development Utilities
		       "Presentation" "Debugging")

(define-command-subset *breakpoint-command-table*		    ; Development Utilities
		       "Breakpoint" "Debugging")

(define-command-subset *tape-administration-command-table*	    ; Tape
		       "Tape Administration" "Programming Tools")

(define-command-subset *system-maintenance-command-table*	    ; System
		       "System Maintenance" "Programming Tools")

(define-command-subset *lisp-command-table*			    ; Lisp
		       "Lisp" "Programming Tools")

(define-command-subset *flavors-command-table*			    ; Utilities
		       "Flavors" "Lisp")

(define-command-subset *clos-command-table*			    ; CLOS
		       "CLOS" "Lisp")

(define-command-subset *inspection-command-table*		    ; Utilities and
		       "Inspection" "Lisp")			    ;  Development Utilities

(define-command-subset *who-calls-command-table*		    ; Utilities
		       "Callers" "Inspection")

(define-command-subset *evaluation-context-command-table*	    ; Development Utilities
		       "Evaluation Context" "Lisp")

(define-command-subset *utilities-command-table*		    ; Utilities
		       "Utilities")

(define-command-subset *document-formatting-command-table*	    ; NSage
		       "Document Formatting" "Utilities")

(define-command-subset *fonts-command-table*			    ; Utilities, 
		       "Fonts" "Utilities")			    ;  Bitmap Editor

(define-command-subset *images-command-table*			    ; Images
		       "Images" "Utilities")

(define-command-subset *documentation-command-table*		    ; Extended-Help, NSage,
		       "Documentation")				    ;  Utilities, ...

(define-command-subset *demonstration-command-table*		    ; Hacks, ...
		       "Demonstration")

(define-command-subset *site-administration-command-table*	    ; System, ...
		       "Site Administration")

(define-command-subset *access-control-command-table*		    ; LMFS
		       "Access Control" "Site Administration")

(define-command-subset *namespace-command-table*		    ; System, ...
		       "Namespace" "Site Administration")

(define-command-subset *spelling-command-table*			    ; Utilities 
		       "Spelling" "Site Administration")

(define-command-subset *world-building-command-table*		    ; System, ...
		       "World Building" "Site Administration")

(define-command-subset *session-command-table*			    ; System
		       "Session")

(define-command-subset *networks-command-table*			    ; System
		       "Networks" "Session")

(define-command-subset *garbage-collection-command-table*	    ; System
		       "Garbage Collection" "Session")

(define-command-subset *activities-command-table*		    ; System
		       "Activities" "Session")

(define-command-subset *window-command-table*			    ; System
		       "Window" "Session")

(define-command-subset *file-system-command-table*		    ; System, ...
		       "File System")

(define-command-subset *file-command-table*			    ; System
		       "File" "File System")

(define-command-subset *directory-command-table*		    ; System
		       "Directory" "File System")

(define-command-subset *fep-command-table*			    ; System
		       "FEP" "File")


(defun install-command (command-table command-symbol &optional command-name)
  (command-table-install-command (find-command-table command-table :if-does-not-exist :create)
				 command-symbol command-name))

(defun install-commands (command-table new-commands)
  (setq command-table (find-command-table command-table :if-does-not-exist :create))
  (loop for cmd in new-commands
	for name = nil
	do (when (listp cmd)
	     (setq name (second cmd)
		   cmd (first cmd)))
	   (command-table-install-command command-table cmd name)))

(defun find-all-commands (&optional verbose)
  (flet ((find-all-commands-in-command-table (command-table)
	   (loop for (nil . command-symbol) being the array-elements of
		 (command-table-command-aarray command-table)
		 collect command-symbol)))
    (let ((commands nil))
      (map-all-command-tables
	(lambda (table)
	  (when verbose
	    (format t "~&Finding commands in ~A..." table))
	  (let ((table-commands (find-all-commands-in-command-table table)))
	    (when verbose
	      (format t "~D found." (length table-commands)))
	    (setq commands (nconc commands table-commands)))))
      (when verbose
	(format t "~&~D total commands" (length commands)))
      (cl:remove-duplicates commands))))


;--- Compatibility functions.  Flush these ASAP
(defmethod (:install-command command-table) (cmd-sym &optional cmd-name)
  (command-table-install-command self cmd-sym cmd-name))

(defun si:create-comtab (name &optional (superior "global") &rest init-options)
  (apply #'make-command-table name :inherit-from (and superior (list superior)) init-options))

(deff si:set-comtab 'install-commands)
(deff si:find-comtab 'find-command-table)



(defun expand-command-table-ellipsis-p (ignore
					&key input-context presentation
					&allow-other-keys)
  (when (and (not (null input-context))
	     ;; Kludge. Somehow, command-table presentations are slipping in.
	     ;; This will thwart them for now. Think of something better later. -kmp 21-Nov-90
	     (eq (dw:presentation-type-name (dw:presentation-type presentation))
		 'command-table-ellipsis))
    (let ((current-type (dw::presentation-input-context-presentation-type input-context)))
      (or (eq (dw:presentation-type-name current-type) 'cp:command-name)
	  (eq (dw:presentation-type-name current-type) 'cp:command)
	  (and (eq (dw:presentation-type-name current-type) 'cp:command-or-form)
	       (dw:with-presentation-type-arguments (cp:command-or-form current-type)
		 (neq cp::dispatch-mode :form-only)))))))

(defvar *expand-command-table-compress-choices* 20.)

(define-presentation-type command-table-ellipsis (() &key locally)
   :abbreviation-for 'command-table
   :printer ((table stream)
	     (if locally
		 (format stream "~R command~:P"
			 ;; Same as (LENGTH (REMOVE-DUPLICATES alist :TEST #'STRING-EQUAL))
			 ;; but less cons-intensive.
			 (do ((count 0)
			      (l (command-table-command-alist table) (cdr l)))
			     ((null l) count)
			   (when (not (assoc (caar l) (cdr l) :test #'string-equal))
			     (incf count))))
		 (princ table stream))))

(define-presentation-action expand-command-table
   (command-table-ellipsis
     t
     :tester expand-command-table-ellipsis-p
     :gesture :select
     :documentation ((ignore &key presentation)
		     (dw:with-presentation-type-arguments
		       (command-table-ellipsis
			 (dw:presentation-type presentation))
		       (if locally
			   "Show local commands"
			   "Show all commands"))))
   (table &key presentation window)
  (dw:with-presentation-type-arguments (command-table-ellipsis
					 (dw:presentation-type presentation))
    (expand-command-table table :window window :locally locally)))

(defun expand-command-table (table &key window locally)
  (let ((commands '()))
    (flet ((add-commands-from-table (table)
	     (mapcar #'(lambda (entry)
			 (pushnew (list (car entry) (cdr entry)) commands
				  :test #'string-equal
				  :key #'car))
		     (command-table-command-alist table))))
      (if locally
	  (add-commands-from-table table)
	  (map-over-command-table-inheritance table #'add-commands-from-table)))
    (setq commands (sort commands #'string-lessp :key #'car))
    (cond ((not commands) (beep))
	  (t
	   (si:with-ie-typeout-if-appropriate (window)
	     (let ((command-ptype `(cp:command-name :command-table ,table))
		   abbrev-presentation abbrev-presentation-type abbrev-word abbrev-n)
	       (when (or (eq *expand-command-table-compress-choices* :always)
			 (and (numberp *expand-command-table-compress-choices*)
			      (> (length commands) *expand-command-table-compress-choices*)))
		 (multiple-value-setq (commands abbrev-presentation abbrev-presentation-type
						abbrev-word abbrev-n)
		   (dw::compress-possibilities
		     commands
		     :type command-ptype
		     :compress-choices *expand-command-table-compress-choices*
		     :delimiter #\Space)))
	       (format window "The ~@\\presentation\\ command table ~
			       contains ~\\this-these\\ command~:P~:[~; locally~]:"
		       table 'command-table-ellipsis (length commands) locally)
	       (format-item-list commands
				 :printer (lambda (possibility stream)
					    (present (cadr possibility)
						     (if (cddr possibility)
							 (caddr possibility)
							 command-ptype)
						     :stream stream))
				 :stream window)
	       (when abbrev-word
		 (dw::display-possibilities-help abbrev-presentation
						 abbrev-presentation-type
						 abbrev-word
						 abbrev-n
						 #\Space
						 *standard-output*))))))))


;; This substrate (FIND-COMMAND-SYMBOL and SHOW-COMMAND-SYMBOLS-FOUND)
;; is needed both in Development Utilities (for the Find Command Symbol command) and in
;; Zwei (for Edit CP Command), so must live in System to make the module dependencies
;; work out. -kmp 10-Dec-90

(defun find-command-symbol (command-name)
  (setq command-name (string-trim '(#\Space #\Tab) command-name))
  (unless (string-equal command-name "")
    (let ((tables '()))
      (map-all-command-tables
	(lambda (table)
	  (let ((entry (assoc command-name (command-table-command-alist table)
			      :test #'string-equal)))
	    (when entry
	      (push (list table (cdr entry)) tables)))))
      (setq tables (sort tables #'string-greaterp
			 :key #'(lambda (x) (command-table-name (car x)))))
      (map-over-command-descriptors
	(lambda (descriptor)
	  (let ((command-symbol (cp::command-name descriptor)))
	    (when (and (string-equal command-name (command-pretty-name descriptor))
		       (not (find command-symbol tables :key #'cadr)))
	      (push (list nil command-symbol) tables)))))
      (nreverse tables))))

(defun show-command-symbols-found (command-name tables)
  (cond ((not tables)
	 (format t "~&No command named ~S is installed in any command table.~%"
		 command-name))
	(t
	 (format t "~&A command named ~S is installed ~
			   in the following command table~P:~% "
		 command-name (length tables))
	 (dw:formatting-table (t :inter-column-spacing
				 (* 2 (send *standard-output* :char-width)))
	   (with-character-style ('(nil :italic nil))
	     (dw:formatting-row ()
	       (dw:formatting-cell () (princ "Command Table"))
	       (dw:formatting-cell () (princ "Command Symbol"))))
	   (dolist (entry tables)
	     (let ((table (car entry))
		   (command-symbol (cadr entry)))
	       (dw:formatting-row () 
		 (dw:formatting-cell ()
		   (format t "~:[~'inone~~;~:*~A~]" table))
		 (dw:formatting-cell ()
		   (if (not table)
		       (prin1 command-symbol)
		       (dw:with-output-as-presentation (:object command-symbol
							:type `((cp:command-name
								  :command-table ,table)))
			 (prin1 command-symbol)))))))))))



(define-presentation-type command-table ()
   :no-deftype t
   :parser ((stream &key original-type initially-display-possibilities)
	    (values
	      (dw:completing-from-suggestions (stream
						:partial-completers `(#\Space)
						:type original-type
						:initially-display-possibilities
						initially-display-possibilities)
		(map-all-command-tables
		  (lambda (table)
		    (dw:suggest (command-table-name table) table))))))
   :printer ((command-table stream)
	     (format stream "~A" (command-table-name command-table)))
   :description "a CP command table")

(compile-flavor-methods command-table)

