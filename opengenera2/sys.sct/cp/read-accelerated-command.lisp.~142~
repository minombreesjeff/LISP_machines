;;; -*- Mode: LISP; Syntax: Common-lisp; Package: CP; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defstruct (kbd-accelerator-table :named-array-leader :conc-name
				  (:make-array (:length 100))
				  (:constructor make-kbd-accelerator-table
						(&optional case-matters command-table)))
  (length 0)
  case-matters
  command-table)		;pointer back to the owning comtab, if any

(zl:defstruct (kbd-accelerator-table-inside (:type :grouped-array)
					 (:conc-name kbd-accelerator-table-)
					 (:constructor nil)
					 (:size-macro kbd-accelerator-table-modulus))
  character
  function)

(defflavor accelerator-error () (zl:parse-ferror))

(compile-flavor-methods accelerator-error)

(defun accelerator-error (format-string &rest format-args)
  (zl:error 'accelerator-error :format-string format-string
			       :format-args (copy-list format-args)))

(defsubst kbd-accelerator-table-comparision-function (kbd-accelerator-table)
  (if (kbd-accelerator-table-case-matters kbd-accelerator-table)
      #'char= #'char-equal))

;; Use binary search or something someday
(defun add-to-kbd-accelerator-table (kbd-accelerator-table function character)
  (block done
    (let ((length (kbd-accelerator-table-length kbd-accelerator-table))
	  (compare (kbd-accelerator-table-comparision-function kbd-accelerator-table)))
      (loop for index below length by (kbd-accelerator-table-modulus)
	    doing
	(when (funcall compare character
		       (kbd-accelerator-table-character index kbd-accelerator-table))
	  (setf (kbd-accelerator-table-function index kbd-accelerator-table) function)
	  (return-from done)))
      (vector-push-extend character kbd-accelerator-table)
      (vector-push-extend function kbd-accelerator-table)))
  function)

(defun add-command-accelerator (command-table function-name characters)
  (setq command-table (find-command-table command-table))
  (let ((kbd-accelerator-table (command-table-kbd-accelerator-table command-table)))
    (if (characterp characters)
	(add-to-kbd-accelerator-table kbd-accelerator-table function-name characters)
      (dolist (char characters)
	(if (characterp char)
	    (add-to-kbd-accelerator-table kbd-accelerator-table function-name char)
	  (loop for (prefix . rest) on char
		collect prefix into prefixes
		do
	    (if (null rest)
		(add-to-kbd-accelerator-table kbd-accelerator-table function-name prefix)
	      (let ((prefix-function (lookup-in-kbd-accelerator-table kbd-accelerator-table
								      prefix)))
		(if prefix-function
		    (multiple-value-bind (ok table)
			(prefix-accelerator-p prefix-function)
		      (unless ok
			(error "~C is defined as ~S, not a prefix command."
				prefix prefix-function))
		      (setq kbd-accelerator-table table))
		    (multiple-value-bind (prefix-function prefix-kbd-accelerator-table)
			(make-prefix-accelerator (copy-list prefixes) command-table)
		      (add-to-kbd-accelerator-table kbd-accelerator-table prefix-function
						    prefix)
		      (setq kbd-accelerator-table prefix-kbd-accelerator-table)))))))))))

(defun lookup-accelerated-command (char &optional (command-table *command-table*))
  (declare (values command command-table))
  (map-over-command-table-inheritance command-table
    (lambda (command-table)
      (let ((kbd-accelerator-table (command-table-kbd-accelerator-table command-table)))
	(when kbd-accelerator-table 
	  (let ((function (lookup-in-kbd-accelerator-table kbd-accelerator-table char)))
	    (when function
	      (return-from lookup-accelerated-command
		(values (unless (eq function :undefined) function)
			command-table)))))))))

(defun lookup-in-kbd-accelerator-table (kbd-accelerator-table character)
  (let ((length (kbd-accelerator-table-length kbd-accelerator-table))
	(compare (kbd-accelerator-table-comparision-function kbd-accelerator-table)))
    (loop for index below length by (kbd-accelerator-table-modulus)
	  doing
      (when (funcall compare character
		     (kbd-accelerator-table-character index kbd-accelerator-table))
	(return (kbd-accelerator-table-function index kbd-accelerator-table))))))

(defun make-prefix-accelerator (chars command-table)
  (declare (values prefix-function prefix-kbd-accelerator-table))
  (let ((table (make-kbd-accelerator-table nil command-table)))
    (values (let-and-make-dynamic-closure ((*prefix-chars* chars)
					   (*kbd-accelerator-table* table))
	      'prefix-accelerator-internal)
	    table)))

(defun prefix-accelerator-p (command)
  (declare (values prefix-p prefix-kbd-accelerator-table))
  (when (and (zl:closurep command)
	     (eq (closure-function command) 'prefix-accelerator-internal))
    (values t (zl:symeval-in-closure command '*kbd-accelerator-table*))))

(defun prefix-accelerator-internal (arg-p arg)
  (declare (special *kbd-accelerator-table* *prefix-chars*))
  (let ((char (read-accelerator-char :wait-for-typeahead t)))
    (when (null char)
      (format t "~{ ~:C~}: " *prefix-chars*)
      (send-if-handles *standard-output* :make-complete)
      (setq char (read-accelerator-char))
      (format t "~:C" char))
    (let ((function (lookup-in-kbd-accelerator-table *kbd-accelerator-table* char)))
      (when (null function)
	;; Special-case <Help> here.
	(if (char-equal char #\Help)
	    (progn (format t " ~VAccelerator Help~" '(nil :italic nil))
		   (prefix-accelerator-help arg-p arg)
		   (return-from prefix-accelerator-internal nil))
	  ;; If we didn't find the accelerator in this table, go back up the hierarchy.
	  ;; This might only work for a single level of prefix, but then again, the
	  ;; fact that we funcall the continuation might make it just squeak by.
	  (when (null (setq function
			    (lookup-in-superiors-kbd-accelerator-table
			      *kbd-accelerator-table* *prefix-chars* char)))
	    (accelerator-error "~{ ~:C~} ~:C is not a defined command."
			       *prefix-chars* char))))
      ;; Call the accelerator in order to read any arguments
      (funcall function arg-p arg))))

;; This implements inheritance of prefixed (e.g., c-X) accelerators.  Yech.
(defun lookup-in-superiors-kbd-accelerator-table (accelerator-table prefix-chars char)
  (labels ((lookup-internal (accelerator-table chars)
	     (when accelerator-table 
	       (let ((function (lookup-in-kbd-accelerator-table
				 accelerator-table (first chars))))
		 (cond ((null function)
			;; Failed in this table, but don't quit completely
			(return-from lookup-internal nil))
		       ((prefix-accelerator-p function)
			;; We matched a prefix, so recurse
			(lookup-internal
			  (cdr (assoc '*kbd-accelerator-table*
				      (si:closure-alist function)))
			  (cdr chars)))
		       ((null (cdr chars))
			;; No more characters, we must be done
			(return-from lookup-in-superiors-kbd-accelerator-table
			  (unless (eq function :undefined) function)))
		       (t
			;; Who knows what this is
			(return-from lookup-in-superiors-kbd-accelerator-table nil))))))
	   (lookup (accelerator-table chars)
	     (map-over-command-table-inheritance
	         (kbd-accelerator-table-command-table accelerator-table)
	       (lambda (command-table)
		 (lookup-internal (command-table-kbd-accelerator-table command-table)
				  chars)))))
    (lookup accelerator-table (append prefix-chars (list char)))))

(sys:defvar-standard *unparsing-accelerator* nil)

;;; Kludge
(defun map-over-prefix-accelerator-table-inheritance (prefix-accelerator-table prefix-chars
						      function)
  (declare (sys:downward-funarg function))
  (labels ((find-prefix-accelerator-table (accelerator-table prefix-chars)
	     (when accelerator-table
	       (let ((function (lookup-in-kbd-accelerator-table
				 accelerator-table (first prefix-chars))))
		 (cond ((null function)
			;; failed in this table
			nil)
		       ((prefix-accelerator-p function)
			(let ((at (cdr (assoc '*kbd-accelerator-table*
					      (si:closure-alist function)))))
			  (if (null (cdr prefix-chars))
			      at
			      (find-prefix-accelerator-table
				at
				(cdr prefix-chars)))))
		       ((null (cdr prefix-chars))
			;; no more characters
			(unless (eq function :undefined) function))
		       (t nil))))))
    (map-over-command-table-inheritance
      (kbd-accelerator-table-command-table prefix-accelerator-table)
      (lambda (command-table)
	(let ((prefix-accelerator-table
		(find-prefix-accelerator-table
		  (command-table-kbd-accelerator-table command-table)
		  prefix-chars)))
	  (when prefix-accelerator-table
	    (funcall function prefix-accelerator-table)))))))

(defun prefix-accelerator-help (arg-p arg)
  (declare (special *prefix-chars* *kbd-accelerator-table*))
  (labels ((my-char-lessp (char1 char2)
			  (cond ((< (char-code char1) (char-code char2))
				 t)
				((> (char-code char1) (char-code char2))
				 nil)
				(t
				 (< (char-bits char1) (char-bits char2)))))
	   (unparse-accelerator-command (function)
	     (let ((*unparsing-accelerator* t))
	       (multiple-value-bind (command-name arguments)
		   ;; Bind interesting streams so that if the
		   ;; accelerator happens to do input or output (yecch)
		   ;; we don't have to deal with it.
		   (let ((*standard-input* #'funny-stream)
			 (*standard-output* #'funny-stream)
			 (*query-io* #'funny-stream))
		     (condition-case ()
			  (funcall function arg-p arg)
			(accelerator-error (values :accelerator-error nil))
			(error (values :error nil))))
		 (cond ((eq command-name :accelerator-error) nil)
		       ((eq command-name :error)
			(format nil
				"~V>>Error getting documentation for ~A<<~"
				'(nil :italic nil)
				function))
		       (t
			(cp:unparse-command command-name arguments))))))
	   (funny-stream (op &rest args)
	     (ignore op args)
	     ()))
    (let ((type `((command :command-table ,*command-table*)))
	  (stream *help-io*)
	  (chars-and-doc nil))
      (fresh-line stream)
      (when ( arg 1)
	(format stream "~:[Control-U~;Control-~D~] " (neq arg-p :control-u) arg))
      (format-textual-list *prefix-chars* #'(lambda (char stream)
					      (format stream "~:C" char))
			   :conjunction "and")
      (format stream " commands:~%   ")
      (map-over-prefix-accelerator-table-inheritance
	*kbd-accelerator-table* *prefix-chars*
	(lambda (kbd-accelerator-table)
	  (loop for index below (kbd-accelerator-table-length kbd-accelerator-table)
			  by (kbd-accelerator-table-modulus)
		doing
	    (let* ((function (kbd-accelerator-table-function index kbd-accelerator-table))
		   (accelerator-for
		     (cadr (si:debugging-info-user-entry function 'dw::accelerator-for)))
		   (doc (or (documentation function)
			    (and accelerator-for (documentation accelerator-for))
			    (unparse-accelerator-command function)))
		   (char (kbd-accelerator-table-character index kbd-accelerator-table)))
	      (when (or accelerator-for doc)
		(push `(,char ,accelerator-for ,doc) chars-and-doc))))))
      ;; Naturally, there's probably a more elegant way to do this; I didn't feel
      ;; like figuring it out.
      (setq chars-and-doc (sort chars-and-doc #'my-char-lessp :key #'car))
      (formatting-table (stream :inter-column-spacing (* 2 (send stream :char-width)))
	(loop for elem in chars-and-doc
	      doing
	  (destructuring-bind (char accelerator-for doc) elem
	    (formatting-row (stream)
	      (formatting-cell (stream :align :right)
		(format stream "~C" char))
	      (formatting-cell (stream)
		(if doc
		    (if accelerator-for
			(dw:with-output-as-presentation (:type type
							 :object `(,accelerator-for)
							 :stream stream)
			  (write-string doc stream))
		      (write-string doc stream))
		  (present `(,accelerator-for) type :stream stream))))))))))

;; Lifted from ZWEI
(defun format-argument (arg-p arg)
  (ecase arg-p
    (nil "")
    (:sign (if (minusp arg) "-" "+"))
    (:digits (format nil "~D" arg))
    (:control-u (format nil "c-U (~D)" arg))
    (:infinity (if (minusp arg) "-" ""))))


(defun read-accelerator-char (&key (stream *standard-input*) (any-tyi nil) (whostate nil)
				   (wait-for-typeahead nil) (notification nil)
				   (presentation-context nil) (timeout nil)
				   (input-wait nil) (input-block nil) (input-wait-handler nil)
				   (abort-chars nil) (suspend-chars nil) (status nil)
				   (intercept-function nil))
  (let ((char (sys:read-character stream
				  :any-tyi any-tyi :whostate whostate
				  :timeout (or timeout (and wait-for-typeahead 20.))
				  :notification notification :refresh nil
				  :presentation-context presentation-context
				  :input-wait input-wait
				  :input-block input-block
				  :input-wait-handler input-wait-handler
				  :abort (null abort-chars) :suspend (null suspend-chars)
				  :status status)))
    ;; Maybe process some intercepted characters
    (when (and intercept-function
	       (characterp char)
	       (or (member char abort-chars :test #'char-equal)
		   (member char suspend-chars :test #'char-equal)))
      (funcall intercept-function char))
    (when (and (eq char :timeout)
	       (not timeout))			;Because of :wait-for-typeahead
      (setq char nil))
    char))

(defvar *default-command-accelerator-echo* t)

(defun command-accelerator-internal (generator arg-p arg &key (argument-allowed nil)
							      (activate t)
							      (echo :default))
  (let ((command-form (if argument-allowed
			  (funcall generator arg-p arg)
			(funcall generator))))
    (destructuring-bind (command-function . arguments) command-form
      (when (and arg-p (not argument-allowed))
	(accelerator-error "~A does not take an argument."
			   (unparse-command
			     command-function arguments
			     *command-table*)))
      (when *unparsing-accelerator*
	(return-from command-accelerator-internal (values command-function arguments)))
      (when (not activate)
	(setq arguments (cp:read-command-arguments command-function
						   :command-table *command-table*
						   :initial-arguments arguments
						   :full-command-into-history t)))
      (when (eq echo :default)
	(setq echo (and activate *default-command-accelerator-echo*)))
      (when echo
	(echo-command command-function arguments))
      (values command-function arguments))))

(defun echo-command (command-name arguments)
  (scl:with-character-face (:italic)
    (format t " ")
    (present `(,command-name ,@arguments)
	     `((command :command-table ,*command-table*))
	     :acceptably t)
    (terpri)))

(sys:defvar-standard *help-io* si:syn-terminal-io)

(defvar *full-command-prompt* "Command: ")
(defun read-full-command (arg-p ignore)
  "Read an extended command."
  (when arg-p
    (accelerator-error "This command does not take an argument."))
  (with-input-editing-options ((:help-stream *help-io*))
    (read-command *standard-input*
		  :command-table *command-table*
		  :prompt *full-command-prompt*)))

(defun (read-full-command full-rubout-reader) (arg-p ignore)
  (when arg-p
    (accelerator-error "This command does not take an argument."))
  (with-input-editing ()
    ;; *STANDARD-INPUT* and *STANDARD-OUTPUT* are bound by read-accelerated-command
    ;; so it's kosher to expect to :TYI the colon from *SI* and fresh-line to *SO*.
    (send *standard-input* :tyi)			;Read the colon
    (multiple-value-prog1
      (destructuring-bind (command . arguments)
	 (accept 'command :prompt nil :stream *standard-input* :provide-default nil)
	(values command arguments :command))
      (fresh-line *standard-output*))))

(COMPILER-LET ((COMPILER:*ENABLE-FRAME-SPLITTING* t))
(defun read-accelerated-command (&key (command-table *command-table*)
				      (stream *query-io*) (help-stream stream)
				      (echo-stream stream) (whostate nil)
				      (prompt nil) (command-prompt *full-command-prompt*)
				      (full-command-full-rubout nil)
				      (special-blip-handler nil) (timeout nil)
				      (input-wait nil) (input-block nil)
				      (input-wait-handler nil)
				      (form-p nil) (handle-clear-input nil)
				      (catch-accelerator-errors t)
				      (echo-accelerators *default-command-accelerator-echo*)
				      (unknown-accelerator-is-command nil)
				      (unknown-accelerator-tester nil)
				      (unknown-accelerator-reader nil)
				      (blank-line-mode *default-blank-line-mode*)
				      (unknown-accelerator-reader-prompt nil)
				      (process-unknown-accelerator nil)
				      (abort-chars nil) (suspend-chars nil) (status nil)
				      (intercept-function nil) (window-wakeup nil)
				      (notification t))
  (let ((*command-table* command-table)		;Global state
	(*query-io* stream)
	(*standard-input* stream)
	(*standard-output* echo-stream)
	(*help-io* help-stream)
	(*full-command-prompt* command-prompt)
	(*blank-line-mode* blank-line-mode))
    (block read-command
      (labels ((return-command (command arguments type)
		 (return-from read-command
		   (if form-p
		       (if (not (eql type :form))
			   (values (turn-command-into-form command arguments) type)
			   (values command type))	;it's already a form
		       (values command arguments type))))
	       (process-command-blip (blip)
		 (if (getf (dw::presentation-blip-options blip) :activate t)
		     (destructuring-bind (command . arguments)
			 (dw:presentation-blip-object blip)
		       (when (getf (dw::presentation-blip-options blip)
				   :echo echo-accelerators)
			 (echo-command command arguments))
		       (return-command command arguments :command))
		     (let ((stuff-as-if-typed (present-to-string
						(dw:presentation-blip-object blip)
						'command :acceptably t)))
		       (with-input-editing-options ((:initial-input stuff-as-if-typed))
			 (multiple-value-bind (command arguments)
			     (read-full-command nil nil)
			   (return-command command arguments :command))))))
	       (process-unknown-char (error-message char)
		 (when process-unknown-accelerator
		   (multiple-value-bind (command arguments type)
		       (funcall process-unknown-accelerator char)
		     (when (or command type)
		       (return-command command arguments type))))
		 (if (case unknown-accelerator-is-command
		       ((nil) t)
		       ((:alpha) (or (not (characterp char))
				     (not (graphic-char-p char)))))
		     (accelerator-error error-message char)
		     (multiple-value-bind (command arguments flag ok)
			 (read-unknown-accelerator-command
			   char unknown-accelerator-reader
			   prompt unknown-accelerator-reader-prompt)
		       (when ok
			 (return-from read-command
			   (if form-p
			       (if (eq flag :form)
				   (values command :form)
				   (values (turn-command-into-form command arguments) :form))
			       (values command arguments flag))))
		       (if (and flag
				(eq flag (first (si:input-editor-option :full-rubout))))
			   (return-from read-command (values nil flag))
			   (throw 'clear-input nil)))))
	       (clear-prompt (initial-x initial-y)
		 (when (and initial-x initial-y)
		   ;; These can be NIL when someone passed :echo-stream as #'ignore
		   (multiple-value-bind (x y)
		       (send *standard-output* :read-cursorpos)
		     (cond ((and (= x initial-x) (= y initial-y)) )
			   ((operation-handled-p *standard-output* :clear-between-cursorposes)
			    (when (multiple-value-bind (left top right bottom)
				      (send-if-handles *standard-output*
						       :visible-cursorpos-limits)
				    (or (null left)
					(and ( left initial-x right)
					     ( top initial-y bottom))))
			      (send *standard-output* :clear-between-cursorposes
				    initial-x initial-y x y)
			      (send *standard-output* :set-cursorpos initial-x initial-y)))
			   (t (send *standard-output* :fresh-line)
			      (si:display-prompt-option *standard-output* prompt)))))))
	(si:display-prompt-option *standard-output* prompt)
	(multiple-value-bind (initial-x initial-y)
	    (send *standard-output* :read-cursorpos)
	  (loop doing
	    (catch 'clear-input
	      (clear-prompt initial-x initial-y)
	      (condition-case-if catch-accelerator-errors (error)
		   (let ((arg-p nil)
			 (arg 1))
		     (loop doing
		       (let ((char
			       (if arg-p
				   (let ((char (read-accelerator-char
						 :whostate whostate
						 :wait-for-typeahead t
						 :abort-chars abort-chars
						 :status status)))
				     (when (null char)
				       (clear-prompt initial-x initial-y)
				       (format t " Arg: ~A" (format-argument arg-p arg))
				       (send-if-handles *standard-output* :make-complete)
				       (setq char (read-accelerator-char
						    :abort-chars abort-chars
						    :status status)))
				     char)
				 (dw:with-presentation-input-context
				    ((let ((context
					     `((command :command-table ,command-table))))
				       (when form-p
					 (setq context `((or sys:form ,context))))
				       (when unknown-accelerator-is-command
					 (setq context `((or ,context
							     si:input-editor))))
				       context)
				     :stream stream)
				    (blip)
				      (let ((char (read-accelerator-char
						    :any-tyi t
						    :whostate whostate
						    :input-wait input-wait
						    :input-block input-block
						    :input-wait-handler input-wait-handler
						    :timeout timeout
						    :abort-chars abort-chars
						    :suspend-chars suspend-chars
						    :status status :notification notification
						    :intercept-function intercept-function
						    :presentation-context t)))
					(when (member char '(:timeout :status))
					  (return-from read-command
					    (if form-p
						(values nil char)
						(values nil nil char))))
					;; This must be called within the presentation context
					;; for zmail command menu kludgery to work.
					(when (consp char)
					  (if (and (dw:presentation-blip-p char)
						   (dw:presentation-blip-typep
						     char 'dw::window-wakeup))
					      (case window-wakeup
						((nil)
						 (setq char nil))
						((:return)
						 (return-from read-command
						   (values nil char :wakeup)))
						(otherwise
						  (funcall window-wakeup char)
						  (setq char nil)))
					    (when special-blip-handler
					      (setq char (funcall special-blip-handler
								  char)))))
					char)
				    (command
				      (process-command-blip blip))
				    (sys:form
				      (return-from read-command
					(let ((form (dw:presentation-blip-object blip)))
					  (present form
						   (dw:presentation-blip-presentation-type
						     blip))
					  (if form-p
					      (values form :form)
					      (values form nil :form)))))
				    (si:input-editor
				      (multiple-value-bind (command arguments flag ok)
					  (with-input-editing-options
					      ((:initial-input (dw:presentation-blip-object
								 blip)))
					    (read-unknown-accelerator-command
					      nil unknown-accelerator-reader
					      prompt unknown-accelerator-reader-prompt))
					(when ok
					  (return-from read-command
					    (if form-p	;return a form no matter what
						(if (eq flag :form)
						    (values command :form)
						    (values (turn-command-into-form
							      command arguments) :form))
						(values command arguments flag))))
					(throw 'clear-input nil)))))))
			 (when char
			   (when (listp char)
			     (if (dw:presentation-blip-p char)
				 (dw:presentation-blip-case char
				   (command
				     (process-command-blip char))
				   (otherwise
				     (process-unknown-char
				       "Received unknown presentation blip" char)))
				 (process-unknown-char "Received unknown blip ~S." char)))
			   (let ((accelerator (lookup-accelerated-command char
									  command-table)))
			     (cond ((null accelerator)
				    (when unknown-accelerator-tester
				      (let ((unk (funcall unknown-accelerator-tester char)))
					(when unk
					  (return-from read-command
					    (if form-p
						(values unk :unknown)
						(values unk char :unknown))))))
				    (let ((clear-input-p
					    (member char '(#\Clear-Input #\Rubout)
						    :test #'char-equal))
					  (full-rubout (first (si:input-editor-option
								:full-rubout))))
				      (when (and clear-input-p full-rubout)
					(return-from read-command
					  (values nil full-rubout)))
				      (if (and handle-clear-input
					       clear-input-p)
					  (throw 'clear-input nil)
					  (process-unknown-char "~:C is not a defined command."
								char))))
				   (t
				    ;; Prefixes shouldn't echo.
				    ;; This used to also check for argument commands, but
				    ;; since the character after the argument always echos,
				    ;; that's confusing.
				    (if (and full-command-full-rubout
					     (graphic-char-p char)	;Something you rubout
					     (get accelerator 'full-rubout-reader))
					(multiple-value-bind (command arguments flag ok)
					    (read-unknown-accelerator-command
					      char
					      #'(lambda ()
						  (funcall
						    (get accelerator
							 'full-rubout-reader)
						    arg-p arg))
					      prompt " ")
					  (ignore ok)	;for now
					  (if (and command t)
					      (return-command command arguments flag)
					      (throw 'clear-input nil)))
				      (unless (or (prefix-accelerator-p accelerator)
						  (null echo-accelerators))
					(format t " ~:C" char))
				      (multiple-value-bind (command arguments)
					  (funcall accelerator arg-p arg)
					(if (eq command :argument)
					    (multiple-value-setq (arg-p arg)
					      (process-argument (first arguments)
								char arg-p arg))
					    (return-command command arguments :accelerator)
					    ))))))))))
		 (accelerator-error
		   (beep)
		   (send *standard-input* :clear-input)
		   (format t "~&~A~%" error)
		   (if (eq catch-accelerator-errors :abort)
		       (return-from read-command (values nil nil))
		       ;; Suppress prompt clearing, which would remove error message.
		       (setq initial-x nil)))))))))))
)

(defun process-argument (type char arg-p arg)
  (ecase type
    (:sign
     (setq arg-p :sign
	   arg -1))
    (:control-u
     (setq arg-p :control-u
	   arg (* arg 4)))
    (:infinity
     (setq arg-p :infinity
	   arg (* 1_40 (signum arg))))
    (:digit
     (let ((weight (digit-char-p char)))
       (if (neq arg-p :digits)
	   (setq arg-p :digits
		 arg (* (signum arg) weight))
	   (setq arg (* (if (minusp arg) -1 +1)
			(+ (* (abs arg) 10) weight)))))))
  (values arg-p arg))

;; Kludges lifted from the debugger, plus a few.
(defun read-unknown-accelerator-command (char reader first-prompt other-prompt)
  (declare (values command arguments flag ok-p))
  ;; for lack of anything better, return nil as the flag when the result ain't ok.
  (cond ((member char '(#\Rubout #\m-rubout #\Clear-input))
	 (values nil nil (first (si:input-editor-option :full-rubout)) nil))
	((member char '(#\Scroll #\Meta-Scroll #\Super-Scroll #\Super-Meta-Scroll
			#\Meta-V #\Control-V
			#\Keyboard:Back-Scroll #\Super-Keyboard:Back-Scroll))
	 (let ((count (if (or (member char '(#\Keyboard:Back-Scroll
					     #\Super-Keyboard:Back-Scroll))
			      (char-bit char :meta))
			  -1 +1))
	       (direction (if (char-bit char :super) :x :y)))
	   (scroll-window-command-internal :screen count direction *standard-output*))
	 (values nil nil nil nil))
	(t
	 (when char
	   (send *standard-input* :untyi char))
	 (unless reader
	   (setq reader #'read-unknown-accelerator-command-reader))
	 (unless other-prompt
	   (setq other-prompt *default-prompt*))
	 (let ((start-x (send *standard-output* :read-cursorpos)))
	   (si:display-prompt-option *standard-output* other-prompt nil)
	   (multiple-value-bind (command arguments flag)
	       (with-input-editing-options (((:full-rubout :override) :full-rubout)
					    (:reprompt
					      (lambda (stream ignore)
						(si:display-prompt-option
						  stream first-prompt t)
						(si:display-prompt-option
						  stream other-prompt nil))))
		 (funcall reader))
	     (if (neq flag :full-rubout)
		 (values command arguments flag t)
		 (if (operation-handled-p *standard-output* :clear-between-cursorposes)
		     (multiple-value-bind (x y)
			 (send *standard-output* :read-cursorpos)
		       (send *standard-output* :clear-between-cursorposes start-x y x y)
		       (send *standard-output* :set-cursorpos start-x y))
		     (send *standard-output* :fresh-line)
		     (si:display-prompt-option *standard-output* first-prompt))
		 (values nil nil (or (first (si:input-editor-option :full-rubout))
				     flag) nil)))))))
  
(defun read-unknown-accelerator-command-reader ()
  (multiple-value-bind (command arguments)
      (read-command *standard-input*
		    :command-table *command-table*
		    :prompt nil)
    (when (eq arguments :full-rubout)		;we used (:FULL-RUBOUT :OVERRIDE) in caller 
      (return-from read-unknown-accelerator-command-reader (values nil nil :full-rubout)))
    (values command arguments :command)))


(defmacro define-command-accelerator (name command-table characters options arglist
				      &body body)
  (define-command-accelerator-internal name `',command-table `',characters
				       options arglist body))

(eval-when (eval load compile)
(defun define-command-accelerator-internal (name command-table characters
					    options arglist body)
  (when (eq (getf options :argument-allowed 'not-specified) 'not-specified)
    (setf (getf options :argument-allowed) (not (null arglist))))
  (let ((function-name (dw::fintern "~A-COMMAND-ACCELERATOR" name)))
    (multiple-value-bind (declarations nil body documentation debug-info var-dcls nil fun-dcls)
	(si:parse-body-declarations body nil '(.arg-p. .arg.))
      `(progn
	 (defun ,function-name (.arg-p. .arg.)
	   (declare ,@debug-info)
	   ,documentation
	   (command-accelerator-internal
	     #'(lambda ,arglist
		 (declare ,@(si:reconstitute-body-declarations var-dcls fun-dcls () ()))
		 (declare ,@declarations)
		 ,@body)
	     .arg-p. .arg. ,@options))
	 (add-command-accelerator ,command-table ',function-name ,characters))))))

(defmacro define-argument-command (type characters &optional (shifted t))
  (let* ((function-name (dw::fintern "~A-ARGUMENT-COMMAND" type))
	 (shifted-chars (remove-if #'(lambda (char) (zerop (char-bits char))) characters))
	 (unshifted-chars (set-difference characters shifted-chars)))
    (when shifted
      (setq shifted-chars (append (loop for bits from 1 to 3
					nconc (loop for char in characters
						    collect (make-char char bits)))
				  shifted-chars)))
    `(progn
       (defun ,function-name (ignore ignore)
	 (values :argument
		 '(,type)))
       ,(when shifted-chars
	  `(add-command-accelerator "Standard arguments" ',function-name ',shifted-chars))
       ,(when unshifted-chars
	  `(add-command-accelerator "Unshifted arguments"
				    ',function-name ',unshifted-chars)))))

(define-argument-command :sign (#\-))
(define-argument-command :digit (#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))
(define-argument-command :infinity (#\))
(define-argument-command :control-u (#\c-u) nil)

(defun yank-and-read-full-command (numeric-arg-p numeric-arg)
  (if (zerop numeric-arg)
      (zwei:display-history-menu *help-io*
				 (send *standard-input* :input-history)
				 zwei:*history-menu-length*)
      (with-input-editing-options ((:initial-yank
				     (send *standard-input* :input-history)
				     (and numeric-arg-p numeric-arg)))
	(read-full-command nil nil))))

(add-command-accelerator "Colon Full Command" 'read-full-command '(#\: #\m-x))
(add-command-accelerator "Colon Full Command" 'yank-and-read-full-command '(#\c-m-y))


(defun read-accelerated-command-minimal-help (&optional (command-table *command-table*))
  (let ((type `((command :command-table ,command-table)))
	(table (command-table-kbd-accelerator-table command-table)))
    (when table
      (format t "~&Single character commands:~%")
      (formatting-table ()
	(loop for (char accelerator-for doc)
		  in (sort (loop for index below (kbd-accelerator-table-length table)
					   by (kbd-accelerator-table-modulus)
				 as function = (kbd-accelerator-table-function index table)
				 as accelerator-for = (cadr (si:debugging-info-user-entry
							      function
							      'dw::accelerator-for))
				 as doc = (or (documentation function)
					      (and accelerator-for
						   (documentation accelerator-for)))
				 when (or accelerator-for doc)
				   collect (list (kbd-accelerator-table-character index table)
						 accelerator-for doc))
			   #'(lambda (x y)
			       (cond ((= (char-bits x) (char-bits y)) (char< x y))
				     ((zerop (char-bits y)) t)     ;Control characters first
				     ((zerop (char-bits x)) nil)
				     (t (< (char-bits x) (char-bits y)))))
			   :key #'car) do
	  (formatting-row ()
	    (formatting-cell ()
	      (format t "~:C" char))
	    (formatting-cell ()
	      (if doc
		  (if accelerator-for
		      (dw:with-output-as-presentation (:type type
						       :object `(,accelerator-for))
			(write-string doc))
		      (write-string doc))
		  (present `(,accelerator-for) type)))))))))

#||
;;; Tests

(defvar *test-command-table* (make-command-table
			       "test"
			       :inherit-from '("Standard Arguments"
					       "Colon Full Command"
					       "Global")))

(define-command (com-show-foobar :command-table "Test" :values t)
		(&key (format '((member :foo :bar :bletch))
			      :default :foo))
  (format t "~&Format was ~S.~%" format)
  (values 1 2))

(define-command-accelerator foobar "Test" (#\c-f) () (arg-p ignore)
  `(com-show-foobar :format ,(if arg-p :bar :foo)))

(define-command-accelerator edit-file "Test" ((#\c-x #\c-f)) (:activate nil) ()
  `(si:com-edit-file ))

(defun test (&optional (stream *query-io*))
  (loop doing
    (multiple-value-bind (command arguments)
	(read-accelerated-command :command-table *test-command-table*
				  :stream stream)
      (when command
	(apply command arguments)))))

;; If all your commands are shifted, you might like this better
(defun test-2 ()
  (loop doing
    (let ((command (read-accelerated-command :command-table *test-command-table*
					     :form-p t
					     :unknown-accelerator-is-command :alpha)))
     (when command
       (eval command)))))

;; This is like the debugger
(defun test-4 ()
  (loop doing
    (multiple-value-bind (type form)
	(read-accelerated-command :command-table *test-command-table*
				  :form-p t
				  :prompt (lambda (stream ignore)
					    (loop repeat 1 doing
					      (send stream :tyo #\)))
				  :hack-clear-input t
				  :unknown-accelerator-tester #'test-4-tester
				  :unknown-accelerator-is-command t
				  :unknown-accelerator-reader #'test-4-reader
				  :unknown-accelerator-reader-prompt " Eval: ")
      (when type
	(let ((values (multiple-value-list (eval form))))
	  (when values
	    (mapcar #'print values)))))))

(defun test-4-tester (char)
  (when (char-bit char :super) 'super))

(defun test-4-reader ()
  (read-command-or-form *standard-input*
			:dispatch-mode :form-preferred
			:blank-line-mode :reprompt
			:prompt nil
			:command-table *test-command-table*))

||#
