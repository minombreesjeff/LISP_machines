;;; -*- Mode: LISP; Syntax: Common-lisp; Package: COMMAND-PROCESSOR; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(define-command (com-show-initialization-list :command-table "Debugging")
    ((list 'si:initialization-list-name
	   :prompt "initialization list"
	   :documentation "Initialization list to show"
       ))
   (formatting-table ()
     (formatting-column-headings (*standard-output* :underline-p t)
       (formatting-cell () (write-string "Name"))
       (formatting-cell () (write-string "Form"))
       (formatting-cell () (write-string "Run?"))
       (formatting-cell () (write-string "Source File")))
     (loop for entry in (symbol-value list) do
       (formatting-row ()
	 (dw:with-output-as-presentation
	   (:object `(:initialization ,list ,(si:init-name entry))
	    :type 'sys:function-spec)
	   (formatting-cell ()
	     (filling-output (t :fill-column (send *standard-output* :string-length
						       "Typical length entry")
				    :after-line-break "  ")
	       (write-string (string (si:init-name entry)))))
	   (formatting-cell ()
	     (let ((gprint:*overriding-line-length* 20.)
		   (gprint:*miser-width* 20.)
		   (gprint:*overriding-left-indent* 0))       
	       (write (si:init-form entry) :pretty :code :abbreviate-quote t
		       :structure-contents nil :array nil)))
	   (formatting-cell () (format t "~:[No~;Yes~]" (si:init-flag entry)))
	   (formatting-cell ()
	     (if (si:init-source-file entry)
		 (present
		   (zwei:pathname-source-file-pathname
		     (si:init-source-file entry)) 'pathname)
		 (write-string "None"))))))))

(define-command (si:com-save-file-buffers :command-table "Editing"
					  :provide-output-destination-keyword nil)
    (&key (query 'boolean
		 :default t
		 :documentation "Ask whether to save each file"))
   (zwei:save-all-files query))

;;; Set commands

(define-command (si:com-set-file-properties :command-table "File"
					    :provide-output-destination-keyword nil)
    ((file 'fs:pathname :prompt "existing file" :confirm t
	   :documentation "An existing file."))
   (zwei:change-file-properties file :own-window nil))

(define-command (si:com-set-command-processor :command-table "Session"
					   :provide-output-destination-keyword nil)
    ((mode '((cl:member
	       :form-only :form-preferred :command-preferred :command-only))
	   :default *dispatch-mode*
	   :documentation
	   "Operating mode for the command processor
       Form-Only: Interprets everything in Lisp syntax
       Form-Preferred: Interprets input lines starting with an alphabetic character as Lisp;
                        type an initial colon [:] to force command interpretation
       Command-Preferred: Interprets input lines starting with an alphabetic character as commands;
                           type an initial comma [,] to force Lisp interpretation
       Command-Only: Interprets everything in command syntax")
     (prompt 'string
	     :prompt "prompt string"
	     :default (cdr (assoc mode *prompt-alist*))
	     :documentation "Prompt string printed when awaiting a command")
     &key
     (noise-strings 'scl:boolean
		    :prompt "whether to print noise strings"
		    :default (not si:*disable-noise-strings*)
		    :documentation "Print noise-strings (prompts) in the command line"))
   (cp-on mode prompt)
   (setq si:*disable-noise-strings* (not noise-strings))
   (format t "~& Command Processor mode set to ~A, prompt string to \"~A\""
	   (string-capitalize mode) prompt)
   (when (eq mode :form-only)
     (cl:fresh-line)
     (dw:with-output-as-presentation (:object '((cp-on :command-preferred)
						"Turn the Command Processor back on.")
				      :type 'si:pseudo-command)
       (format t
	       " Type (CP:CP-ON :COMMAND-PREFERRED) to turn the Command Processor back on.")))
)

;;; NOTE: The symbol name of this command must stay in the SI package for binary
;;; compatibility with customer code developed in releases before Genera 7.4.
(define-command (si:com-show-command-processor-status :command-table "Session")
    ()
   (format t "~& The command processor's current mode is~:@
  ~A: ~~A~.~2% The prompt string is ~:[~;\"~]~A~:[~;\"~]."
	   (string-capitalize-words *dispatch-mode*)
	   (case *dispatch-mode*
	     (:form-only "Interprets everything in Lisp syntax")
	     (:form-preferred
	      "Interprets input starting with an alphabetic character as Lisp;
type an initial : to force command interpretation")
	     (:command-preferred
	      "Interprets input starting with an alphabetic character as commands;
type an initial , to force Lisp interpretation")
	     (:command-only "Interprets everything in command syntax"))
	   (stringp *prompt*) *prompt* (stringp *prompt*))
   (format t "~&~% The prompt strings for other modes are:~%")
   (loop for (mode . prompt) in *prompt-alist*
	 when (neq mode *dispatch-mode*)
	   do (format t "   ~A:~28T~:[~;\"~]~A~:[~;\"~]~%"
		      (string-capitalize-words mode) (stringp prompt) prompt (stringp prompt))))

