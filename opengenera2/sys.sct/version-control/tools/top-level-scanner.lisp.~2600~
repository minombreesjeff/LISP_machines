;;; -*- Mode: LISP; Syntax: Common-lisp; Base: 10; Package: (TOP-LEVEL-SCAN scl); Lowercase: Yes -*-

;;; To Do: returned node type as instance variable?

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defpackage top-level-scan
  (:nicknames tls)
  (:prefix-name "TLS")
  (:use scl)
  (:colon-mode :internal)) ; until this is in better shape

;;; Interim tools for navigating a zwei interval by lisp top level forms.
;;; Eventually, this will be a trivial application of syntax-directed editing.
;;; For now, it makes use of a peculiar read table and the zetalisp reader's
;;; various extensions above and beyond common lisp.

;;; readtable customization to obtain a reader for navigating top-level forms.
;;; Note that this makes use of ZetaLisp read-table features, and the second
;;; return argument of ZL:READ.  

;;; reader using the readtable

(defun tls-read (stream readtable)
  "\"Reads\" the next item, returning its type and implicitly indicating its length
by the amount of stuff read."
  (declare (values type-of-item-read eof))
  (let ((*readtable* readtable)
	(*read-suppress* t))
    (condition-case ()
	 (multiple-value-bind (eof type)
	     (zl:read stream 'eof-applesauce)
	   (values type (eq eof 'eof-applesauce)))
       (sys:read-error (values '|read error| nil)))))

;;; for ; comments, return a type of |;-comment|

(defun |;-comment-macro| (list-so-far stream)
  (read-line stream nil nil)
  (return-from |;-comment-macro| (values list-so-far '|;-comment| t)))

;;; similiarly, note <page>'s
(defun |<page>-macro| (list-so-far stream)
  (let ((ch (read-char stream)))
    (when ch
      (unless (char-equal ch #\Cr)
	(unread-char ch stream))))
  (return-from |<page>-macro| (values list-so-far '|<page>| t)))

;;; for #+ and #-, return  |#+-form| or |#--form|

(defun |#+-macro| (list-so-far stream)
  (let*
    ((cur-package *package*)
     (*package* si:pkg-keyword-package)
     (*read-base* 10.)
     (feature-name
       (si:read-recursive stream))
     (*package* cur-package)
     (inside-form (si:read-recursive stream)))
    (ignore feature-name inside-form)
    (values list-so-far '|#+-form| t)))



(defun |#--macro| (list-so-far stream)
  (let*
    ((cur-package *package*)
     (*package* si:pkg-keyword-package)
     (*read-base* 10.)
     (feature-name
       (si:read-recursive stream))
     (*package* cur-package)
     (inside-form (si:read-recursive stream)))
    (ignore inside-form feature-name)
    (values list-so-far '|#--form| t)))
 
;;; for #|, return |#\|-comment|  (yea, it prints ugly)

(defun |#\|-macro| (list-so-far stream)
  (prog ((n 0))
	(go home)
     sharp (selector (si:xr-xrtyi-white-out stream) equalp
	     (#\# (go sharp))
	     (#\| (setq n (1+ n)))
	     (nil (go barf)))
     home (selector (si:xr-xrtyi-white-out stream) equalp
	    (#\| (go bar))
	    (#\# (go sharp))
	    (nil (go barf))
	    (otherwise (go home)))
     bar (selector (si:xr-xrtyi-white-out stream) equalp
	   (#\# (cond ((zerop n)
		       (return (values list-so-far '|#\|-comment| t)))
		      (t
		       (setq n (1- n))
		       (go home))))
	   (#\| (go bar))
	   (nil (go barf))
	   (t (go home)))
     barf (si:read-eof stream "The end of file was reached while reading a #| comment")))

(defun make-tls-readtable (base-readtable)
  (let ((tls-readtable (copy-readtable base-readtable)))
    (zl:set-syntax-macro-char #\; #'|;-comment-macro| tls-readtable)
    (zl:set-syntax-macro-char #\page #'|<page>-macro| tls-readtable)
    (zl:set-syntax-#-macro-char #\+ #'|#+-macro| tls-readtable)
    (zl:set-syntax-#-macro-char #\- #'|#--macro| tls-readtable)
    (zl:set-syntax-#-macro-char #\| #'|#\|-macro| tls-readtable)
    tls-readtable))




;;; The scanner hands out successive intervals containing top-level items.
;;; Each item is returned with a type, which may be useful to someone.
;;; This does no analysis of the insides of #|| or top-level forms,
;;; that's the caller's look-out.

(defflavor scanner
	(
	 interval				; source of the Nile
	 stream					; to point the reader at
	 (state 'bof)				; what are we doing?
	 bof-bp
	 post-attribute-bp
	 readtable
	 )
	(si:property-list-mixin)
  (:initable-instance-variables interval)
  (:documentation "Given an interval, returns successive sub-intervals 
that contain top level lisp forms.  The intervals are returned by the 
:item-in message.  The interval should contain an attribute list."))


(defmacro with-approximate-editor-bindings (interval &body body)
  `(with-approximate-editor-bindings-1 
     #'(lambda () ,@body)
    ,interval))

(defun with-approximate-editor-bindings-1 (continuation interval)
  (declare (sys:downward-funarg continuation))
  (let* ((major-mode (send interval :get :major-mode))
	 (additional-bindings
	   (loop with list = (send major-mode :additional-attributes)
		 for (indicator value) on (send interval :plist) by #'cddr
		 when (assoc indicator list)
		   collect indicator and collect value)))
    (multiple-value-bind (fvars fvals)
	(fs:file-attribute-bindings nil
				    :additional-attributes
				    additional-bindings)
      (push 'zwei:*major-mode* fvars)
      (push major-mode fvals)
      (push 'zwei:*mode-word-syntax-table* fvars)
      (push zwei:*word-syntax-table* fvals)
      (multiple-value-bind (pvars pvals)
	  (send major-mode :parsing-bindings interval)
	(loop for pvar in pvars for pval in pvals
	      do
	  (push pvar fvars)
	  (push pval fvals)))
      (progv fvars fvals
	     (funcall continuation)))))

(defmethod (make-instance scanner :after) (&rest ignore)
  (setq stream (zwei:open-interval-stream interval))
  (setq bof-bp (send stream :read-bp))
  (let ((zwei:*typein-window* *standard-output*)
	(*package* si:pkg-user-package)
	(*print-base* 10.))
    (zwei:reparse-attribute-list-internal interval stream))
  (with-approximate-editor-bindings interval
    (setq readtable (make-tls-readtable *readtable*)))
  (fs:read-attribute-list nil stream :dont-reset-stream t)
  (unless (zerop (zwei:bp-index (send stream :read-bp)))
    (read-line stream))				; grab to end of the line.
  (setq post-attribute-bp (zwei:copy-bp (send stream :read-bp))))

;;; The following returns arguments as follows:
;;;
;;;  (values interval type)

(defmethod (:item-in scanner) ()
  (declare (values item-interval item-type))
  (case state
    (bof					; return the attribute list
      (setq state 'pre-form)
      (send stream :set-bp (zwei:copy-bp post-attribute-bp))
      (values (zwei:make-interval 'zwei:interval
				  :first-bp bof-bp
				  :last-bp (let ((zwei:*interval* interval))
					     (zwei:forward-char post-attribute-bp -1)))
	      :attribute-list))
    (pre-form					; in pre-form, read and stay in this state
						; until we encounter a form.
      (pre-form-read self))
    (eof (values nil :eof))))


(defun classify-type (type start-bp)
  (case type
    (|;-comment| nil)
    (|#\|-comment|
      (let ((at-string (nsubstring (zwei:bp-line start-bp)
				   (zwei:bp-index start-bp))))
	(when (and ( (length at-string) 3)
		   (char= (char at-string 2) #\|))
	  :\#-double-vertical-comment)))
    ((|#+-form| |#--form|) :\#-feature-form)
    (|<page>| nil)				; page is only used for look-ahead
    (list :list-form)
    (otherwise :random-form)))

(defmethod (pre-form-read scanner) ()
  (with-approximate-editor-bindings interval
    (multiple-value-bind (vars vals)
	(send (send interval :get :major-mode) :parsing-bindings interval)
      (progv vars vals
	(let ((bound-interval (zwei:make-interval 'zwei:interval)))
	  (flet ((get-function-spec (start-bp end-bp)
		   (setf (zwei:interval-first-bp bound-interval) start-bp
			 (zwei:interval-last-bp bound-interval) end-bp)
		   (let ((zwei:*interval* bound-interval))
		     (loop for bp = start-bp then (zwei:forward-line bp 1 nil bound-interval)
			   do
		       (unless bp (return nil))
		       (when
			 (and (zerop (zwei:bp-index bp))
			      (> (length (zwei:bp-line bp)) 3)
			      (char-equal (aref (zwei:bp-line bp) 0) #\()
			      (let
				((look-here
				   (1+
				     (or
				       (string-search-char
					 #\:
					 (zwei:bp-line bp)
					 :end (string-search-char #\space (zwei:bp-line bp)))
				       0))))
				(string-equal
				  "DEF" (zwei:bp-line bp)
				  :start2 look-here
				  :end2 (+ 3 look-here))))
			 (multiple-value-bind (fspec dtype str error-p)
			     (zwei:get-definition-function-spec bp)
			   (unless error-p
			     (return-from get-function-spec
			       (values fspec dtype str)))))))))
	    (loop named pre-form-loop with item-start-bp = (send stream :read-bp)
								;wherever we are.
		  as start-bp = (send stream :read-bp)
		  as (type eof) = (multiple-value-list
				    (tls-read stream readtable))
		  as end-bp = (zwei:copy-bp (send stream :read-bp))
		  as form-type =
		     (classify-type type start-bp)
		  as fspec = nil
		  as dtype = nil
		  as dstring = nil
		  do
	      (when form-type
		(multiple-value-setq
		  (fspec dtype dstring) (get-function-spec start-bp end-bp)))
	      (cond (eof
		     (setq state `eof)
		     (return-from pre-form-loop
		       (values (zwei:make-interval 'zwei:interval :first-bp item-start-bp
						   :last-bp end-bp)
			       :random-form)))
		    (fspec
		     ;; look up the definition in the interval.
		     (loop with anon-form-end-bp = nil
			   as lookahead-start-bp = (send stream :read-bp)
			   as (type eof) =
			      (multiple-value-list
				(tls-read stream readtable))
			   as classified-type = (classify-type type lookahead-start-bp)
			   as fspec = (and classified-type
					   (get-function-spec lookahead-start-bp
							      (send stream :read-bp)))
			   do
		       (when eof
			 (send stream :set-bp (zwei:interval-last-bp interval))
								; End of World
			 (setq state 'eof)			; indeed
			 (return 'eof))
		       (when (and classified-type (null fspec))
			 (setq anon-form-end-bp (send stream :read-bp)))
		       (when (eq type '|<page>|)		; sitting on line past <page> ...
			 (let ((bp (zwei:copy-bp (send stream :read-bp)))
			       (zwei:*interval* interval))
			   (setq bp (zwei:forward-line bp -1))
								; beginning of line with <page>
			   (send stream :set-bp bp))		; this is where we terminate the current item
			 (return 'page))
		       (when fspec				; eat stuff until <page>, eof, or real form.
			 ;; terminate current item after last anon form.
			 (send stream :set-bp (or anon-form-end-bp end-bp))
			 (return 'form)))
		     ;; Pick up end-bp left for us by the lookahead loop.
		     ;; One section ends at the end of one line, the next section
		     ;; begins at beginning of the next.
		     ;; Advance stream to end of this line
		     (unless (eq state 'eof)
		       (when (eq (peek-char #\return stream nil 'eof) 'eof)
			 (setq state 'eof)))
		     (setq end-bp (send stream :read-bp))
		     ;; Advance stream to beginning of next line
		     (unless (eq state 'eof)
		       (read-char stream))
		     (return-from pre-form-loop
		       (values (zwei:make-interval 'zwei:interval :first-bp item-start-bp
						   :last-bp end-bp)
			       form-type
			       (and fspec (cons dtype fspec)))))
		    (t nil)))))))))

(defmethod (:reset scanner) ()
  (send stream :set-bp bof-bp)
  (setq state 'bof))

#+ignore (
(defvar *i* (zwei:make-interval 'zwei:buffer :activate-p nil) "Interval for test purposes")
(defvar *s* nil "Scanner for test purposes.")

(defun load-file (&optional (pathname "sys:zwei;primit.lisp.newest"))
  (zwei:with-editor-stream (target :interval *i*
				   :no-redisplay t
				   :set-point nil
				   :kill t)
    (with-open-file (source pathname :direction :input)
      (stream-copy-until-eof source target)))
  (setq *s* (make-instance 'scanner :interval *i*)))


(defmethod (:print-contents zwei:interval) (&optional (stream *standard-output*)
						      (buffer zwei:*interval*))
  (unless (zwei:bp-= zwei:first-bp zwei:last-bp)
    (let ((first-line (zwei:bp-line zwei:first-bp))
	  (last-line (zwei:bp-line zwei:last-bp)))
      (format stream "~&~A~%" (substring first-line (zwei:bp-index zwei:first-bp)))
      (loop for line = (zwei:line-next-in-buffer first-line buffer)
		     then (zwei:line-next-in-buffer line buffer)
	    while (neq line last-line)
	    do (format stream "~A~%" line))
      (format stream "~A" (substring last-line 0 (zwei:bp-index zwei:last-bp)))))
  )

(defun print-int (int)
  (send int :print-contents *standard-output* *i*)
  int)
)




