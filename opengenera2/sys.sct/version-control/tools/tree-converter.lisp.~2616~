;;; -*- Mode: LISP; Syntax: Common-lisp; Package: VERSION-CONTROL-INTERNALS; Base: 10; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defstruct (cst-branch-spec (:type list))
  (flag)					D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");:branch
0  (name)					1;the name
0  (put-first-version-in-parent)			1;as it says
0  )
(defsubst cst-branch-spec-branch-list (cst-branch-spec)
  (cdddr cst-branch-spec))
(defstruct (cst-after-spec (:type list))
  (flag)					1;:after
0  (after-this)					1;pathname
0  (in-this-directory)				1;dir pathname
0  )
(defstruct (cst-range-spec (:type list))
  (flag)					1;:range
0  (from)
  (to))
(defun convert-sparse-tree-wild-pathname (wild-pathname tree-spec target-dir-pathname
					  &key verify)
  (setq wild-pathname (send wild-pathname :new-version ':newest))
  (let ((files (fs:directory-list wild-pathname :no-extra-info :sorted)))
    (setq files
	  (loop for (pn . info) in files when pn collect pn))
    (convert-sparse-tree-files files tree-spec target-dir-pathname
			       :verify verify)))
1;;;--- there is a kludge in here to punt if the target file
;;;--- already exists.  This has to stay until the code is fixed to 
;;;--- handle incremental calls correctly.  For now, use one of the
;;;--- other commands for that.
0(defun convert-sparse-tree-files (file-list tree-spec target-dir-pathname
				  &key verify)
  (loop for file in file-list
	as target = (merge-pathnames
		      target-dir-pathname
		      (fs:default-pathname file nil nil ':wild)
		      ':wild)
	do
    (convert-sparse-tree file tree-spec target :verify verify)))

1;;; The tree-spec is a list.0  1Each elements represents a version to be
;;; put into the new0 1file.
;;;
;;;  Example:
;;; 
;;;; (:branch "ZZZ" nil
;;;           (:branch "BAR" t #p"q:>rel-6>zmail>..oldest" #p"q:>rel-6>zmail>..newest")
;;;           (:branch "BAZ" t #p"q:>rel-7-0>zmail>..oldest" #p"q:>rel-7-0>zmail>..newest")
;;;;  (:range (:after #p"q:>rel-7-0>zmail>..oldest" #p"q:>rel-7>sys>zmail>")
;;;;          #p"q:>rel-7>sys>zmail>..newest")))

0(defun convert-sparse-tree (name-and-type-pathname tree-spec target-pathname
			    &key verify)
  (error-restart ((error) "Retry converting ~A" name-and-type-pathname)
    (si:with-ephemeral-migration-mode ':collect
      (let ((converter (make-instance 'forward-converter))
	    (branch-alist (cst-find-branch-files
			    name-and-type-pathname
			    tree-spec
			    nil
			    nil
			    nil))
	    (munged nil))
	(loop with target-exists = (probe-file target-pathname)
	      for (name parent-name parent-file . files) in branch-alist
	  as munged-this-time = (convert-sparse-tree-1 target-pathname
						  converter
						  name parent-name parent-file files
						  target-exists
						  :verify verify)
	  do (setq munged (or munged munged-this-time)))
	(when munged
	  (write-out-encached-file converter target-pathname))))))
1;;; assume that this circus is only used to create files initially.
0(defun convert-sparse-tree-1 (target-pathname
			      target-converter
			      branch-name
			      parent-branch-name
			      parent-pathname
			      files
			      target-exists
			      &key verify)
  (declare (values and-versions-added))
  (when (and parent-pathname (null (forward-converter-encached-file target-converter)))
    (error "Branch ~A has a parent, but its the first defined in the file."
	   branch-name))
  (when (and (null parent-pathname) (forward-converter-encached-file target-converter))
    (error "Branch ~A has no parent version, but is not the first in the file."))
  (let ((parent-file-version
	  (and parent-pathname
	       (loop for (numeric-version vc-version pathname) in
			 (getf (encached-file-stored-property-list
				 (forward-converter-encached-file target-converter))
			       'converted-pathname-alist)
		     when (and (string-equal (file-version-branch-name vc-version)
					     parent-branch-name)
			       (= numeric-version
				  (fs:pathname-version parent-pathname)))
		       do (return vc-version)))))
    (when (and parent-pathname (null parent-file-version))
      (error "Parent file ~A not found in branch ~A." parent-branch-name))
    (prog1
      (convert-file-set-internal target-converter
				 (if (and (= (length files) 1)
					  (eq (fs:pathname-version (first files))
					      ':wild))
				     (first files)
				     files)
				 target-pathname
				 :append-to-branch branch-name
				 :new-branch-root (and (not target-exists)
						       parent-file-version)
				 :if-exists (if (or target-exists parent-file-version)
						nil
						:error)
				 :if-does-not-exist (if parent-file-version :error :create)
				 :warnings nil)
      (when verify
	(format *standard-output* "~&Verifying all file versions:")
	(verify-all-file-versions-internal
	  (forward-converter-encached-file target-converter))))))
(defflavor cst-pathname-directory-mismatch (p1 p2) (error)
  (:initable-instance-variables))
(defmethod (dbg:report cst-pathname-directory-mismatch) (stream)
  (format stream "pathnames ~A and ~A don't have a common directory."
	  p1 p2))

(compile-flavor-methods cst-pathname-directory-mismatch)
1;;;--- this really needs to do some kind of pattern match to detect
;;;--- files that really don't fit in at all. As is, ZMAIL blows up 
;;;--- because of SYS:IO;CONVER.
0(defun cst-merge-template-pathname (template item)
  (let ((t-dir (fs:pathname-directory (send template :translated-pathname)))
	(i-dir (fs:pathname-directory (send item :translated-pathname))))
    (loop for td = (pop t-dir)
	  for id = (pop i-dir)
	  while (and td id)
	  finally
	    (return-from cst-merge-template-pathname
	      (if t-dir
		  1;; if we haven't used up the template, something is wrong.
0		  (signal 'cst-pathname-directory-mismatch
			  :p1 template :p2 item)
		  (send template
			:new-pathname
			:directory `(,@(fs:pathname-directory template)
				     ,@(and id (list id)) ,@i-dir)
			:name (fs:pathname-name item)
			:type (fs:pathname-type item)))))))

1;;; constructs lists with the branch's parent pathname in the CAR
;;; and the pathnames in the branch in the CDR.
;;; at each level records the list for the branch.
0(defun cst-find-branch-files (name-and-type-pathname branch-spec parent-pathname
			      parent-branch-name
			      list-so-far)
  (let ((files-to-put-in-this-branch nil))
    (loop for spec in (cst-branch-spec-branch-list branch-spec) do
      (cond ((pathnamep spec)			1;just add one pathname at this point
0	     1;;only sensible for oldest and newest and :wild, which we will
0	     1;;detect later.
0	     (let ((merged-pn (cst-merge-template-pathname spec name-and-type-pathname)))
	       (let ((true-pn
		       (if (eq (fs:pathname-version merged-pn) ':wild)
			   merged-pn
			   (send merged-pn :truename))))
		 (when true-pn
		   (pushnew true-pn files-to-put-in-this-branch)))))
	    ((and (listp spec) (eq (car spec) ':branch))
	     1;; now see if we pick up a version here.
0	     (setq list-so-far
		   (cst-find-branch-files
		       name-and-type-pathname spec
		       (and (not (cst-branch-spec-put-first-version-in-parent spec))
			    (first files-to-put-in-this-branch))
		       (cst-branch-spec-name branch-spec)
		       list-so-far))
	     (when (cst-branch-spec-put-first-version-in-parent spec)
	       (let ((files-for-new-branch
		       (cdddr (assoc (cst-branch-spec-name spec) list-so-far
				     :test #'string-equal))))
		 (when (first files-for-new-branch)
		   (pushnew (first files-for-new-branch) files-to-put-in-this-branch)))))
	    ((and (listp spec) (eq (car spec) ':range))
	     (loop for pn in (cst-process-range-spec name-and-type-pathname spec)
		   do (pushnew pn files-to-put-in-this-branch)))
	    ((and (listp spec) (eq (car spec) 'after))
	     (let ((pn (cst-process-after-spec
			 name-and-type-pathname
			 spec)))
	       (when pn (pushnew pn files-to-put-in-this-branch))))
	    (t (error "Unrecognized entry ~S in branch." spec))))
    (setq files-to-put-in-this-branch (nreverse files-to-put-in-this-branch))
    (if files-to-put-in-this-branch
	(cons `(,(cst-branch-spec-name branch-spec)
		,parent-branch-name
		,(if (cst-branch-spec-put-first-version-in-parent branch-spec)
		     (first files-to-put-in-this-branch)
		     parent-pathname)
		,@files-to-put-in-this-branch)
	      list-so-far)
	list-so-far)))
(defun cst-process-after-spec (name-and-type-pathname after-spec)	
  (let ((after-pathname (send (cst-merge-template-pathname
				(cst-after-spec-after-this after-spec)
				name-and-type-pathname)
			      :truename))
	(search-list (fs:directory-list
		       (cst-merge-template-pathname
			 (cst-after-spec-in-this-directory after-spec)
			 name-and-type-pathname)
		       :no-extra-info
		       :sorted)))
    (if after-pathname
	(loop for (pathname . nil) in search-list
	      when (and pathname (> (fs:pathname-version pathname)
				    (fs:pathname-version after-pathname)))
		do (return-from cst-process-after-spec pathname))
	(loop for (pathname . nil) in search-list
	      when pathname
		do (return-from cst-process-after-spec pathname)))))
(defun cst-process-range-spec (name-and-type-pathname range-spec)
  (declare (values pathnames))
  1;; we of course assume that from and two are in the same place.
0  (let ((from-pathname
	  (cond ((pathnamep (cst-range-spec-from range-spec))
		 (cst-range-spec-from range-spec))
		((and (listp (cst-range-spec-from range-spec))
		      (eq (car (cst-range-spec-from range-spec)) ':after))
		 (cst-process-after-spec name-and-type-pathname
					 (cst-range-spec-from range-spec)))
		(t (error "Invalid from spec in range ~S." range-spec))))
	(search-list (fs:directory-list
		       (send
			 (cst-merge-template-pathname
			   (cst-range-spec-to range-spec)
			   name-and-type-pathname)
			 :new-version ':wild)
		       :no-extra-info
		       :sorted)))
    (and from-pathname				1;there may not be anything there.
0	 (loop for specs on search-list
	       as (pathname . nil) = (car specs)
	       when (eq pathname from-pathname)
		 do (return-from cst-process-range-spec
		      (loop for (pathname . nil) in specs when pathname collect pathname))))))
1;;; For a CP command, assume that the tree-spec lives in a file where we can
;;; READ it.
0(cp:define-command (com-convert-files-tree-to-vc-files
		     :name "Convert File Tree to VC Files"
		     :command-table "Global")
    ((tree-spec-pathname 'pathname
			 :prompt "tree spec file"
			 :documentation "File containing lisp form describing
what files to convert.")
     (files '((sequence pathname))
	    :prompt "files to convert"
	    :documentation "Names of the files to convert.")
     (target-pathname 'pathname
		      :prompt "template for target pathnames"
		      :documentation "Where to put the resulting VC file(s).")
     &key
     (create-directories 'boolean :default nil :mentioned-default t)
     (verify 'boolean :documentation "Verify the contents of all versions after each~ 
is converted."
	     :default nil
	     :mentioned-default t)
     )
   (when create-directories
     (fs:create-directories-recursively target-pathname))
   (let ((spec (with-open-file (tree tree-spec-pathname)
		 (let ((*readtable* si:*common-lisp-readtable*)
		       (*read-base* 10.)
		       (*package* (find-package "CL-USER")))
		   (read tree)))))
     (loop for file in files do
       (condition-case (err)
	    (catch-error-restart ((error) "Skip converting ~A." file)
	      (convert-sparse-tree-wild-pathname file spec target-pathname
						 :verify verify))
	  (cst-pathname-directory-mismatch
	    (format t "~&~A Skipping." (dbg:report-string err)))))))
(cp:define-command (com-convert-system-sources-tree-to-vc-files
		     :name "Convert System Sources Tree to VC Files"
		     :command-table "Global")
    ((tree-spec-pathname 'pathname
			 :prompt "tree spec file"
			 :documentation "File containing lisp form describing
what files to convert.")
     (system '((dw:type-or-string ((or sct:subsystem sct:system))))
	     :prompt "system to convert"
	     :documentation "Names of the system to convert the files of.")
     &key
     (include-components
       'boolean
       :documentation "Process files of component systems?"
       :default t)
     (vc-file-subdir 'string :default "VC"
		     :name "VC File Subdirectory"
		     :prompt "VC file subdirectory"
		     :documentation "Version Control files will be created
and maintained in this subdirectory of the containing directory of the source files.")
     (create-directories 'boolean :default nil :mentioned-default t)
     (verify 'boolean
	     :documentation "Verify all of the versions after reading each."
	     :default nil
	     :mentioned-default t))
   (let ((spec (with-open-file (tree tree-spec-pathname)
		 (let ((*readtable* si:*common-lisp-readtable*)
		       (*read-base* 10.)
		       (*package* (find-package "CL-USER")))
		   (read tree)))))
     (setq system (sct:find-system-named system))	
     (let ((files (si:system-source-files system :include-components include-components))
	   (t-list (list vc-file-subdir)))
       (loop for source in files
	     as source-dir = (send source :directory)
	     as target-pn = (send source :new-directory (append source-dir t-list))
	     as source-pn = (send source :new-version ':wild)
	     when (eq (send source-pn :canonical-type) :lisp)
	       do
		 (condition-case (err)
		      (catch-error-restart ((error) "Skip converting ~A" source-pn)
			(if (condition-case-if create-directories ()
				 (probe-file target-pn)
			       (fs:directory-not-found
				 (fs:create-directories-recursively target-pn)
				 nil))
			    (format t "~&~A already exists. Tree conversion is not yet supported for existing files." target-pn)
			    (convert-sparse-tree source-pn spec target-pn
						 :verify verify)))
		    (cst-pathname-directory-mismatch
		      (format t "~&~A Skipping." (dbg:report-string err))))))))
