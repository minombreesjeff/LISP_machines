;;; -*- Syntax: Common-Lisp; Base: 10; Mode: Lisp; Package: VCI; Lowercase: Yes -*-

;;; assume that all the converted files came from the same place.
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defun extract-all-flat-versions-internal (encached-file branch)
  (let* ((converted-pathname-alist
	  (delete-if-not
	    #'(lambda (v)
		(string-equal (file-version-branch-name v) branch))
	    (getf (encached-file-stored-property-list encached-file)
		  'converted-pathname-alist)
	    :key #'second))
	(all-versions
	  (delete-if-not
	    #'(lambda (v)
		(string-equal (file-version-branch-name v) branch))
	    (encached-file-versions encached-file)))
	(new-flat-version (loop for c in converted-pathname-alist
				maximize (first c)))
	(max-converted-entry (assoc new-flat-version converted-pathname-alist
				    :test #'=))
	(flat-pathname (third max-converted-entry)))
    (setq all-versions (stable-sort all-versions #'< :key #'file-version-branch-version))
    (loop for vi being the array-elements of all-versions do
      (unless (find vi converted-pathname-alist :key #'second :test #'file-versions-equal)
	(incf new-flat-version)
	(with-open-stream (i (open-encached-file-stream :encached-file encached-file
							:file-version vi))
	  (with-open-file (o (send flat-pathname :new-version new-flat-version)
			     :direction :output)
	    (format *standard-output* "~&Extracting version ~A into ~A"
		    vi (send o :truename))
	    (stream-copy-until-eof i o)))))))
(defun extract-all-flat-versions (ef-pathname &optional (branch "Initial"))
  (let ((ef (find-or-make-locked-encached-file :pathname ef-pathname)))
    (extract-all-flat-versions-internal ef branch)))

(defun extract-all-flat-versions-of-system (system &optional (branch "Initial"))
  (setq system (sct:find-system-named system))
  (let ((files (si:system-source-files system))) ;assume that they are VC files.
    (loop for file in files
	  do
      (condition-case ()
	   (extract-all-flat-versions (send file :new-version :newest) branch)
	 (non-version-controlled-file)))))

(defun extract-latest-version (pathname branch flat-pathname)
  (setq pathname (send pathname :new-version :newest))
  (let ((file
	  (condition-case ()
	       (find-or-make-locked-encached-file :pathname pathname)
	     (fs:file-error nil))))
    (when file
      (let ((version (branch-last-version file branch)))
	(with-open-stream (i (open-encached-file-stream :encached-file file
							:file-version version))
	  (with-open-file (o (send flat-pathname :new-pathname
				   :version ':newest
				   :name (send pathname :name))
			     :direction :output)
	    (format *standard-output* "~&Extracting version ~A into ~A"
		    version (send o :truename))
	    (stream-copy-until-eof i o)))))))
(cp:define-command (com-extract-vc-file-version
		     :command-table "User"
		     :name "Extract VC File Version"
		     :provide-output-destination-keyword nil)
    ((pathname 'pathname :documentation "VC File to extract a version from.")
     (vc-version 'file-version
		 :confirm t
		 :when (not (fs:pathname-vc-p pathname))
		 :documentation "Version to extract")
     (target-pathname 'pathname :default pathname
		      :confirm t
		      :documentation "Put flat version here"))
   (setq target-pathname (fs:vc-pathname-flat-pathname target-pathname))
   (if (eq (fs:vc-pathname-flat-pathname pathname) target-pathname)
       (format *error-output* "~&Don't extract over the VC file.~%")
       (let ((file
	       (condition-case ()
		    (find-or-make-locked-encached-file :pathname pathname)
		  (fs:file-error nil))))
	 (when file
	   (let ((version
		   (encached-file-header-merge-version
		     file
		     (if (fs:pathname-vc-p pathname)
			 (make-file-version
			   :branch-name (fs:pathname-vc-branch pathname)
			   :branch-version (fs:pathname-vc-version pathname))
			 vc-version))))
	     (with-open-stream (i (open-encached-file-stream :encached-file file
							     :file-version version))	
	       (with-open-file (o target-pathname :direction :output)
		 (format *standard-output* "~&Extracting version ~A into ~A"
			 version (send o :truename))
		 (stream-copy-until-eof i o nil :include-diagrams nil))))))))

(defun extract-latest-flat-versions-of-system (system &optional (branch "Initial"))
  (setq system (sct:find-system-named system))
  (let ((files (si:system-source-files system)))
    (loop for file in files
	  do
      (condition-case ()
	   (extract-latest-version (send file :new-version :newest)
				   branch
				   (send file :new-directory (butlast (send file :directory))))
	 (non-version-controlled-file)))))
