;;; -*- Mode: LISP; Syntax: Common-lisp; Package: VCI; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;;
;;; Utilities for forking systems.
;;;
;;; fork a system.  There are two possibilities:
;;;
;;; 1) the system was compiled with VC files, and you want to fork
;;;     off as of some particular version.
;;; 2) the system now has VC files, but they are the result of converting
;;;    flat files.  You want to fork off a VC branch in each file at the point
;;;    that corresponds to the flat files compiled for the version.

0(defun fork-system (system fork-at-version new-branch-name system-branch
		    &key include-components)
  (let ((files-for-version
	  (if (and system-branch		;nil for the case of a version before
						;the system was in version control.
		   (stringp system-branch))	1;a private branch
0	      (map 'list #'(lambda (pn) (send pn :new-pathname :vc-branch system-branch
					      ;; assume newest when private branch
					      :vc-version ':newest))
		   (sct:get-all-system-version-controlled-files
		     system :include-components include-components))
	      (sct:get-all-system-input-files system :include-components include-components
					      :system-branch system-branch)))
	(comment (format nil "Forked from version ~D of ~A"
			 (if (numberp fork-at-version)
			     fork-at-version
			     (string-capitalize-words fork-at-version))
			 (sct:system-pretty-name system))))
    (if (some #'fs:pathname-vc-p files-for-version)
	(fork-system-internal-vc
	  system new-branch-name
	  (delete-if-not #'fs:pathname-vc-p files-for-version) comment)
	(fork-system-internal-conversion
	  system new-branch-name files-for-version comment))))
1;;; we have to examine the converted-pathname-alist of each file to see
;;; what to do.
0(defun fork-system-internal-conversion (system new-branch-name files-for-version comment)
  (let ((vc-pathname-list (sct:get-all-system-input-files system :include-components t)))
    1;; flat pathnames for the VC files.
0    (loop for pathname in files-for-version
	  do
      (fork-system-internal-conversion-1-file
	system
	pathname
	(or
	  (find pathname vc-pathname-list
		:test #'(lambda (p1 p2)
			  (eq (send p1 :new-pathname :directory nil :version nil
				    :device nil)
			      (send p2 :new-pathname :directory nil
				    :device nil
				    :version nil
				    :vc-branch nil
				    :vc-version nil
				    :host (fs:pathname-host p1)))))
	  (error "No VC pathname for ~A version Newest corresponded to ~A"
		 (sct:system-pretty-name system)
		 pathname))
	new-branch-name
	comment))))
(defun fork-system-internal-conversion-1-file (system flat-pathname vc-pathname
					       new-branch-name
					       comment)
  (ignore system)				1;we might need it some day for a message.
0  1;; we have to interrogate the converted pathname alist to learn the vc version
0  1;; that corresponds to 0pathname
  (let ((encached-file
	  (condition-case ()
	       (find-or-make-locked-encached-file :pathname vc-pathname)
	     (vci:non-version-controlled-file
	       (return-from fork-system-internal-conversion-1-file nil)))))
    (let ((alist (getf (encached-file-stored-property-list encached-file)
		       'converted-pathname-alist)))
      (let ((entry (assoc (fs:pathname-version flat-pathname) alist :test #'=)))
	(unless entry
	  (cerror "Skip forking ~A"
		  "~A is not recorded as having been converted into ~A"
		  flat-pathname vc-pathname)
	  (return-from fork-system-internal-conversion-1-file nil))
	1;; ok, we know where to put the branch
0	(with-locked-encached-file-locked (encached-file)
	  (when (not (branch-defined-p encached-file new-branch-name))
	    (clone-encached-file-version encached-file (second entry)	1;the vc version
0					 new-branch-name
					 zwei:user-id
					 comment)
	    (error-restart ((error) "Retry saving ~A" vc-pathname)
	      (write-out-new-file-version encached-file zl:user-id))))))))
(defun fork-system-internal-vc (system new-branch-name files-for-version comment)
  1;; the pathname are vc pathname with specific versions
0  (ignore system)
  (loop for pathname in files-for-version
	do
    (let ((encached-file (find-or-make-locked-encached-file
			   :pathname (send (fs:vc-pathname-flat-pathname pathname)
					   :new-version ':newest))))
      (with-locked-encached-file-locked (encached-file)
	(when (not (branch-defined-p encached-file new-branch-name))
	  
	  (clone-encached-file-version
	    encached-file
	    (make-file-version :branch-name (fs:pathname-vc-branch pathname)
			       :branch-version (fs:pathname-vc-version pathname))
	    new-branch-name
	    zl:user-id
	    comment)
	  
	  (error-restart ((error) "Retry saving ~A" pathname)
	    (write-out-new-file-version encached-file zl:user-id)))))))
(cp:define-command (com-fork-vc-system :command-table "User"
				       :name "Fork VC System"
				       :provide-output-destination-keyword nil)
    ((system '((and sct:system
		    ((satisfies sct:system-version-controlled)))
	       :description "a version controlled system.")
	     :documentation "The system to fork")
     (branch `((sct:system-branch :system ,system))
	     :default (or (sct:system-default-system-branch system)
			  (dw:presentation-type-default 'sct:system-branch))
	     :documentation "which branch of the system to fork.")
     (version `((sct:system-version :system ,system))
	      :when (not (stringp branch))
	      :documentation "Establish a new branch as of that version")
     (new-branch-name 'string
		      :prompt "new branch name"
		      :documentation "Name for the new branch.")
     &key
     (include-components 'boolean :default nil :mentioned-default t
			 :documentation "Include Components"))
   (when (stringp branch) (setq version ':newest))
   (fork-system system version new-branch-name branch
		:include-components include-components))
