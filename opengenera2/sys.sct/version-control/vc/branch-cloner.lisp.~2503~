;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: VCD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")i0; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defmethod (clone-file-version encached-file) (old-external-version new-version-info trailer)
  (let* ((version (lookup-external-version self old-external-version :error-p t))
	 (vrp (version-reconstruct-path self version)))
    (sys:with-stack-array (ç-section-array (length vrp) :fill-pointer 0)
      (loop for re being the array-elements of vrp
	    do
	(vector-push-extend (make-ç-section :section-id (re-section-number re))
			    ç-section-array))
      (add-new-version self old-external-version  new-version-info ç-section-array trailer))))

(defun clone-encached-file-version (encached-file version new-branch-name author comment)
  (let* ((trailer (make-file-version-trailer :description comment))
	 (time (get-universal-time))
	 (version (encached-file-header-merge-version encached-file version))
	 (version-info (encached-file-version-info encached-file version))
	 (new-version-info (make-file-version-info	
			     :branch-name new-branch-name
			     :branch-version 0
			     :parent-version version
			     :trailer trailer
			     :author author
			     :length (file-version-info-length version-info )
			     :creation-date time))
	 (new-branch (make-file-branch
		       :name new-branch-name
		       :parent-file-version (make-file-version
					      :branch-name
					      (file-version-branch-name version-info)
					      :branch-version
					      (file-version-branch-version version-info))
		       :author author
		       :creation-date time)))
    (clone-file-version encached-file version new-version-info trailer)
    (record-file-branch encached-file new-branch)))

1;; assume that the version is a .newest or something, otherwise this is a joke.
0(defun clone-encached-file-versions-of-system (system version new-branch-name author comment)
  (let ((all-source-file (si:system-source-files system)))
    (loop for pathname in all-source-file
	  do
      (let ((encached-file
	      (condition-case ()
		   (find-or-make-locked-encached-file :pathname pathname)
		 (fs:file-not-found nil))))
	(when encached-file
	  (clone-encached-file-version
	    encached-file (encached-file-header-merge-version encached-file version)
	    new-branch-name author comment))))))
