;;; -*- Mode: LISP; Syntax: Common-lisp; Package: VCD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")i0; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
1;;;
;;; The encached-file flavor makes no assumptions about concurrency control or the like.
;;; This is fine for the stream.  For the editor, however, the need is to support
;;; the following:
;;;
;;; 1) read the file in with no non-NFILE concurrency control, and
;;; remember when.
;;;
;;; 2) When a modification is to be written out0,1 a lock is taken on the
;;; file, and0 1the modify time is checked.  If it is the same as the read
;;; time, all is OK.0  1Otherwise, the encached file must be reread. 
;;;
;;; 3) The ç is made from the modified information, the file is written,
;;; and the lock is released.
;;;

0(defflavor locked-encached-file
	(file-info
	 lock-name)
	(encached-file)				
  (:readable-instance-variables
   (encached-file-file-info file-info)
   lock-name)
  (:gettable-instance-variables)
  (:initable-instance-variables)
  (:init-keywords :stream :new-file-p))
(defmethod (make-instance locked-encached-file :after) (&key stream new-file-p
							     &allow-other-keys)
  (assert (not (and stream new-file-p))
	  ()
	  "A stream may not be specified with :new-file-p t")
  (assert (or (null new-file-p) pathname)
	  ()
	  "A pathname must be specified with :new-file-p t")
  (if stream (setq pathname (send stream :pathname))
      (unless pathname
	(error "Either :stream or :pathname must be supplied.")))
  (setq pathname (merge-pathnames pathname nil nil))
  (when (and new-file-p (probe-file pathname))
    (error "The file ~A already exists." pathname))
  (when (string= name "") (setq name (send pathname :string-for-printing)))
  ;; truename?! what confusion.
  (setq lock-name (format nil "VC-EF ~A" (send pathname :translated-pathname)))
  (if new-file-p (setq file-info nil)		; there is a fairly spectacular mess
						; that ensues if two
						; people propose to
						; create the same file.
						; See below.
      (flet ((process-stream (stream)
	       (setq file-info (send stream :info))
	       (setq truename (send stream :truename))
	       (read-in-file self stream)))
	(if stream
	    (process-stream stream)
	    (error-restart ((error) "Retry reading VC file ~A." pathname)
	      (with-open-file (in pathname :direction :input)
		(process-stream in)))))))
(defmacro with-locked-encached-file-locked ((locked-encached-file) &body body)
  `(with-locked-encached-file-locked-internal
     ,locked-encached-file
     #'(zl:named-lambda
	 with-locked-encached-file-locked ()
	 (declare (sys:downward-function))
	 ,@body)))					      
(defmethod (make-new-version-from-ç-section-array locked-encached-file)
	   (parent-version new-version ç-section-array trailer)
  (if (null file-info)				1; new file
0      (progn (check-new-file-collision self)
	     (send self :initialize-from-ç-section ç-section-array new-version trailer))
      (add-new-version self parent-version new-version ç-section-array trailer)))
(defmethod (write-out-new-file-version locked-encached-file) (author)
  (with-open-file (out (send pathname :new-version :newest) :direction :output)
    (send self :reconstruct-file out)
    (when author (send out :change-properties nil ':author author))
    
    (send out :close)				1;make file-info real
0    (setq file-info (send out :info))		1; and collect it
0    ))
(defmethod (check-new-file-collision locked-encached-file) ()
  (let ((new-file-info (condition-case (error)
			    (with-open-file (probe pathname :direction :probe
						   :characters t
						   :if-does-not-exist :error)
			      (send probe :info))
			  (fs:file-not-found nil)
			  (fs:file-operation-failure
			    (error "Error probing ~A:  ~A" pathname error)))))
    (when (and new-file-info (null file-info))	1; We want to
0						1; create, but they did
0						1; already.
0      1;;--- This needs to be a distinct condition that buffer
0      1;;--- saving can catch.
0      (error "File ~A has already been created. You have to pick a new pathname."
	     pathname))))
(defmethod (with-locked-encached-file-locked-internal locked-encached-file) (continuation)
  (declare (sys:downward-funarg continuation))
  (unwind-protect
      (progn
	(lock-simple:write-lock lock-name :pathname pathname :max-wait-time 60.
				:activity si:initial-process)
	(ensure-encached-file-up-to-date self)
	(funcall continuation))
    (condition-case (.error.)
	 (lock-simple:unlock lock-name :pathname pathname :activity si:initial-process)
       (lock-simple:unlock-lock-not-locked nil))))
1;;; Method used to recover the file from abort in the middle of update.

0(defmethod (reread-encached-file locked-encached-file) ()
  (multiple-value-bind (nil info)
      (read-in-encached-file pathname :encached-file self)
    (setq file-info info)))
(defvar *all-locked-encached-files* nil
  "All version control encached files currently encached")
(defvar *all-encached-file-headers* nil
  "All version control encached file headers currently encached")
(defun find-or-make-locked-encached-file (&key stream pathname new-file-p (make-ok t)
					       (area *encached-file-area*)
					       (ensure-up-to-date t))
  (assert (and (or pathname stream) (not (and new-file-p stream)))
	  (stream pathname new-file-p))
  (when stream
    (setq pathname (send stream :pathname)))
  (setq pathname (send pathname :new-pathname :version :newest :vc-branch nil
		       :vc-version nil))
  (let ((t-pathname (send pathname :translated-pathname)))
    (let ((existing-file (cdr (assoc t-pathname *all-locked-encached-files*
				     :test #'(lambda (p1 p2)
					       (eq p1 (send p2 :translated-pathname)))))))
      (cond (existing-file
	     (when ensure-up-to-date
	       (ensure-encached-file-up-to-date existing-file stream))
	     existing-file)
	    (make-ok
	     (let ((new-file (make-instance 'locked-encached-file :stream stream
					    :area area
					    :pathname pathname :new-file-p new-file-p)))
	       (push (cons pathname new-file) *all-locked-encached-files*
		     :area *encached-file-area* :localize t)
	       (unencache-header pathname)
	       new-file))
	    (t nil)))))
1;;; This method is used to prevent people from modifiying the same version
;;; of the same file at the same time.  To do this, it tries to acquire a write
;;; lock on the version.  (locking the branch is, in fact, sufficient.) 
;;; if it succeeds, rereads to get the latest version of the encached file,
;;; and checks to see if a new version has been added since the requested version. 
;;; If so, it returns :already-modified.   
;;;
;;; If the lock is obtained, but a new version was added since it was read in,
;;; then :update-parent is returned and the branch lock is held.  The caller can
;;; either "revert" the the latest available branch, or release the lock.
;;;
;;; If two people really want to modify the same version at the same time, 
;;; one of them must make a new branch.  It is the caller's responsibility to
;;; clean up these locks.

0(defmethod (branch-lock-name locked-encached-file) (branch-name)
  (format nil "VC-EF-BRANCH ~A ~A"
	  (send pathname :translated-pathname)
	  (string-downcase branch-name)))
(defmethod (lock-branch-for-modification locked-encached-file) (version &key new-p) 
  (check-type version file-version)
  (let ((defined (branch-defined-p self (file-version-branch-name version))))
    (cond ((and new-p defined)
	   (signal 'duplicate-file-branch :branch (file-version-branch-name version)
		   :encached-file self))
	  ((and (not new-p) (not defined))
	   (signal 'undefined-file-branch
		   :encached-file self
		   :undefined-branch (file-version-branch-name version)))))
  (let ((branch-lock-name (branch-lock-name self (file-version-branch-name version))))
    (block declare-modification-intent
      (condition-case ()
	   (lock-simple:write-lock branch-lock-name :pathname pathname :max-wait-time 5.
				   :activity si:initial-process)
	 (lock-simple:wait-timeout
	   (return-from declare-modification-intent :already-locked))
	 (lock-simple:mylock
	   (return-from declare-modification-intent :already-mylock)))
      (ensure-encached-file-up-to-date self))))
(defmethod (break-branch-lock locked-encached-file) (branch-name)
  (lock-simple:break-lock (branch-lock-name self branch-name) :pathname pathname))
(defmethod (ensure-encached-file-up-to-date locked-encached-file) (&optional stream)
  (ignore stream)
  (let ((new-file-info (condition-case (error)
			    (with-open-file (probe pathname :direction :probe
						   :characters t :if-does-not-exist :error)
			      (send probe :info))
			  (fs:file-not-found nil)
			  (fs:file-operation-failure
			    (error "Error probing ~A:  ~A" pathname error)))))
    (if (or (null new-file-info) (equal new-file-info file-info))
	t
	(multiple-value-bind (nil info)
	    (read-in-encached-file pathname :encached-file self)
	  (setq file-info info))
	:updated-file)))
(defmethod (unlock-branch locked-encached-file) (version)
  (check-type version file-version)
  (let ((branch-lock-name (branch-lock-name self (file-version-branch-name version))))
    (condition-case (.error.)
	   (lock-simple:unlock branch-lock-name :pathname pathname
			       :activity si:initial-process)
	 (lock-simple:unlock-lock-not-locked nil))))
(defmethod (branch-lock-status locked-encached-file) (version)
  (lock-simple:lock-status (branch-lock-name self (file-version-branch-name version))
			   :pathname pathname))

(defun unencache-file (pathname &key safely)
  (setq pathname (merge-pathnames pathname nil nil))
  (let ((encached-file (find-or-make-locked-encached-file :pathname pathname
							  :make-ok nil
							  :ensure-up-to-date nil))
	(header (find-or-make-encached-file-header :pathname pathname
						   :make-ok nil
						   :ensure-up-to-date nil)))
    (when encached-file
      1;; Check to see if any live Zmacs buffers are derived from this encached file ...
0      (let ((alist-entry (assoc encached-file zwei:*zmacs-buffer-alist*)))
	(when alist-entry
	  (cond ((null (cdr alist-entry))
		 (setq zwei:*zmacs-buffer-alist* (delete alist-entry
							 zwei:*zmacs-buffer-alist*)))
		(safely
		 1;; Caller doesn't want us to unencache if the file's still in use.
0		 (return-from unencache-file))
		(t
		 (cerror "Unencache the file anyway."
			 "VC file ~A is still referenced by Zmacs buffer(s)."
			 pathname)))))
      (setq *all-locked-encached-files*
	    (delete pathname *all-locked-encached-files* :key #'car :test #'eq)))
    (when header
      (setq *all-encached-file-headers*
	    (delete pathname *all-encached-file-headers* :key #'car :test #'eq)))))

(defun unencache-header (pathname &key safely)
  (ignore safely)				1;Sigh, no way to tell if it's still in use.
0  (setq pathname (merge-pathnames pathname nil nil))
  (let ((header (find-or-make-encached-file-header :pathname pathname
						   :make-ok nil
						   :ensure-up-to-date nil)))
    (when header (setq *all-encached-file-headers*
		       (delete pathname *all-encached-file-headers* :key #'car :test #'eq)))))

(defun unencache-all-files (&key safely)
  (loop for pathname in *all-locked-encached-files* do
    (unencache-file (car pathname) :safely safely))
  (loop for pathname in *all-encached-file-headers* do
    (unencache-file (car pathname) :safely safely)))

(si:define-gc-cleanup unencache-vc-files ("Forget all unused VC files? ")
  (unencache-all-files :safely t))
