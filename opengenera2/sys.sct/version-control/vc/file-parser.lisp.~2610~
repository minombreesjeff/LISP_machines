;;; -*- Mode: LISP; Package: D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")vci0; Base: 10; Lowercase: Yes; Syntax: Common-lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;---       Records of what definitions are in each section?
;;;---       A resource of parsers?

;;; Version control file format:
;;;
;;;
;;;  A version control file looks like this:
;;;
;;;  -*- Version-Control: 2; -*-
;;;  B VTB number_of_versions 
;;;  version-table-entry-1
;;;  ...
;;;  version-table-entry-N
;;;  E VTB
;;;  * PROPERTIES
;;;  #S(properties of this file.)
;;;  B TEXT number-of-sections
;;;  file-body
;;;  E TEXT
;;;  B FTR
;;;  trailer blocks
;;;  E FTR
;;;
;;;  Each version-table-entry looks like:
;;;
;;;  parent_version_number branch-name branch-version length name date
;;;
;;;  The version table describes all of the versions of the file,
;;;  organized into a tree.  Inside the file, file versions are refered
;;;  to by their position in the version table.  The branch-name and
;;;  branch-version describe the version with respect to the
;;;  system-defined tree of branches.  Only the first version of a
;;;  branch actually has a branch name, the rest have "" to save on
;;;  space.
;;;
;;;  Again, sections are implicitly numbered by their position in the
;;;  table.
;;;
;;;  The file body consists of text lines, which are simple text, and
;;;  control records.  The control records delimit sections, insertions,
;;;  and deletions.  All text records must included in some section.
;;;
;;;  A section begins with: 
;;;
;;;  B FS section_number
;;;
;;;  and ends with
;;;
;;;  E FS section_number
;;;
;;;  Deltas (insertions and deletions) begin with:
;;;
;;;  B IN version_number   B DL version_number
;;;
;;;  and end with
;;;
;;;  E IN version_number   E DL version_number
;;;
;;;  B FTR
;;;  file-version-trailer-1
;;;  ...
;;;  file-version-trailer-N
;;;  E FTR
;;;
;;;  file-version-trailer:
;;;
;;;  A file version trailer record looks like this:
;;;
;;;    entry-length-in-chars
;;;    version-table-index 
;;;    "general description" n-sections
;;;    section-id "per-section-comment"
;;;    *
;;;
;;;   The range specified by a BS, ES spans text that belongs to the
;;; section identfied by the section_number. Note that the ranges
;;; specified by the  insert, and delete records may intersect in an
;;; arbitrary fashion (subject to relative version number constraints).
;;; However, we restrict intersections of insert and delete ranges with
;;; section ranges to be proper subset intersections only.
;;;
;;;   [D/I] ranges may cover section S. They specify the versions in which the section is
;;; to be inserted/deleted and apply to just a single section. Thus, it is possible to compute
;;; by examining a relatively small range of the encached file whether a section exists in
;;; a given version. 
;;;

(defparameter *debugging-parser* nil "Set to nil to turn off condition-cases.")



;;;
;;; An error flavor to handle bad input from the version-controlled file
;;;
(defflavor file-format-error
	((original-error nil)
	 line-number
	 input-stream
	 line
	 format-string
	 format-args)
	(sys:error)
  :initable-instance-variables
  :gettable-instance-variables)
(defflavor proceedable-file-format-error
	(proceed-string
	 proceed-args)
	(file-format-error)
  (:initable-instance-variables))
(defmethod (dbg:proceed proceedable-file-format-error :no-action) ()
  (values :no-action t))
(defmethod (dbg:document-proceed-type proceedable-file-format-error :no-action) (stream)
  (apply #'format stream proceed-string proceed-args))

(defmethod (dbg:report file-format-error) (stream)
  (when original-error
    (send original-error :report stream)
    (format stream "~&"))
  (format stream "The version control file ~S is damaged in line number ~D below:~&~A~&"
	  (let ((pathname (send input-stream :send-if-handles :pathname)))
	    (if pathname
		(send pathname :string-for-printing)
		input-stream))
	  line-number
	  line)
  (apply #'format stream format-string format-args))



;;; There are two different ways to read in a version-controlled file.  One is to read it into
;;; the encached representation, preserving all information.  The other is to 
;;; read it for a particular version, implementing a stream with a particular view of the
;;; file.  The common code of these two is the parser, which translates the control records
;;; found in the file into reasonable internal forms.  The parser is effectively a funny
;;; sort of stream. 
;;;
;;;   After instantiating the parser, a :read-header message reads back the 
;;;   parsed-file-header defstruct, which contains the various header values.
;;;   Then, successive :read-record messages read out control records and 
;;;   text records.  After the last text record, the keyword :end-of-text 
;;;   is returned.  At this point, as yet undefined messages will be used to
;;;   read the trailer and the cache of section definition names.
;;;
;;;   The parser is supplied with a line consing function so that the text records
;;;   can be read directly into ZWEI lines.
;;;
;;; For the encached representation, the encached-file flavor is used to store
;;; all of this data.  
;;;
;;;

;;; file edition 1: Old version of the vc file format
;;; file edition 2: This edition contained a bug that saved invalid branch merge info
(defconstant *latest-encached-file-edition* 3 "Latest version of encached file formats (used to be *file-version-n*")

(defflavor parser
	(
	 (state 'bof)		1		; what are we doing?
0	 file-version1				; as discovered in the attribute line0.
1	 ;; The line gets extended as necessary.  Used during parsing of headers and
	 ;; trailers, reading with :string-line-in
0	 (line (make-array 10000. :element-type 'character :fill-pointer 0 :adjustable t))
	 ;; Just for error messages
	 (line-number 0)
	 (input-stream nil)
	 ;; Set to zero when line is read, and incremented as we parse fields
	 index
	 number-of-versions
	 (number-of-sections 0)
	 (header nil)				;hang on to it.
	 )
	()
  (:init-keywords :stream)
  (:writable-instance-variables file-version)
  (:initable-instance-variables file-version)
  (:required-init-keywords :stream :file-version))

(defun-in-flavor (safe-read-from-string parser) (&rest r-f-s-args)
  (with-standard-io-environment
    (apply #'read-from-string r-f-s-args)))

(defmethod (make-instance parser) (&key stream &allow-other-keys)
  (setq input-stream stream)
  (unless file-version (signal 'non-version-controlled-file
			       :pathname (send stream :pathname)))
  (unless (or (= file-version *latest-encached-file-edition*)	;up to date, do nothing
	      (= file-version 2))		;old version - let caller handle it
    (error "Unsupported file version ~D." file-version)))

(defmethod (reinitialize-parser parser) (&key stream ((:file-version new-file-version)))
  (setq input-stream stream file-version new-file-version state 'bof header nil)
  (unless (or (= file-version *latest-encached-file-edition*)	;up to date, do nothing
	      (= file-version 2))		;old version - let caller handle it
    (error "Unsupported file version ~D." file-version)))

(defmethod (flush-parser parser) ()
  (setq input-stream nil state 'at-the-end))

(defmethod (:bad-format parser) (original-error a-line format-string &rest format-args)
  (signal 'file-format-error
	  :original-error original-error
	  :line a-line
	  :line-number line-number	  :input-stream input-stream
	  :format-string format-string
	  :format-args format-args))

(defmethod (proceedable-bad-format-internal parser)
	   (original-error a-line error-format-string error-format-args
			   proceed-format-string proceed-format-args)
  (signal 'proceedable-file-format-error
	  :proceed-types '(:no-action)
	  :original-error original-error
	  :line a-line
	  :line-number line-number
	  :input-stream input-stream
	  :format-string error-format-string
	  :format-args error-format-args
	  :proceed-string proceed-format-string
	  :proceed-args proceed-format-args))
(defmacro proceedable-bad-format (parser
				  original-error
				  line
				  (error-format-string &rest error-format-args)
				  (proceed-format-string &rest proceed-format-args))
  `(proceedable-bad-format-internal
     ,parser
     ,original-error
     ,line
     ,error-format-string
     (list ,@error-format-args)
     ,proceed-format-string
     (list ,@proceed-format-args)))

(defun make-pf-version-info-array (n-versions)
  (make-array (+ 1 n-versions)			; there is no version 0
	      :element-type 'parsed-file-version-info))

;;; Various parsing sub-primitives for examining lines of the file.

;;;
;;; Get a new line and check to see if the first part of it matches a string.
;;;

(defmethod (:first-equal parser) (string &optional nil-if-not)
  (send self :get-line)
  (let ((length (string-length string)))
    (cond ((and ( (length line) length)
		(string-equal line string :end1 length :end2 length))
	   (setq index length))
	  (nil-if-not nil)
	  (t (send self :bad-format nil line
		   "The line should start with ~S, but does not" string)))))

1;;; The following is not used yet.

0(defmethod (:get-list-of-integers parser) ()
  (let ((the-integers))
    (condition-case-if (not *debugging-parser*) (.error.)
	 (multiple-value-setq (the-integers index)
	   (the (sequence integer)
		(safe-read-from-string line t nil :start index)))
       (error
	 (send self :bad-format .error. line "Invalid integer list in line.")))
    the-integers))
  

(defmethod (:get-integer parser) ()
  (let ((the-integer))    
    (condition-case-if (not *debugging-parser*) (.error.)
	 (multiple-value-setq (the-integer index)
	   (parse-integer line :start index :radix 10. :junk-allowed :after :sign-allowed nil))
       (error
	 (send self :bad-format .error. line "Invalid integer in line.")))
    the-integer))

(defmethod (:check-eol parser) ()
  (unless (= index (length line))
    (send self :bad-format nil line "Extraneous text \"~A\" at end of line."
	  (substring line index))))

(defconstant file-parser-whitespace " 	
")

1;;; Parse for <whitespace>"xxxxxxxxxx" supporting \ (standard-io-environment is CL)
0(defun parse-string (string &key (start 0) end)
  (let ((string string)
	(end (or end (string-length string))))
    (declare (sys:array-register string))
    (loop with started = nil with result = (make-array (- end start) :element-type 'character
						       :fill-pointer 0)
	  with in-slash = nil
	  for c being the array-elements of string from start below end using (index index)
	  do
      (if started
	  (cond (in-slash
		 (setq in-slash nil)
		 (unless (vector-push c result) (error "Internal error in parse-string.")))
		((char-equal c #\") (return-from parse-string (values result (1+ index))))
		((char-equal c #\\) (setq in-slash t))
		(t (unless (vector-push c result) (error "Internal error in parse-string."))))
	  (cond ((char-equal c #\") (setq started t))
		((sys:%string-search-char c file-parser-whitespace
					  0
					  #.(length file-parser-whitespace)))
		(t (error "Invalid character ~S while looking for string." c)))))))
  

(defmethod (:get-string parser) ()
  (let ((the-string))    
    (condition-case-if (not *debugging-parser*) (.error.)
	 (multiple-value-setq (the-string index)
	   (parse-string line :start index))
       (error
	 (send self :bad-format .error. line "Invalid string in line.")))
    the-string))

;;;
;;; Read a line into the internal buffer.
;;;

(defmethod (:get-line parser) (&optional (eof-is-error t))
  ;; values of :string-line-in are (length-so-far, eof-p, didn't-get-whole-line)
  (let (length-so-far eof-p didn-t-get-whole-line diagram)
    (loop with start = 0
	  do
      (multiple-value-setq (length-so-far eof-p didn-t-get-whole-line diagram)
	(send input-stream :string-line-in nil line start))
	  when diagram do (return-from :get-line diagram)
	  until (or eof-p (null didn-t-get-whole-line))
	  do
      (setq line (adjust-array line (+ length-so-far 1000.)))
      (setf start length-so-far))
    (when (and eof-p eof-is-error (> length-so-far 0))
      (send self :bad-format nil line
	    "Unexpected eof reading the version control file"))
    (unless eof-p
      (incf line-number))
    (setq index 0)
    (values line eof-p)))

;;; This function recognizes the  records that may occur in the text.
;;; It does not recognize the ones that delimit the overall file structure.

(defun determine-cr-type (post--token)
  (selector post--token string-equal
    ("BFS" BS)
    ("EFS" ES)
    ("BIN" BI)
    ("EIN" EI)
    ("BDL" BD)
    ("EDL" ED)
    (otherwise ?)))




;;; Real guts of the parser.

;;;
;;; Debugging method
;;;

(defmethod (rewind parser)
	   ()
  (send input-stream :set-pointer 0)
  (setq state 'bof))

;;;
;;; The header reader.

(defstruct (encached-file-properties-1)
  properties)

1;;;kludge to support old VC files.

0(setf (get 'vc::encached-file-properties-1 'si:defstruct-description)
      (get 'encached-file-properties-1 'si:defstruct-description))

(proclaim '(notinline make-pf-version-info))

(defmethod (:read-header parser) ()
  (if header header
      (unless (eq state 'bof)
	(error ":read-header when parser was not in initial state."))
      (setq header (make-pf-header))
      (send self :first-equal "B VTB ")
      (setf (pf-header-n-versions header) (send self :get-integer))
      (send self :check-eol)
      (setf (pf-header-version-info-array header)
	    (make-pf-version-info-array (pf-header-n-versions header)))
      (loop for version = 1 then (1+ version)
	    do (send self :get-line)
	    until (string= line "E VTB")
	    do
	(when (> version (pf-header-n-versions header))
	  (send self :bad-format nil line "Too many versions in version table."))
	(setf (aref (pf-header-version-info-array header) version)
	      (if (char= (aref line 0) #\*)
		  (progn
		    (setq index (length line))
		    (make-pf-version-info :deleted-p t))
		  (locally (declare (notinline make-pf-version-info))	;---is this llc
						; --- bug fixed?
			   (make-pf-version-info
			     :parent-version (send self :get-integer)
			     :branch-name (send self :get-string)
			     :branch-version (send self :get-integer)
			     :length (send self :get-integer)
			     :author (send self :get-string)
			     :creation-date (send self :get-integer)
			     ))))
	(send self :check-eol))
      (send self :first-equal "* PROPERTIES")
      (send self :check-eol)
      (let ((prop-structure (with-standard-io-environment (read input-stream))))
	(assert (typep prop-structure 'encached-file-properties-1)
		()
		"Missing property structure, ~S read instead." prop-structure)
	(setf (pf-header-properties header)
	      (encached-file-properties-1-properties prop-structure)))
      (read-line input-stream)			;the printer has a habit of writing
						;spaces at the end of the item.
      (send self :first-equal "B TEXT")	; make sure that we have the next delimiter.
      (setf (pf-header-n-sections header) (send self :get-integer))
      (send self :check-eol)
      (setq state 'text)
      header))

;;;  
;;; The text reader
;;;

1;;; This returns a reference to a shared buffer.  The caller must speak for
;;; copying this, for it will of course disappear. 

0(defmethod (:read-text-item parser) ()
  (unless (eq state 'text) (error "Attempt to read text in state ~A" state))
  (block read-item
    (let* ((a-line (send self :get-line t))
	   (length (and (arrayp a-line) (length a-line))))
      (when (instancep a-line)
	(return-from read-item a-line))
      (when (and (> length 0) (char= (aref a-line 0) #\))
	(unless (> length 2)
	  (send self :bad-format nil a-line
		"A -line must be at least 2 characters long")))
      (when (and (> length 2)
		 (char= (aref line 0) #\)
		 (char= (aref line 1) #\))	;  -> non-control-record
	(setf (subseq a-line 0 (decf length))
	      (subseq a-line 1))
	(return-from read-item a-line))		; that was simple
      (unless (and (> length 0) (char= (aref a-line 0) #\))
	(return-from read-item a-line))		; as was that
      ;;
      ;; There is a control record here.
      ;; 
      (when (string-equal a-line "E TEXT")
	(incf index (length "E TEXT"))
	(send self :check-eol)
	(setq state 'pre-trailer)
	(return-from read-item :end-of-text))
      ;;
      ;; There has to be a valid in-text control record here.
      ;;
      (setq index (position #\space line))	; skip over  mumble
      (let ((control-record-type
	      (determine-cr-type (substring line 1 index))))
	(when (eql control-record-type ?)
	  (send self :bad-format nil a-line "Unknown  control code \"~A\"."
		(substring line 0 index)))
	;;
	;; note, :version and :section are interchangeable here.
	;; it would be cleaner to choose one based on the type.
	;;
	(let ((control-record (make-control-record :type control-record-type
						   :version (send self :get-integer))))
	  (send self :check-eol)
	  control-record)))))

(defmethod (:read-trailer-item parser) ()
  (loop named read-item do
    1;; this loop will only happen more than once if there is an error and the user
0    1;; says to toss the trailer data.
0    (when (eq state 'pre-trailer)
      (send self :first-equal "B FTR")
      (setq state 'trailer))
    (unless (eq state 'trailer) (error "Attempt to read trailers in state ~A" state))
    (send self :get-line t)
    (when (string-equal line "E FTR")
      (setq state 'at-the-end)
      (return-from read-item :end-of-trailers))
    (let ((line-length (send self :get-integer))
	  (pft (make-pf-trailer)))
      (send self :check-eol)
      (adjust-array line line-length)
      (multiple-value-bind (last-char-read eof)
	  (send input-stream :string-in nil line)
	(when eof 
	  (when
	    (proceedable-bad-format
	      self
	      nil
	      "<<>>"
	      ("End of file in trailer after ~S" line)
	      ("Ignore the problem and go ahead."))
	    (return-from read-item :end-of-trailers)))
	(catch-error-restart ((file-format-error)
			      "Discard trailer information for this section.")
	  (return-from read-item
	    (condition-case-if (not *debugging-parser*) (.error.)
		 (with-standard-io-environment
		   (let ((index 0))
		     (multiple-value-bind (integer new-index)
			 (parse-integer line :start index :end last-char-read
					:junk-allowed :after
					:sign-allowed nil)
		       (setf (pf-trailer-version-number pft) integer
			     index new-index))
		     (multiple-value-bind (string new-index)
			 (parse-string line :start index :end last-char-read)
		       (setf (pf-trailer-description pft) string
			     index new-index))
		     (let ((n-def-trailers
			     (multiple-value-bind (integer new-index)
				 (parse-integer line :start index :end last-char-read
						:junk-allowed :after
						:sign-allowed nil)
			       (setq index new-index)
			       integer)))
		       (setf (pf-trailer-per-section-list pft)
			     (loop for defx from 1 to n-def-trailers
				   collect
				     (make-pf-trailer-ps
				       :section-id (multiple-value-bind (integer new-index)
						       (parse-integer
							 line
							 :start index :end last-char-read
							 :junk-allowed :after
							 :sign-allowed nil)
						     (setq index new-index)
						     integer)
				       :description
				       (multiple-value-bind (string new-index)
					   (parse-string line :start index
							 :end last-char-read)
					 (setq index new-index)
					 string))))))
		   (send self :get-line)
		   (unless (string= line "*")
		     (send self :bad-format nil line "Missing * after trailer ~S" pft))
		   pft)
	       (error (send self :bad-format .error. line "Error parsing trailer.")))))))))
	  

  
(defun (:version-control fs:file-attribute-binding) (ignore ignore version)
  (unless (typep version 'fixnum)
    (error  "~A is not a version number of a version controlled file." version))
  (unless (= version 2)
    (error "Version Control file version ~D not supported." version)))


(defprop :version-control t fs:known-file-attribute)

(defun convert-file-stream-to-one-version-stream (stream &key (query-stream *query-io*)
						  ((:file-version vc-file-version)))
  (send stream :set-pointer 0)
  (let* ((file-version (cl:getf (fs:read-attribute-list nil stream :dont-reset-stream t)
				':version-control))
	 (pef (make-instance  'header-pseudo-encached-file
			      :stream stream :file-version file-version
			      :name (send stream :pathname)))
	 (version (or vc-file-version
		      (choose-file-version-dynamic pef :stream query-stream))))
    (make-instance 'one-version-file-stream :parser pef
		   :encached-file-header pef
		   :version version :stream stream)))


(defun make-file-attribute-property (file-version)
  (list :vc-file-version `(,(file-version-branch-name file-version)
			   ,(file-version-branch-version file-version))))

(defun generic-pathname-file-version (generic-pathname)
  (let* ((si (send generic-pathname :get ':vc-source-info))
	 (vi (getf si ':vc-file-version)))
    (and vi (make-file-version :branch-name (first vi)
				  :branch-version (second vi)))))
