;;; -*- Mode: LISP; Syntax: Common-lisp; Package: D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")vci0; Base: 10; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(define-presentation-type file-version
      ((&key relative-to-encached-file relative-to-branch) &key show-version-info)
   :no-deftype t
   :history t

   :viewspec-choices ((&key type)
		      (ignore relative-to-branch show-version-info)
		      (and relative-to-encached-file
			   (dw::presentation-type-keyword-options-into-cvv
			     type
			     '((:show-version-info boolean nil)))))

    :parser ((stream &key type)
	     (ignore show-version-info)
	     (let* ((all-versions (and relative-to-encached-file
				       (encached-file-versions relative-to-encached-file)))
		    (branch-name
		      (accept `((file-branch-name
				  :relative-to-encached-file ,relative-to-encached-file))
				  :stream stream
				  :prompt nil
				  :additional-blip-chars '(#\.)
				  :additional-activation-chars `(#\Complete)))		    
		    (valid-versions (and relative-to-encached-file
					 (loop for v being the array-elements of all-versions
					       when (string-equal (file-version-branch-name v)
								  branch-name)
						 collect (file-version-branch-version v))))
		    (version-type
		      `((dw:token-or-type
			  (("newest" . :newest)
			   ("oldest" . :oldest)
			   ("parent" . :parent))
			  ,(if relative-to-encached-file
			       `((dw::member-sequence ,valid-versions)
				 :description "Branch version")
			       `((integer 0 *) :description "Branch version")))))
		    (version))
	       (unless relative-to-branch
		 (if (let ((ch (dw:peek-char-for-accept stream t)))
		       (dw:compare-char-for-accept ch #\Return))
		     (setq version :newest)
		   (multiple-value-bind (more-to-come val typ)
		       (dw::presentation-type-parser-lookahead stream version-type
							       :delimiter-char #\.
							       :echo-string-before-blip ".")
		     (ignore typ)
		     (ecase more-to-come
		       ((nil)
			(error 'dw::sequence-enumerated-needs-more-inputs
			       :type type
			       :object branch-name
			       :which-more (list version-type)))
		       ((t))
		       ((:accepted)
			(setq version val))))))
	       (unless version 
		 (setq version
		       (accept version-type
			       :stream stream
			       :prompt nil
			       :provide-default (not (null relative-to-encached-file))
			       :default :newest)))
	       (values (make-file-version
			 :branch-name branch-name
			 :branch-version version)
		       type)))

   :describer ((stream)
	       (if relative-to-encached-file
		   (format stream "a version of file ~A~@[ in branch ~A~]"
			   relative-to-encached-file relative-to-branch)
		   (format stream
			   "a version control file version~@[ of branch ~A~]"
			   relative-to-branch)))

   :printer ((object stream &key type)
	     (ignore relative-to-branch)
	     (format stream "~A.~:[~A~;~D~]"
		     (file-version-branch-name object)
		     (numberp (file-version-branch-version object))
		     (file-version-branch-version object))
	     (when (and show-version-info
			(or (typep object 'file-version-info)
			    relative-to-encached-file))
	       (let ((vi (if (typep object 'file-version-info) object
			     (encached-file-version-info relative-to-encached-file object))))
		 (when (and (file-version-info-parent-version vi)
			    (not (string-equal (file-version-branch-name
						 (file-version-info-parent-version vi))
					       (file-version-branch-name object))))
		   (dw::write-string " " stream)
		   (present (file-version-info-parent-version vi)
			    (let ((other-keywords (si:rem-keywords (cdr type)
								   '(:show-version-info))))
			      (cons (car type)
				    (nconc other-keywords '(:show-version-info nil))))
			    :stream stream))
		 (format stream " ~D ~A ~\\time\\"
			 (file-version-info-length vi)
			 (file-version-info-author vi)
			 (file-version-info-creation-date vi))
		 (when (file-version-info-trailer vi)
		   (dw::write-string " " stream)
		   ;; representation to show the individual section comments!?
		   (format stream "~A"
			   (file-version-trailer-description
			     (file-version-info-trailer vi))))))))

;; --- should showing all of the versions be a viewspec choice of this?
;;;--- ditto about renaming.

(define-presentation-type file-branch-name ((&key relative-to-encached-file))
;   :key-generator 'file-branch-name
   :history t
   
;   :presentation-subtypep
;      ((dta1 pa1 dta2 pa2)
;       (destructuring-bind (&key ((:relative-to-encached-file 1ef)))
;	  pa1
;	 (destructuring-bind (&key ((:relative-to-encached-file 2ef)))
;	    pa2
;	   (or (null 2ef) ; specializer is subtypep of nonspecializer
;	       (eq 1ef 2ef))))) ; or its the same damn file
   
   :parser ((stream)
	    (let* ((all-versions (and relative-to-encached-file
				      (encached-file-versions relative-to-encached-file)))
		   (valid-branches
		     (and relative-to-encached-file
			  (loop for v being the array-elements of all-versions
				unless (member (file-version-branch-name v) valid-branches
					       :test #'string-equal)
				  collect (file-version-branch-name v) into valid-branches
				finally (return valid-branches))))
		   (branch-name
		     (accept (if relative-to-encached-file
				 `((member ,@valid-branches))
				 'string)
			     :stream stream
			     :prompt nil
			     :provide-default (or (null relative-to-encached-file)
						  (= (length valid-branches) 1))
			     :default (cond ((null relative-to-encached-file)
					     *default-initial-branch-name*)
					    ((= (length valid-branches) 1)
					     (first valid-branches))
					    (t nil))
			     :additional-blip-chars '(#\,))))
	      (values branch-name
		      `(file-branch-name
			 :relative-to-encached-file ,relative-to-encached-file))))
   :describer ((stream)
	       (if relative-to-encached-file
		   (format stream "a branch of file ~A" relative-to-encached-file)
		   (format stream "a version control file branch name")))
   :printer ((object stream)
	     (ignore relative-to-encached-file)
	     (format stream "~A" object)))
 
;;; user interface stuff that is not pure zwei.

(defsubst member-all-if (predicate list)
  (declare (sys:downward-funarg predicate))
  (loop for e in list
	when (funcall predicate e) collect e))

;;; Return the number of branches in this encached file.  If
;;; include-private-branches, include in the count all private branches.
;;; If include-owned-private-branches, include in the count all private
;;; branches owned by the user.

(defun count-branches-in-encached-file (encached-file &key include-private-branches
					include-owned-private-branches)
  (loop for branch in (vci:file-branch-name-alist encached-file)
	as branch-owner = (file-branch-private-user-name (cdr branch))
	as include-p = (or (null branch-owner)
			   include-private-branches
			   (and include-owned-private-branches
				(string-equal branch-owner zl:user-id)))
	counting include-p into num
	finally (return num)))

(defun print-branches-in-tree (encached-file stream
			       &key
			       suppress-others-private
			       encached-file-permanent-p
			       show-versions
			       version-additional-info-continuation
			       branch-additional-info-continuation)
  (declare (sys:downward-funarg *))
  (format stream "~&Branches of vc file ~A:" encached-file)
  (let* ((f-b-alist (file-branch-name-alist encached-file))
	 (fb-list (loop for (nil . fb) in f-b-alist collect fb)))
    (flet ((adam-or-eve (fb)
	     (null (file-branch-parent-file-version fb))))
      (let* ((roots (member-all-if #'adam-or-eve fb-list))
	     (rest (cl:delete-if #'adam-or-eve fb-list)))
	(print-branches-in-tree-1 roots rest stream suppress-others-private encached-file
				  encached-file-permanent-p
				  show-versions
				  version-additional-info-continuation
				  branch-additional-info-continuation)))))

(defun print-branches-in-tree-1 (this-level others stream suppress-others-private
				 encached-file
				 encached-file-permanent-p
				 show-versions
				 version-additional-info-continuation
				 branch-additional-info-continuation)

  (declare (sys:downward-funarg version-additional-info-continuation
				branch-additional-info-continuation))
  (loop for fb in this-level 
	unless (and suppress-others-private
		    (file-branch-private-user-name fb)
		    (string-not-equal (file-branch-private-user-name fb) zl:user-id))
	  do
	    (print-one-branch fb stream encached-file
			      encached-file-permanent-p
			      show-versions
			      version-additional-info-continuation
			      branch-additional-info-continuation)
	    (flet ((kid-of-this (a-fb)
		     (declare (sys:downward-function))
		     (string-equal (file-branch-name fb)
			      (file-version-branch-name
				(file-branch-parent-file-version a-fb)))))
	      (let ((this-direct-children (member-all-if #'kid-of-this others)))
		(setq others (cl:delete-if #'kid-of-this others))
		(sys:with-indentation (stream 2)
		  (print-branches-in-tree-1 this-direct-children others stream 
					    suppress-others-private encached-file
					    encached-file-permanent-p
					    show-versions
					    version-additional-info-continuation
					    branch-additional-info-continuation
					    ))))))

(defun print-one-branch (fb stream encached-file
			 encached-file-permanent-p
			 show-versions version-additional-info-continuation
			 branch-additional-info-continuation)
  (declare (sys:downward-funarg version-additional-info-continuation
				branch-additional-info-continuation))
  (dw:with-output-as-presentation
    (:stream stream :object (file-branch-name fb)
	     :type `((file-branch-name
		       :relative-to-encached-file
		       ,(and encached-file-permanent-p encached-file))))
    (let ((fvi (branch-last-version encached-file (file-branch-name fb))))
      (format stream "~&~A~30t~:[Public~*~;~A~]~@[ Capped~]~:[~*~; ~A~] ~\\time\\ ~A"
	      (file-branch-name fb)
	      (file-branch-private-user-name fb)
	      (file-branch-private-user-name fb)
	      (not (file-branch-new-versions-permitted-p fb))
	      (file-branch-successor-version fb)
	      (file-branch-successor-version fb)
	      (file-version-info-creation-date fvi)
	      (file-version-info-author fvi)))
    (when branch-additional-info-continuation
      (funcall branch-additional-info-continuation fb stream)))
  (when show-versions
    (indenting-output (stream 4)
      (print-branch-versions encached-file (file-branch-name fb)
			     :encached-file-permanent-p encached-file-permanent-p
			     :stream stream
			     :version-additional-info-continuation
			     version-additional-info-continuation))))

(defun time-from-ut (ut)
  (if (null ut)
      ""
      (multiple-value-bind (seconds minutes hours nil nil nil nil)
	  (time:decode-universal-time ut)
	(format nil "~2,'0d:~2,'0d:~2,'0d" hours minutes seconds))))

1;;; With various values for :justified, produces:
;;;       nil   ==> "1/2/86"    (variable width date)
;;;      :left  ==> "1/2/86  "  (fixed width date of 8 characters flush left)
;;;      :right ==> "  1/2/86"  (fixed width date of 8 characters flush right)
0(defun date-from-ut (ut &key (justified nil))
  (if (null ut)
    ""
    (multiple-value-bind (nil nil nil day month year nil)
	(time:decode-universal-time ut)
      
      (let* ((date (format nil "~d/~d/~d" month day year))
	     (left-pad (if (eq justified :right)
			   (substring "  " 0 (- 8 (length date)))
			   nil))
	     (right-pad (if (eq justified :left)
			    (substring "  " 0 (- 8 (length date)))
			    nil)))
	(format nil "~@[~a~]~a~@[~a~]" left-pad date right-pad)))))

(defun print-branch-versions (encached-file branch-name &key
			      encached-file-permanent-p
			      (stream *standard-output*)
			      version-additional-info-continuation)
  (declare (sys:downward-funarg *))
  (ignore version-additional-info-continuation encached-file-permanent-p)
  (let ((vi (stable-sort
	      (remove-if-not
		#'(lambda (v)
		    (string-equal (file-version-branch-name v)
				  branch-name))
		(encached-file-versions encached-file))
	      #'file-version-lessp)))
    (format stream "~2&")
    (formatting-table ()
      (formatting-column-headings (t :underline-p t)
	(formatting-cell () "Version")
	(formatting-cell (t :align :right) "Size")
	(formatting-cell () "Author")
	(formatting-cell (t :align :center) "Created"))
      (loop for v being the array-elements of vi
	    as size = (file-version-info-length v)
	    as author = (file-version-info-author v)
	    as creation-date = (file-version-info-creation-date v)
	    do
	(setq creation-date (string-append
			      (date-from-ut creation-date :justified :right)
			      " " (time-from-ut creation-date)))
	(dw:with-output-as-presentation
	    (:object v :single-box t
		     :type `((file-version :relative-to-encached-file ,encached-file
					   )
		     :show-version-info nil))
	  (formatting-row ()
	    (formatting-cell ()
	      (format t "~a" v))
	    (formatting-cell (t :align :right)
	      (format t "~d" size))
	    (formatting-cell ()
	      (format t "~a" author))
	    (formatting-cell ()
	      (format t "~a" creation-date))))))))

(define-presentation-translator file-branch-to-latest-file-version
   (file-branch-name
     file-version
     :documentation ((branch-name)
		     (format nil "take the latest version of branch ~a" branch-name)))
   (branch-name &key input-context &allow-other-keys)
  (values
    (vci:make-file-version :branch-name branch-name :branch-version :newest)
    (dw::presentation-input-context-presentation-type
			  input-context)))

(define-presentation-translator file-version-to-file-version-match-relative
   (file-version file-version)
   (object &key presentation input-context &allow-other-keys)
  (let ((presentation-type (dw:presentation-type presentation)))
    (dw::with-type-decoded (ignore d-args ignore) presentation-type
      (destructuring-bind (&key ((:relative-to-encached-file present-ef))
				((:relative-to-branch present-branch))
				&allow-other-keys)
	 d-args
	(let ((desired-type (dw::presentation-input-context-presentation-type
			      input-context)))
	  (dw::with-type-decoded (ignore d-d-args ignore) desired-type
	    (destructuring-bind (&key ((:relative-to-encached-file desired-ef))
				      ((:relative-to-branch desired-branch))
				      &allow-other-keys)
	       d-d-args
	      (when (or (null desired-ef)
			(and (eq desired-ef present-ef)	; has to be the same file
			     (or (null desired-branch)
				 (string-equal desired-branch present-branch))))
		(values object
			(dw::presentation-input-context-presentation-type
			  input-context))))))))))

;;;---should this be a re-presentation?
;;;--- or an elipsis?
(define-presentation-action show-versions-of-file-branch
   (file-branch-name t
    :documentation ((file-branch)
		    (format nil "Show all the versions of branch ~a" file-branch))
    :gesture :describe
    :context-independent nil
    :tester ((ignore &key presentation)
	     (let ((presentation-type (dw:presentation-type presentation)))
	       (dw:with-presentation-type-arguments
		 (file-branch-name presentation-type)
		 (not (null relative-to-encached-file))))))
   (branch-name &key presentation window &allow-other-keys)
  (let ((presentation-type (dw:presentation-type presentation)))
    (dw:with-presentation-type-arguments (file-branch-name presentation-type)
      (si:with-ie-typeout-if-appropriate (window)
	(print-branch-versions relative-to-encached-file
			       branch-name :stream window)))))

;;; --- should there just be a way to ask for this in the DEFINE-PRESENTATION-TYPE?
(define-presentation-action show-file-version-info
   (file-version t :documentation "Show more info"
		 :gesture :reprint-cleverly)
   (ignore &key window presentation)
  (dw::with-type-decoded (name dargs prargs) (dw:presentation-type presentation)
     (let ((new-prargs
	     (nconc
	       `(:show-version-info t)
	       (si:rem-keywords prargs '(:show-version-info)))))
       (send window :represent-presentation presentation `((,name ,.dargs) ,@new-prargs)))))

(defun choose-file-version-dynamic (encached-file &key branch
				    (stream *QUERY-IO*)
				    (suppress-other-private-branches t)
				    prompt
				    default-branch 
				    default-version
				    zmacs-typein-line-p
				    (print-branches-p t))
  (when (and branch (not default-branch))
    (setq default-branch branch))
  (when print-branches-p 
    (print-branches-in-tree encached-file (if zmacs-typein-line-p zwei:*typeout-window*
					      stream)
			    :suppress-others-private suppress-other-private-branches))
  (let ((type `((file-version :relative-to-encached-file ,encached-file
			      :relative-to-branch ,branch))))
    (if zmacs-typein-line-p
	(if default-version
	    (zwei:typein-line-accept type :prompt (or prompt :enter-type)
				     :initial-input (format nil "~A" default-version)
				     :initial-position (length
							 (format nil "~A" default-version))
				     :default default-version)
	    (zwei:typein-line-accept
	      type :prompt (or prompt :enter-type)
	      :initial-position (and default-branch
				     (length (string-append default-branch ".")))
	      :initial-input
	      (and default-branch (string-append default-branch ".")) 
	      :default (and default-branch
			    (vci:branch-last-version encached-file default-branch))
	      ))
	(if default-version
	    (accept type :stream stream
		    :prompt (or prompt :enter-type) :default default-version)
	    (accept type :stream stream :prompt (or prompt :enter-type)
		    :default (and default-branch
				  (vci:branch-last-version encached-file default-branch)))))))
