;;; -*- Mode: LISP; Syntax: Common-lisp; Package: D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")vci0; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

1;;; Stream that reads one version of a source out of a file, quickly.
;;; This uses the parser to sort out the file, and then the standard
;;; ç algorithm used in the encached-file to choose what to return.
;;; It only can read the entire file, not individual sections and the like.

;;; The encached-file also has a stream, which is a sort of interval-stream cognate.

;;; --- To Do: Replace the wholine methods with methods that don't lie about length,
;;; --- but still present the stream in the wholine somehow.

0(defflavor one-version-whole-file-p-mixin (whole-file-p) ()
  (:init-keywords :force-whole-file))

(defmethod (make-instance one-version-whole-file-p-mixin :after)
	   (&key force-whole-file only-section &allow-other-keys)
  (setq whole-file-p (or force-whole-file (not only-section))))

(defmethod (:whole-file-p one-version-whole-file-p-mixin) () whole-file-p)
1;;; This gets signalled when a diagram line is seen. Whoppers for 
;;; line-in and string-line-in catch the condition and unwind.
0(defflavor diagram-line-blip
	(diagram
	 stream)
	(condition)
  (:required-init-keywords :diagram :stream)
  (:initable-instance-variables diagram stream)
  (:readable-instance-variables diagram stream))

(defmethod (dbg:report diagram-line-blip) (stream)
  (format stream "Diagram blip for stream ~S (~S)." stream diagram))

(compile-flavor-methods diagram-line-blip)
1;;; Users of this mixin still have to check for instances in their
;;; next-input-buffer method and signal the blip.  Further hairy
;;; modularity could remove the need for that, but I'm too lazy. --BIM
0(defflavor return-diagrams-as-lines-mixin
	((return-diagrams-as-lines nil))
	()
  (:settable-instance-variables return-diagrams-as-lines))
(defwhopper-subst (:line-in return-diagrams-as-lines-mixin) (&optional size)
  (flet ((diagram-blip-handler (blip)
	   (when (and return-diagrams-as-lines
		      (eq self (diagram-line-blip-stream blip)))
	     (return-from :line-in (values (diagram-line-blip-diagram blip) nil)))))
    (condition-bind ((diagram-line-blip #'diagram-blip-handler))
      (continue-whopper size))))
1;;; the condition will only be signalled when the flag is on, the the handler
;;; need not check.
0(defwhopper-subst (:string-line-in return-diagrams-as-lines-mixin)
		  (eof line &optional (start 0) end)
  (flet ((diagram-blip-handler (blip)
	   (when (and return-diagrams-as-lines
		      (eq self (diagram-line-blip-stream blip)))
	     (return-from :string-line-in
	       (values 0 nil nil (diagram-line-blip-diagram blip))))))
    (condition-bind ((diagram-line-blip #'diagram-blip-handler))
      (continue-whopper eof line start end))))

(defflavor one-version-file-stream
	((internal-version nil)
	 (version nil)				; as advertised 
	 ;; the next two are used to get the right results for
	 ;; vc pathnames.  'return-vc-pathnames t causes
	 ;; :truename to cons a true VC pathname.
	 ;; 'pathname is used to communicate newest/oldest/nil
	 ;; vc components.
	 (return-vc-pathnames nil)		; as it says
	 (pathname nil)				; specify the result of :pathname
	 encached-file-header
	 parser
	 stream
	 eof
	 ancestors
	 (only-section nil)
	 (only-section-found nil)
	 header
	 (input-buffer-outstanding nil)
	 )
	(return-diagrams-as-lines-mixin
	 si:file-data-stream-mixin flavor:property-list-mixin
	 si:buffered-input-character-stream)
  (:readable-instance-variables (vc-file-version version)
   (vc-file-stream-encached-file-header encached-file-header))
  (:initable-instance-variables stream encached-file-header
				(return-vc-pathnames return-vc-pathnames)	
				(pathname pathname)
				only-section)
  (:init-keywords :version :parser :encache-file-header
		  1;; this is for compatibility and can be removed later
0		  :return-boundary-blips)
  (:required-init-keywords :stream)
  (:default-init-plist :parser nil :encached-file-header nil)
  (:documentation "Stream that reads a single version from a version
controlled file."))
(defmethod (:length one-version-file-stream) () (send self :get :length))
(defsubst-in-flavor (ancestor-p one-version-file-stream) (a-version)
  (and (< a-version (length ancestors)) (aref ancestors a-version)))
(defmethod ((setf one-version-file-stream-version) one-version-file-stream) (file-version)
  (when internal-version (error "Version already selected."))
  (setq internal-version
	(lookup-external-version encached-file-header file-version :error-p t))
  (setq version file-version)
  (setq ancestors (make-array (+ 1 internal-version)
			      :element-type 'boolean :initial-element nil))
  (loop for v = internal-version then (pf-version-info-parent-version pfvi)
	as pfvi = (aref (pf-header-version-info-array header) v)
	never (zerop v)
	do (setf (aref ancestors v) t))
  (setf (send self :get :length) (pf-version-info-length
				   (aref (pf-header-version-info-array header)
					 internal-version))
	(send self :get :author) (pf-version-info-author
				   (aref (pf-header-version-info-array header)
					 internal-version))
	(send self :get :creation-date) (pf-version-info-creation-date
					  (aref
					    (pf-header-version-info-array header)
					    internal-version))))

(defmethod (version-defined-p one-version-file-stream) (file-version)
  (plusp (lookup-external-version encached-file-header file-version))
  )
(defmethod (make-instance one-version-file-stream) (&key ((:version file-version))
							 ((:parser user-parser))
							 ((:pathname pathname-for-si))
							 encache-file-header
							 &allow-other-keys)
  (assert (or (null encache-file-header) (and (null encached-file-header)
					      (null user-parser)))
	  ()
	  "You can't specify a parser or an encached file header and also
use the standard encached file header cache.")
  (unless pathname-for-si			1;kludge because the file-stream-mixin
0						1;is too gross for words.
0    (setq si:pathname (or pathname (send stream :pathname))))
  (if encache-file-header
      (progn
	(setq encached-file-header
	      (find-or-make-encached-file-header :stream stream))
	(setq parser encached-file-header)	;yup, its a dessert topping and a floor wax
	(setq header (header-pseudo-encached-file-header encached-file-header))
	)
      (setq parser
	    (or user-parser
		(let ((file-format-version
			(getf (fs:read-attribute-list nil stream :dont-reset-stream t)
			      :version-control)))
		  (make-instance 'parser :stream stream :file-version file-format-version))))
      (setq header (send parser :read-header))
      (unless encached-file-header
	(setq encached-file-header (make-instance 'encached-file-header))
	(encached-file-read-header-from-parsed-header encached-file-header header)))
  (when file-version
    (encached-file-header-merge-version encached-file-header file-version)
    (setf (one-version-file-stream-version self) file-version))
  (setq eof nil))

(defmethod (file-stored-property-list one-version-file-stream) ()
  (pf-header-properties header))

(defmethod (:discard-input-buffer one-version-file-stream) (buffer)
  (unless (eq buffer input-buffer-outstanding)
    (error "Attempt to return buffer ~S, but ~:[no buffer~*~;~S~] is outstanding."
	   buffer input-buffer-outstanding input-buffer-outstanding))
  (setq input-buffer-outstanding nil))

(defmethod (:next-input-buffer one-version-file-stream) (&optional no-hang-p)
  (ignore no-hang-p)
  (unless internal-version (error "Attempt to read before selecting a version."))
  (when input-buffer-outstanding
    (error "Attempt to read a second input buffer before discarding the first (~S)"
	   input-buffer-outstanding))
  (if eof (values nil nil nil t)
      (let ((buffer))
	(flet ((skip-to (type v)
		 (declare (sys:downward-function))
		 (let ((target (make-control-record :type type :version v)))
		   (loop do
		     (setq buffer (send parser :read-text-item))
			 never (and (typep buffer 'encached-control-record)
				    (-equal-p buffer target))))
		 nil))
	  (loop named got-buffer do
	    (setq buffer (send parser :read-text-item))
	    (block check-next
	      (etypecase buffer
		(instance
		  (signal 'diagram-line-blip :diagram buffer :stream self))
		    1;; if we return here, noone caught the signal.
0		(string
		  1;; if we actually have text for the right section,
0		  1;; then we are there and can return it.
0		  (when (and (not only-section-found) only-section)
		    (setq only-section-found t))
		  1;; is we haven't arrived at the right place... 
0		  (when (or (null only-section) only-section-found)
		    (unless ( (array-dimension buffer 0) (fill-pointer buffer))
		      (setq buffer (adjust-array buffer (1+ (array-dimension buffer 0)))))
		    (vector-push #\Return buffer)
		    (setq input-buffer-outstanding buffer)
		    (return-from got-buffer (values buffer 0 (fill-pointer buffer) nil))))
		1;; this is fine, we are reading in a region
0		1;;  where the text is for us.
0		(symbol
		  (if (eq buffer :end-of-text)
		      (progn
			(setq eof t)
			(return-from got-buffer (values nil nil nil t)))
		      (error "Unrecognized symbol ~S returned by parser." buffer)))
		(encached-control-record	1; not so fine, we might have
0						1; to do something about it
0		  (control-record-case (buffer version-or-section)
		    ((BS)
		     (if only-section
			 (when (not only-section-found)
			   (unless (= version-or-section only-section)
			     (skip-to BS only-section)	1;find another copy, please.
0			     (return-from check-next nil)
			     ))
			 (signal 'encached-file-version-stream-blip
				 :proceed-types :no-action
				 :stream self
				 :blip (make-section-boundary-blip
					 :begin-section-id version-or-section))))
		    ((ES)
		     (when (and only-section only-section-found)
		       (setq eof t)
		       (return-from got-buffer (values nil nil nil t))))
		    ((EI ED)) 1;; these are only interesting if we are skipping
0		    1;;  a particular stretch
0		    (BD
		      (when (ancestor-p (cr-version buffer))
			(skip-to ED (cr-version buffer))
			(return-from check-next nil)))
		    (BI
		      (unless (ancestor-p (cr-version buffer))
			(skip-to EI (cr-version buffer))
			(return-from check-next nil))))))))))))

(defmethod (:close one-version-file-stream :after) (&optional abort-p)
  (flush-parser parser)
  (send stream :close abort-p))

1;;; Note that patch files are "whole", so that the patch stream shadows this.
0(defmethod (:whole-file-p one-version-file-stream) () (null only-section))

(defmethod (:pathname one-version-file-stream) ()
  (or pathname (send stream :pathname)))
(defmethod (:truename one-version-file-stream) ()
  (let ((base-pathname (send stream :truename)))
    (if return-vc-pathnames
	(send base-pathname :new-pathname :version :newest
	      :vc-branch (file-version-branch-name version)
	      :vc-version (file-version-branch-version version))
	base-pathname)))

1;;; Perhaps this should be part if the :init method, since closing the 
;;; stream is in the close method?
0(defun open-one-version-file-stream (pathname &optional version
				     &rest open-arguments
				     &key only-section
				     &allow-other-keys
				     )
  (si:with-rem-keywords (open-arguments open-arguments '(:only-section))
    (let ((s nil))
      (zl:unwind-protect-case ()
	  (progn
	    (setq s (apply #'open pathname open-arguments))
	    (send-if-handles s :set-return-diagrams-as-lines t)
	    (make-instance 'one-version-file-stream
			   :only-section only-section
			   :version version
			   :stream s))
	(:abort (when s (close s)))))))
(defflavor encached-file-version-stream
	(encached-file
	 version			       
	 (eof nil)
	 retrieval-continuation
	 (return-vc-pathnames nil)		;see one-version-file-stream
	 (pathname nil)
	 (only-section nil)
	 )
	(return-diagrams-as-lines-mixin
	 si:buffered-input-character-stream)
  (:readable-instance-variables (vc-file-version version))
  (:initable-instance-variables encached-file version
				only-section
				(return-vc-pathnames return-vc-pathnames)
				(pathname pathname))
  (:init-keywords :return-boundary-blips)
  (:required-init-keywords :encached-file :version)
  (:documentation "Stream that reads a single version from an encached file."))

(defmethod (make-instance encached-file-version-stream) (&rest ignore)
  (setq version (encached-file-version-info encached-file version))
  (setq retrieval-continuation (make-retrieve-continuation
				 encached-file version
				 :one-section only-section
				 :section-marks (null only-section))))
(defmethod (:properties encached-file-version-stream) ()
  (list (encached-file-truename encached-file)
	:creation-date (file-version-info-creation-date version)
	:author (file-version-info-author version)
	:length-in-bytes (file-version-info-length version)))

(defmethod (:creation-date encached-file-version-stream) ()
  (file-version-info-creation-date version))
(defmethod (vc-file-stream-encached-file-header encached-file-version-stream) ()
  self)

(defmethod (:discard-input-buffer encached-file-version-stream) (ignore)
  )

(defflavor encached-file-version-stream-blip (stream blip)
	   (condition sys:no-action-mixin)
  (:initable-instance-variables blip stream)
  (:readable-instance-variables blip stream))

(defmethod (:report encached-file-version-stream-blip) (rstream)
  (format rstream "Blip ~S in stream ~S." blip stream)) 

(compile-flavor-methods encached-file-version-stream-blip)

(defmethod (:next-input-buffer encached-file-version-stream) (&optional no-hang-p)
  (ignore no-hang-p)
  (if eof (values nil nil nil t)
      (loop named got-buffer with buffer do
	(setq buffer (funcall retrieval-continuation))
	(etypecase buffer
	  (instance
	    (signal 'diagram-line-blip :diagram buffer :stream self))
	  1;; if we return here, noone caught the signal.
0	  (string
	    (return-from got-buffer (values
				      (string-append buffer #\return)
				      0
				      (+ (length buffer) 1)
				      nil)))
	  (symbol
	    (if (eq buffer :eof)
		(progn
		  (setq eof t)
		  (return-from got-buffer (values nil nil nil t)))
		(error "Unrecognized symbol ~S returned by parser." buffer)))
	  (section-boundary-blip
	    (signal 'encached-file-version-stream-blip
		      :proceed-types :no-action
		      :stream self :blip buffer))))))

(defmethod (:whole-file-p encached-file-version-stream) () (null only-section))

(defmethod (:pathname encached-file-version-stream) ()
  (or pathname
      (encached-file-pathname encached-file)))
(defmethod (:truename encached-file-version-stream) ()
  (let ((base-pathname (or (encached-file-truename encached-file)
			   (encached-file-pathname encached-file))))
    (if return-vc-pathnames
	(send base-pathname :new-pathname :version :newest
	      :vc-branch (file-version-branch-name version)
	      :vc-version (file-version-branch-version version))
	base-pathname)))
(defmethod (:info encached-file-version-stream) ()
  (cons (send self :truename) (send self :creation-date)))
(defmethod (:generic-pathname-and-plist encached-file-version-stream) ()
  (let* ((this-path (send self :pathname))
	 (generic-path (send this-path :generic-pathname)))
    (values this-path (send this-path :property-list-location)
	    generic-path (send generic-path :property-list-location))))

(defun open-encached-file-stream (&key encached-file ((:file-version vc-file-version))
				  pathname
				  only-section
				  return-boundary-blips)
  (assert (not (and encached-file pathname))
	  ()
	  "Either one of an encached file or a pathname may be given, but not both.")
  (when pathname
    (setq encached-file (find-or-make-locked-encached-file
			  :pathname pathname
			  :new-file-p nil
			  :make-ok t)))
  (make-instance 'encached-file-version-stream
		 :only-section only-section
		 :encached-file encached-file :version vc-file-version
		 :return-boundary-blips return-boundary-blips))

(compile-flavor-methods encached-file-version-stream one-version-file-stream)

(defun open-encached-or-file-stream (vc-pathname &key only-section)
  (let ((base-pathname (fs:vc-pathname-flat-pathname vc-pathname))
	(vc-file-version (make-file-version
			   :branch-name (fs:pathname-vc-branch vc-pathname)
			   :branch-version (fs:pathname-vc-version vc-pathname))))
    (let ((encached-file (find-or-make-locked-encached-file
			   :pathname base-pathname :new-file-p nil :make-ok nil)))
      (when encached-file
	(encached-file-header-merge-version encached-file vc-file-version)
	(return-from open-encached-or-file-stream
	  (make-instance 'encached-file-version-stream
			 :only-section only-section
			 :encached-file encached-file
			 :version vc-file-version
			 'pathname vc-pathname
			 'return-vc-pathnames t))))
    ;; don't use an encached file header. we have to read the entire file anyway,
    ;; so we gain nothing except speed in the undefined version case.
    ;; on the other hand, it would be spiffy to leave what we learned encached.
    (let ((stream nil))
      (unwind-protect-case ()
	  (progn
	    (setq stream (open base-pathname))
	    (make-instance 'one-version-file-stream
			   :only-section only-section
			   :stream stream
			   :file-access-path nil
			   :translated-pathname (send vc-pathname :translated-pathname)
			   :encache-file-header t
			   :version vc-file-version
			   'pathname vc-pathname
			   'return-vc-pathnames t))
	(:abort (close stream :abort t)))))) 
