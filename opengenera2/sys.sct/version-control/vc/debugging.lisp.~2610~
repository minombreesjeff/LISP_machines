;;; -*- Mode: LISP; Syntax: Common-lisp; Package: VCD,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")i0; Base: 10; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defun print-vt (vt &key (formatted t))
  (let ((*print-array* t)
	(*print-pretty* t))
    (when (typep vt 'instance)
      (setq vt (sys:eval-in-instance vt 'version-table)))
    (format t "~&~S" vt)
    (loop for pv being the array-elements of vt from 1
	  do (if formatted
		 (print-pv pv)
		 (format t "~& ~S" pv)))))
(define-presentation-translator print-vt
   (version-table sys:form
    :gesture :describe
    :documentation "Print version table")
   (vt)
  `(print-vt ,vt))

(defun print-pv (pv)
  (if (null pv)
      (format t "~&nil")
      (format t "~2& Version: ~3D ~A.~D (Parent: ~3D)"
	      (pv-internal-version pv)(pv-branch-name pv)
	      (pv-branch-version pv) (pv-parent-version pv))
      (format t "~& Leaf: ~S Ancestors: ~S" (pv-leaf-p pv) (pv-ancestor-bitmap pv))
      (format t "~& Length ~D Author: ~A Creation Date ~\\time\\"
	      (file-version-info-length (pv-version-info pv))
	      (file-version-info-author (pv-version-info pv))
	      (file-version-info-creation-date (pv-version-info pv)))
      (when (pv-trailer pv)
	(format t "~& Trailer:")
	(when (and (file-version-trailer-description (pv-trailer pv))
		   (not (string= (file-version-trailer-description (pv-trailer pv)) "")))
	  (format t "~&    ~A" (file-version-trailer-description (pv-trailer pv))))
	(loop for ps being the array-elements of (file-version-trailer-per-section-array
						   (pv-trailer pv))
	      do
	  (format t "~&   Section ~3D"
		  (file-version-trailer-ps-section-id ps))
	  (when (and (file-version-trailer-ps-description ps)
		     (not (string= (file-version-trailer-ps-description ps) "")))
	    (format t "~&    ~A" (file-version-trailer-ps-description ps)))))))
(define-presentation-translator print-pv
   (per-version sys:form
    :gesture :describe
    :documentation "Print per-version")
   (pv)
  `(print-pv ,pv))

(defun print-si (si)
  (let ((*print-array* t)
	(*print-pretty* t))
    (format t "~&~S~%" si)
    (when si
      (loop for sr being the array-elements of si
		   using (index rindex)
	    do
	(typecase sr
	  (encached-control-record (format t "~3D ~A~%" rindex (-string sr)))
	  (string (format t "~3D ~A~%" rindex sr))
	  (otherwise (format t "~3D Invalid type record ~S~%" rindex sr)))))))
(define-presentation-translator print-si
   (section-info sys:form
    :gesture :describe
    :documentation "Print section-info")
   (si)
  `(print-si ,si))

(defun print-st (st &key (brief t))
  (let ((*print-array* t)
	(*print-pretty* t))
    (when (typep st 'instance)
      (setq st (sys:eval-in-instance st 'section-table)))
    (format t "~&~S" st)
    (loop for si being the array-elements of st
	  do (if brief (print si)
		 (print-si si)))
    (terpri)))
(defun print-si-list (list)
  (loop for r in list
	do
    (format t "~10t~a~%"
	    (if (not (typep r 'encached-control-record))
		r (-string r)))))
(define-presentation-translator print-st
   (section-table sys:form
    :gesture :describe
    :documentation "Print section-table")
   (st)
  `(print-st ,st))

(defun print-rt (rt)
  (let ((*print-array* t)
	(*print-pretty* t))
    (when (typep rt 'instance)
      (setq rt (sys:eval-in-instance rt 'reconstruct-table)))
    (format t "~&~S" rt)))


1;;; Function(s) to verify the contents of an encached file.
;;; The stream can be an INTERVAL-STREAM for ZWEI checks.

0(defun verify-encached-file-text (encached-file version stream)
  (loop with line with last-line = nil
	with previous-line
	with count = 0
	with last-blip = nil
	for record being the text-and-section-records of encached-file in-version version
	do
    (if (typep record 'section-boundary-blip)
	(setq last-blip record)
	(when last-line
	  (error "Encached text goes on past the end of the original file."))
	(setq previous-line line)
	(incf count)
	(multiple-value-setq (line last-line) (send stream :line-in))
	(unless (string= record line)
	  (error "Mismatch at line ~D, Section ~D:
Previous line: ~S
Encached text: ~S
Proper   text: ~S"
		   count (sbb-begin-section-id last-blip)
		   previous-line record line)))
	finally
	  ;; there's this joke.  The VC file can't represent 
	  ;; a partial line.  It dosen't store an extra blank line
	  ;; at the end, because that would have to be present
	  ;; at the end of each hard section.  So when it's returned
	  ;; everything its got, there should still be a
	  ;; blank line lurking behind :line-in to inform 
	  ;; us that the file ended with a #\Return.
	  (unless last-line
	    ;; last-line may be T if the file ended without a #\Return
	    (multiple-value-setq (line last-line) (send stream :line-in))
	    (unless (string= line "")
	      (error "Found line ~A at the end of the file; expected blank line."
		     line))
	    (unless last-line
	      (error "Encached text terminated prematurely.")))))

(defun verify-all-file-versions (file-pathname)
  (setq file-pathname (pathname file-pathname))
  ;; Print something so we know what the mysterious printout below means
  (with-character-face (:italic)
    (format t "~&Non-VC pathname~50tVC file version     Version commentary"))
  (let ((ef (read-in-encached-file file-pathname)))
    (verify-all-file-versions-internal ef)))

(defun verify-all-file-versions-internal (ef)
  (let ((all-versions (getf (encached-file-stored-property-list ef)
			    'converted-pathname-alist)))	
    (loop with compact-file = nil
	  for (version file-version pathname) in all-versions
	  as compact-p = (string-equal (send pathname :type) "compact")
	  as source = (if compact-p version pathname)
	  as vi = (encached-file-version-info ef file-version)
	  do
      (when (and (numberp source) (null compact-file))
	(setq compact-file (Compact:read-compact-file
			     (send pathname :new-version ':newest))))
      (loop named verify-one
	    do
	(catch-error-restart (error "Retry verify of ~A~:[~*~;(compact ~D)~] ~A"
				    pathname compact-p version file-version)
	  (with-open-stream
	    (original (if (numberp source) (Compact:open-file-stream
					     compact-file source :element-type 'character)
			  (open source :direction :input)))
	    (format t "~& ~A~:[~*~;(compact ~D)~]~50t~A ~A"
		    pathname
		    compact-p
		    version
		    file-version
		    (file-version-trailer-description
		      (file-version-info-trailer vi)))
	    (verify-encached-file-text ef file-version original)
	    (return-from verify-one nil)))))))
