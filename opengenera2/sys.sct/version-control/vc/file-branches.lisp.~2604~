;;; -*- Mode: LISP; Syntax: Common-lisp; Package: D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")vci0; Base: 10; Lowercase: Yes -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
1;;; File-level branch management.  
;;; This code keeps track of the branch0 1structure and related
;;; information0 1by storing information in encached0 1file stored property
;;; lists.
;;;
;;;  For each branch, this code keeps track of:
;;;
;;;    name (of course)
;;;    if private, whose is it.  (note that the user name is still part of the name)
;;;    where it is in the tree (what is the ancestor of its first version).
;;;    if new versions are permitted on the end.
;;;    if not, what version is the logical successor of the last one.

;;; Nothing forces branches to be recorded here.  Overhead of one sort or another
;;; may intentionally create unrecorded branches.

;;; --- Is it a good design that the clients of this just mung defstructs in place?
;;; --- should they have to make explicit calls? Conservative design is not to 
;;; --- modify in place, so lookup returns a copy and record returns nothing at all.

0(defstruct (file-branch
	     (:print-function file-branch-print-function))
  (name "")
  (private-user-name nil)
  (parent-file-version nil)
  (new-versions-permitted-p t)
  (successor-version nil)
  (author zl:user-id)
  (creation-date (get-universal-time)))

1;;;kludge to support old VC files.

0(setf (get 'vc::file-branch 'si:defstruct-description)
      (get 'file-branch 'si:defstruct-description))

(defun file-branch-print-function (b stream depth)
  (if *print-escape*
      (if *print-structure-contents*
	  (progn
	    (sys:cl-structure-printer file-branch b stream depth)
	    (when (send stream :interactive)
	      (format stream " #| Creation date: ~\\time\\ |#"
		      (file-branch-creation-date b))))
	  (sys:printing-random-object (b stream :typep)
	    (format stream "~A" (file-branch-name b))))
      (format stream "~A" (file-branch-name b))))

1;;; The database of branches is the file-branches property of the file.
;;; Its just a list.

0(defun update-file-branch (encached-file file-branch)
  (record-file-branch encached-file file-branch :new-ok nil :update-ok t))

(defun record-file-branch (encached-file file-branch &key (update-ok nil) (new-ok t))
  (let ((existing (find (file-branch-name file-branch) 
			(getf (encached-file-stored-property-list encached-file)
			      'file-branches)
			:test #'string-equal
			:key #'file-branch-name)))
    (when (and existing (not update-ok))
      (error "Branch ~A already registered for file ~A." (file-branch-name file-branch)
	     encached-file))
    (when (and (not existing) (not new-ok))
      (error "Branch ~A is not already registered for file ~A." (file-branch-name file-branch)
	     encached-file))
    (if existing
	(setf
	  (file-branch-name existing) (file-branch-name file-branch)
	  (file-branch-private-user-name existing)
	  (file-branch-private-user-name file-branch)
	  (file-branch-new-versions-permitted-p existing)
	  (file-branch-new-versions-permitted-p file-branch)
	  (file-branch-successor-version existing)
	  (file-branch-successor-version file-branch))
	(push (copy-file-branch file-branch)
	      (getf (encached-file-stored-property-list encached-file) 'file-branches)))
    nil))
;;;--- this kludge for old files should be in the parser.
(defun get-file-branches (encached-file)
  (let ((old-branches 
	  (getf (encached-file-stored-property-list encached-file)
		'vc::file-branches)))
    (when old-branches 
      (setf 
	(getf (encached-file-stored-property-list encached-file) 'file-branches)
	(append
	  (getf (encached-file-stored-property-list encached-file) 'file-branches)
	  old-branches))
      (remf (encached-file-stored-property-list encached-file) 'vc::file-branches)))
  (getf (encached-file-stored-property-list encached-file) 'file-branches))    
(defun lookup-file-branch (encached-file file-branch-name)
  (let ((existing
	  (find file-branch-name (get-file-branches encached-file )
		:test #'string-equal :key #'file-branch-name)))
    (and existing (copy-file-branch existing))))
(defun un-record-file-branch (encached-file file-branch-name)
  (setf (getf (encached-file-stored-property-list encached-file) 'file-branches)
	(delete file-branch-name (get-file-branches encached-file)
		:key #'file-branch-name :test #'string-equal)))
(defun file-branch-name-alist (encached-file)
  (loop for br in (get-file-branches encached-file)
	collect (cons (file-branch-name br) (copy-file-branch br))))
