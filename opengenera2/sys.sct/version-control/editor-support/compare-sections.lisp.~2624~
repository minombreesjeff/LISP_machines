;;; -*- Mode: lisp; Syntax: Common-Lisp; Base: 10; Lowercase: t; Package: ZWEI; Default-character-style: (:fix :roman :normal); Vsp: 0; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defun show-section-changes (current-section)
  (let* ((current-section-id (vc-section-version-node-section-id current-section))
	 (current-section-modified-p (and (typep current-section 'vc-section-version-node)
					  (> (node-tick current-section)
					     (send *interval* :save-tick))))
	 (last-saved-version (vcfb-vc-file-version *interval*))
	 (encached-file (vcfb-encached-file  *interval*))
	 (version-1 (cond (*numeric-arg-p* (choose-vc-file-version
					     encached-file nil t
					     :branch (vci:file-version-branch-name
						       last-saved-version)
					     :prompt "Compare version"
					     :force-prompt t))
			  (current-section-modified-p :current)
			  (t last-saved-version)))
	 
	 (version-2 (cond (*numeric-arg-p* (choose-vc-file-version
					     encached-file nil t :prompt "with version"
					     :print-branches-p nil
					     :force-prompt t))
			  (current-section-modified-p last-saved-version)
			  (t (vci::encached-file-last-modified-version
			       encached-file last-saved-version current-section-id)))))

    (when (and *numeric-arg-p* current-section-modified-p 
	       (eql (vci:file-version-branch-version version-1) :newest))
      (setq version-1 :current))
    
    (when (and version-1 version-2)
      (vc-compare-two-section-versions current-section version-1 version-2)))
  (format *typeout-window* "~2&Done.")
  dis-none)
;;; Compare two hard sections.  Compare the contents of the current
;;; contents of section with the same hard section in version
;;; compare-version.

(defun vc-compare-two-section-versions (section first-version second-version
					&key (multiple-sections nil))
  (let* ((parent-section (section-text-node section))
	 (section-id (vc-section-version-node-section-id parent-section))
	 (encached-file (vcfb-encached-file  *interval*))
	 (ps-legend (diagram-legend parent-section))
	 (length-of-message (+ 46 (string-length ps-legend)	;rest of message is 46 chars
			       (string-length first-version)
			       (string-length second-version)))
	 (window-width (/ (send *typeout-window* :inside-width)
			  (send *typeout-window* :char-width))))
    
    (flet ((complain (format-string &rest args)
	     (if multiple-sections
		 (scl:with-character-style ('(nil :bold nil) *typeout-window*)
		   (lexpr-funcall 'format *typeout-window* format-string args))
		 (cl:apply 'barf format-string args))
	     (return-from vc-compare-two-section-versions (values))))
      
      (when (eql section-id :new)
	(complain "~2&~@\\presentation\\ is newly created and does not exist in any ~
                   other version" parent-section `((vc-section-version-node))))
      
      ;; We assume choose-vc-file-version has already verified
      ;; first-version and second-version for existence.
      
      (when (neq first-version :current)	      
	(setq first-version (vci:encached-file-header-merge-version	;xlate :newest
			      encached-file first-version))
	(unless (vci:encached-file-section-not-empty-for-version	;does section exist?
		  encached-file section-id first-version)
	  (complain "~a does not exist in version ~a" ps-legend first-version)))
      
      (when (vc-section-version-node-deleted-p section)
	(complain "~2&~@\\presentation\\ does not exist in the current buffer."
		  parent-section `((vc-section-version-node))))
      
      (setq second-version (vci:encached-file-header-merge-version	;xlate :newest
			     encached-file second-version))
      
      (unless (vci:encached-file-section-not-empty-for-version	;does section exist?
		encached-file section-id second-version)
	(complain "~2&~a does not exist in version ~a" ps-legend second-version)))
    
    
    ;; now we have to load both versions of the section into temporary intervals.
    
    (flet ((load-section-version (version)
	     (let* ((i (make-interval 'node :initial-line t))
		    (*interval* i))
	       (with-editor-stream (s :interval i :no-redisplay t)
		 (if (eql version :current)
		     (loop as r = (bp-line (first-character-in-section section))
				then (line-next r)
			   until (null (line-next r))
			   do (send s :line-out r))
		     (loop for r being the text-records
			       of encached-file in-version version
			       only-section section-id
			   do (send s :line-out r))))
	       i)))
      (let ((v-1 (load-section-version first-version))
	    (v-2 (load-section-version second-version))
	    (compare-source-info nil))
	
	(push
	  `(:interval ,v-1 :original nil
		      :tag-string "first version"
		      :description ,(format nil "~A" first-version))
	  compare-source-info)
	(push
	  `(:interval ,v-2 :original nil
		      :tag-string "second version"
		      :description ,(format nil "~A" second-version))
	  compare-source-info)
	(compare-merge::compare-merge-intervals
	  compare-source-info
	  :automatically-resolve-differences nil
	  :typeout-differences *typeout-window*
	  :first-difference-hook-function
	  #'(lambda ()
	      (format *typeout-window* "~2&~'bComparison of ~@\\presentation\\~:[ ~;~%~]~
                                        in version ~:[~@\\presentation\\~;~a~*~] with version ~
                                        ~@\\presentation\\~"
		      parent-section `((vc-section-version-node))
		      (> length-of-message window-width) (eql first-version :current)
		      first-version
		      `((vci::file-version :relative-to-encached-file ,encached-file))
		      second-version
		      `((vci::file-version :relative-to-encached-file ,encached-file)))))))))
(defun describe-section (encached-file version section-id stream)
  (flet ((load-section-version (version section-id)
	   (let* ((i (make-interval 'node :initial-line t))
		  (*interval* i))
	     (with-editor-stream (s :interval i :no-redisplay t)
	       (loop for r being the text-records
			 of encached-file in-version version
			 only-section section-id
		     with lines = 0
		     while (< lines 3)
		     repeat 50			;get only 50 lines
		     do
		 (when (string-search "(def" r)
		   (send s :line-out r)
		   (incf lines))
		     finally (when (= lines 0)
			       (loop for r being the text-records
					 of encached-file in-version version
					 only-section section-id
				     repeat 5
				     do
				 (send s :line-out r)))))
	     
	     i)))
    (let ((missing-section (load-section-version version section-id)))
      (loop for line = (bp-line (node-first-bp missing-section))
		     then (line-next line)
	    while line
	    do
	(format stream "~a~%" line)))))
(defun vc-compare-all-encached-section-versions (encached-file version-1 version-2 stream)
  (setq version-1 (vci:encached-file-header-merge-version	;xlate :newest
		    encached-file version-1))
  (setq version-2 (vci:encached-file-header-merge-version
		    encached-file version-2))
  (format stream "~2&~'bComparison of version ~@\\presentation\\ with version ~
                    ~@\\presentation\\~~2%"
	    version-1 `((vci::file-version :relative-to-encached-file ,encached-file))
	    version-2 `((vci::file-version :relative-to-encached-file ,encached-file)))
    
  (when (vci:file-versions-equal version-1 version-2)
    (return-from vc-compare-all-encached-section-versions (values)))
	
  (flet ((load-section-version (version section-id)
	   (let* ((i (make-interval 'node :initial-line t))
		  (*interval* i))
	     (with-editor-stream (s :interval i :no-redisplay t)
	       (loop for r being the text-records
			 of encached-file in-version version
			 only-section section-id
		     do (send s :line-out r)))
	     i)))
    (loop for section in
	      (vci:encached-file-version-section-order encached-file version-1)
	  do
      
      (if (vci:encached-file-section-not-empty-for-version	;does section exist?
	    encached-file section version-2)
	  (let* ((v-1 (load-section-version version-1 section))
		 (v-2 (load-section-version version-2 section))
		 (compare-source-info nil)
		 (start-of-definition (or (forward-definition (node-last-bp v-1) -1)
					  (node-first-bp v-1))))
	    (push
	      `(:interval ,v-1 :original nil
			  :tag-string "first version"
			  :description ,(format nil "~A" version-1))
	      compare-source-info)
	    (push
	      `(:interval ,v-2 :original nil
			  :tag-string "second version"
			  :description ,(format nil "~A" version-2))
	      compare-source-info)
	    (compare-merge::compare-merge-intervals
	      compare-source-info
	      :automatically-resolve-differences nil
	      :typeout-differences stream
	      :first-difference-hook-function
	      #'(lambda ()
		  (format stream "~2&~'b~a~~%"
			  (multiple-value-bind (fspec type)
			      (get-definition-function-spec start-of-definition)
			    (section-definition-name fspec type))))))
	  
	  (let* ((s-v (load-section-version version-1 section))
		 (start-of-definition (or (forward-definition (node-last-bp s-v) -1)
					  (node-first-bp s-v))))
	    (format stream "~&~'b~a does not exist in version ~a~~%"
		    (multiple-value-bind (fspec type)
			(get-definition-function-spec start-of-definition)
		      (section-definition-name fspec type))
		    version-2))))
    
    (loop for section in
	      (vci:encached-file-version-section-order encached-file version-2)
	  do
      (unless (vci:encached-file-section-not-empty-for-version	;does section exist?
		encached-file section version-1)
	(let* ((s-v (load-section-version version-2 section))
	       (start-of-definition (or (forward-definition (node-last-bp s-v) -1)
					(node-first-bp s-v))))
	  (format stream "~&~'b~a does not exist in version ~a~~%"
		  (multiple-value-bind (fspec type)
		      (get-definition-function-spec start-of-definition)
		    (section-definition-name fspec type))
		  version-1))))))
(define-special-buffer-type section-change-buffer
	(description-string)
	(special-purpose-buffer)
	section-change
	"Section-Changes"
  (:buffer-init-options :set-description-string)
  (:settable-instance-variables))
(defmethod (:set-not-modified section-change-buffer) (&optional undo-p)
  (ignore undo-p)
  nil)

;Contents comes from typeout; delete previous contents when told to revert
(defmethod (:revert section-change-buffer) ()
  (delete-interval self))
(defmethod (:reusable section-change-buffer) (&rest ignore) nil)
(defmethod (:description section-change-buffer) (&optional (stream cl:*standard-output*))
  (cl:write-string description-string stream))
(define-section-name section-change-buffer-compiled-methods)

(compile-flavor-methods section-change-buffer)
(defmacro with-open-section-change-output-stream ((stream description) &body body)
  `(with-open-stream (,stream (make-typeout-buffer-stream
				'section-change
				:set-description-string ,description))
     ,@body))

(defun vc-show-all-section-changes-of-system (stream &key include-components)
  (let* ((system
	   (let ((s (typein-line-accept '((dw:type-or-string
					    ((and ((sct:system))
						  ((cl:satisfies
						     sct:system-version-controlled)))))
					  :description "a version controlled system")
					:prompt "System")))
	     (if (cl:stringp s)
		 (let ((system (sct:find-system-named s nil)))
		   (unless system (barf "System ~A not found." s))
		   (unless (sct:system-version-controlled system)
		     (barf "System ~A is not version controlled." system))
		   system)
		 s)))
	 (branch
	   (typein-line-accept `((sct:system-branch :system ,system))
			       :prompt "Show changes in branch"))
	 (file-list
	   (if (stringp branch)			D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");a private branch
0	       (sct:get-all-system-version-controlled-files
		 system :include-components include-components)
	       (cl:delete-if-not
		 #'fs:pathname-vc-p
		 (sct:get-all-system-input-files system :include-components include-components
						 :system-branch branch)))))
    (if (eql stream ':special-buffer)
	(with-open-section-change-output-stream (stream
						  (format nil "System ~A Branch ~A"
							  system branch))
	  (vc-show-all-section-changes-of-system-1 stream file-list branch))
	(vc-show-all-section-changes-of-system-1 stream file-list branch))))


(defun vc-show-all-section-changes-of-system-1 (stream file-list branch)
    (loop for path in file-list
    	  do
      (catch-error-restart ((error) "Skip ~A" path)
	(let* ((ef (error-restart ((fs:file-error) "Retry reading VC file ~A"
				   (fs:vc-pathname-flat-pathname path))
		     (vci::find-or-make-encached-file-header
		       :pathname (fs:vc-pathname-flat-pathname path)))))
	  (block do-one
	    (unless (vci:branch-defined-p ef (cl:string branch))
	      (format t "~&Branch ~A not defined in ~A. Skipping." branch path)
	      (return-from do-one nil))
	    (error-restart ((fs:file-error) "Retry reading VC file ~A"
			    (fs:vc-pathname-flat-pathname path))
	      (setq ef
		    (vci:find-or-make-locked-encached-file
		      :pathname (fs:vc-pathname-flat-pathname path))))
	    (format stream "~2&File ~a  branch ~a~%" path branch)
	    (vc-compare-all-encached-section-versions
	      ef
	      (vci:make-file-version :branch-name branch :branch-version :parent)
	      (vci:make-file-version :branch-name branch :branch-version :newest)
	      stream))))))	  
(defun vc-compare-current-sections-with-ef-version (encached-file ef-version stream)
  (loop for section being the array-elements of
	    (vcfb-section-version-node-array *interval*)
	as section-modified-p = (and (typep section 'vc-section-version-node)
				     (> (node-tick section)
					(send *interval* :save-tick)))
	do
    (when section-modified-p
      (vc-compare-two-section-versions
	section :current  ef-version :multiple-sections t)))
  
  (loop for deleted-section in (vcfb-deleted-section-list *interval*)
	for first = t then nil
	do
    (when first
      (format stream "~2&~'bThe following ~:[section has~;sections have~] been deleted ~
                      in the current buffer:~~%"
	      (> (length (vcfb-deleted-section-list *interval*)) 1)))
    (format stream "~a~%" (vc-section-version-node-legend deleted-section))))

#|  I don't think the following code ever did anything.
    Remove it when I am sure.  (mcw)
  (let ((version-this-buffer-orginated-from (vcfb-vc-file-version *interval*)))
    (loop for section in
	      (vci:encached-file-version-section-order encached-file ef-version)
	  do
      (unless (vci:encached-file-section-not-empty-for-version	;does section exist?
		encached-file section version-this-buffer-orginated-from)
	(format stream "~&~'bThe following section does not exist in the current buffer~~%"
		version-this-buffer-orginated-from)
	(describe-section encached-file ef-version section stream)))))
|#
