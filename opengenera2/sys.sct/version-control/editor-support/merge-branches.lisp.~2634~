;;; -*- Mode: LISP; Base: 10; Package: ZWEI; Syntax: Common-lisp; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Support for taking two branches and merging them together.
;;; This is currently a ZMACS facility, as the result is a zmacs buffer set to 
;;; be saved as the target.
;;;
;;; This merges three vc file versions from the same file (or, at least, that have 
;;; the same space of section id's). It determines an order of sections, and then
;;; prepares a vc file buffer with compare-merge information in sections that 
;;; were changed in both.  What sections were changes is determined by asking the encached 
;;; files, which have to scan for ç records to determine.
;;;
;;; The result is a buffer whose parent version is the target version, and which is
;;; not activated and not listed in the buffer list.  The caller of this, depending
;;; on user locking preferences, will set up the buffer's disposition (and thus name)
;;; and activate it.
;;;
;;; the buffer is actually invented with the cooperation of some funny methods on
;;; vc-file-buffer that simulate revert for this case. A co-routine is established
;;; between this code and methods of the buffer.

;;; The simple form of this assumes versions of the form:
;;;
;;;           ancestor
;;;             |
;;;    ---------
;;;    |       |
;;;   source  target
;;;
;;;
;;;       a more complex case is also supported:
;;;
;;;          ancestor
;;;0	     1 |
;;;    -------
;;;   |      |
;;; prev     |
;;; merge    |
;;; version  |
;;; |       |
;;;  |       |
;;; source  target
;;;
;;;  Only those sections changed since the prev-merge-version in the source are
;;;  assumed to be discrepancies.  Any changes between the ancestor and that point
;;;  are assumed to have already been merged into the target at some point in the past.


0(defun vcfb-merge-version-control-file-branches
       (encached-file ancestor-version target-version source-version
	&key
	((:target-buffer a-target-buffer))
	source-cutoff-version				1;changes before this "don't count"
0	)
  (let (
1	;; get version info objects for the versions.
0	(ancestor-vi (make-instance 'vci:encached-file-version-info
				    :encached-file encached-file
				    :version ancestor-version
				    :relevant-ancestor-version nil))
	(target-vi   (make-instance 'vci:encached-file-version-info
				    :encached-file encached-file
				    :version target-version
				    :relevant-ancestor-version ancestor-version))
	(source-vi   (make-instance 'vci:encached-file-version-info
				    :encached-file encached-file
				    :version source-version
				    :relevant-ancestor-version
				    (or source-cutoff-version
					ancestor-version))))
    1;; first question is section order. The subroutine returns a list of
0    1;; entries, one for each section. The entries look like:
0    1;; (section-id which-version)
0    1;; which-version indicates which version was modified.
0    1;; It can be :source, :target, :both, :neither, :deleted-in-source, or :deleted-in-target
0    (let ((construct-order
	    (vcfb-merge-version-control-file-branches-figure-order
	      ancestor-vi target-vi source-vi))
	  (target-buffer (or a-target-buffer
			     (make-buffer 'vc-file-buffer
					  :activate-p nil :encached-file encached-file
					  'vcfb-merge-target t))))
      (vcfb-setup-for-merge-target target-buffer
				   (length construct-order)
				   (cl:reduce
				     #'max
				     (mapcar #'first construct-order))
				   encached-file)
      (loop for construct-entry in construct-order
	    do
	(vcfb-merge-version-control-file-branches-1-section
	  target-buffer
	  ancestor-version			;this dosen't use version-info's yet.
	  target-version
	  source-version	  
	  construct-entry))
      (vcfb-finish-for-merge target-buffer)
      (vcfb-set-display-trailers target-buffer t)
      target-buffer)))
1;;; Todo: If source buffer actually exists prior to a trivial merge, it is banged over the
;;; head by the following code to make it believe it is now the target buffer, next in
;;; branch.  This may be annoying to the user who wants the source buffer to stay around.

0(defun vcfb-merge-branches-trivially (encached-file source-version target-version)
  (let ((source-branch (vci::file-version-info-branch-name source-version))
	(target-branch (vci::file-version-info-branch-name target-version))
	(a-version (vci:encached-file-find-common-ancestor encached-file
							   source-version
							   target-version)))
    (typein-line "Target branch ~'b~a~ has not been changed since source branch ~'b~a~ ~
                  was ~:[last merged into target~;split off~]."
		 target-branch source-branch
		 (vci::file-versions-equal target-version a-version))
    (multiple-value-bind  (nil source-buffer)
	(find-file (send (send (vci:encached-file-pathname encached-file)
			       :new-pathname
			       :vc-version (vci:file-version-branch-version source-version)
			       :vc-branch (vci:file-version-branch-name source-version))
			 :translated-pathname)
		   t)
1      ;; find-file will create an entry in the zmacs-buffer-name-table for the source
      ;; buffer if it did not already exist.  Don't do this to the user.  Delete the entry0.
      (remove-from-buffer-name-table source-buffer)
      (vcfb-set-buffer-as-trivial-merge-target source-buffer target-version)
      source-buffer)))
(defmethod (vcfb-set-buffer-as-trivial-merge-target vc-file-buffer) (target-version)
1  ;; yet another side-door.
  ;;
  ;;force the save to consider ALL sections
0  (setq treat-all-section-versions-as-modified-at-save-time t)
  1;; but mung the ones that we have some evidence changed.
0  (let ((vi (and (vci:encached-file-ancestor-version-p
		   encached-file vc-file-version target-version)
		 (make-instance 'vci:encached-file-version-info
				:encached-file encached-file
				:version vc-file-version
				:relevant-ancestor-version target-version))))
    (setq branch-locked-p t			;arranged by our caller
	  disposition-strategy :next-in-branch	;but not the original branch
	  version-to-save (vci:make-file-version
			    :branch-name (vci:file-version-branch-name target-version)
			    :branch-version (vci:file-version-branch-version target-version))
	  vc-file-version (vci:copy-file-version target-version)
	  vc-file-info nil
	  tick read-tick)
    (loop for s-v-node being the array-elements of section-version-node-array	
	  do
      (let ((sid (vc-section-version-node-section-id s-v-node)))
	(when (numberp sid)
	  (when (not (vci:encached-file-section-not-empty-for-version
		       encached-file sid target-version))
	    (setf (vc-section-version-node-section-id s-v-node) ':new))
	  (when (and vi (aref  (vci::encached-file-version-info-changed-sections vi) sid))
	    (cl:map nil #'mung-node (node-inferiors s-v-node))
	    (mung-node s-v-node))))))
  (incf tick)					1;mark buffer modified for safety.
0  (incf name-tick)
  (send self :name))	

(defun vcfb-merge-version-control-file-branches-figure-order
       (ancestor-vi target-vi source-vi)
  (let ((target-order-changed
	  (vci:encached-file-version-info-section-order-changed-p target-vi))
	(source-order-changed
	  (vci:encached-file-version-info-section-order-changed-p source-vi))
	(target-changed-sections
	  (vci:encached-file-version-info-changed-sections target-vi))
	(source-changed-sections
	  (vci:encached-file-version-info-changed-sections source-vi)))
      (if (and (not target-order-changed)
	       (not source-order-changed))
	  1;; trivial case - same order, but we don't know what's different
0	  (loop for section-number in (vci:encached-file-version-info-section-order
					ancestor-vi)
		collect `(,section-number
			  ,(cond ((and (aref target-changed-sections section-number)
				       (aref source-changed-sections section-number))
				  :both)
				 ((aref target-changed-sections section-number)
				   :target)
				  ((aref source-changed-sections section-number)
				   :source)
				  (t :neither))
				 nil))
	  1;; we have work to do here.
0	  (let ((ancestor-order
		  (vci:encached-file-version-info-section-order ancestor-vi))
		(target-order
		  (vci:encached-file-version-info-section-order target-vi))
		(source-order
		  (vci:encached-file-version-info-section-order source-vi))
		(results nil))
	      (loop do
		(block restart-loop
		  (when (not (or source-order target-order))
		    (return-from vcfb-merge-version-control-file-branches-figure-order
		      (nreverse results)))
		  (loop as s-s-n-list = source-order then (cdr s-s-n-list)
			as s-s-n = (car s-s-n-list)
			as t-s-n-list = target-order then (cdr t-s-n-list)
			as t-s-n = (car t-s-n-list)
			while (or s-s-n-list t-s-n-list)
			as modified-section-indicator = 
			   (cond ((and s-s-n
				       (aref target-changed-sections s-s-n)
				       (aref source-changed-sections s-s-n))
				  (if (cl:member s-s-n ancestor-order :test #'=)
				      :both
				      :both-no-ancestor))
				 ((and s-s-n (aref target-changed-sections s-s-n))
				  :target)
				 ((and s-s-n (aref source-changed-sections s-s-n))
				  :source)
				 (t :neither))
			do
		    (if (and s-s-n t-s-n (= s-s-n t-s-n))	1; in synch
0			(push `(,s-s-n ,modified-section-indicator nil) results)

			1;; out of synch. knock off inserts/deletes

0			(when (and s-s-n (not (cl:member s-s-n target-order :test #'=)))
			  1;; its either deleted from t or inserted in s
0			  (push
			    (if (cl:member s-s-n ancestor-order :test #'=)
				1;; deleted from t
0				`(,s-s-n :source :deleted-from-target)
				`(,s-s-n :source :inserted-in-source))
			    results)
			  (setq source-order (cdr s-s-n-list)
				target-order t-s-n-list)
			  (return-from restart-loop nil))

			(when (and t-s-n (not (cl:member t-s-n source-order :test #'=)))
			  1;; its either deleted from 0s1 or inserted in 0t
			  (push
			    (if (cl:member t-s-n ancestor-order :test #'=)
				1;; deleted from 0s
				`(,t-s-n :target :deleted-from-source)
				`(,t-s-n :target :inserted-in-target))
			    results)
			  (setq target-order (cdr t-s-n-list)
				source-order s-s-n-list)
			  (return-from restart-loop nil))

			(when (and s-s-n t-s-n)

			  ;; sections have been moved
			  #|(let* ((original-target-order
				   (vci:encached-file-version-info-section-order target-vi))
				 (original-source-order
				   (vci:encached-file-version-info-section-order source-vi))
				 (s-s-n-a-pos (cl:position s-s-n ancestor-order :test #'=))
				 (s-s-n-s-pos (cl:position s-s-n original-source-order
							   :test #'=))
				 (s-s-n-t-pos (cl:position s-s-n original-target-order
							   :test #'=)))

			    (cond  ((= s-s-n-s-pos s-s-n-a-pos)
				    (push `(,s-s-n ,modified-section-indicator
					    :moved-in-target) results)
				    (setq source-order (cdr s-s-n-list)
					  target-order (cl:delete s-s-n t-s-n-list)))

				   ((= s-s-n-t-pos s-s-n-a-pos)
				    (push t-s-n deferred-move-list)
				    (setq source-order s-s-n-list
					  target-order (cdr t-s-n-list)))

				   (t (push `(,s-s-n ,modified-section-indicator
					    :moved-in-target-and-source) results)))
			    (return-from restart-loop nil)))|#
			  (push `(,s-s-n ,modified-section-indicator
					    :moved) results)
			  (setq source-order (cdr s-s-n-list)
					  target-order (cl:delete s-s-n t-s-n-list))
			  (return-from restart-loop nil))
			  
			(error "how do I work this"))
			finally (setq source-order nil target-order nil))))))))

(defmethod (vcfb-setup-for-merge-target vc-file-buffer) (n-sections
							  highest-section
							  encached-file)
  (setq unfinished-merge-target-buffer-p t)
  (setq pathname (send (vci:encached-file-pathname encached-file) :translated-pathname))
  (setq look-here-first 0)
  (setq trailer-major-mode (major-mode-from-keyword *vc-trailer-default-major-mode* t))
  (setq non-trailer-major-mode (major-mode-from-keyword :fundamental t))
  (setq trailer-modes-list nil)
  (setq mode-type 'section)
  (vcfb-set-display-trailers self nil)
  (setq disposition-strategy :next-in-branch)
  (setq user-read-only-p nil)
  (setq read-tick (tick)
	tick *tick*
	save-tick *tick*
	update-tick *tick*)
  1;; force the save to consider ALL sections
0  1;; this is safe, though it should not be strictly necessary.
0  (setq treat-all-section-versions-as-modified-at-save-time t)
  (setq file-trailer-node (make-interval 'vc-section-version-trailer-node
					 :file-trailer-p t
					 :tick read-tick
					 :home-buffer self
					 :section-version-node nil))
  (setq section-version-node-array
	(make-array n-sections :type 'art-q-list :fill-pointer 0)
	ç-section-array (cl:make-array n-sections :fill-pointer 0)
	trailer-node-array (cl:make-array n-sections :fill-pointer 0)
	original-function-spec-array (cl:make-array
					   (1+ highest-section) :initial-element nil)))

;;; This does not get passed version-info because there is no interface to
;;; retrieve the records of a single section that takes advantage of it yet.
(defun vcfb-merge-version-control-file-branches-1-section
       (target-buffer
	ancestor-version
	target-version
	source-version
	section-source-info)
  (scl:destructuring-bind (section-number source comment-flag) section-source-info
    (let ((comment-string
	    (cl:case comment-flag
	      (:deleted-from-target (format nil "Deleted from ~A." target-version))
	      (:inserted-in-target (format nil "Inserted in ~A." target-version))
	      (:deleted-from-source (format nil "Deleted from ~A." source-version))
	      (:inserted-in-source (format nil "Inserted in ~A." source-version))
	      (:moved (format nil "Moved position"))
	      (otherwise nil))))
      (cl:ecase source
	(:neither (vcfb-add-section-for-merge
		   target-buffer t ancestor-version section-number comment-string nil
		   :force-comment (eql comment-flag :moved)))
	(:target (vcfb-add-section-for-merge
		   target-buffer nil target-version section-number comment-string nil))
	(:source (vcfb-add-section-for-merge
		   target-buffer nil source-version section-number comment-string t))
	(:both   (vcfb-add-compare-merged-sections-for-merge
		   target-buffer ancestor-version target-version source-version section-number
		   comment-string))
	(:both-no-ancestor
	         (vcfb-add-compare-merged-sections-for-merge
		   target-buffer nil target-version source-version section-number
		   comment-string))))))

;;;--- this is not very well behaved about file trailer nodes. Fix that up later.
(defmethod (vcfb-add-section-for-merge vc-file-buffer)
	   (neither-p version section-number comment modified-p &key (force-comment nil))
  ;;; add a section-version-node to the file.
  (let ((s-v-node (make-interval 'vc-section-version-node :section-id section-number
				 :home-buffer self
    				 :initial-line t)))
    (with-editor-stream (s :interval s-v-node :no-redisplay t)
      (loop for r being the text-records of encached-file in-version version only-section
		section-number
	    do
	(send s :line-out r)))
    (dbp (node-last-bp s-v-node))

1    ;; Set node0 1tick here since :line-out above mungs node and sets tick to value greater than
    ;; read tick for buffer making it look like every section was modified.
0    (setf (node-tick s-v-node) (if modified-p (1+ read-tick) read-tick))
    (cl:vector-push s-v-node section-version-node-array)
    (let ((t-node
	    (make-interval
	      'vc-section-version-trailer-node
	      :tick read-tick
	      :home-buffer self
	      :file-trailer-p nil
	      :section-version-node s-v-node)))
      (setf (vc-section-version-node-trailer-node s-v-node) t-node)
      (if neither-p
	  (and force-comment comment
	       (with-interval-stream (s (node-last-bp t-node) nil nil)
		 (scl:indenting-output (s 4) (format s "~A~%" comment))))
	  (with-interval-stream (s (node-last-bp t-node) nil nil)
	    (format s "Merged from ~A~%" version)
	    (when comment
	      (scl:indenting-output (s 4) (format s "~A~%" comment)))))
      (cl:vector-push t-node trailer-node-array)
      (cl:vector-push (vci:make-ç-section :section-id (vc-section-version-node-section-id
						       s-v-node)
					  1;; We only set the
0					  1;; interval if the node
0					  1;; has been munged at save
0					  1;; time.
0					  :new-version-interval nil)
		      ç-section-array))))

(defmethod (vcfb-add-compare-merged-sections-for-merge vc-file-buffer)
	   (ancestor-version target-version source-version section-number comment-string)
  (let* ((s-v-node (make-interval 'vc-section-version-node :section-id section-number
				  :home-buffer self
				  :tick (1+ read-tick)
				  :initial-line t))
	 (t-node (make-interval
		   'vc-section-version-trailer-node
		   :tick read-tick
		   :home-buffer self
		   :file-trailer-p nil
		   :section-version-node s-v-node)))
    (setf (vc-section-version-node-trailer-node s-v-node) t-node)
    (cl:vector-push t-node trailer-node-array)
    (cl:vector-push (vci:make-ç-section :section-id (vc-section-version-node-section-id
						      s-v-node)
					1;; We only set the
0					1;; interval if the node
0					1;; has been munged at save
0					1;; time.
0					:new-version-interval nil)
		    ç-section-array)
    (with-interval-stream (t-stream (node-last-bp t-node) (node-last-bp t-node) t)
      (format t-stream "~&Section merged:~%")
      (format t-stream
	      "Ancestor: ~A, Merge source: ~A, Merge Target: ~A~%"
	      ancestor-version source-version target-version)
      (when comment-string
	(scl:indenting-output (t-stream 4) (format t-stream "~A~%" comment-string))))
    ;; so much for preliminaries.
    ;; now we have to load all three versions of the section into temporary intervals.
    (flet ((load-section-version (version)
	     (let* ((i (make-interval 'node :initial-line t))
		    (*interval* i))
	       (with-editor-stream (s :interval i :no-redisplay t)
		 (loop for r being the text-records
			   of encached-file in-version version
			   only-section section-number
		       do (send s :line-out r)))
	       i)))
      (let ((a-i (and ancestor-version (load-section-version ancestor-version)))
	    (t-i (load-section-version target-version))
	    (s-i (load-section-version source-version))
	    (compare-source-info nil))
	1;; the ancestor may not be there, if the same section is added in both.
0	1;; this can happen if you merge the same thing in twice.
0	(when a-i
	  (push
	    `(
	      :interval ,a-i :original t
	      :tag-string "A" :description ,(format nil "~A" ancestor-version))
	    compare-source-info))
	(push
	  `(
	    :interval ,t-i :original nil
	    :tag-string "T" :description ,(format nil "~A" target-version))
	  compare-source-info)
	(push
	  `(
	    :interval ,s-i :original nil
	    :tag-string "S" :description ,(format nil "~A" source-version))
	  compare-source-info)
	(compare-merge::compare-merge-intervals
	  compare-source-info :automatically-resolve-differences t
	  :target-interval s-v-node)))
1    ;; Now the node has its contents.
0    1;; back up one in preparation for adding the diagram line at the end.
0    (dbp (node-last-bp s-v-node))
    (cl:vector-push s-v-node section-version-node-array)))

;;; once all the section version nodes are in place, make the display array
(defmethod (vcfb-finish-for-merge vc-file-buffer) ()
  ;; vain attempt to do something sensible with attribute section business.
  (let ((s-v-0 (aref section-version-node-array 0)))
    (cl:setf (vc-section-version-node-trailer-node s-v-0) file-trailer-node))
  (vcfb-finish-revert self))

(defmethod (vcfb-set-buffer-as-merge-target vc-file-buffer) (a-encached-file a-target-version)
  (remove-from-buffer-name-table self)
  (setq pathname (send (vci:encached-file-pathname a-encached-file) :translated-pathname))
  (setq file-info (vci:encached-file-file-info a-encached-file))
  (setq vc-file-info nil)
  (setq encached-file a-encached-file)
  (with-editor-stream (s :interval self :start ':beginning)
    (let ((cl:*package* si:pkg-user-package)
	  (cl:*print-base* 10.))
      (reparse-attribute-list-internal self s)))
  (setq vc-file-version (vci:copy-file-version a-target-version))
  (let ((version-desired-to-save (vci:copy-file-version a-target-version)))
    (cl:incf (vci:file-version-branch-version version-desired-to-save))
    (setq tick (tick))				1;adding the compare comments is a modification
0    (setq branch-locked-p t)
    (setq unfinished-merge-target-buffer-p nil)
    (vcfb-update-writable-name self version-desired-to-save)
    (add-to-buffer-name-table self)))



1;;; If there is a disconnected buffer whose origin version has been modified, 
;;; or for any other reason someone wants to merge it in against some existing
;;; versions, the simplest thing to do is to write it out into a private branch
;;; and then use the tools above.  The buffer must be disconnected, and it itself
;;; is traded in on the merge target.

0(defun vcfb-merge-buffer-into-file (encached-file buffer ancestor-version target-version)
  ;; first, generate a funny branch name and save out.
  (let ((new-branch
	  (vci:make-file-branch
	    :name (format nil "Temp-~D" (cl:get-universal-time))
	    :private-user-name user-id
	    :parent-file-version (vci:copy-file-version ancestor-version)
	    :author user-id)))
    (make-vc-buffer-modifiable buffer :explicit-action :private-branch
			       :explicit-branch new-branch)
    (format *typeout-window* "~&Saving buffer as version 0 of branch ~A."
	    (vci:file-branch-name new-branch))
    (send buffer :save)				1;out it goes ...
0    (remove-from-buffer-name-table buffer)1	;don't leave this temp buffer in name table
0    (let ((version-in-new-branch (vci:make-file-version
				   :branch-name
				   (vci:file-branch-name new-branch)
				   :branch-version 0)))
      (vcfb-setup-as-merge-target buffer)	1;bang it over the head.
0      (format *typeout-window* "~&Merging temporary branch with ~A." target-version)
      (vcfb-merge-version-control-file-branches encached-file ancestor-version target-version
					       version-in-new-branch
					       :target-buffer buffer)
						1; throw out the private branch? later.
0      (vcfb-set-buffer-as-merge-target buffer encached-file target-version)
      (send buffer :activate)
      (make-buffer-current buffer))))
