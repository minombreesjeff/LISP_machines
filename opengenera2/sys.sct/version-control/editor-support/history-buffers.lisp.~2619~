;;;-*- Mode: LISP; Syntax: Common-lisp; Package: ZWEI; Base: 10; Lowercase: Yes; Default-character-style: (:fix :roman :normal); -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defvar *vchb-default-highlight-change-character-style*
	(si:parse-character-style '(nil :bold nil)))

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; A VC-SECTION-HISTORY-BUFFER contains all of the versions of a particular section.

0(defflavor vc-section-history-buffer
	(section-id				1;the desired section
0	 parent-version1				;version of this section
0	 encached-file1				;Data structure that holds all versions
0	 (section-version-node-array nil)	1;the vc-section-version-0no1des
0	 (non-trailer-major-mode nil)
	 (non-trailer-modes-list nil)
	 (trailer-major-mode nil)
	 (trailer-modes-list nil)
	 (mode-type 'section)
	 parent-section-legend
	 (function-spec nil)1			;name of the section we're looking at
0	 (definition-type nil)
	 highlight-character-style		1;changes are highlighted like this.
0	 )
	(basic-version-control-buffer)
  (:conc-name vchb-)
  (:writable-instance-variables)
  (:initable-instance-variables
   highlight-character-style
   section-id parent-version encached-file
   parent-section-legend definition-type function-spec)
  (:default-init-plist
   :highlight-character-style *vchb-default-highlight-change-character-style*)
  )

(defflavor vc-section-history-node
	((trailer-node nil)			1;a pointer to the trailer node,
0	 legend
	 (file-version nil))
	(vc-hard-section-node-mixin node)
  (:writable-instance-variables trailer-node)
  (:readable-instance-variables file-version legend)
  (:initable-instance-variables legend file-version)  
  (:documentation
   "A node describing a 1section0 of a section history buffer.  The text described
here is the contents of a particular version of the section."))
(defflavor vc-section-history-current-node
	(original-node)
	(vc-section-history-node)
  (:readable-instance-variables)
  (:initable-instance-variables))
(defun vchb-display-section-history (node)
  (let* ((current-version (vcfb-vc-file-version *interval*))
	 (section (section-text-node node)))
    (vchb-display-section-history-given-section current-version section)))
(defun vchb-display-section-history-given-section (current-version current-section)
  (when (eql (vc-section-version-node-section-id current-section) ':new)
    (barf "No history is available for a new section."))
  (let* ((section (vc-section-version-node-section-id current-section))
	 (encached-file (vcfb-encached-file  *interval*))
	 (version-array (vci:encached-file-versions encached-file))
 	 (parent-function (first (buffer-sections current-section)))
	 (ps-legend (diagram-legend current-section))
	 (modified-section
	   (and (numberp (node-tick (vc-hard-section-node-home-buffer current-section)))
		current-section))
	 history-buffer)
    (setq history-buffer
	  (make-instance 'vc-section-history-buffer
			 :section-id section
			 :parent-version current-version
			 :encached-file encached-file
			 :function-spec (when parent-function
					  (send parent-function :function-spec))
			 :definition-type (when parent-function
					    (send parent-function :definition-type))
			 :parent-section-legend ps-legend
			 :name (let ((default-cons-area *zmacs-buffer-area*)
				     (cl:*package* nil))
				 (format nil "~a ~a" ps-legend
					 (send *interval* :name)))))
    
    ;; delete all versions in version-array except for versions in the current branch
    
    (cl:delete (vci:file-version-branch-name current-version)
	       version-array
	       :key #'vci:file-version-branch-name
	       :test-not #'string-equal)
    
    (let ((temp-array
	    (cl:remove-if-not
	      #'(lambda (v)
		  (declare (sys:downward-function))
		  (vci:encached-file-section-not-empty-for-version encached-file section v))
	      version-array)))
      (vchb-version-history-read-in-versions history-buffer temp-array modified-section))
    (make-buffer-current history-buffer)))

(defflavor vchb-temp-section-interval
	(version)
	(node)
  (:readable-instance-variables)
  (:initable-instance-variables))  

(compile-flavor-methods vchb-temp-section-interval)
(defun-in-flavor (vchb-collect-version-intervals vc-section-history-buffer) (versions)
  (let ((version-intervals (make-array (cl:length versions))))
    (loop for v being the array-elements of versions
	  for vi from 0
	  do
      (cl:setf (aref version-intervals vi)
	       (let ((int (make-interval 'vchb-temp-section-interval :initial-line t
					 :version v)))
		 (with-open-stream (s (open-interval-stream int))
		   (write-file-section-to-stream encached-file v section-id s))
		 int)))
    version-intervals))
(defun-in-flavor (vchb-make-compared-section vc-section-history-buffer)
		 (from to target)
  (with-interval-stream (s target)
    (compare-merge::compare-2-intervals-highlighting-differences
      from to s :character-style highlight-character-style)))
1;;; necessitated by lack of help from SCT.
0(defvar *system-all-component-cache* nil)
(defun get-all-system-component-lists (system)
  (multiple-value-bind (plist all-versions)
      (sct:get-system-defined-versions system :error-p nil)
    (ignore plist)
    (setq all-versions (cl:stable-sort all-versions #'<))
    (or (cdr (cl:assoc `(,(sct:system-name system) ,@all-versions)
		       *system-all-component-cache* :test #'equal))
	(progn
	  (setq *system-all-component-cache*
		(cl:delete (sct:system-name system) *system-all-component-cache*
			   :key #'caaar))
	  (setq *system-all-component-cache*
		(cl:acons `(,(sct:system-name system) ,@all-versions) 
			  (let ((all-component-alist nil))
			    (loop for v in all-versions
				  as pathnames =
				     (sct:get-all-system-input-files
				       system :version v :include-components nil)
				  do
			      (when pathnames
				(loop for pathname in pathnames
				      when (fs:pathname-vc-p pathname)
					do
					  (push (list pathname v) all-component-alist))))
			    all-component-alist)
			  *system-all-component-cache*))))))
(defmethod (vcfb-display-bubble-diagram-lines-p vc-section-history-buffer) () t)

1;;; Read in all of the versions of section specified by section-id in the current
;;; branch.  The versions of the current branch are in array versions.

0(defmethod (vchb-version-history-read-in-versions vc-section-history-buffer)
	   (versions modified-section)
  1;; modified-section will be NIL if the context buffer isn't modifiable.
0  (setq look-here-first 0)
  (setq trailer-major-mode (major-mode-from-keyword *vc-trailer-default-major-mode* t))
  (setq trailer-modes-list nil)
  (setq non-trailer-major-mode (major-mode-from-keyword :fundamental t))
  (setq mode-type 'section)
  
  (let ((n-sections (cl:length versions))
	(system-for-file
	  (send
	    (send (vci:encached-file-pathname encached-file) :generic-pathname)
	    :get 'sct:system)))
    (ignore system-for-file)
    (setq section-version-node-array (make-array n-sections :fill-pointer 0))
    
    ;; Iterate over the file looking for the one section in section-id for each version
    ;; in array versions.  
    ;; For each section, create a vc-section-history-node and fill in the text
    ;; For each section after the first, put a separating-line-diagram before it
    ;; and make the line-next and line-previous of that diagram point appropriately
    
    (let ((current-node nil)
	  (version-intervals (vchb-collect-version-intervals versions)))
      (labels ((setup-node (version)
		 ;; Start of a new section
		 (setq current-node
		       (if (eql version ':current)
			   (make-interval 'vc-section-history-current-node
					  :file-version nil
					  :tick *tick*
					  :initial-line t
					  :home-buffer self
					  :legend "Current"
					  :original-node modified-section)
			   (make-interval 'vc-section-history-node 
					  :file-version version
					  :tick *tick*
					  :initial-line t
					  :home-buffer self
					  :legend (format nil "~a" version))))
		 (cl:vector-push-extend current-node section-version-node-array)
		 (when (vci::file-version-p version)
		   (let* ((trailer (vci::file-version-info-trailer version))
			  (trailer-text
			    (and trailer
				 (loop for ps being the array-elements of
					   (vci::file-version-trailer-per-section-array
					     trailer)
				       when (= (vci::file-version-trailer-ps-section-id ps)
					       section-id)
					 do (return (vci::file-version-trailer-ps-description
						      ps))))))
		     (when (and trailer-text (not (zerop (string-length trailer-text))))
		       (let ((trailer-node 
			       (make-interval
				 'vc-section-version-trailer-node
				 :tick *tick*
				 :home-buffer self
				 :initial-line t
				 :file-trailer-p nil
				 :section-version-node current-node))
			     (author (vci::file-version-info-author version))
			     (version-creation-date
			       (vci::file-version-info-creation-date version)))
			 (multiple-value-bind (secs minutes hours day month year)
			     (time:decode-universal-time version-creation-date)
			   (insert (node-last-bp trailer-node)
				   (format nil "~%Version ~a was created by ~a on ~d/~d/~d ~
                                                 at ~d:~2,'0d:~2,'0d~%"
					   version author month day year hours minutes secs)))
			 (insert (node-last-bp trailer-node) trailer-text)
			 (setf (vc-section-history-node-trailer-node current-node)
			       trailer-node)))))))
	;; Use the source buffer's attribute list for the section history buffer
	(setup-node "Attributes")
	(with-open-stream (s (open-interval-stream current-node))
	  (write-file-section-to-stream encached-file parent-version 0 s))
	(with-open-stream
	  (first-section-is (open-interval-stream current-node))
	  (let ((cl:*package* si:pkg-user-package)
		(cl:*print-base* 10.))
	    (reparse-attribute-list-internal self first-section-is)))
	;;there is already a binding established of *package*
	(setq cl:*package* (send self :get ':package))
	1;; ok, we have to fill each node by running a comparison.
0	(setup-node (aref versions 0))		1;first version, no comparison.
0	(copy-interval (aref version-intervals 0) nil nil current-node)
	(loop with temp-interval = (make-interval 'node :initial-line t)
	      with last-vi = 0
	      for vi from 1 below (cl:length version-intervals) 
	      as comparison = 
		 (vchb-make-compared-section (aref version-intervals last-vi)
					     (aref version-intervals vi)
					     temp-interval)
	      do
	  (when (plusp (compare-merge::compare-number-of-differences comparison))
	    (setup-node (vchb-temp-section-interval-version (aref version-intervals vi)))
	    (copy-interval temp-interval nil nil current-node)
	    (setq last-vi vi))
	  (let ((*interval* temp-interval))
	    (delete-interval temp-interval))
	      finally
		(when modified-section
		  1;; this includes a diagram line.
0		  (let* ((copy-without-diagram
			   (copy-interval (node-first-bp modified-section)
					  (node-last-bp modified-section)
					  t))
			 (comparison (vchb-make-compared-section
				      (aref version-intervals last-vi)
				      copy-without-diagram
				      temp-interval)))
		    (when (plusp (compare-merge::compare-number-of-differences comparison))
		      (setup-node :current)
		      (copy-interval temp-interval nil nil current-node)))))
	  )))
  (vchb-finish-read-in-versions self)
  (when (eq self *interval*) (set-attribute-state-from-buffer self))
  (setq tick :read-only))

1;;--- we need another flavor of diagram that will present the version sensitive as
;;--- "edit that version"

0(defmethod (vchb-finish-read-in-versions vc-section-history-buffer) ()
  1;; * 2 is enough room for as many trailers as we could have.
0  (setq display-array (make-array (* 2 (cl:length section-version-node-array))
				  :fill-pointer 0 :adjustable t))
  (let ((temp-index 0))
						;do we nee this? (without-interrupts
    (loop for first = t then nil
	  for s-v-node being the array-elements of section-version-node-array
	  as t-node = (vc-section-history-node-trailer-node s-v-node)
	  as s-v-caption = (make-diagram-line *vc-section-separating-diagram-flavor*)
	  as s-v-title   = (make-diagram-line *vc-section-title-diagram-flavor*
					      :associated-node s-v-node
					      :title (vc-section-history-node-legend
						       s-v-node))
	  as t-caption   = (and t-node
				(make-diagram-line *vc-section-separating-diagram-flavor*))
	  as t-title     = (and t-node (make-diagram-line
					 *vc-section-title-diagram-flavor*
					 :associated-node nil
					 :title (format nil "Modification Comments for ~a"
							(vc-section-history-node-legend
							  s-v-node))))
	  do
      
      1;; put in the section title line0s1 at the beginning of each version section
0      1;; and each trailer section
0      
      (vcb-add-diagram-lines-to-node s-v-node (and (not first) s-v-title) s-v-caption)
      (when t-node
	(vcb-add-diagram-lines-to-node t-node t-title t-caption))
      
      (cl:setf (cl:getf (line-plist s-v-title) 'vc-type) 'section)
      (cl:setf (vc-hard-section-node-diagram-line s-v-node) s-v-title)
      (setf (aref display-array temp-index) s-v-node)
      (when t-node
	(setf (aref display-array (1+ temp-index)) t-node))
      (setq temp-index (+ (if t-node 2 1) temp-index))
      
      (setf (fill-pointer display-array) temp-index)))
  
  (move-bp last-bp
	   (node-last-bp
	     (aref display-array (1- (fill-pointer display-array)))))
  
  (setq first-bp
	(copy-bp (node-first-bp (aref section-version-node-array 0)) :normal self))
  
  (setq saved-point (copy-bp first-bp :normal self))
  (setq saved-mark (copy-bp first-bp :normal self))
  (setq saved-window-start-bp (copy-bp first-bp :normal self))
  
  1;; The following prevents redisplay from exploding.  Why the DIS-TEXT in REVERT
0  1;; is insufficient is a mystery to me.
0  (when (and (variable-boundp *interval*) (eq self *interval*))
    (move-point saved-point)		      
    (move-mark saved-mark)
    (cl:setf (window-mark-p *window*) nil)
    (move-bp (window-start-bp *window*) (point))
    (set-attribute-state-from-buffer self)))

(defmethod (diagram-legend vc-section-history-node) (&optional ignore)
  legend)

(defmethod (:set-read-only vc-section-history-buffer) ()
  (barf "Section History Buffers are always read only"))

(defmethod (:set-read-write vc-section-history-buffer) (&optional ignore)
  (barf "Section History Buffers are always read only"))  

1;;; There are no soft sections in a vc-section-history-buffer.
;;; This probably should some day return the name of the definition(s)
;;; in each of the vc-section-history-nodes in the buffer

0(defmethod (buffer-sections vc-section-history-buffer) ()
  nil)

(defmethod (buffer-change-point-top-level-node vc-section-history-buffer) (target-node)
  ;; play games with the major mode.
  (let ((was-trailer (eq mode-type 'trailer))	;wherever we were last.
	(target-trailer (cl:typep target-node 'vc-section-version-trailer-node)))
    (when (neq was-trailer target-trailer)
      ;; start with things that don't depend on whether we are the current buffer.
      (setq mode-type (if target-trailer 'trailer 'section))
      (send self :putprop (if target-trailer trailer-major-mode
			      non-trailer-major-mode)
	    :major-mode)
      (if (or (eq self *interval*) (eq self (interval-buffer *interval*)))
	  (progn
	    (if was-trailer
		(setq trailer-modes-list *mode-list*
		      trailer-major-mode *major-mode*)
		(setq non-trailer-modes-list *mode-list*
		      non-trailer-major-mode *major-mode*))
	    (un-set-modes)
	    (set-modes
	      (if target-trailer trailer-modes-list non-trailer-modes-list)
	      (if target-trailer trailer-major-mode non-trailer-major-mode))
	    (redisplay-mode-line))
	  ;; If we aren't *interval*, just set our internal state
	  (setf (buffer-saved-mode-list self)
		(if target-trailer trailer-modes-list
		    ;; if modification comments have never been under the point,
		    ;; the non-trailer info will never have been set up.
		    ;; this assumption (that the buffer always starts out in
		    ;; 'section) may be bogus.
		    (or non-trailer-modes-list (buffer-saved-mode-list self))))))))

;;; This produces the text that will appear under the "File Version" column
;;; for c-x c-b

(defmethod (:description vc-section-history-buffer) ()
  (format nil "~a" parent-section-legend))
(define-presentation-to-editor-command-translator
  vc-edit-file-for-section-history-node
  (vc-section-history-node "Edit File Version" *zmacs-comtab*
			   :gesture :select
			   :documentation ((node)
					   (format nil "Edit version ~A of ~A"
						   (vc-section-history-node-file-version node)
						   (vci:encached-file-pathname
						     (vchb-encached-file
						       (vc-hard-section-node-home-buffer node)
						       )))))
  (node)
  `(find-file ,(send (vci:encached-file-pathname
		      (vchb-encached-file
			(vc-hard-section-node-home-buffer node)))
		    :new-pathname
		    ':vc-branch (vci:file-version-branch-name
				  (vc-section-history-node-file-version node))
		    ':vc-version (vci:file-version-branch-version
				   (vc-section-history-node-file-version node)))))
(define-presentation-to-editor-command-translator
  vc-show-section-information-for-history-node
  (vc-section-history-node "Show Version Information" *zmacs-comtab*
			   :gesture :middle
			   :documentation "Show Version Information")
  (node)
  `(display-version-information ,node))
(defun display-version-information (node)
  (let* ((version (vc-section-history-node-file-version node))
	 (author (vci::file-version-info-author version))
	 (version-creation-date (vci::file-version-info-creation-date version))
	 (hs-legend (vchb-parent-section-legend (vc-hard-section-node-home-buffer node))))
    
    (multiple-value-bind (seconds minutes hours day month year)
	(time:decode-universal-time version-creation-date)
      (format *typeout-window* "~%Version ~a of ~a~%~
                                was created by ~a on ~d/~d/~d at ~d:~2,'0d:~2,'0d~%"
	      (vc-section-history-node-legend node) hs-legend author
	      month day year hours minutes seconds))))
    
(define-presentation-to-editor-command-translator
  vc-edit-file-for-current-section-history-node
  (vc-section-history-current-node "Edit Current Buffer" *zmacs-comtab*
			   :gesture :select
			   :documentation ((node)
					   (format nil "Edit current buffer for ~A"
						   (vci:encached-file-pathname
						     (vchb-encached-file
						       (vc-hard-section-node-home-buffer node)
						       )))))
  (node)
  `(edit-hard-section-node ,(vc-section-history-current-node-original-node node)))
