;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; This file contains support for viewspec buffers.
;;; The easiest kind of viewspec buffer is one where each of the sections
;;; is borrowed from some other buffer.
;;; the major mode and other necessary information can be snatched from
;;; the home buffer.
;;;
;;; The more difficult variety is a buffer constructed of sections that aren't
;;; resident in a convienient "home buffer".
;;; The viewspec is their home, and they each know their modes and attributes.
;;; ...
;;; We don't need a :make-current or a make-not-current, since we assume that the 
;;; saved mode list was updated to go with the point as of the last time we were current.

0(defflavor basic-vc-shared-viewspec-buffer
	()
	(basic-version-control-buffer)
  :abstract-flavor)
1;;; We do this the "hard way," by assuming that the new node and the old node
;;; are completely different.

0(defmethod (buffer-change-point-top-level-node basic-vc-shared-viewspec-buffer) (target-node)
  1;; whether or not we are *interval*, we have to keep :major-mode accurate.
0  1;; the rest depends on whether we are *interval*.
0  (let ((target-home-buffer (vc-hard-section-node-home-buffer target-node)))
    (send self :putprop (send target-home-buffer :major-mode) :major-mode)
    (if (or (eq self *interval*) (eq self (interval-buffer *interval*)))
	(progn
	  (un-set-modes)
	  (set-modes (buffer-mode-list target-home-buffer)
		     (send target-home-buffer :major-mode))
	  (redisplay-mode-line)
	  (set-attribute-state-from-buffer target-home-buffer))
	1;; If we aren't *interval*, just set our internal state
0	(setf (buffer-saved-mode-list self) (buffer-mode-list target-home-buffer)))))

1;;; Here is the node for the tough buffer.
;;; There are some very tough problems here, such as support for setting the
;;; attributes.  For now, we assume that the attributes of such a node are static.
;;; other questions include how Mung should work, whether there can be shared,
;;; and a host of others. Yetch. Luckily, we don't need these yet.
0(defflavor basic-vc-own-state-hard-section-node-mixin
	(diagram-line
	 (zmacs-section-list nil))
	(flavor:property-list-mixin)
  :abstract-flavor
  (:required-flavors node)
  (:conc-name vc-hard-section-node-)		1;shares protocol, mostly.
0  (:readable-instance-variables
   (zmacs-section-list zmacs-section-list)
   diagram-line)
  (:writable-instance-variables
   (zmacs-section-list zmacs-section-list)
   diagram-line)
  (:initable-instance-variables)
  (:required-methods vc-hard-section-node-attribute-section-p))
(defmethod (buffer-sections basic-vc-own-state-hard-section-node-mixin) ()
  inferiors)
(defmethod (:inferior-to-node basic-vc-own-state-hard-section-node-mixin) (node)
  (ignore node)
  nil)
