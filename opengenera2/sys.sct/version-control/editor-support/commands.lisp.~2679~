;;; -*- Mode: LISP; Package: ZWEI; Base: 10; Syntax: Common-lisp; Lowercase: Yes -*-
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Assorted ZWEI functions that are part of version control.  

;;; ---To Do

;;; ---This next needs to outsmart the tendency of FIND-FILE to think that the desired
;;; ---file is already in a version controlled buffer.

0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defcom com-find-file-ignore-version-control "Visits a file in its own buffer.
This is like Find File but reads the file ignoring version control and
what its attribute list says.

It prompts for a filename from the minibuffer, offering a default based on the
previous file name read.  It creates a buffer with the same name as the name
and type of the file and then selects it.  For files already in a buffer, it
selects the buffer. For a filename specifying a file that doesn't exist, it
creates and selects a buffer, marking it as a new file.  " ()
  (let ((pathname (accept-defaulted-pathname
		    "Find file in Fundamental mode dodging version control:"
		    (pathname-defaults))))
    (let ((*zmacs-force-fundamental-mode* t)
	  (*zmacs-force-ignore-version-control* t)
	  (*revert-file-not-found-is-an-error*
	    (and (not *numeric-arg-p*) *find-file-not-found-is-an-error*)))
      (find-file pathname t :query)))
  (maybe-display-directory ':read)
  dis-text)
(defcom com-create-version-controlled-file-buffer "Create a new version controlled buffer
associated with a pathname. The bufer is initialized with two sections: one for the 
attribute list, and one for other contents.  The disk file is not created until the first
save.  With a numeric argument, you are prompted for the name of the initial branch." ()
  (let ((pathname (accept-defaulted-pathname "Pathname for new file:" (pathname-defaults)))
	(initial-version nil))
    (setq pathname (fs:merge-pathnames pathname nil nil))
    (setq initial-version
	  (if *numeric-arg-p*
	      (vci:make-file-version
		:branch-name (typein-line-accept 'cl:string :default
						 vci:*default-initial-branch-name*
						 :prompt "Initial branch name")
		:branch-version 0)
	      (vci:make-file-version
		:branch-name vci:*default-initial-branch-name*
		:branch-version 0)))
    (let ((new-buffer (make-empty-vc-file-buffer pathname initial-version)))
      (send new-buffer :activate)		; its real now.
      (make-buffer-current new-buffer)))
  dis-none)
(defcom com-split-hard-section
	"Creates a new version controlled file section.  The point indicates
a place in the buffer where a new section division will be made.  If the point points to
a diagram line separating sections, a new, empty, section will be created just after the
diagram.  If the point indicates the last line in the buffer, a new, empty, section will
be created at the end of the buffer.  If the point is inside the text of a section, then 
that section will be split into two hard sections.  If the point is at the beginning of 
a line or anywhere on a line, the new hard section will be created before the line.  
If the point is at the end of a line, the new hard section will be created after the 
line.  If the point is in a modification comment, a new, empty hard section will be 
created after the hard section containing the modification comment.  Ordinarily, the top 
part of the section remains the old section, and the bottom becomes a new section.  
However, a numeric argument requests the other behavior." ()

(let ((trailers-on-p (vcfb-display-trailers *interval*)))
  (vcfb-set-display-trailers *interval* nil)
  (vcfb-split-section *interval* (point) (if *numeric-arg-p* :new :old))
  (vcfb-set-display-trailers *interval* trailers-on-p))
  dis-all)
(defcom com-kill-hard-section
	"Kills the current section from the buffer, pushing it on the kill
ring. If the point is on a diagram line, then the following section is killed." ()
  (unwind-protect
      (progn
	(let ((s-v-node (section-text-node (bp-top-level-node (point)))))
	  (unless s-v-node
	    (barf
	      "It is not possible to kill the modification comments for a section."))
	  (when (bp-= (node-first-bp s-v-node) (interval-first-bp *interval*))
	    (barf "The attribute section may not be killed."))
	  (move-point (bp-line (node-first-bp s-v-node)) 0)
	  (move-mark (bp-line (node-last-bp s-v-node)) 0)
	  (setf (window-mark-p *window*) t)
	  (must-redisplay *window* dis-bps)
	  (redisplay *window* :point 0)

	  (when (y-or-n-p "Kill the section indicated by the region? ")
	    
	    (move-point (forward-line (point) -1 t *interval*))
	    (kill-vc-section s-v-node *kill-history*)
	    (setq *kill-history-user* *current-command-loop*))
	  (setf (line-tick (bp-line (node-first-bp s-v-node))) (tick))	1;clue redisplay
0	  (must-redisplay *window* dis-line (bp-line (node-first-bp s-v-node)) 0)
	  (move-mark (point)))))		;we lose old region - is this OK?
  dis-none)					1;the redisplay is already set.
0(defcom com-set-buffer-disposition
	"Queries the user for the disposition of a version controlled buffer.
This command is valid for read-only and disconnected buffers.  It allows the user
to select between saving the buffer as the next version of its source branch,
saving the buffer as the first version of a new public or private branch,
or merging it onto the end of some other existing branch.  For unmodified 
buffers, it also offers the choice of disconnecting them." ()
  (vcfb-make-buffer-modifiable *interval*)	; a misnomer for the disconnected case.
  dis-none)					; the window will get must-redisplayed
1						; if anything happens.
0(defcom com-show-modification-comments
	"Makes the trailer commentary for each version control section visible
and editable on the screen. Hide Modification Comments undoes this." ()
  (vcfb-set-display-trailers *interval* t)
  dis-all)
 
(defcom com-hide-modification-comments
	"Makes the trailer commentary for each version control section invisible.
Show modification comments undoes this." ()
  (vcfb-set-display-trailers *interval* nil)
  dis-text)
(defcom com-show-section-history
	"Displays all of the past versions of this section in a new buffer" ()
  (vchb-display-section-history (bp-top-level-node (point)))
  dis-text)
(defcom com-show-section-authors
	"Show the creation and modification history of this section including author, version,
date and time.  With a numeric argument, show the authors for the current branch only." ()
  (show-section-authors (section-text-node (bp-top-level-node (point)))
			:for-branch (when *numeric-arg-p*
				      (vci::file-version-branch-name
					(vcfb-vc-file-version *interval*))))
  dis-none)
(defcom com-list-modified-sections
	"Displays a list of any definitions that have been edited in the current buffer.  
Use c-. (Next Possibility) to start editing the definitions in the list.
Arg = 1 means list definitions changed since the file was last read (this is the default).
Arg = 2 means list definitions changed since the file was last saved." ()
	(vc-list-modified-sections))
(defcom com-list-deleted-sections
	"Displays a list of all of the sections that have been deleted since the file was created.  
With a numeric argument, lists only the sections that have been deleted in the current branch" ()
  (let* ((ef (vcfb-encached-file *interval*))
	 (deleted-sections-in-buffer (vcfb-deleted-section-list *interval*))
	 (all-versions (vci::encached-file-versions ef))
	 (deleted-section-found-p deleted-sections-in-buffer)
	 (current-branch (vci::file-version-branch-name (vcfb-vc-file-version *interval*))))

    (when deleted-section-found-p 
      (format *typeout-window* "~2&The following sections have been deleted:~2%"))

    ;; First, list the sections deleted in the current buffer.
    (loop for node in deleted-sections-in-buffer
	  do
      (format *typeout-window* "~a was deleted in the current buffer~%"
	      (vc-section-version-node-legend node)))

    ;; Now, look at at the old versions.  For each, compare its section list with that of
    ;; its parent to determine which sections have been deleted.
    (loop for version being the array-elements of all-versions downto 1
	  with header-not-printed = t
	  as parent = (vci::file-version-info-parent-version version)
	  as section-efvi = (make-instance 'vci:encached-file-version-info
					   :encached-file ef 
					   :version version)
	  as parent-efvi = (make-instance 'vci:encached-file-version-info
					  :encached-file ef 
					  :version parent)
	  as current-sections = (vci:encached-file-version-info-section-order section-efvi)
	  as parent-sections = (vci:encached-file-version-info-section-order parent-efvi)
	  as deleted-sections = (cl:remove-if #'(lambda (sid)
						  (member sid current-sections))
					      parent-sections)
	  do
      (when (or (null *numeric-arg-p*)
		(string-equal current-branch (vci::file-version-info-branch-name parent)))
	
	(when (and header-not-printed deleted-sections (not deleted-sections-in-buffer))
	  (format *typeout-window* "~2&The following sections have been deleted:~%")
	  (setq header-not-printed nil))
	(setq deleted-section-found-p (or deleted-sections deleted-section-found-p))
	(flet ((load-section-version (version section)
		 (let* ((i (make-interval 'node :initial-line t))
			(*interval* i))
		   (with-editor-stream (s :interval i :no-redisplay t)
		     (loop for r being the text-records
			       of ef in-version version
			       only-section section
			   do (send s :line-out r)))
		   i)))
	  (loop for section in deleted-sections
		as section-text = (load-section-version parent section)
		as start-of-definition =
		   (or (forward-definition (node-last-bp section-text) -1)
		       (node-first-bp section-text))
		do
	      (scl:filling-output (*typeout-window* )
		(format *typeout-window* "~&~a was deleted in version ~a"
			(multiple-value-bind (fspec type)
			    (get-definition-function-spec start-of-definition)
			  (section-definition-name fspec type))
			parent))))))
    (unless deleted-section-found-p
      (format *typeout-window*
	      "No sections have been deleted ~:[~;in the current branch ~]~
               since the file was created.~%" *numeric-arg-p*)))
  dis-none)
;;; Compare the this section to the another version of the same section.

(defcom com-show-section-changes
	"Compares the current hard section with the last saved version of the hard section 
that was modified.  With a numeric argument, compares any saved version of this section to 
any other saved version of this section." ()
  (show-section-changes (section-text-node (bp-top-level-node (point)))))
(defcom com-show-all-section-changes
	"Displays the changes to all buffer sections.  If the buffer has been modified and no
numeric argument was supplied, compares the current contents of the buffer with the last saved
version.  If the buffer has not been modified and no numeric argument was supplied, compares
the last saved version of the file with the previous version.  With a numeric argument, 
compare any saved version of this file to any other saved version of this file." ()
  
  (let* ((last-saved-version (vcfb-vc-file-version *interval*))
	 (encached-file (vcfb-encached-file *interval*))
	 (buffer-modified-p (send *interval* :modified-p :for-listing))
	 (version-1 (cond (*numeric-arg-p* (choose-vc-file-version
					     encached-file nil t
					     :branch (vci:file-version-branch-name
						       last-saved-version)
					     :prompt "Compare version"
					     :force-prompt t))
			  
			  (buffer-modified-p :current)
			  (t last-saved-version)))
	 
	 (version-2 (cond (*numeric-arg-p* (choose-vc-file-version
					     encached-file nil t :prompt "with version"
					     :print-branches-p nil
					     :force-prompt t))
			  (buffer-modified-p last-saved-version)
			  (t (vci::encached-file-previous-version
			       encached-file last-saved-version)))))
    
    (cond (*numeric-arg-p*
	   (vc-compare-all-encached-section-versions
	     encached-file version-1 version-2 *typeout-window*))
	  (buffer-modified-p
	   (vc-compare-current-sections-with-ef-version
	     encached-file version-2 *typeout-window*))
	  ((and version-1 version-2)
	   (format *typeout-window* "~&The current buffer has not been modified.~%")
	   (vc-compare-all-encached-section-versions
	     encached-file version-1 version-2 *typeout-window*))))
  
  (format *typeout-window* "~2&Done.")
  dis-none)
(defcom com-show-all-section-changes-of-system
	"Displays the changes to all buffer sections for all files in an SCT system.  
With a numeric argument, include component systems." ()
  (vc-show-all-section-changes-of-system ':special-buffer :include-components *numeric-arg-p*)dis-none)
1;;;--- needs: remove private branches when they are merged -- mark branch successor.
0(defcom com-merge-vc-file-branches
	"Merges the changes in two branches of a version controlled file,
making the result the latest version in one of the branches.  The branch where the merged
version is saved is called the target branch.  The other branch is called the source branch.
The command prompts you for both branches, merges them, and creates a new buffer that is
set to save as the latest version of the target branch" ()
  (let* ((pathname (accept-defaulted-pathname "VC File:" (pathname-defaults)))
	 (ef
	   (condition-case (error)
		(vci:find-or-make-locked-encached-file :pathname pathname :new-file-p nil)
	      (vci:non-version-controlled-file
		(barf "~A is not a version controlled file."))))
	 (source-branch
	   (typein-line-accept
	     `((vci:file-branch-name :relative-to-encached-file ,ef))
	     :prompt "Source branch"
	     :default (and (buffer-version-controlled-p *interval*)
			   (eq ef (vcfb-encached-file *interval*))
			   (fs:pathname-vc-branch (send *interval* :default-pathname)))))
	 (target-branch
	   1;; --- this could restrict the set of branches to those that have
0	   1;; --- some common ancestor with s-version.
0	   1;; --- If some day, we allow merging with versions in more than one file,
0	   1;; --- set 0:print-branches-p 1to 0t
	   (typein-line-accept
	     `((vci:file-branch-name :relative-to-encached-file ,ef))
	     :prompt "Target branch"
	     :default (let ((source-branch-parent (vci::encached-file-branch-parent-version
						    ef
						    source-branch)))
			(and source-branch-parent
			     (vci:file-version-branch-name source-branch-parent)))))
	 (previous-merge-info
	   (and ef
		(vc-encached-file-get-branch-merge-record ef source-branch target-branch)))
	 t-buffer
	 (existing-buffer (find-buffer-named (send pathname :new-pathname
				      ':vc-branch target-branch ':vc-version :newest))))
    (when existing-buffer
      (cond ((not (send existing-buffer :modified-p :for-listing))
	     (let ((*kill-buffer-prompts-for-new-buffer* nil))
	       (send existing-buffer :kill)))
	    ((eql (vcfb-disposition-strategy existing-buffer) :next-in-branch)
	     (barf "Target branch ~a is already locked for next in branch." target-branch))))

    (setq t-buffer (vc-merge-file-branches-into-buffer
		     ef
		     (vci:branch-last-version ef source-branch)
		     (vci:branch-last-version ef target-branch)
		     :source-cutoff-version
		     (and previous-merge-info (first previous-merge-info))
		     :target-cutoff-version
		     (and previous-merge-info (second previous-merge-info))))

    (if (null t-buffer)
	(barf (format nil "Done.  Source branch ~'b~a~ is the parent of target branch ~
                           ~'b~a~.  No merge needed." source-branch target-branch))
	(vcfb-set-buffer-as-merge-target t-buffer ef
					 (vci:branch-last-version ef target-branch))
	(setf (vcfb-ef-for-merge-in-progress t-buffer) ef)
	(setf (vcfb-source-branch-for-merge-in-progress t-buffer)
	      (vci:branch-last-version ef source-branch))
	(setf (vcfb-target-branch-for-merge-in-progress t-buffer)
	      (vci:branch-last-version ef target-branch))
	(send t-buffer :activate)
	(make-buffer-current t-buffer))
    dis-text))
(defun vc-merge-file-branches-into-buffer (encached-file source-version target-version
					   &key source-cutoff-version target-cutoff-version)
  (let ((target-buffer nil))
    (let ((a-version
	    (vci:encached-file-find-common-ancestor encached-file
						    source-version
						    target-version))
	  (target-cutoff-version+1
	    (when target-cutoff-version
	      (vci::make-file-version
		:branch-name (vci::file-version-branch-name target-cutoff-version)
		:branch-version (1+ (vci::file-version-branch-version
				      target-cutoff-version))))))

      (unless a-version
	(barf "~A and ~A have no common ancestor."
	      source-version target-version))

      ;; If source has not been changed since target was split off, nothing to do
      (when (and (vci:file-versions-equal a-version source-version)
		 (eq source-version
		     (vci::encached-file-branch-parent-version
		       encached-file (vci:file-version-branch-name target-version))))
	(return-from vc-merge-file-branches-into-buffer nil))
      
      ;; If source has not been changed since cutoff version, nothing to do
      (when (and source-cutoff-version
		 (vci:file-versions-equal source-version source-cutoff-version))
	(return-from vc-merge-file-branches-into-buffer nil))

      (unwind-protect-case ()
	  (let ((lock-result
		  (vci:lock-branch-for-modification encached-file target-version)))
	    (when (eq lock-result :already-locked)
	      (barf "Version ~A is locked by someone else." target-version))
	    (setq target-buffer
		  (if (or (vci:file-versions-equal
			    target-version a-version) ;; no changes in target
			  (and target-cutoff-version+1
			       (vci:file-versions-equal target-version
							target-cutoff-version+1)))
		      (vcfb-merge-branches-trivially
			encached-file source-version target-version)
		      (vcfb-merge-version-control-file-branches
			encached-file a-version target-version source-version
			:source-cutoff-version source-cutoff-version)))
	    (send target-buffer :activate))
	(:abort
	  ((2 0 (NIL 0) (NIL :ROMAN NIL) "CPTFONT")vci0:2unlock0-2branch0 2encached0-2file0 2target0-2version0))))
(3 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB") 0   2target3-2buffer0))
(defcom com-merge-vc-system-branches
	"Merges all changes in one branch of a system into another branch.
Selects the resulting buffers as a tag table. With a numeric argument.
includes component systems."
	()
  (vc-merge-system-branches :include-components *numeric-arg-p*)
  dis-none)
1;;; Wholesale Branch Merging
;;; Takes all the source files in a system.
;;; For each VC file, merge from a specified branch to a specified branch.
;;; and construct a tag table with the result!
0(defun vc-merge-system-branches (&key include-components)
  (let* ((system
	   (let ((s (typein-line-accept '((dw:type-or-string
					    ((and ((sct:system))
						  ((cl:satisfies
						     sct:system-version-controlled)))))
					  :description "a version controlled system")
					:prompt "System")))
	     (if (cl:stringp s)
		 (let ((system (sct:find-system-named s nil)))
		   (unless system (barf "System ~A not found." s))
		   (unless (sct:system-version-controlled system)
		     (barf "System ~A is not version controlled." system))
		   system)
		 s)))
	 (source-branch
	   (typein-line-accept `((sct:system-branch :system ,system))
			       :prompt "Source branch for the merge"))
	 (target-branch
	   (typein-line-accept `((sct:system-branch :system ,system))
			       :prompt "Target branch for the merge"))
	 (file-list
	   (if (stringp source-branch)		1;a private branch
0	       (sct:get-all-system-version-controlled-files
		 system :include-components include-components)
	       (cl:delete-if-not
		 #'fs:pathname-vc-p
		 (sct:get-all-system-input-files system :include-components include-components
						 :system-branch source-branch))))
	 (target-file-list			1;this list is only here
0	   (and (keywordp target-branch)	1;so that we can tell what the "real"
0		(cl:delete-if-not		1;target branch is if it is mapped.
0		  #'fs:pathname-vc-p
		  (sct:get-all-system-input-files
		    system
		    :include-components include-components
		    :system-branch target-branch)))))
    (let ((result-buffer-list
	    (loop for path in file-list with buffers
		  as this-target-branch =
		     (string 
		       (if (null target-file-list)
			   target-branch
			   (let ((corresponding-pathname
				   (cl:find (fs:vc-pathname-flat-pathname path)
					    target-file-list
					    :key #'fs:vc-pathname-flat-pathname)))
			     (unless corresponding-pathname
			       (error "~A was not listed as a file for this system for the ~ 
target branch. Please report this VC/SCT bug."))
			     (fs:pathname-vc-branch corresponding-pathname)))) 
		  as this-source-branch = (string
					    (or (fs:pathname-vc-branch path) source-branch))
		  do
	      (catch-error-restart ((error) "Skip merging ~A" path)
		(let* ((ef (error-restart ((fs:file-error) "Retry reading VC file ~A"
					   (fs:vc-pathname-flat-pathname path))
			     (vci::find-or-make-encached-file-header
			       :pathname (fs:vc-pathname-flat-pathname path))))
		       (last-merge-info (and ef (vc-encached-file-get-branch-merge-record
						  ef this-source-branch this-target-branch)))
		       (buffer
			 (block do-one
			   (unless (vci:branch-defined-p ef this-source-branch)
			     (format t "~&Branch ~A not defined in ~A. Skipping."
				     source-branch path)
			     (return-from do-one nil))
			   (unless (vci:branch-defined-p ef this-target-branch)
			     (format t "~&Branch ~A not defined in ~A. Skipping."
				     target-branch path)
			     (return-from do-one nil))
			   (error-restart ((fs:file-error) "Retry reading VC file ~A"
					   (fs:vc-pathname-flat-pathname path))
			     (setq ef
				   (vci:find-or-make-locked-encached-file
				     :pathname (fs:vc-pathname-flat-pathname path))))
			   (vc-merge-file-branches-into-buffer
			     ef
			     (vci:branch-last-version ef this-source-branch)
			     (vci:branch-last-version ef this-target-branch)
			     :source-cutoff-version
			     (and last-merge-info (first last-merge-info))))))
		  (when buffer (push buffer buffers)
			(vc-encached-file-record-branch-merge
			  ef
			  (vci:branch-last-version ef this-source-branch)
			  (vci:branch-last-version ef this-target-branch)
			  
			  ))))
		  finally (return (nreverse buffers)))))
      (select-tag-table ':buffers-tag-table
			':set-buffers-list result-buffer-list
			':set-tag-table-name
			(format nil "Merge ~A into ~A in ~A"
				source-branch target-branch
				(sct:system-pretty-name system))))))

(defun vc-encached-file-get-branch-merge-record (encached-file source-branch target-branch)
  (let ((alist (cl:getf (vci::encached-file-stored-property-list encached-file)
			'branch-merge-record)))
    (cl:find-if #'(lambda (entry)
		    (and (string-equal (vci:file-version-branch-name (first entry))
				       source-branch)
			 (string-equal (vci:file-version-branch-name (second entry))
				       target-branch)))
		alist)))
1;;; This does0 1not supersede older branch merge information since some
;;; people may be interested in all of the past merges.  (At least
;;; that's what they tell me.)

0(defun vc-encached-file-record-branch-merge (encached-file source-version target-version)
  (let* ((source-branch (vci:file-version-branch-name source-version))
	 (target-branch (vci:file-version-branch-name target-version))
	 ;; Remove the extraneous information that can't be saved into the file
	 (source-version (vci:make-file-version :branch-name source-branch
			   :branch-version (vci:file-version-branch-version source-version)))
	 (target-version (vci:make-file-version :branch-name target-branch
			   :branch-version (vci:file-version-branch-version target-version))))
    (push (list source-version target-version)
	  (cl:getf (vci::encached-file-stored-property-list encached-file)
		   'branch-merge-record))))
1#||
;;;--- This next command is a complete crock.

0(defcom com-show-vc-section-data "Show various internal data about the section under the
point." ()
  (format *typeout-window* "~&~A node."
	  (scl:string-capitalize 
	    (vc-hard-section-node-type (bp-top-level-node (point)))))
  (let ((s-node nil) (t-node nil))
    (if (eq type 'vc-section-version-node)
	(progn (setq s-node (bp-top-level-node (point)))
		     (setq t-node (send s-node :trailer-node)))
	      (setq t-node (bp-top-level-node (point)))
	      (setq s-node (send t-node :section-version-node)))
	  (when s-node
	    (format *typeout-window*
		    "~&Section ID ~D Home buffer ~A~@[~%Original function spec ~A~]"
		    (send s-node :section-id)
		    (send (send s-node :home-buffer) :name)
		    (and (neq (send s-node :section-id) :new)
			 (let ((dtype.fspec 
				 (aref 
				   (send *interval* :original-function-spec-array)
				   (send s-node :section-id))))
			   (and dtype.fspec
				(section-definition-name (cdr dtype.fspec)
							 (car dtype.fspec))))))))
  dis-none)

1||#
;;; The next function is used when an ordinary c-X c-F is made to a
;;; version controlled file.  It's job is to use information in the file
;;; and/or the file's parent system to pick the most likely useful
;;; version.  If ok-to-ask is set, and the answer to the question is
;;; nonobvious, it can offer the user a suitable choice of possible
;;; versions.

0(defun choose-vc-file-version (encached-file context-version ok-to-ask
			       &key (branch "Initial")
			       prompt
			       (print-branches-p t)
			       force-prompt)
  (ignore context-version)
  (when (and branch (not (vci:branch-defined-p encached-file branch)))
    (setq branch (vci::file-branch-name (vci::root-branch encached-file))))
  (when (null branch)
    (let* ((system (sct:patchable-system-from-pathname
		     (vci:encached-file-pathname encached-file)))
	   (default-branch (and system (sct:system-default-system-branch system))))
      (when default-branch (setq branch default-branch))))
  (if (and (null force-prompt)
	   (= 1 (vci::count-branches-in-encached-file	;if only one public branch don't prompt
		  encached-file :include-private-branches nil
		  :include-owned-private-branches t)))
      (progn
	(setq branch (loop for b in (vci:file-branch-name-alist encached-file)
			   while (vci:file-branch-private-user-name (cdr b))
			   finally (return (car b))))	;return first (and only) public branch
	(typein-line "Only one public branch in file.  Choosing ~a.newest" branch)
	(vci:branch-last-version encached-file branch))
      (if ok-to-ask
	  (vci:choose-file-version-dynamic
	    encached-file :stream *typeout-window*
	    :prompt prompt :default-version context-version
	    :zmacs-typein-line-p t
	    :default-branch branch
	    :print-branches-p print-branches-p)
	  (if (vci:branch-defined-p encached-file branch)
	      (vci:branch-last-version encached-file branch)
	      (barf "Cannot pick a version out of the air, no ~A branch." branch)))))
(defun vc-trailer-summary (vi trailer)
  (format nil "~A ~\\time\\ ~A"
	  (vci:file-version-info-author vi)
	  (vci:file-version-info-creation-date vi)
	  (substring
	    (vci:file-version-trailer-description trailer)
	    0
	    (let
	      ((cr-pos
		 (or
		   (cl:position #\cr (vci:file-version-trailer-description trailer)
				:test #'cl:char= :from-end t)
		   10000.)))
	      (min (1+ cr-pos) 101.
		   (cl:length (vci:file-version-trailer-description trailer)))))))
1;;; When someone c-X c-F a version controlled file:0  11) The "natural"
;;; buffer name will never already exist, since it0 1cannot contain the 
;;; characters.0  12) When the file is then opened, the ordinary
;;; technology discovers that the file in question has an0 1attribute of
;;; Version-Control.  If passes the stream to this function here, which
;;; does the real work of getting the file into a vc-file-buffer.

;;; There may be a stub for this in the main system, so shut up
;;; any bitching about redefinitions.

0(defun find-vc-file-internal (&key stream encached-file vc-file-version pathname)
  (condition-case-if (null encached-file) ()
       (let* ((encached-file (or encached-file
				 (vci:find-or-make-locked-encached-file
				   :pathname (and pathname (fs:vc-pathname-flat-pathname
							     pathname))
				   :stream stream)))
	      (vc-file-version
		1;; don't merge out :newest until we look for existing buffers.
0		(or (and pathname
			 (fs:pathname-vc-p pathname)
			 (and (not (eq (fs:pathname-vc-branch pathname) :unspecific))
			      ;;--- Remove the next sexp, it's a kludge for :UNSPECIFIC
			      (not (and (stringp (fs:pathname-vc-branch pathname))
					(zerop (string-length
						 (fs:pathname-vc-branch pathname))))))
			 (and (not (eq (fs:pathname-vc-version pathname) :unspecific))
			      ;;--- Remove the next sexp, it's a kludge for :UNSPECIFIC
			      (not (and (stringp (fs:pathname-vc-version pathname))
					(zerop (string-length
						 (fs:pathname-vc-version pathname))))))
			 (vci:make-file-version
			   :branch-name (fs:pathname-vc-branch pathname)
			   :branch-version (fs:pathname-vc-version pathname)))
		    vc-file-version
		    (choose-vc-file-version encached-file nil t)))
	      (buffer-pathname
		(send (vci:encached-file-pathname encached-file)
		      :new-pathname
		      :vc-branch (vci:file-version-branch-name vc-file-version)
		      :vc-version (vci:file-version-branch-version vc-file-version)))
	      ;; There might already be a buffer with the goods.
	      (buffer 
		(or (find-buffer-named buffer-pathname)
		    (let ((b (make-buffer 'vc-file-buffer 
					  :encached-file encached-file
					  :vc-file-version vc-file-version
					  :file-info (send encached-file :file-info)
					  :activate-p nil)))
		      (send b :revert)
		      b))))
	 buffer
	 )
     (fs:file-not-found nil)			1;nonexistent VC file -> create flat file
0     (vci:non-version-controlled-file nil)))	1;non-vc-file -> read flat file

0(setq *find-vc-file-function* #'find-vc-file-internal)
(defun find-already-encached-vc-file-internal (pathname)
  (let* ((newest-vc-version-p (eql (fs:pathname-vc-version pathname) :newest))
	 (encached-file 
	   (vci:find-or-make-locked-encached-file :pathname pathname :make-ok nil
						  :ensure-up-to-date newest-vc-version-p)))
    (when encached-file
      (find-vc-file :encached-file encached-file :pathname pathname))))

(setq *find-already-encached-vc-file-function* #'find-already-encached-vc-file-internal)
1;;; Creating a new, never-before-seen version controlled buffer, intended for a new,
;;; never-before seen version controlled file.  ---See encached-file for musings on
;;; collisions.


0(defun make-empty-vc-file-buffer (pathname initial-file-version)
  (let ((buffer (make-buffer 'vc-file-buffer
			     :encached-file (vci:find-or-make-locked-encached-file
					      :pathname pathname :new-file-p t)
			     :vc-file-version initial-file-version
			     :file-info nil	; this tells revert that there is nothing
						; to revert.
			     :file-branch-to-save
			      (vci:make-file-branch :name (vci:file-version-branch-name
							   initial-file-version)
						   :author (non-daemon-user-id))
			     :pathname pathname
			     :activate-p nil)))
    (send buffer :revert)
    buffer))
(defcom com-show-vc-file-branches "For a VC file buffer, show a graph of the branches
in the file.  With a numeric argument, show all of the versions in eah branch." ()
  (vci::graph-branches-in-tree (vcfb-encached-file *interval*)
			       *typeout-window* *numeric-arg-p*)
  dis-none)
(defcom com-goto-hard-section-beginning "Go to the beginning of the current hard section.
If already at the beginning of the current hard section, go to the beginning of
the previous hard section."
	(km)
  (let* ((current-section (bp-top-level-node (point)))
	 (first-character-in-hs (first-character-in-section current-section))
	 (first-point-in-buffer (send *interval* :first-bp)))

    (unless (bp-= (point) first-point-in-buffer)1	;do nothing if already at beginning
0      (point-pdl-push (point) *window*)
      (if (bp-= (point) first-character-in-hs)	;move to beginning of previous section
	  (move-point (first-character-in-section (previous-hard-section current-section)))
	  (move-point (first-character-in-section current-section)))))
  (set-centering-fraction (- *numeric-arg*))
  dis-bps)
(defcom com-goto-hard-section-end "Go to the end of the current hard section.  If already at 
the end of the current hard section, go to the end of the next hard section."
	(km)
  (let* ((last-point-in-section (node-last-bp (bp-top-level-node (point))))
	 (last-point-in-buffer (send *interval* :last-bp)))
    
    (unless (bp-= (point) last-point-in-buffer)
      (point-pdl-push (point) *window*)
      (let ((target-section (if (bp-= (point) last-point-in-section)
				(bp-top-level-node (forward-char (point) 1 nil *interval*))
				(bp-top-level-node (point)))))
	(move-point (create-bp (bp-line (node-last-bp target-section)) 0)))))
  (set-centering-fraction *numeric-arg*)
  dis-bps)
(defcom com-show-titles "Display the hard section titles"
	(km)
  (setf (vcfb-display-bubble-diagram-lines-p *interval*) t)
  dis-all)
(defcom com-hide-titles "Do not display the hard section titles"
	(km)
  (setf (vcfb-display-bubble-diagram-lines-p *interval*) nil)
  dis-all)
(defcom com-show-branch-lock-status "Shows the status of the lock for a branch 
of the current buffer's encached file." ()
  (let ((ef (vcfb-encached-file *interval*)))
    (let ((branch (typein-line-accept `((vci:file-branch-name :relative-to-encached-file
							      ,ef))
				      :default (vci:file-version-branch-name
						 (vcfb-vc-file-version *interval*)))))
      (let ((lock-status (vci:branch-lock-status (vcfb-encached-file *interval*)
						 (vci:make-file-version :branch-name branch))))
	(if (cl:getf lock-status :write-locker)
	    (scl:destructuring-bind (host activity time)
	       (cl:getf lock-status :write-locker)
	      (let ((host-ob (si:parse-host host t)))
		(format *typeout-window* "~&~A ~A since ~\\time\\"
			(or (and host-ob (send host-ob :pretty-name))
			    host)
			activity
			time)
		(when host-ob
		  (cl:fresh-line *typeout-window*)
		  (sys:with-indentation (*typeout-window* 5)
		    (net:finger nil *typeout-window* :host host-ob)))))
	    (typein-line "Branch ~A not locked." branch)))))
  dis-none)
(defcom com-break-branch-lock "Breaks an existing branch lock. 
This should only be used after verifying that the machine which claims to hold
the lock does not in fact believe that it holds the lock." ()
  (let ((ef (vcfb-encached-file *interval*)))
    (let ((branch (typein-line-accept `((vci:file-branch-name :relative-to-encached-file
							      ,ef))
				      :default (vci:file-version-branch-name
						 (vcfb-vc-file-version *interval*)))))
      (let ((lock-status (vci:branch-lock-status (vcfb-encached-file *interval*)
						 (vci:make-file-version :branch-name branch))))
	(if (cl:getf lock-status :write-locker)
	    (scl:destructuring-bind (host activity time)
	       (cl:getf lock-status :write-locker)
	      (let ((host-ob (si:parse-host host t)))
		(format *typeout-window* "~&~A ~A since ~\\time\\"
			(or (and host-ob (send host-ob :pretty-name))
			    host)
			activity
			time)
		(when host-ob
		  (cl:fresh-line *typeout-window*)
		  (sys:with-indentation (*typeout-window* 5)
		    (net:finger nil *typeout-window* :host host-ob))))
	      (when (yes-or-no-p "Are you sure that you want to forcibly unlock the lock? ")
		(vci:break-branch-lock ef branch)))
	    (typein-line "Branch ~A not locked." branch)))))
  dis-none)
(defcom com-revert-section "Reverts contents of the current section discarding changes." ()
  (let ((node (section-text-node (bp-top-level-node (point)))))
    (revert-section node))
  dis-none)
(zwei:define-section-name vc-zmacs-comtab-entries)

(set-comtab *zmacs-comtab* '()
	    '(("Find File Ignore Version Control" . com-find-file-ignore-version-control)
	      ("Create VC File Buffer" . com-create-version-controlled-file-buffer)
	      ("Merge VC System Branches" . com-merge-vc-system-branches)
	      ("Merge VC File Branches" . com-merge-vc-file-branches)
	      ("Create Version Controlled File Buffer"
	       . com-create-version-controlled-file-buffer)
	      ("Show All Section Changes of System" . com-show-all-section-changes-of-system)
	      ))

