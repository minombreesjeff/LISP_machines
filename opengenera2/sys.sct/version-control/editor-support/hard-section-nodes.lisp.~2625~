;;;-*- Mode: LISP; Syntax: Common-lisp; Package: ZWEI; Base: 10; Lowercase: Yes; Default-character-style: (:fix :roman :normal); -*-
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; Note that a vc-section is not the same as a section-node.
;;; A vc-section is an arbitrary division of a file into pieces whose edit history are kept
;;; track of, a section-node is a piece of editor buffer that has been recognized
;;; to contain a named definition.

0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defflavor vc-hard-section-node-mixin
	(home-buffer
	 (diagram-line)				1;the title diagram
0	 (zmacs-section-list nil)
	 )
	()
  (:required-flavors node)
  :abstract-flavor
  (:conc-name vc-hard-section-node-)
  (:readable-instance-variables
   (zmacs-section-list zmacs-section-list)
   (vc-hard-section-node-diagram-line diagram-line)
   home-buffer)
  (:writable-instance-variables
   (zmacs-section-list zmacs-section-list)
   (vc-hard-section-node-diagram-line diagram-line))   
  (:initable-instance-variables))
1;;; The inferiors of one of these are section-nodes, just like inferiors of
;;; an ordinary buffer
0(defmethod (buffer-sections vc-hard-section-node-mixin) ()
  inferiors)
(defmethod (:inferior-to-node vc-hard-section-node-mixin) (node)
  (inferior-item-p node self))
(defmethod (:mung vc-hard-section-node-mixin :before) (innermost)
  (ignore innermost)
  (send home-buffer :mung nil))
1;; Inherit some attributes from the file
;;--- This is probably not all the messages that need to be forwarded!
0(defmethod (:major-mode vc-hard-section-node-mixin) ()
  (send home-buffer :major-mode))
(defmethod (:get vc-hard-section-node-mixin) (property)
  (send home-buffer :get property))
(defmethod (:name vc-hard-section-node-mixin) ()
  (send home-buffer :name))
(defmethod (:pathname vc-hard-section-node-mixin) ()
  (send home-buffer :pathname))
(defmethod (:save-tick vc-hard-section-node-mixin) ()
  (send home-buffer :save-tick)) 
(defmethod (interval-buffer vc-hard-section-node-mixin) ()
(if (and (boundp '*window*) (eq home-buffer (window-interval *window*)))
      home-buffer
      (if (and (boundp '*window*) (inferior-item-p (window-interval *window*) self))
	  *interval*
	  home-buffer)))
(defgeneric inferior-item-p (buffer node)
  (:method (node) (ignore node) nil))
(defmethod (interval-home-buffer vc-hard-section-node-mixin) (&optional preferred)
  (if (and preferred
	   (typep preferred 'basic-version-control-buffer)
	   (inferior-item-p preferred self))
      preferred
      home-buffer))
(defmethod (first-character-in-section vc-hard-section-node-mixin) ()
  (let ((point (if (and diagram-line (not (hard-section-empty-p self)))
		   (forward-char (node-first-bp self))	;move off diagram line
		   (node-first-bp self))))
    (create-bp (bp-line point) 0)))
(defmethod (hard-section-empty-p vc-hard-section-node-mixin) ()
  (bp-= (node-first-bp self)
	(node-last-bp self)))
(defun previous-hard-section (current-hard-section)
  (let ((section-index (item-index *interval* current-hard-section)))
    (if (plusp section-index)
	(aref (vcb-display-array *interval*) (1- section-index))
	nil)))
1;;; The node that tracks a particular section.

;--- do these need a compile-tick, sectionization-tick, or anything like that?
0(defflavor basic-vc-section-version-node
	(
	 (section-id :new)			1;which section
0	 trailer-node				1;a pointer to the trailer node,
0						1;for kill/yank porpoises.
0	 (first-section nil)
	 legend
	 (patch-tick nil)
	 (alternate-diagram-line)
	 )
	(vc-hard-section-node-mixin node)
  (:conc-name vc-section-version-node-)
  (:readable-instance-variables 
   (named-buffer-with-sections-first-section first-section)
   (vc-section-version-node-section-id section-id)
   patch-tick)
  (:writable-instance-variables
   (named-buffer-with-sections-first-section first-section)
   section-id trailer-node patch-tick alternate-diagram-line)
  (:initable-instance-variables
   section-id trailer-node legend patch-tick)
  (:documentation
   "A node describing a 1section0 of a version controlled file.  The text described
here is the contents of a particular version of the section."))
(defmethod (make-instance basic-vc-section-version-node) (&rest ignore)
  (setq patch-tick tick))
(defmethod (vc-section-version-node-legend basic-vc-section-version-node) ()
  (cond ((eq self (aref (vcfb-section-version-node-array home-buffer) 0))
	 "Attribute Section")
	((boundp-in-instance self 'legend)
	 legend)
	(t
	 (diagram-legend self t))))
(defflavor vc-section-version-node-soft-sections-mixin
	((function-spec)
	 (definition-type)
	 (legend-tick 0))
	()
  (:required-flavors basic-vc-section-version-node)
  (:conc-name vc-section-version-node-)
  (:initable-instance-variables legend-tick)
  (:readable-instance-variables function-spec definition-type legend-tick))
1;;; This is the flavor used in vc-file-buffers. Use elsewhere at your own risk.
0(defflavor vc-section-version-node
	((patch-only-before-node)
	 (patch-only-after-node)
	 (patch-only-instead-node)
	 (deleted-p nil)
	 )
	(vc-section-version-node-soft-sections-mixin
	 basic-vc-section-version-node)
  (:writable-instance-variables patch-only-before-node
   patch-only-after-node patch-only-instead-node deleted-p)   
  (:documentation "Like basic-vc-section-version-node, but automatically
improves the diagram line legend using sectionization."))
(defmethod (sys:print-self vc-section-version-node-soft-sections-mixin) (stream depth slash)
  (ignore depth slash)
  (sys:printing-random-object (self stream :typep)
    (format stream "section ~S of ~S" section-id home-buffer)))
1;;; allow diagram lines to reference this with impunity.
0(defmethod (vc-section-version-node-deleted-p basic-vc-section-version-node) () nil)
(defmethod (sys:print-self vc-section-version-node) (stream depth slash)
  (ignore depth slash)
  (sys:printing-random-object (self stream :typep)
    (format stream "~:[~;deleted ~]section ~S of ~S" deleted-p section-id home-buffer)))
(defmethod ((cl:setf vc-section-version-node-deleted-p) vc-section-version-node :after)
	   (ignore)
  (when diagram-line (clear-cached-editor-height (line-diagram diagram-line))))
(defmethod (revert-section vc-section-version-node) ()
  (let* ((last-save-tick (send home-buffer :save-tick))
	 (section-modified-p (or (> tick last-save-tick)
				 (eql section-id ':new)))
	 (new-p (eql section-id ':new))
	 (encached-file (vcfb-encached-file home-buffer))
	 (legend (if (boundp 'legend)
		     legend
		     (diagram-legend self t))))
    (when new-p
      (barf "This is a new section.  There is nothing to revert to."))
    (when (and section-modified-p
	       (typein-line-y-or-n-p "Revert ~a? " legend))
      (let* ((i (make-interval 'node :initial-line t))
	     (*interval* i))
	(with-editor-stream (s :interval i :no-redisplay t)
	  (loop for r being the text-records
		    of encached-file in-version (vcfb-vc-file-version home-buffer)
		    only-section section-id
		do (send s :line-out r)))
	(delete-interval first-bp last-bp)
	(insert-interval first-bp i))

      ;;This must go after delete-interval and insert-interval or the tick will be wrong
      (setq tick last-save-tick)))
  (must-redisplay *window* dis-text))
(defmacro-in-flavor (noticing-new-sections vc-section-version-node-soft-sections-mixin)
		    (&body body)
  `(let ((old-first-section (car inferiors)))
     (when (and old-first-section (eql (send old-first-section :definition-type) 'header))
       1;; compensate for sectionization bug that I haven't time to fix --
0       1;; there should never be a header.
0       (setq old-first-section (node-next old-first-section)))
     (prog1
       (progn ,@body)
       (when old-first-section
	 (let ((new-first-section (car inferiors)))
	   (when (and new-first-section
		      (eql (send new-first-section :definition-type) 'header))
	     1;; compensate for sectionization bug that I haven't time to fix --
0	     1;; there should never be a header.
0	     (setq new-first-section (node-next new-first-section)))
	   (when (neq old-first-section new-first-section)
	   (setq legend-tick 0)			; force legend update.
	   (setf (line-tick (bp-line first-bp)) (tick))	1;reconsider diagram
0	   (must-redisplay *window* dis-line (bp-line first-bp) 0)))))))
(defmethod (:sectionize-buffer vc-section-version-node-soft-sections-mixin)
	   (stream &optional added-completions) 
  added-completions ;obsolete, unused
  (cl:assert (null stream))
  (noticing-new-sections
    (sectionize-buffer-internal self stream
				(vc-buffer-non-trailer-major-mode home-buffer)
				(send home-buffer :get :package)
				nil
				home-buffer)))
(defmethod (sections-p vc-section-version-node-soft-sections-mixin) () t)
(defmethod (:check-interval-sections vc-section-version-node-soft-sections-mixin)
	   (start-bp end-bp)
  (noticing-new-sections
    (send (vc-buffer-non-trailer-major-mode home-buffer)
	  :check-interval-sections start-bp end-bp self home-buffer)))
(cl:defparameter vci::*show-section-numbers-in-editor-buffers* nil)
(defmethod (diagram-legend vc-section-version-node-soft-sections-mixin) (&optional force)
  (if (vc-hard-section-node-attribute-section-p self)
      (setq legend "Attributes")
      (when (or force (> tick legend-tick))
	(check-interval-sections self)
	(setq legend
	      (let ((first-interesting-inferior
		      (cl:find-if
			#'(lambda (n) (send-if-handles n :function-spec)) inferiors)))
		(if first-interesting-inferior
		    (let ((dtype (send first-interesting-inferior :definition-type)))
		      ;; the numbers are for debugging.
		      (setq function-spec (send first-interesting-inferior :function-spec)
			    definition-type dtype)
		      (format nil "~:[~*~;~D ~]~A"
			      vci::*show-section-numbers-in-editor-buffers*
			      section-id
			      (section-definition-name 
				(send first-interesting-inferior :function-spec)
				dtype)))
		    (if (eql section-id ':new) "New Section"
			(format nil "Section ~D" section-id)))))
	(setq legend-tick tick))
      legend))
(defmethod (vc-hard-section-node-type vc-section-version-node) ()
  'section)
1;; For sectionization purposes, these look a bit like buffers

;;; Trailer data for a section.

0(defflavor vc-section-version-trailer-node
	(
	 file-trailer-p				;1is this for the entire file?
0	 home-buffer				
	 section-version-node
	 (deleted-section-version-node-comment-string nil)
	 )
	(vc-hard-section-node-mixin node)
  (:writable-instance-variables
   section-version-node
   deleted-section-version-node-comment-string)
  (:readable-instance-variables file-trailer-p section-version-node)
  (:initable-instance-variables home-buffer file-trailer-p section-version-node))
(defmethod (:major-mode vc-section-version-trailer-node) ()
  (vc-buffer-trailer-major-mode home-buffer))
(defmethod (diagram-legend vc-section-version-trailer-node) (&optional ignore)
  (if file-trailer-p "on comments for file"
      (if section-version-node
	  (progn (if (vc-hard-section-node-attribute-section-p section-version-node)
		     "Modification comments for Attribute Section"
		     (format nil "Modification comments for ~A"
			     (diagram-legend section-version-node))))
	  (or deleted-section-version-node-comment-string
	      "Modification comments for deleted section."))))
(defmethod (make-instance vc-section-version-trailer-node) (&rest ignore)
  (let ((initial-line (create-line art-string 0 self)))
    (setq first-bp (create-bp initial-line 0 :normal (node-top-level-node self)))
    (setq last-bp (create-bp initial-line 0 :moves (node-top-level-node self)))))
(cl:defparameter *vc-trailer-default-major-mode* :text)
(defmethod (vc-hard-section-node-attribute-section-p vc-section-version-trailer-node) ()
  nil)
(defmethod (vc-hard-section-node-attribute-section-p basic-vc-section-version-node) ()
  (eq self (aref (vcfb-section-version-node-array home-buffer) 0)))
(defmethod (vc-hard-section-node-type vc-section-version-trailer-node) ()
  'trailer)
(defflavor vc-section-version-patch-only-node
	(type					1;:before, :after, :instead
0	 home-buffer				1;where we came from
0	 section-version-node			1;who we apply to
0	 (inner-legend-cache nil)
	 (legend-cache nil)
	 )
	(vc-section-version-node-soft-sections-mixin
	 basic-vc-section-version-node)
  (:readable-instance-variables type home-buffer section-version-node)
  (:initable-instance-variables type home-buffer section-version-node)
  (:required-init-keywords :type :home-buffer :section-version-node))
(defmethod (vc-hard-section-node-type vc-section-version-patch-only-node) ()
  'patch-only)
(defmethod (diagram-legend vc-section-version-patch-only-node) (&optional force)
  (let ((il (diagram-legend section-version-node force)))
    (cond ((eq il inner-legend-cache) legend-cache)
	  ((string= il inner-legend-cache) legend-cache)
	  (t (setq inner-legend-cache il)
	     legend-cache (format nil "~A ~A" (cl:string-capitalize type) il)))))
(defgeneric section-text-node (node)
  (:method (basic-vc-section-version-node) self)
  (:method (vc-section-version-trailer-node)
   (vc-section-version-trailer-node-section-version-node self))
  (:method (vc-section-version-patch-only-node)
   (vc-section-version-patch-only-node-section-version-node self)))
