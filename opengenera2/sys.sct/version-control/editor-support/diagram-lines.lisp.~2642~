;;;-*- Mode: LISP; Syntax: Common-lisp; Package: ZWEI; Base: 10; Lowercase: Yes; Default-character-style: (:fix :roman :normal); -*-
;;; base flavor for all vc diagrams.

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defflavor basic-vc-line-diagram
	()
	(draw-self-diagram-mixin
	 structural-line-diagram-mixin
	 mouse-sensitive-diagram-mixin
	 line-diagram-mixin)
  :abstract-flavor)
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; base flavor for vc diagrams at the end of sections. These have
;;; auto-insert behavior.

0(defflavor basic-vc-end-of-section-diagram
	()
	(basic-vc-line-diagram)
  :abstract-flavor)
1;;; This still is broken.  Try (insert (point) "#\cr test") with point
;;; on a diagram line.  The truth is, I don't know if we will ever
;;; exercise this path since insert is not called for normal string
;;; insertion!

0(defmethod (:editor-insert basic-vc-end-of-section-diagram)
	   (line insert-index thing from to)
  (cl:assert
    (zerop insert-index) ()
    "(:method section-separating-line-diagram :editor-insert) called with nonzero index.")
  (let ((begins-with-cr
	  (or
	    (and (characterp thing) (char-equal thing #\cr))
	    (and (stringp thing)( from 0)(char-equal (aref thing from) #\cr))
	    (and (typep thing 'interval)
		 (char-equal (aref (bp-line (interval-first-bp thing))
				   (bp-index (interval-first-bp thing)))
			     #\cr))))
#|	(ends-with-cr
	  (or
	    (and (characterp thing) (char-equal thing #\cr))
	    (and (stringp thing)(char-equal (aref thing (1- to)) #\cr))
	    (and (typep thing 'interval)
		 (char-equal (aref (bp-line (interval-last-bp thing))
				   (bp-index (interval-last-bp thing)))
			     #\cr))))
|#
	)
    (let ((line-bp (create-bp line 0)))
      (if begins-with-cr :permit
	  (insert-thing line-bp #\cr)
	  (must-redisplay *window* dis-text)
	  (move-bp line-bp (line-previous line) 0)	;must be the newly inserted line.
	  (insert line-bp thing from to)))))
1;;; Copy ourselves as a plain blank line. No need to cary diagram about.
0(defmethod (:editor-copy basic-vc-line-diagram) () nil)
(defvariable *vc-section-delimiter-gray-level* 1.0 ((scl:number .1 1.0))
	     "Gray level of section delimiters in Version Control buffers")
(defvariable *vc-section-delimiter-style* :line ((cl:member :line :triangle))
	     "Delimiter used to separate sections in Version Control buffers.")
(defvariable *vc-section-delimiter-line-length* 100 ((scl:integer 5 100))
	     "Length of Version Control section delimiter lines expressed as a percentage of screen width.")
(defflavor vc-section-separating-diagram ()
	   (black-line-diagram basic-vc-end-of-section-diagram)
  (:default-init-plist :height 1/5))
(defmethod (:draw-self vc-section-separating-diagram) (sheet)
    (let ((line-height (- (send sheet :line-height) (send sheet :vsp))))
      (if (eql *vc-section-delimiter-style* :triangle)
	  (graphics:draw-triangle 0 1 15 (cl:round line-height 2) 0 (- line-height 2)
				  :stream sheet
				  :gray-level *vc-section-delimiter-gray-level*)
	(let* ((d-height (cl:round (cl:* line-height height)))
1	       ;; *vc-section-delimiter-line-length* should be from 5 (%) to 100 (%) 
0	       (width (* .01 *vc-section-delimiter-line-length* (send sheet :inside-width)))
	       (y-pos (cl:round line-height 2)))
	  (graphics:draw-line 0 y-pos width y-pos
			      :stream sheet
			      :thickness d-height
			      :gray-level *vc-section-delimiter-gray-level*)))))
(defflavor vc-thin-black-line-section-separating-diagram ()
	   (vc-section-separating-diagram)
  (:default-init-plist :height 1/10))
(defmethod (:draw-self vc-thin-black-line-section-separating-diagram) (sheet)
  (graphics:draw-string "Modification Comments" 0 5 :stream sheet
			:character-style (si:parse-character-style '(nil :italic :small)))
  (graphics:draw-line 150 8
		      (max 150 (* .01 *vc-section-delimiter-line-length*
				  (send sheet :inside-width)))
		      8 :stream sheet :thickness 1
		      :gray-level *vc-section-delimiter-gray-level*))

(defflavor basic-vc-section-title-diagram	1;
0	((associated-node nil)
	 (cached-editor-height nil)
	 (display-bubble-diagrams-p-when-editor-height-cached nil)
	 (last-height-tick 0)			1;for debugging, to force all height
0						1;to recalculate
0	 (title nil))				
	(basic-vc-line-diagram)			
  :abstract-flavor
  (:conc-name vc-section-title-diagram-)
  (:initable-instance-variables associated-node title)
  (:init-keywords :title)
  (:writable-instance-variables associated-node))
(defmethod (clear-cached-editor-height basic-vc-section-title-diagram) ()
  (setq cached-editor-height nil))
(defwhopper (:editor-draw basic-vc-section-title-diagram) (&rest draw-args)
  (when associated-node
    (setq title (or (diagram-legend associated-node) title)))1;pick up current best knowledge.
0  (lexpr-continue-whopper draw-args))
(defwhopper (:draw-self basic-vc-section-title-diagram) (&rest draw-args)
  (when associated-node
    (setq title (or (diagram-legend associated-node) title)))1;pick up current best knowledge.
0  (lexpr-continue-whopper draw-args))
(defvar *vc-diagram-editor-height-tick* 0)
(defvar-resettable *vc-title-diagram-calculating-output-height* nil)
(defwhopper (:editor-height basic-vc-section-title-diagram) (&rest draw-args)
  (let ((*vc-title-diagram-style-internal* *vc-title-diagram-style*)
	(*vc-title-diagram-calculating-output-height* t))
    (+ 2					1;--- this is a crock until the bug that
0						1;---requires it is fixed.
0       (let ((vcfb (and (file-buffer-p (interval-buffer *interval*))
			(buffer-version-controlled-p (interval-buffer *interval*)))))
	 (if (and (= *vc-diagram-editor-height-tick* last-height-tick)
		  cached-editor-height 
		  vcfb				1;calculate the hard way 
0		  (eq display-bubble-diagrams-p-when-editor-height-cached
		      (vcfb-display-bubble-diagram-lines-p *interval*)))
	     cached-editor-height
	     (progn
	       (setq last-height-tick *vc-diagram-editor-height-tick*)
	       (when associated-node
		 (setq title (or (diagram-legend associated-node) title)))
	       (when vcfb 
		 (setq display-bubble-diagrams-p-when-editor-height-cached
		       (vcfb-display-bubble-diagram-lines-p *interval*)))
	       (setq cached-editor-height (lexpr-continue-whopper draw-args))))))))
(defflavor vc-bubble-section-title-diagram
	()
	(basic-vc-section-title-diagram))
(cl:defparameter *vc-title-diagram-style* :filled-box)
(defgeneric vc-draw-title-diagram (title-diagram type stream title deleted-p
						 sensitive-object)
  (:method-combination :case))
(defgeneric vc-title-diagram-top-spacing (title-diagram type)
  (declare (values pixels))
  (:method-combination :case))
(cl:defparameter *vc-text-and-rule-diagram-character-style*
		 (si:parse-character-style '(:fix :bold :normal)))
(cl:defparameter *vc-filled-box-diagram-character-style*
		 (si:parse-character-style '(:fix :bold :normal)))
(defmethod (vc-title-diagram-top-spacing vc-bubble-section-title-diagram :filled-box) ()
  5)
(defmethod (vc-draw-title-diagram vc-bubble-section-title-diagram :filled-box)
	   (stream title deleted-p sensitive-object)
  (flet ((do-it (stream)
	   (scl:with-character-style (*vc-filled-box-diagram-character-style*
				       stream :bind-line-height t)
	     (scl:surrounding-output-with-border
	       (stream :shape :rectangle
1;0	      :pattern tv:50%-gray
		       :thickness 2		1;for deleted hard sections
0		       :margin 0
		       :gray-level 1
		       :alu :flip
		       :filled (not deleted-p))
	       (when deleted-p
		 (format stream "Deleted~%"))
	       (if sensitive-object
		   (dw:with-output-as-presentation (:stream
						     stream :object sensitive-object
						     :type (cl:type-of sensitive-object)
						     :single-box t
						     :allow-sensitive-inferiors nil)
		     (scl:filling-output (stream)
		       (cl:write-string title stream)))
		   (scl:filling-output (stream)
		     (cl:write-string title stream)))))))
    (multiple-value-bind (nil height)
	(if *vc-title-diagram-calculating-output-height*
	    (dw:continuation-output-size #'do-it stream)
	    (values 0 cached-editor-height))
      (let ((transform (graphics:stream-transform stream)))
	(send stream
	      :set-cursorpos
	      (graphics::graphics-transform-tx transform)
	      (- (graphics::graphics-transform-ty transform)
		 height)
	      :pixel))
      (do-it stream))))
(defmethod (vc-title-diagram-top-spacing vc-bubble-section-title-diagram :text-and-rule) ()
  2)
1;;; this uses compression rather than filling because there just isn't a generic
;;; protocol to use the text cursor at all, and that dooms filling.
0(defmethod (vc-draw-title-diagram vc-bubble-section-title-diagram :text-and-rule)
	   (stream title deleted-p sensitive-object)
  (let* ((text-string
	   (format nil (if deleted-p "Deleted ~A" "~A")
		   (or title "No Title")))
	 (text-width (dw:continuation-output-size
			#'(lambda (stream)
			    (cl:write-string text-string stream))
			stream)))
      (setq text-width (min (send stream :inside-width) text-width))
      (flet ((draw-text (stream)
	       (graphics:draw-string
		 text-string 0 (+ 2 (send stream :vsp))
		 :attachment-y :bottom
		 :stream stream
		 :character-style *vc-text-and-rule-diagram-character-style*
		 :stretch-p t
		 :toward-x text-width)))
	(if sensitive-object
	    (dw:with-output-as-presentation (:stream stream :object sensitive-object
						     :type (cl:type-of sensitive-object)
						     :single-box t
						     :allow-sensitive-inferiors nil)
	      (draw-text stream))
	    (draw-text stream)))
      (graphics:draw-line 0 0 text-width 0 :stream stream :thickness 1)))
(cl:defparameter *vc-center-title-diagrams* nil)
(defun-in-flavor (draw-the-title vc-bubble-section-title-diagram) (stream title-style center)
  (let ((deleted-p (and associated-node
			(send associated-node :operation-handled-p
			      'vc-section-version-node-deleted-p)
			(vc-section-version-node-deleted-p associated-node))))
    (flet ((do-it (stream)
	     (vc-draw-title-diagram self title-style stream
				    title deleted-p associated-node)))
      (if center
	  (let ((bubble-width (dw:continuation-output-size #'do-it stream)))
	    (let* ((window-w ( - (send stream :inside-width) 0))
		   (bubble-x-pos (cl:truncate (- window-w bubble-width) 2)))
	      (graphics:with-graphics-translation (stream bubble-x-pos 0)
		(do-it stream))))
	  (do-it stream)))))
(defun-in-flavor (draw-hidden-title vc-bubble-section-title-diagram)
		 (stream left top right bottom)
  (let ((deleted-p (and associated-node
			(send associated-node :operation-handled-p
			      'vc-section-version-node-deleted-p)
			(vc-section-version-node-deleted-p associated-node))))
    (dw:with-output-as-presentation (:stream stream :object associated-node
					     :type (cl:type-of associated-node)
					     :single-box t
					     :allow-sensitive-inferiors nil)
      (if deleted-p
	  (graphics:draw-string "deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted  deleted"
				left (+ 4 top)
				:stream stream :character-style '(:fix nil :tiny))	
	  (graphics:draw-rectangle left top right bottom :stream stream
			       :gray-level 1)))))
1;;; this must be correct for hardcopy.
0(defvar-resettable *vc-title-diagram-style-internal* :text-and-rule)
(defmethod (:draw-self vc-bubble-section-title-diagram) (stream)
  (draw-the-title stream *vc-title-diagram-style-internal* *vc-center-title-diagrams*))
(defwhopper (:editor-draw vc-bubble-section-title-diagram)
	   (line sheet cursor-x cursor-y)
  (ignore line)
(2 0 (NIL 0) (NIL :BOLD NIL) "CPTFONTCB")  0(if (vcfb-display-bubble-diagram-lines-p *interval*)
      (let ((*vc-title-diagram-style-internal* *vc-title-diagram-style*))
	(continue-whopper line sheet cursor-x cursor-y))
      (let* ((left (send sheet :edges))
	     (right (send sheet :inside-width))
	     (top (- cursor-y (send sheet :vsp) 2))
	     (bottom (+ top 3)))
	(draw-hidden-title sheet left top right bottom))))

(defmethod (:editor-insert vc-bubble-section-title-diagram)
	   (line insert-index thing from to)
  (ignore line insert-index thing from to)
  (barf "Cannot insert into a diagram line."))
(define-presentation-to-editor-command-translator
  show-history-of-hard-section
  (vc-section-version-node "Show Section History" *zmacs-comtab*
			   :gesture nil		1;just leave it in the menu for now.
0			   :tester ((node)
				    (not (eql (vc-section-version-node-section-id node) ':new)
					 )))
  (node)
  `(vc-display-section-history ,node))
(defun vc-display-section-history (node)
  (vchb-display-section-history-given-section
    (vcfb-vc-file-version (vc-hard-section-node-home-buffer node))
    node))
(define-presentation-to-editor-command-translator
  show-section-authors
  (vc-section-version-node "Show Section Authors" *zmacs-comtab*
			   :gesture nil		1;just leave it in the menu for now.
0			   :tester ((node)
				    (not (eql (vc-section-version-node-section-id node) ':new)
					 )))
  (node)
  `(show-section-authors ,node
			 :for-branch ,(vci::file-version-branch-name
					(vcfb-vc-file-version *interval*))))
(defun show-section-authors (node &key for-branch)
  (let* ((encached-file (vcfb-encached-file  *interval*))
	 (section-id (vc-section-version-node-section-id node)))
    (format *typeout-window* "~2&~a~%" (diagram-legend node))
    (if (eql section-id :new)			1;Handle this first
0	(format *typeout-window* " is being created by ~a in the current buffer~%" user-id)
	(let* ((modified-version-list (vci::encached-file-modified-version-list
					encached-file section-id
					:for-branch for-branch :saved-versions t))
	       (original-version (vci::original-version encached-file section-id))
	       (original-version-f-v-i
		 (and original-version
		      (loop for v being the array-elements of
				(vci:encached-file-versions encached-file)
			    when (vci:file-versions-equal v original-version)
			      do (return v))))
	       (original-author (vci::file-version-info-author original-version-f-v-i))
	       (version-creation-date
		 (vci::file-version-info-creation-date original-version-f-v-i)))
    
	  (loop for f-v-i in (reverse modified-version-list)
		as mod-author = (vci::file-version-info-author f-v-i)
		as version-modification-date = (vci::file-version-info-creation-date f-v-i)
		do
	    (multiple-value-bind (seconds minutes hours day month year)
		(time:decode-universal-time version-modification-date)
	      (format *typeout-window* "~& was modified by ~a on ~d/~d/~d at ~
                                  ~d:~2,'0d:~2,'0d to create version ~@\\presentation\\~%"
		      mod-author month day year hours minutes seconds
		      f-v-i `((vci::file-version :relative-to-encached-file ,encached-file)))))

	  (when (or (null for-branch)
		    (and for-branch
			 (string-equal for-branch
				       (vci::file-version-branch-name original-version))))
	    (multiple-value-bind (seconds minutes hours day month year)
		(time:decode-universal-time version-creation-date)
	      (format *typeout-window* "~&~:[~; and~] was created by ~a on ~d/~d/~d ~
                                at ~d:~2,'0d:~2,'0d in version ~@\\presentation\\~%"
		      modified-version-list original-author month day year
		      hours minutes seconds original-version
		      `((vci::file-version :relative-to-encached-file ,encached-file)))))))))
(define-presentation-to-editor-command-translator
  kill-hard-section
  (vc-section-version-node "Kill Hard Section" *zmacs-comtab*
			   :gesture :middle
			   :tester ((object &rest ignore)
				    (not (vc-section-version-node-deleted-p object))))
  (s-v-node)
  `(mouse-kill-hard-section ,s-v-node))
(defun mouse-kill-hard-section (s-v-node)
  (kill-vc-section s-v-node *kill-history*)
  (setq *kill-history-user* *current-command-loop*)
  (let ((line (bp-line (node-first-bp s-v-node))))
    (setf (line-tick line) (tick))
    (must-redisplay *window* dis-line line 0)))
(defcom com-vc-menu "Operations on this section" ()
  (let* ((node (section-text-node (bp-top-level-node (mouse-bp *window*))))
	 (new-p (eql (vc-section-version-node-section-id node) ':new))
	 (section-modified-p (> (node-tick node) (send *interval* :save-tick)))
	 (vc-menu (list '("Kill This Section" :value kill-vc-section)))
	 (prompt (format nil "~VOperation on ~A:~"
			 '(:jess :roman :normal)
			 (cond ((boundp-in-instance node 'legend)
				(vc-section-version-node-legend node))
			       ((null (zmacs-section-list node))
				"hard section")
			       (t
				(destructuring-bind (name type)
				    (first (zmacs-section-list node))
				  (format nil "~@(~A~) ~S"
					  (or (get type 'si:definition-type-name) type)
					  name))))))
	 command)
    (cond-every ((not new-p)
		 (push '("Show Section Authors" :value show-section-authors) vc-menu)
		 (push '("Show Section History" :value vchb-display-section-history) vc-menu)
		 (push '("Show Section Changes" :value show-section-changes) vc-menu))
		((and section-modified-p (not new-p))
		 (push '("Revert This Section"  :value revert-section) vc-menu)))
    (setq command (dw:menu-choose vc-menu :prompt prompt))
    (when command
      (if (eql command 'kill-vc-section)
	  (funcall command node *kill-history*)
	  (funcall command node))))
  dis-none)
