;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10; Lowercase: Yes; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(define-special-buffer-type modified-hard-sections-buffer
			    (single-buffer criterion)
			    (modified-sections-buffer)
			    :modified-hard-sections "Modified-Hard-Sections"
  :settable-instance-variables
  (:buffer-init-options :set-single-buffer :set-criterion))
(defflavor hard-section-subnode
	(hard-section buffer)
	(possibility-subnode)
  :initable-instance-variables
  :gettable-instance-variables)
(scl:define-presentation-type vc-section-version-node ()
   :no-deftype t
   :printer ((s-v-node stream &key acceptably)
	     (when acceptably (error "Can't print a vc-section-version-node acceptable."))
	     (cl:write-string (vc-section-version-node-legend s-v-node) stream))
   :description "a version control hard section"
   )
(defmethod (:list-subnodes modified-hard-sections-buffer) (first-node)
  (let ((s-v-nodes 
	  (loop for node = first-node then (node-next node)
		as section = (and node (send node :hard-section))
		as buffer = (and node (send node :buffer))
		as read-tick = (and buffer (send-if-handles buffer :read-tick))
		while node when section collect section)))
    (scl:formatting-item-list (t)
      (loop for section in s-v-nodes do
	(scl:formatting-cell ()
	  (scl:present section 'vc-section-version-node)))))
  (cl:fresh-line))

(define-presentation-to-editor-command-translator
  edit-vc-section-version-node
  (vc-section-version-node "Edit VC Hard Section" *zmacs-comtab*
			   :gesture :select)
  (s-v-node)
  `(edit-hard-section-node ,s-v-node))
(defun edit-hard-section-node (s-v-node)
  (make-buffer-current (vc-hard-section-node-home-buffer s-v-node))
  (move-point (bp-line (node-first-bp s-v-node)) 0))
(defmethod (:revert modified-hard-sections-buffer) ()
  (let ((buffer single-buffer))
    (check-interval-sections buffer)
    (let ((criterion-tick (get-criterion-tick buffer criterion)))
      (when (not (null criterion-tick))
	(loop for section being the array-elements of (vcfb-section-version-node-array buffer)
	      do
	  (when (and (typep section 'vc-section-version-node)
			 (> (node-tick section) criterion-tick))
	    (send self :add-node
		  'hard-section-subnode :hard-section section :buffer buffer)))))))
(defmethod (:description hard-section-subnode) (stream)
  (cl:write-string (vc-section-version-node-legend hard-section) stream))
(defmethod (:select-possibility hard-section-subnode) ()
  (when (and (memq buffer *zmacs-buffer-list*)
	     (cl:find hard-section (vcfb-section-version-node-array buffer)))
    (make-buffer-current buffer)
    (check-interval-sections hard-section)
    (let ((first-interesting-inferior
	    (loop for inf in (node-inferiors hard-section)
		  when (and (send inf :definition-type)	(neq (send inf :definition-type)
							     'header))
		    do (return inf))))
      (let ((bp (create-bp
		  (if first-interesting-inferior
		      (section-node-definition-or-first-line first-interesting-inferior)
		      (bp-line (forward-line (node-first-bp hard-section))))
		  0)))
	(recenter-window *window* ':start (backward-over-comment-lines bp nil))
	(move-point bp))))
  dis-text)
(defun vc-list-modified-sections ()
  (let ((buffer (send *current-command-loop*
		      :find-special-buffer
		      :modified-hard-sections t
		      :set-single-buffer *interval*
		      :set-criterion (selectq *numeric-arg*
				       (1 :read)
				       (2 :save)
				       (otherwise :read)))))
    (cond ((not (null (send buffer :next-node t)))
	   (push buffer *zmacs-possibilities-buffers*)
	   (push-pop-possibilities-buffer-1)
	   (next-possibility :list-possibilities))
	  (t
	   (send buffer :list-possibilities nil)
	   dis-none ))))
