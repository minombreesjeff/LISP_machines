;;; -*- Mode: LISP; Syntax: Zetalisp; Package: ZWEI; Base: 10; Lowercase: Yes -*-

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; A stream that works like the encached file stream from a version controlled buffer.
;;;

0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defflavor vc-file-buffer-stream
	(buffer
	 (eof nil)
	 return-boundary-blips
	 current-section-version-node-index
	 current-section-version-node
	 last-line-returned)
	(vci::return-diagrams-as-lines-mixin
	 si:buffered-input-character-stream)
  (:initable-instance-variables buffer return-boundary-blips)
  (:required-init-keywords :buffer)
  (:default-init-plist :return-boundary-blips nil)
  (:documentation "Stream that returns records (and optionally signals blips)
from a version control file buffer."))

(defmethod (make-instance vc-file-buffer-stream) (&rest ignore)
  (setq current-section-version-node-index -1
	last-line-returned nil))

(defmethod (:discard-input-buffer vc-file-buffer-stream) (ignore)
  )

(defmethod (vc-file-buffer-stream-next-line vc-file-buffer-stream) ()
  (block vc-file-buffer-stream-next-line
    (setq last-line-returned (and last-line-returned	;special case first time.
				  (line-next last-line-returned)))
    (if last-line-returned last-line-returned
	;; otherwise, go to the next section (if any).
	(when (= current-section-version-node-index
		 (vcfb-n-section-version-nodes buffer))
	  (return-from vc-file-buffer-stream-next-line :eof))
	(incf current-section-version-node-index)
	(setq current-section-version-node
	      (vcfb-section-version-node buffer current-section-version-node-index))
	(when return-boundary-blips
	  (signal 'vci:encached-file-version-stream-blip
		  :proceed-types :no-action
		  :stream self
		  :blip (vci:make-section-boundary-blip
			  :begin-section-id (vc-section-version-node-section-id
					      current-section-version-node))))
	(return-from vc-file-buffer-stream-next-line
	  ;;note that we supply the "missing" last line transition by ignoring the
	  ;;last-bp of the node. Hard section always contain an even set of lines.
	  (setq last-line-returned (bp-line (node-first-bp current-section-version-node)))))))

(defmethod (:next-input-buffer vc-file-buffer-stream) (&optional no-hang-p)
  (ignore no-hang-p)
  (if eof (values nil nil nil t)
      (loop named got-buffer with s-buffer do
	(setq s-buffer (vc-file-buffer-stream-next-line self))
	(cl:etypecase s-buffer
	  (scl:instance
	    (signal 'vci::diagram-line-blip :diagram buffer :stream self))
	  (string
	    (return-from got-buffer (values
				      (string-append s-buffer #\return)
				      0
				      (+ (cl:length s-buffer) 1)
				      nil)))
	  (symbol
	    (if (eq buffer :eof)
		(progn
		  (setq eof t)
		  (return-from got-buffer (values nil nil nil t)))
		(error "Unrecognized symbol ~S returned by parser." buffer)))))))

(defmethod (:whole-file-p vc-file-buffer-stream) () t)

(defun open-vc-file-buffer-stream (buffer &key return-boundary-blips)
  (make-instance 'vc-file-buffer-stream :buffer buffer
		 :return-boundary-blips return-boundary-blips))
