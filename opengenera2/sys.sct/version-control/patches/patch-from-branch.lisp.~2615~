;;; -*- Mode: LISP; Syntax: Common-lisp; Package: VC-PATCHES; Base: 10; Lowercase: Yes -*-
D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; This utility is in the business of constructing a private patch from 
;;; changed sections (as recorded by the encached file). It doesn't
;;; bother to record the system for each section.

0;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(defun add-changed-sections-to-patch (patch-source encached-file common-ancestor
				      from-version to-version)
  (let* ((one-version-p (file-versions-equal from-version to-version))
	 (from-vi (and (not one-version-p)
		       (not (file-versions-equal from-version common-ancestor))
		       (make-instance 'encached-file-version-info :encached-file encached-file
				      :version from-version
				      :relevant-ancestor-version common-ancestor)))
	 (ancestor-vi (and from-vi
			   (make-instance 'encached-file-version-info
					  :encached-file encached-file
					  :version common-ancestor
					  :relevant-ancestor-version nil)))
	 (to-vi (and (not one-version-p)
		     (make-instance 'encached-file-version-info :encached-file encached-file
				    :version to-version
				    :relevant-ancestor-version common-ancestor)))
	 (sections-to-patch (and to-vi (encached-file-version-info-changed-sections to-vi)))
	 (section-order
	   (if to-vi (encached-file-version-info-section-order to-vi)
	       (encached-file-version-section-order encached-file from-version)))
	 (merge-info (and from-vi
			  (zwei:vcfb-merge-version-control-file-branches-figure-order
			    ancestor-vi to-vi from-vi)))
	 (attribute-list (get-file-attribute-list encached-file to-version))
	 (major-mode (getf attribute-list :mode :lisp)))
    1;; we assume that sections-to-patch is in reconstruct order for the file.
0    (loop for section-number in section-order
	  do
      (when (or (null sections-to-patch)	;do 'em all
		(if (null merge-info)
		    (aref sections-to-patch section-number)
		    ;; See if the section was really changed, or just copied
		    ;; If the text of the section hasn't changed, don't include it in the patch
		    (let ((cruft (assoc section-number merge-info))
			  (from-section-number section-number)
			  (to-section-number section-number)
			  (compare nil))
		      (and (case (second cruft)
			     ((:both :both-no-ancestor) (setq compare t))
			     (:target (or (neq (third cruft) ':deleted-from-source)
					  ;;--- Kludge to work around the bug where the
					  ;;--- last section got replicated, which then
					  ;;--- caused the section numbers not to match.
					  ;;--- Identify this case and compare the text of
					  ;;--- the last two sections even though their
					  ;;--- section-ids don't match.
					  (and (eq cruft (car (last merge-info)))
					       (setq cruft (nth (- (length merge-info) 2)
								merge-info))
					       (eq (second cruft) ':source)
					       (eq (third cruft) ':deleted-from-target)
					       (setq from-section-number (first cruft)
						     compare t)))))
			   (or (not compare)
			       ;; Gotta compare the text
			       (loop for r being the text-records
					 of encached-file in-version from-version
					 only-section from-section-number
				     collect r into from
				     finally
				       (return
					 (not (and (loop for r being the text-records
							     of encached-file
							     in-version to-version
							     only-section to-section-number
							 always (equal r (pop from)))
						   (null from))))))))))
	(let ((ps (make-instance 'private-patch-section
				 :pathname
				 (send (encached-file-pathname encached-file)
				       :new-pathname
				       :version :newest
				       :vc-branch (file-version-branch-name to-version)
				       :vc-version (file-version-branch-version to-version))
				 :section-id section-number
				 :attribute-list attribute-list
				 :major-mode major-mode
				 :system nil
				 :comment (retrieve-trailer-strings-for-difference
					    encached-file common-ancestor to-version
					    section-number nil nil))))
	  (add-section patch-source ps))))))
(defun retrieve-trailer-strings-for-difference (encached-file start-version end-version
						section-id include-author-and-date
						include-merge-comments)
  (loop for version = end-version
		    then (vci::encached-file-previous-version encached-file version)
	until (or (null version) (file-versions-equal version start-version))
	as version-info = (encached-file-version-info encached-file version)
	as trailer = (retrieve-trailer-string version-info section-id
					      include-author-and-date include-merge-comments)
	with result = nil
	do (when trailer
	     (setq result (if result (string-append trailer result) trailer)))
	finally (return result)))
;; Returns NIL or a string
(defun retrieve-trailer-string (version-info section-id
				include-author-and-date include-merge-comments)
  (let* ((trailer (vci::file-version-info-trailer version-info))
	 (trailer-text (and trailer
			    (loop for ps being the array-elements of
				      (vci::file-version-trailer-per-section-array trailer) do
			      (when (= (vci::file-version-trailer-ps-section-id ps) section-id)
				(return (vci::file-version-trailer-ps-description ps)))))))
    (when (and trailer-text (not (zerop (string-length trailer-text))))
      (unless include-merge-comments
	;; These automatically generated comments seem to come in a million different formats
	(let ((line2 (string-search-char #\return trailer-text)))
	  (when (and line2
		     (or (and (sys:%string= trailer-text 0 "Merged from " 0 12)
			      (not (string-search-char #\space trailer-text
						       :start 12 :end line2)))
			 (and (= line2 15)
			      (eql (aref trailer-text 15) #\return)
			      (sys:%string= trailer-text 0 "Section merged:" 0 15)))
		     (or (eql (aref trailer-text (1+ line2)) #\return)
			 (and (sys:%string= trailer-text (1+ line2) "Inserted in " 0 12)
			      (not (string-search-char #\space trailer-text
				     :start (+ line2 13)
				     :end (string-search-char #\return trailer-text
							      :start (1+ line2)))))
			 (sys:%string= trailer-text (1+ line2) "Ancestor:" 0 9)))
	    (setq trailer-text (and (setq line2 (string-search-char #\return trailer-text
								    :start (1+ line2)))
				    (string-search-not-set '(#\space #\return)
							   trailer-text
							   :start (1+ line2))
				    (substring trailer-text (1+ line2)))))))
      (when (and trailer-text include-author-and-date)
	(let ((author (vci::file-version-info-author version-info))
	      (version-creation-date (vci::file-version-info-creation-date version-info)))
	  (multiple-value-bind (secs minutes hours day month year)
	      (time:decode-universal-time version-creation-date)
	    (setq trailer-text
		  (string-append (format nil "Version ~a was created by ~a on ~d/~d/~d ~
                                                 at ~d:~2,'0d:~2,'0d~%"
					 version-info author month day year hours minutes secs)
				 trailer-text)))))
      trailer-text)))
(defun get-file-attribute-list (encached-file version)
  (with-open-stream (ass (open-encached-file-stream :encached-file encached-file
						    :file-version version
						    :only-section 0))
    (let ((dummy (fs:make-dummy-pathname "Temp")))
      (let ((list (fs:read-attribute-list dummy ass)))
	(unless (getf list :syntax)
	  (if (eql (getf list :base 8) 8)
	      (setf (getf list :syntax) :zetalisp)
	      (setf (getf list :syntax) :common-lisp)))
	(unless (getf list :base)
	  (if (eql (getf list :syntax) :common-lisp)
	      (setf (getf list :base) 10.)
	      (setf (getf list :base) 8.)))
	list))))
(defun make-private-patch-from-file-branch (pathname branch-name patch-pathname &rest options)
  (declare (arglist pathname branch-name patch-pathname
		    &key patch-note base-branch-name base-branch-version name author
			 reviewer comments date))
  (write-textual-file (apply #'make-private-patch-from-file-branch-internal
			     pathname branch-name options)
		      patch-pathname))
;;; Returns patch-source
(defun make-private-patch-from-file-branch-internal (pathname branch-name
						     &key patch-note
						     base-branch-name
						     base-branch-version
						     name
						     (author zl:user-id)
						     reviewer
						     comments
						     (date (get-universal-time)))
  (let ((encached-file (find-or-make-locked-encached-file :pathname pathname))
	(patch-source (make-instance 'private-patch-source
					 :patch-note patch-note
					 :name name
					 :author author
					 :reviewer reviewer
					 :comments comments
					 :date date)))
    (add-file-branch-changes-to-patch encached-file branch-name patch-source
				      base-branch-name base-branch-version)
    patch-source))
(defun add-file-branch-changes-to-patch (encached-file branch-name patch-source
					 base-branch-name base-branch-version)
  (let* ((base-version (or (and base-branch-name
				(encached-file-header-merge-version
				  encached-file
				  (make-file-version :branch-name base-branch-name
						     :branch-version (or base-branch-version
									 ':newest))))
			   (vci::encached-file-branch-parent-version encached-file branch-name)
			   (encached-file-header-merge-version
			     encached-file
			     (make-file-version :branch-name branch-name
						:branch-version :oldest))))
	 (patch-version (encached-file-header-merge-version
			  encached-file
			  (make-file-version :branch-name branch-name
					     :branch-version :newest)))
	 (common-ancestor (encached-file-find-common-ancestor encached-file
							      base-version
							      patch-version)))
    (unless common-ancestor
      (error "~A and ~A have no common ancestor." base-version patch-version))
    (add-changed-sections-to-patch patch-source encached-file common-ancestor
				   base-version patch-version)))  
(defun make-private-patch-from-system-branch (system branch-name patch-pathname
					      &rest options)
  (declare (arglist system branch-name patch-pathname
		    &key include-components base-branch-name base-branch-version
			 patch-note name author reviewer comments date))
  (write-textual-file (apply #'make-private-patch-from-system-branch-internal
			     system branch-name options) patch-pathname))
;;; Returns patch-source
(defun make-private-patch-from-system-branch-internal (system branch-name
						       &key
						       include-components
						       base-branch-name
						       base-branch-version
						       patch-note
						       name
						       (author zl:user-id)
						       reviewer
						       comments
						       (date (get-universal-time)))
  (let ((patch-source (make-instance 'private-patch-source
				     :patch-note patch-note
				     :name name
				     :author author
				     :reviewer reviewer
				     :comments comments
				     :date date))
	(system (sct:find-system-named system)))
    (let* ((all-files
	     (if (keywordp branch-name)
		 (delete-if-not #'fs:pathname-vc-p
				(sct:get-all-system-input-files
				  system
				  :include-components include-components
				  :system-branch branch-name))
	       (loop for path in
			 (sct:get-all-system-version-controlled-files
			   system :include-components include-components)
		     collect (send path :new-pathname
				   :vc-branch branch-name
				   :vc-version ':newest))))
	   (sct:*system* system)
	   (sct:*version* :newest)
	   (sct:*branch* (sct:system-default-system-branch system))
	   (sct:*component-system-info* nil)
	   (system-op :compile)
	   (top-level-p t)
	   (keys `(:recompile t
		   :never-load t
		   :version :newest
		   :include-components ,include-components)))
      (sct:with-plan-for-system (plans system-op top-level-p keys)
	(setq plans (apply #'sct:flatten-plans-for-components
			   plans nil
			   :include-components include-components
			   keys))
	(let ((all-plan-files
		(delete-duplicates
		  (delete-if-not #'pathnamep
				 (loop for plan in plans appending (sct:plan-inputs plan))))))
	  (setq all-files
		(loop for plan-file in all-plan-files
		      as all-file = (car (member (fs:vc-pathname-flat-pathname plan-file)
						 all-files :key #'fs:vc-pathname-flat-pathname))
		      when all-file collect all-file))
	  (loop for file in all-files
		do
	    (let ((encached-file-header
		    (find-or-make-encached-file-header
		      :pathname (fs:vc-pathname-flat-pathname file))))
	      (when (branch-defined-p encached-file-header branch-name)
		(let ((encached-file
			(find-or-make-locked-encached-file
			  :pathname (fs:vc-pathname-flat-pathname file))))
		  (add-file-branch-changes-to-patch encached-file branch-name patch-source
			(and base-branch-name
			     (branch-defined-p encached-file-header base-branch-name)
			     base-branch-name)
			base-branch-version)))))
	  patch-source)))))
(cp:define-command (com-make-vc-private-patch-file
		     :name "Make VC Private Patch File"    
		     :command-table "User"
		     :provide-output-destination-keyword nil)
    ((file 'pathname :documentation "A pathname of a VC file."
	   :prompt "VC File pathname")
     (branch `((file-branch-name :relative-to-encached-file
				 ,(and file (find-or-make-locked-encached-file :pathname file)))
	       :description "file branch name")
	     :prompt "branch name"
	     :documentation "Takes the changes in this branch and put them into a patch.")
     (patch-file `((pathname) :direction :write)
		 :prompt "Patch file pathname"
		 :default (and file (send file :new-canonical-type :vc-patch))
		 :documentation "Put the resulting patch file here.")
     &key
     (base-branch `((file-branch-name :relative-to-encached-file
				      ,(and file (find-or-make-locked-encached-file
						   :pathname file))))
      :default nil
      :documentation "Take changes relative to this branch")
     (base-version '((dw:token-or-type (:newest :oldest) ((integer 0 *))))
      :default (and base-branch :newest)
      :documentation "Take changes relative to this version of the base branch")
     (patch-note 'string :documentation "A private patch note"))
   (make-private-patch-from-file-branch file branch patch-file
					:patch-note patch-note
					:base-branch-name base-branch
					:base-branch-version base-version)
   (fs:set-default-pathname patch-file)		1; this doesn't help
0   (dw::push-for-presentation-type		1;but this sure does.
0     (dw::presentation-type-presentation-type-history 'pathname) patch-file 'pathname))
(cp:define-command (com-add-patch-vc-file-differences :command-table "User"
						      :provide-output-destination-keyword nil)
    ((file 'pathname :documentation "A pathname of a VC file."
	   :prompt "VC File pathname")
     (branch `((file-branch-name :relative-to-encached-file
				 ,(and file (find-or-make-locked-encached-file :pathname file)))
	       :description "file branch name")
	     :prompt "branch name"
	     :documentation "Takes the changes in this branch and put them into a patch.")
     &key
     (base-branch `((file-branch-name :relative-to-encached-file
				      ,(and file (find-or-make-locked-encached-file
						   :pathname file))))
      :default nil
      :documentation "Take changes relative to this branch")
     (base-version '((dw:token-or-type (:newest :oldest) ((integer 0 *))))
      :default (and base-branch :newest)
      :documentation "Take changes relative to this version of the base branch")
     (patch-note 'string :documentation "A private patch note"))
   (add-patch-source-to-current-patch
     (make-private-patch-from-file-branch-internal file branch
						   :patch-note patch-note
						   :base-branch-name base-branch
						   :base-branch-version base-version)))
(cp:define-command (com-make-vc-system-branch-patch-file
		     :name "Make VC System Branch Patch File"
		     :command-table "User"
		     :provide-output-destination-keyword nil)	
    ((system 'sct:system :documentation "Make a patch from a branch of this system.
Note that it dosen't have to be one of the \"official\" branches listed by <Help>.")
     (branch `((sct:system-branch :system ,system))
	     :documentation "Take the changes in this branch in all files of the
system, and put them in the patch file")
     (patch-file `((pathname) :direction :write :default-type :vc-patch)
		 :documentation "Put the resulting patch file here.")
     &key
     (include-components 'boolean :default nil :mentioned-default t
			 :documentation "Include component systems")
     (base-branch `((sct:system-branch :system ,system)) :default nil
      :documentation "Take changes relative to this branch")
     (base-version '((dw:token-or-type (:newest :oldest) ((integer 0 *))))
      :default (and base-branch :newest)
      :documentation "Take changes relative to this version of the base branch")
     (patch-note 'string :documentation "A private patch note"))
   (make-private-patch-from-system-branch system branch patch-file
					  :patch-note patch-note
					  :include-components include-components
					  :base-branch-name base-branch
					  :base-branch-version base-version)
   (fs:set-default-pathname patch-file)	1;this dosen't help anything.
0   (dw::push-for-presentation-type		1;but this sure does.
0     (dw::presentation-type-presentation-type-history 'pathname) patch-file 'pathname))
(cp:define-command (com-add-patch-vc-system-differences :command-table "User"
							:provide-output-destination-keyword nil)	
    ((system 'sct:system :documentation "Make a patch from a branch of this system.
Note that it doesn't have to be one of the \"official\" branches listed by <Help>.")
     (branch `((sct:system-branch :system ,system))
	     :documentation "Take the changes in this branch in all files of the
system, and put them in the patch file")
     &key
     (include-components 'boolean :default nil :mentioned-default t
			 :documentation "Include component systems")
     (base-branch `((sct:system-branch :system ,system)) :default nil
      :documentation "Take changes relative to this branch")
     (base-version '((dw:token-or-type (:newest :oldest) ((integer 0 *))))
      :default (and base-branch :newest)
      :documentation "Take changes relative to this version of the base branch")
     (patch-note 'string :documentation "A private patch note"))
   (add-patch-source-to-current-patch
     (make-private-patch-from-system-branch-internal system branch
						     :patch-note patch-note
						     :include-components include-components
						     :base-branch-name base-branch
						     :base-branch-version base-version)))
