;;; -*- Mode: LISP; Syntax: Common-Lisp; Base: 10; Package: VC-PATCHES; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");;; This file contains the version control patch system.
;;;
;;; The version control patch system replaces the patch system in version control.
;;; In place of files containing copies of patched source, it defines patch files
;;; as references to version control file sections.  Compilation takes place via
;;; a stream that reads each of the sections in turn, negotiating with the major
;;; mode to package the sections.
;;;
;;; 

;;;
;;;;;; The in-memory representation of a patch file
;;;

0(defflavor patch-source
	((name)					1; "System 352.1"
0	 (pathname)				1; that we came out of,
0						1; or are intended to go into.
0	 (author)
	 (reviewer)
	 (comments)				1;on the file.
0						1;per-section comments come from
0						1;the vc file section modification comments.
0	 (date (get-universal-time))
	 (sections nil)				1; a list of sections
0	 )
	()
  :abstract-flavor
  (:initable-instance-variables name author reviewer comments date sections)
  (:writable-instance-variables))


(defflavor system-patch-source
	((system)
	 (major-version)
	 (minor-version))
	(patch-source)
  (:writable-instance-variables)
  (:init-keywords :system)
  (:initable-instance-variables major-version minor-version))

(defmethod (make-instance system-patch-source) (&key ((:system system-name))
						     &allow-other-keys)
  (setq system (sct:find-system-named system-name)))

(defgeneric system-p (patch-object)
  (:method (patch-source) nil)
  (:method (system-patch-source) t))
(defgeneric patch-source-patch-note (patch-source)
  (:method (patch-source) nil))

1;; Private patches are not restricted to a single system.
;; they keep track of systems on a section-by-section basis,
;; so that they can be sorted out later.
0(defflavor private-patch-source
	((patch-note))
	(patch-source)
  (:conc-name patch-source-)
  (:writable-instance-variables)
  (:initable-instance-variables))

(defgeneric private-p (patch-objet)
  (:method (patch-source) nil)
  (:method (private-patch-source) t))

(defgeneric source-recreation-keywords (patch-source)
  (:method-combination :append))

(defmethod (source-recreation-keywords patch-source) ()
  `(:name ,name
    :author ,author
    :reviewer ,reviewer
    :comments ,comments
    :date ,date))

(defmethod (source-recreation-keywords system-patch-source) ()
  `(:system ,(sct:system-name system)
    :major-version ,major-version
    :minor-version ,minor-version))

(defmethod (source-recreation-keywords private-patch-source) ()
  `(:patch-note ,patch-note))

(defmethod (source-recreation-form patch-source) ()
  `(make-patch-instance ',(flavor:flavor-name (sys:%instance-flavor self))
			,@(source-recreation-keywords self)
			:sections ,`(list ,@(loop for section in sections
						  collect (section-recreation-form section)))))

1;;;
;;;;;; Sections of patches.
;;;

0(defflavor patch-section
	((major-mode)
	 (pathname)				1;should be a VC pathname.
0	 (section-id)
	 (attribute-list)
	 (comment))
	()
  :abstract-flavor
  (:init-keywords :major-mode)
  (:initable-instance-variables pathname section-id attribute-list comment)
  (:writable-instance-variables))

(defmethod (make-instance patch-section) (&key ((:major-mode major-mode-keyword))
					      &allow-other-keys)
  (setq major-mode (zwei:major-mode-from-keyword major-mode-keyword)))

(defmethod (private-p patch-section) () nil)
(defmethod (system-p patch-section) () nil)

(defflavor system-patch-section () (patch-section))

(defmethod (system-p system-patch-section) () t)

(defflavor private-patch-section
	((system))
	(patch-section)
  (:init-keywords :system)
  (:writable-instance-variables))

(defmethod (private-p private-patch-section) () t)

(defmethod (make-instance private-patch-section) (&key ((:system system-name))
						       &allow-other-keys)
  (setq system (and system-name (sct:find-system-named system-name))))

(defmethod (add-section patch-source) (patch-section)
  (setq sections (nconc sections `(,patch-section))))

(defgeneric section-recreation-keywords (patch-section)
  (:method-combination :append))

(defmethod (section-recreation-keywords patch-section) ()
  `(:pathname ,pathname
    :major-mode ,(send major-mode :major-mode-keyword)
    :section-id ,section-id
    :comment ,comment
    :attribute-list ',attribute-list))

(defmethod (section-recreation-keywords private-patch-section) ()
  (and system
       `(:system ,(sct:system-name system))))

(defmethod (section-recreation-form patch-section) ()
  `(make-patch-instance ',(flavor:flavor-name (sys:%instance-flavor self))
			,@(section-recreation-keywords self)))

1;;;
;;; The above is good enough to write a patch file out as a lisp form
;;; and read it back in the same way.
;;; That may not be the right eventual, as opposed, say, to a bin file.
;;;

0(defun format-patch-source (list) (gprint:gformat "(2*_*!<*+1_*+-1!>)" list))
1;;; this function exists only so that it can be formatted specially.
0(defun make-patch-instance (&rest args)
  (apply #'make-instance args))

(defprop make-patch-instance format-patch-source gprint::formatter)

(cl:defparameter *patch-file-attribute-list*
		 `(:package :cl-user
		   :syntax :common-lisp
		   :base 10
		   :patch-file t
		   :version-control-patch 1))
(fs:define-canonical-type :vc-patch "VCP")

(si:associate-compiler-info :vc-patch "COMPILE-VC-PATCH" "VC-PATCHES")
(defun compile-vc-patch (source-pathname)
  (let ((ps (read-textual-file source-pathname)))
    (patch-source-compile-to-file ps (send source-pathname :new-canonical-type :bin))))

(defmethod (write-textual-file patch-source) (pathname)
  (with-open-file (s pathname :direction :output)
    (with-standard-io-environment
      1;; the attribute list is there so that you can play in ZMACS.
0      (format s ";;; -*-~{~{ ~A: ~A;~}~} -*-~2%"
	      (zwei:major-mode-format-attribute-list-info
		(zwei:major-mode-from-keyword :lisp)
		*patch-file-attribute-list*))
      (gprint:print-object (source-recreation-form self) #'format-patch-source s)	
      (send s :truename))))


1;;; add check of attribute list to insure correct version of the patch file.
0(defun read-textual-file (pathname)
  (with-open-file (s pathname :direction :input)
    (with-standard-io-environment
      (let ((cons-form (read s)))
	(let ((ps (eval cons-form)))
	  (setf (patch-source-pathname ps) (send s :truename))
	  ps)))))


(defprop :version-control-patches t fs:known-file-attribute)
  
(defun (:version-control-patches fs:file-attribute-binding) (ignore ignore version)
  (unless (typep version 'fixnum)
    (error  "~A is not a version number of a version control patch file." version))
  (unless (= version 1)
    (error "Version Control Patch file version ~D not supported." version)))


1;;; the slashes on the parens are just to shut up editor paren counting.0(
(defmethod (major-mode-patch-section-preamble zwei:lisp-language-mixin)
	   (pathname section-id attribute-list comment)
  (format nil "~
;=====================================
\(SYSTEM-INTERNALS:BEGIN-PATCH-SECTION\)
; From section ~D~Q
\(SYSTEM-INTERNALS:PATCH-SECTION-SOURCE-FILE \"~A\"\)
\(SYSTEM-INTERNALS:PATCH-SECTION-ATTRIBUTES \"~A -*- ~{~{~A: ~A;~}~} -*- ~@[~A~]1\0"\)~%"
          section-id
	  (lambda ()
	    (when comment
	      (loop for start = 0 then (1+ end)
		    for end = (string-search-char #\return comment :start start)
		    do (unless (= start (string-length comment))
			 (terpri)
			 (write-char #\;)
			 (write-string comment *standard-output* :start start :end end))
		    while end)))
          (send pathname :string-for-readable-printing)
	  (send self :attribute-comment-start)
	  (zwei:major-mode-format-attribute-list-info
	    self
	    attribute-list)
	  (send self :attribute-comment-end)))

1;;; a funny stream that answers questions the way that the compiler
;;; wants to hear them.  The same instance is recycled over and over.

0(defflavor patch-source-stream
	(pathname
	 truename
	 translated-pathname
	 (si:methods-not-to-pass-on nil)
	 )
	(si:indirect-stream-mixin si:input-stream)
  (:gettable-instance-variables pathname truename translated-pathname)
  (:initable-instance-variables)
  (:writable-instance-variables))

(defmethod (patch-source-stream-setup patch-source-stream)
	   (a-pathname a-truename a-translated-pathname a-stream)
  (setq pathname a-pathname truename a-truename translated-pathname a-translated-pathname)
  (setf (si:indirect-stream-stream self) a-stream)
  )

(defmethod (:whole-file-p patch-source-stream) () t)

(defmethod (:listen patch-source-stream) ()
  (send si:stream :listen))

(defmethod (:tyi patch-source-stream) (&optional eof)
  (send si:stream :tyi eof))

(defmethod (:untyi patch-source-stream) (ch)
  (send si:stream :untyi ch))

1;;; --- define a bunch of other pass-along methods for speed.

0(compile-flavor-methods patch-source-stream)

1;; the bin-pathname has to be correct, we don't fool with defaults and types.
0(defmethod (patch-source-compile-to-file patch-source) (bin-pathname)
  (declare (values binary source-truename binary-truename))
  (error-restart (error "Retry compiling ~A" name)
    (catch-error-restart (error "Skip compiling ~A" name)
      1;; generic pathnames -- the bane of our existence.
0      (let ((generic-pathname
	      (fs:make-dummy-pathname "Patch Source" *patch-file-attribute-list*))
	    (source-stream (make-instance 'patch-source-stream))
	    (bin-truename)
	    (source-truename (and pathname (send pathname :truename))))
	(flet ((compile-a-stream (section stream additional-bindings truename)
		 (patch-source-stream-setup
		   source-stream
		   (if section (patch-section-pathname section) pathname)
		   truename
		   (if section
		       (send (patch-section-pathname section) :translated-pathname)
		       (and pathname (send pathname :translated-pathname)))
		   stream)
		 (compiler:compile-from-stream	
		   source-stream
		   generic-pathname
		   'compiler:compile-to-file
		   additional-bindings
		   'compiler:initialize-p nil
		   )))
	  (si:writing-bin-file (compiler:*binary-output-stream* bin-pathname)
	    1;; somewhat lisp specific foolishness -- 
0	    (setq bin-truename (send compiler:*binary-output-stream* :truename))
	    (when pathname
	      (compiler:reset-file-warnings (send pathname :generic-pathname)))
	    (si:dump-attribute-list *patch-file-attribute-list*
				      compiler:*binary-output-stream*)
	    (when (patch-source-patch-note self)
	      (let ((*readtable* si:*common-lisp-readtable*))
		(with-input-from-string (note-stream
					  (format nil "(sys:note-private-patch ~S)"
						  (patch-source-patch-note self)))
		  (compile-a-stream nil note-stream nil source-truename))))
	    (loop for section in sections
		  do
	      (let ((preamble (major-mode-patch-section-preamble
				(patch-section-major-mode section)
				(patch-section-pathname section)
				(patch-section-section-id section)
				(patch-section-attribute-list section)))
		    (additional-bindings
		      (loop with list = (send (patch-section-major-mode section)
					      :additional-attributes)
			    for (indicator value)
				on (patch-section-attribute-list section) by #'cddr
			    when (assoc indicator list)
			      collect indicator and collect value)))
		(with-open-stream (text (patch-section-text-stream section))
		  (when preamble
		    (with-input-from-string (section-preamble preamble)
		      (compile-a-stream section section-preamble additional-bindings
					(send text :truename))))
		  (compile-a-stream section text additional-bindings
				    (send text :truename)))))))
	(values bin-pathname source-truename bin-truename)))))
(defmethod (show-patch-source patch-source) (stream &optional (include-attribute-list t))
  (let ((source-stream (make-instance 'patch-source-stream)))
    (flet ((show-a-stream (section p-stream truename)
	     (patch-source-stream-setup
	       source-stream
	       (patch-section-pathname section)
	       truename
	       (send (patch-section-pathname section)
		     :translated-pathname)
	       p-stream)
	     (fresh-line stream)
	     (stream-copy-until-eof p-stream stream)))
      (when include-attribute-list
	(format stream "~&File attribute list: ~S" *patch-file-attribute-list*))
      (loop for section in sections
	    do
	(let ((preamble (major-mode-patch-section-preamble
			  (patch-section-major-mode section)
			  (patch-section-pathname section)
			  (patch-section-section-id section)
			  (patch-section-attribute-list section)
			  (patch-section-comment section))))
	  (fresh-line stream)
	  (when preamble (write-string preamble stream))
	  (with-open-stream (text (patch-section-text-stream section))
	    (show-a-stream section text (send text :truename)))
	  (terpri stream)
	  (terpri stream))))))
;; For each section, apply function to zwei:interval, major-mode, attribute-list, and comment
(defmethod (map-over-patch-text patch-source) (function)
  (declare (sys:downward-funarg function))
  (let ((interval (zwei:create-interval nil nil 'zwei:named-buffer-with-sections))
	(source-stream (make-instance 'patch-source-stream)))
    (dolist (section sections)
      (zwei:with-interval-stream (interval-stream interval)
	(let ((preamble (major-mode-patch-section-preamble
			  (patch-section-major-mode section)
			  (patch-section-pathname section)
			  (patch-section-section-id section)
			  (patch-section-attribute-list section)
			  (patch-section-comment section))))
	  (fresh-line interval-stream)
	  (when preamble (write-string preamble interval-stream))
	  (with-open-stream (text (patch-section-text-stream section))
	    (patch-source-stream-setup source-stream (patch-section-pathname section)
				       (send text :truename)
				       (send (patch-section-pathname section)
					     :translated-pathname)
				       text)
	    (stream-copy-until-eof text interval-stream))
	  (funcall function interval (patch-section-major-mode section)
			    (patch-section-attribute-list section)
			    (patch-section-comment section))))
      (zwei:delete-interval interval))))

(defmethod (patch-section-text-stream patch-section) ()
  (open-encached-or-file-stream pathname :only-section section-id))
(defun read-and-show-patch-source (pathname stream)
  (let ((ps (read-textual-file pathname)))
    (show-patch-source ps stream)))
(cp:define-command (com-show-vc-patch :name "Show VC Patch" :command-table "User")
    ((patch-file '((pathname) :default-type :vc-patch)
		 :documentation "A VC Patch file"))
   (read-and-show-patch-source patch-file *standard-output*))		
;;; Insert a VC patch into an SCT patch that has already been started
(defun add-patch-source-to-current-patch (ps)
  (let ((patch-buffer zwei:(patch-state-buffer *current-patch*)))
    ;; Put in patch comments for each section
    (map-over-patch-text ps (lambda (interval mode attribute-list comment)
			      ;; Gross kludge to get a definition name
			      (zwei:sectionize-buffer-internal interval nil mode
				(find-package (getf attribute-list :package)) nil)
			      (loop for section in (zwei:buffer-sections interval)
				    as fspec = (zwei:section-node-function-spec section)
				    as type = (zwei:section-node-definition-type section) do
				(unless (eq type 'zwei:header)
				  (add-patch-comment-to-current-patch type fspec
				    (or comment "(no modification comment supplied)"))
				  (setq comment "..")))))
    ;; Now put the sections at the end of the buffer
    (with-open-stream (stream (zwei:open-interval-stream (zwei:interval-last-bp patch-buffer)))
      (show-patch-source ps stream nil))))
(defun add-patch-comment-to-current-patch (type fspec comment)
  (setf zwei:(patch-state-reason-interval *current-patch*)
	(send zwei:(patch-state-mode *current-patch*)
	      :patch-reason zwei:(patch-state-buffer *current-patch*)
			    zwei:(patch-state-reason-interval *current-patch*)
			    (let* ((zwei:*interval*
				     (zwei:create-interval
				       (zwei:section-definition-name fspec type)))
				   (bp (zwei:interval-last-bp zwei:*interval*))
				   (bp2 (zwei:copy-bp bp)))
			      (zwei:insert bp ": ")
			      (zwei:insert bp comment)
			      (loop doing (setq bp2 (zwei:forward-line bp2))
				    while (and (zwei:bp-line bp2)
					       (zwei:bp-< bp2 bp))
				    do (zwei:insert bp2 "  "))
			      zwei:*interval*)
			    t)))

#|
(defvar *ps* nil)				1;for testing
0|#
#|
(defun patch-test-create ()
  (setq *ps* (make-instance 'private-patch-source
			    :name "Test of the emergency broadcast system"))
  (setf (patch-source-pathname *ps*) #p"sap:>Margulies>test-patch.lisp.1")
  (add-section *ps*
	       (make-instance
		 'system-patch-section
		 :pathname
		 (pathname "version-control:vc;vc;version-control-sys.lisp.newestinitial.0")
		 :section-id 1
		 :attribute-list '(:mode :lisp :package :zwei :syntax :zetalisp	
					 :base 10.)
		 :major-mode :lisp))
  (add-section *ps*
	       (make-instance
		 'system-patch-section
		 :pathname
		 (pathname "version-control:vc;vc;zwei.lisp.newestinitial.0")
		 :section-id 1
		 :major-mode :lisp
		 :attribute-list '(:mode :lisp :package :zwei :syntax :zetalisp	
					 :base 10.))))
|#
