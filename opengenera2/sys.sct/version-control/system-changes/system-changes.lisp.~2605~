;;; -*- Mode: LISP; Syntax: Common-lisp; Package: D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI")VC-SYSTEM-CHANGES0; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

1;;; This file contains the code that supports "System changes".  
;;;
;;; A system change is the version control equivalent of a patch in the current editor.
;;; Any modification to a VC file that is part of an SCT system that is part of
;;; a public branch has to be recorded in the system's journal of source changes.
;;; By "has to be" is meant that no convienient interface will be provided for
;;; avoiding it, even though there is of course no way to prevent the sufficiently
;;; devious.
;;;
;;; Whenever the user sets a buffer disposition to modifiable against a public branch,
;;; or otherwise takes steps to modify a public branch, the change is associated with
;;; a system change object.

;;; note that it is possible to derive a patch file from a system change.
;;; Patch files are in and of themselves independent of system changes,
;;; though they can point to a system change.
;;; There is an editor interface for creating a patch file, though, which
;;; this code knows how to use.

;;; These don't need to store comments for sections, since the files store those.
0(defflavor system-change
	(system					1;The SCT system object
0	 major-version				1;same as the major binary version
0	 minor-version				1;distinct for each source change
0	 (buffer-list nil)			1;Buffers registered against this
0						1;change so far.
0	 (author zl:user-id)
	 (reviewer nil)
	 (change-buffer nil)			1;place for user to edit
0						1;comments for the entire change
0	 (patch nil)				1;if a patch is generated from here,
0						1;the patch object.
0	 )
	()
  (:initable-instance-variables system major-version minor-version author reviewer)
  (:writable-instance-variables author reviewer)
  (:readable-instance-variables))

(defvar *current-system-change* nil)
(defvar *active-system-changes* nil)
(defvar *inactive-system-changes* nil)

1;;; This is the comment buffer.  It is intended to be a viewspec consisting
;;; of a section for comments on the entire change, followed by comments on
;;; each of the modified sections. (as borrowed from the buffers themselves).
;;; I guess we will debug shared hard sections this way...
;;; Questions: do we want to annotate kludges here?
;;;            how about a "control panel" diagram line for manipulating the
;;;            change, or finishing it?

0(z:define-special-buffer-type system-change-buffer
	(system-change
	  attribute-s-v-node
	  overall-s-v-node
1	  ;; we need to map from a buffer in the system change
0	  1;; to all of that buffer's section-version-nodes (and
0	  1;; associated trailer and kludge nodes)
0	  buffer-changed-node-array
	  (one-liners nil)			1;t when just single-line summaries
0						1;are on display.
0	  )
	(z:basic-vc-shared-viewspec-buffer z:special-purpose-buffer)
	system-change
	"System Change"
  (:settable-instance-variables system-change)
  (:buffer-init-options :set-system-change))
(defmethod (:reusable system-change-buffer) (&rest ignore)
  nil)
(defmethod (:description system-change-buffer) ()
  (format nil "System change for ~A version ~D.~D"
	  (system-change-system system-change)
	  (system-change-major-version system-change)
	  (system-change-minor-version system-change)))
1;;; the buffer-s-v-node alist relates buffers to these.
0(defstruct changed-node
  (buffer nil)
  (patch-only-before nil)
  (patch-only-instead nil)
  (section-version nil)
  (trailer nil)
  (patch-only-after nil))
(defflavor system-change-section-version-node
	()
	(z:basic-vc-section-version-node))
(defmethod (z:diagram-legend system-change-section-version-node) (&optional ignore)
  (and (not (z:vc-hard-section-node-attribute-section-p self))
       z:legend))
(defmethod (:revert system-change-buffer) ()
  (setq buffer-changed-node-array (make-array 20 :fill-pointer 0))
  (setq z:display-array (make-array 100 :fill-pointer 0))
  (setq z:look-here-first 0)
  1;; first, we need an attribute section.
0  1;; we can use a real s-v-node for the purpose.
0  (setq attribute-s-v-node
	(z:make-interval 'system-change-section-version-node
			 :home-buffer self
			 :section-id nil
			 :trailer-node nil
			 1;;--- Replace Text with the new major mode that we will
0			 1;;--- need for the old-lines stuff.
0			 :initial-line (copy-seq " -*- Mode: Text; -*-")))
  (z:vcb-add-diagram-lines-to-node
    attribute-s-v-node nil
    (z:make-diagram-line z:*vc-section-separating-diagram-flavor*))
  (setq z:first-bp (z:create-bp (z:bp-line (z:node-first-bp attribute-s-v-node)) 0 :normal
				self))
  (vector-push-extend attribute-s-v-node z:display-array)
  1;; now, someplace for comments about the entire change.
0  1;; --- ? should we put initial generated text in here ?
0  (setq overall-s-v-node
	(z:make-interval 'system-change-section-version-node
			 :first-bp nil
			 :last-bp nil
			 :legend "Comments for System Change"	1;pick up the name?
0			 :home-buffer self
			 :section-id nil
			 :trailer-node nil))
  (z:vcb-add-diagram-lines-to-node
    overall-s-v-node
    (z:make-diagram-line z:*vc-section-title-diagram-flavor*
			 :associated-node overall-s-v-node)
    (z:make-diagram-line z:*vc-section-separating-diagram-flavor*))
  (vector-push-extend overall-s-v-node z:display-array)
  (setq z:last-bp (z:create-bp (z:bp-line (z:node-last-bp overall-s-v-node)) 0
			       :normal self))
  )
1;;; this is pretty trivial, since all the hard work happens in the change buffer.
0(defmethod (add-buffer-to-system-change system-change) (buffer)
  (push buffer buffer-list)
  )
1;;;--- lots of work for kludge text not done yet.
;;;--- not set up for one-liners, either.
0(defmethod (:make-current system-change-buffer :after) ()
  (let ((new-changed-nodes nil))
    (loop for buffer in (system-change-buffer-list system-change)
	  do
      (if (member buffer z:*zmacs-buffer-list*)
	  (progn
	    (loop for s-v-node 
		      being the array-elements of (z:vcfb-section-version-node-array buffer)
		      using (index index)
		  do
	      (unless (find s-v-node buffer-changed-node-array
			    :key #'changed-node-section-version)
		(let ((new-node
			(make-changed-node
			  :buffer buffer
			  :section-version s-v-node
			  :trailer1 0(z:vc-section-version-node-trailer-node s-v-node)
			  :patch-only-before
			  (z:vc-section-version-node-patch-only-before-node
			    s-v-node)
			  :patch-only-after
			  (z:vc-section-version-node-patch-only-after-node
			    s-v-node)
			  :patch-only-instead
			  (z:vc-section-version-node-patch-only-instead-node
			    s-v-node)
			  )))
		  (push new-node new-changed-nodes))))
	    1;; now get rid of any that we have but the buffer lacks
0	    (loop for cn being the array-elements of buffer-changed-node-array
		  with remove-c-nodes = nil
		  with remove-s-v-nodes = nil
		  do
	      (when (and (eq (changed-node-buffer cn) buffer)
			 (find (changed-node-section-version cn)
			       (z:vcfb-section-version-node-array buffer)))
		(push cn remove-c-nodes)
		(when (changed-node-section-version cn)
		  (push (changed-node-section-version cn) remove-s-v-nodes))
		(when (changed-node-trailer cn)
		  (push (changed-node-trailer cn) remove-s-v-nodes))
		(when (changed-node-patch-only-before cn)
		  (push (changed-node-patch-only-before cn) remove-s-v-nodes))
		(when (changed-node-patch-only-instead cn)
		  (push (changed-node-patch-only-instead cn) remove-s-v-nodes))
		(when (changed-node-patch-only-after cn)
		  (push (changed-node-patch-only-after cn) remove-s-v-nodes)))
	      finally
		(setq buffer-changed-node-array (remove-if
						  #'(lambda (cn)
						      (find cn remove-c-nodes))
						  buffer-changed-node-array))
		(setq z:display-array (remove-if
					#'(lambda (sv)
					    (find sv remove-s-v-nodes))
					z:display-array))))
	  1;; its gone. Remove its nodes.
0	  1;; collect all the duds in a list.
0	  (let ((duds-for-this-buffer
		  (remove-if #'(lambda (cn) (neq buffer (changed-node-buffer cn)))
			     buffer-changed-node-array)))
	    (setq z:display-array
		  (remove-if
		    #'(lambda (svn)
			(or
			  (find svn duds-for-this-buffer
				:test #'(lambda (svn cn)
					  (or
					    (eq svn (changed-node-section-version cn))
					    (eq svn (changed-node-trailer cn))
					    (eq svn (changed-node-patch-only-before cn))
					    (eq svn (changed-node-patch-only-after cn))
					    (eq svn (changed-node-patch-only-instead cn)))))))
		    z:display-array))
	    (setq buffer-changed-node-array
		  (delete-if #'(lambda (cn) (find cn duds-for-this-buffer))
			     buffer-changed-node-array)))))
    1;; we always just toss the new stuff in at the end.
0    1;; the user can reorder on command.
0    (loop for n in new-changed-nodes do
      (vector-push-extend n buffer-changed-node-array)
      (when (changed-node-patch-only-before n)
	(vector-push-extend (changed-node-patch-only-before n) z:display-array))
      (if (changed-node-patch-only-instead n)
	  (vector-push-extend (changed-node-patch-only-instead n) z:display-array)
	  (vector-push-extend (changed-node-section-version n) z:display-array))
      (when (changed-node-patch-only-after n)
	(vector-push-extend (changed-node-patch-only-after n) z:display-array))
      (vector-push-extend (changed-node-trailer n) z:display-array))
    (z:move-bp z:last-bp
	       (z:bp-line (z:node-last-bp (aref z:display-array
						(1- (fill-pointer z:display-array))
						)))
	       0)))
1;;;--- This needs to negotiate with the journal.
;;;--- until we patch in support for the new journal for SCT,
;;;--- however, we don't have a journal.  So we will always claim to be minor version 0.
;;;--- Journal hacking will include finding a half-baked change in the journal.
;;; This thing is not responsible for asking the user if they want to use
;;; and existing system change instead of creating a new one.
0(defun start-system-change (system major-version)
  (when *current-system-change*
    (push *current-system-change* *active-system-changes*))
  (setq *current-system-change*
	(make-instance 'system-change
		       :system system
		       :major-version major-version
		       :minor-version 0)))
(defmethod (make-instance system-change :after) (&rest ignore)
  (setq1 0change-buffer
	(send z:*current-command-loop* :find-special-buffer
	      'system-change
	      t
	      :set-system-change self)))	      
1;;;--- this has all the smarts for menus hacked out for now.
;;;--- they can be hacked back in later by cribbing from PATED as needed.
0(defun find-appropriate-system-change-for-buffer (buffer)
  (if (and *current-system-change*
	   (check-appropriate-system buffer *current-system-change*))
      *current-system-change*
      (select-system-change :new-ok t :buffer buffer)))
(define-presentation-type system-change ((&key active))
   :no-deftype t
   :parser ((stream &key type)
	    (values
	      (if active
		  (accept `((dw:member-sequence ,*active-system-changes*))
			  :prompt nil
			  :stream stream)
		  (accept `((dw:member-sequence ,(append *active-system-changes*
							 *inactive-system-changes*)))
			  :prompt nil
			  :stream stream))
	      type))
   :describer ((stream) (format stream "A~:[~*~;n active~] system change" active))
   :printer ((object stream)
	     (format stream "~A" object)	1;depend on the print-self
0	     ))
1;;for use in ZMACS...
0(defun select-system-change (&key new-ok (active t) buffer)
  (let ((which
	  (z:typein-line-accept (if new-ok
				    `((token-or-type (:new . "New") 
						     ((system-change :active ,active))))
				    `((system-change :active ,active)))
				:default (or *current-system-change*
					     (and (not active)
						  (first *inactive-system-changes*))))))
    (if (eq which :new)
	(new-system-change-for-buffer buffer)
	which)))
(defun new-system-change-for-buffer (buffer)
  (multiple-value-bind (system major-version)
      (zwei:system-for-buffer buffer)
    (or (start-system-change system major-version)
	(z:barf "Buffer ~A is not associated with a system." buffer)
	)))
(defun check-appropriate-system (buffer system-change)
  (multiple-value-bind (b-system b-major-version)
      (z:system-for-buffer buffer)
    (and (eq (sct:system-name (system-change-system system-change))
	     (sct:system-name b-system))
	 (= b-major-version (system-change-major-version system-change)))))
(z:defcom com-select-system-change-buffer
	  "Selects the system change buffer for the current system change.
With a numeric argument, reads a system change and selects its buffer." ()
  (let ((sc (if z:*numeric-arg-p*
		(select-system-change :new-ok nil :active nil)
		(or *current-system-change*
		    (z:barf "There is no current system change.")))))
    (z:make-buffer-current (system-change-change-buffer sc))
    z:dis-all))
(compile-flavor-methods vcsc::system-change-section-version-node
			vcsc::system-change-buffer)
