 ;;; ;;; -*- Mode: LISP; Base: 10; Package: FS; Syntax: Zetalisp; -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
(DEFFLAVOR VC-FILE-ACCESS-PATH-ENCAPSULATION
	((FILE-ACCESS-PATH)
	 (HOST))
	(FILE-ACCESS-PATH)
  (:INITABLE-INSTANCE-VARIABLES FILE-ACCESS-PATH))

(DEFMETHOD (:control-connection-lifetime vc-FILE-ACCESS-PATH-ENCAPSULATION) ()
  1000000000.)					;a BIG number, for now.

(DEFMETHOD (:PRINT-SELF vc-FILE-ACCESS-PATH-ENCAPSULATION) (STREAM IGNORE IGNORE)
  (SYS:PRINTING-RANDOM-OBJECT (SELF STREAM :TYPEP)
    (FORMAT STREAM " ~S" FILE-ACCESS-PATH)))
(DEFFLAVOR VCI::PROBE-STREAM ()
	   (FLAVOR:PROPERTY-LIST-MIXIN
	    SI:FILE-STREAM-MIXIN
	    SI:STREAM))

(DEFMETHOD (:PARSE-TRUENAME VCI::PROBE-STREAM) (PATHNAME)
  (PARSE-PATHNAME PATHNAME (PATHNAME-HOST SI:PATHNAME)))
(DEFMETHOD (:TRUENAME VCI::PROBE-STREAM) ()	;as good as any other way, I suppose.
  (SEND SELF :GET :TRUENAME))
(DEFMETHOD (:LENGTH VCI::PROBE-STREAM) ()	
  (SEND SELF :GET :LENGTH))
(DEFMETHOD (:TRANSLATED-PATHNAME VCI::PROBE-STREAM) ()
  (SEND SELF :GET :TRANSLATED-PATHNAME))
(ZWEI:DEFINE-SECTION-NAME VCI::PROBE-STREAM-COMPILE-FLAVOR-METHODS)

(COMPILE-FLAVOR-METHODS VCI::PROBE-STREAM)
;; Called from the access path.
(DEFUN VCI::OPEN-PROBE-STREAM (PATHNAME BASE-PATHNAME FILE-VERSION
			      FILE-ACCESS-PATH
			      TRANSLATED-PATHNAME
			      OPEN-KEYWORDS)
  FILE-ACCESS-PATH OPEN-KEYWORDS
  (LET ((EFH (VCI::FIND-OR-MAKE-ENCACHED-FILE-HEADER :PATHNAME BASE-PATHNAME)))
    (UNLESS EFH
      (ERROR "VCI::FIND-OR-MAKE-ENCACHED-FILE-HEADER returned nil rather than signalling."))
    (LET ((TRUE-VERSION (VCI:ENCACHED-FILE-HEADER-MERGE-VERSION
			     EFH
			     (VCI:COPY-FILE-VERSION FILE-VERSION)))
	  (BASE-TRUENAME (SEND BASE-PATHNAME :TRUENAME)))
      (LET ((VI (VCI::ENCACHED-FILE-VERSION-INFO EFH TRUE-VERSION)))
	(UNLESS (AND BASE-TRUENAME (LISTP (VCI::ENCACHED-FILE-FILE-INFO EFH))
		     (VCI::VERSION-DEFINED-P EFH TRUE-VERSION))
	  (SIGNAL 'VCI::UNDEFINED-FILE-VERSION
		  :UNDEFINED-VERSION TRUE-VERSION
		  :PATHNAME PATHNAME
		  :OPERATION :OPEN))
	(MAKE-INSTANCE
	  'VCI::PROBE-STREAM
	  :PATHNAME BASE-PATHNAME
	  :PROPERTY-LIST
	  `(:TRUENAME
	     ,(SEND BASE-TRUENAME
		    :NEW-PATHNAME :VERSION :NEWEST
		    :VC-BRANCH (VCI:FILE-VERSION-BRANCH-NAME TRUE-VERSION)
		    :VC-VERSION (VCI:FILE-VERSION-BRANCH-VERSION TRUE-VERSION))
	     :CHARACTERS T			;can't hurt
	     :TRANSLATED-PATHNAME ,TRANSLATED-PATHNAME
	     :LENGTH ,(VCI::FILE-VERSION-INFO-LENGTH VI)
	     :AUTHOR ,(VCI::FILE-VERSION-INFO-AUTHOR VI)
	     :CREATION-DATE ,(VCI::FILE-VERSION-INFO-CREATION-DATE VI)))))))
(DEFUN VC-PATHNAME-FLAT-PATHNAME (VCP)
  (SEND VCP :NEW-PATHNAME ':VC-BRANCH NIL ':VC-VERSION NIL))

(DEFMETHOD (FILE-ACCESS-PATH-OPEN vc-FILE-ACCESS-PATH-ENCAPSULATION)
	   (TRANSLATED-PATHNAME PATHNAME
				&REST OPEN-KEYWORDS
				&KEY
				DIRECTION
				ELEMENT-TYPE
				&ALLOW-OTHER-KEYS)
  (IGNORE TRANSLATED-PATHNAME)
  (UNLESS (CL:MEMBER DIRECTION '(:INPUT :PROBE))	
    (ERROR "Version Control pathnames may only be opened for input or probe."))
  ;; --- this may need a more specific fs error condition.
  (WHEN (EQ ELEMENT-TYPE :DEFAULT) (SETQ ELEMENT-TYPE 'CL:CHARACTER))
  (UNLESS (OR (EQ ELEMENT-TYPE 'CL:CHARACTER)
	      (EQ DIRECTION ':PROBE))
    (ERROR "Version-Control files must always be character files"))
  ;;--- perhaps ""'s should ERROR as an insufficently merged pathname?
  (LET ((BASE-PATHNAME (VC-PATHNAME-FLAT-PATHNAME PATHNAME))
	(FILE-VERSION (VCI:MAKE-FILE-VERSION
			   :BRANCH-NAME (IF (EQUAL (PATHNAME-VC-BRANCH PATHNAME) "")
					    NIL
					    (PATHNAME-VC-BRANCH PATHNAME))
			   :BRANCH-VERSION (IF (EQUAL (PATHNAME-VC-VERSION PATHNAME) "")
					       NIL
					       (PATHNAME-VC-VERSION PATHNAME)))))
    (VALUES
      (IF (EQ DIRECTION ':PROBE)
	  (VCI::OPEN-PROBE-STREAM PATHNAME BASE-PATHNAME FILE-VERSION SELF
				  TRANSLATED-PATHNAME
				  OPEN-KEYWORDS)
	(VCI::OPEN-INPUT-STREAM PATHNAME BASE-PATHNAME FILE-VERSION SELF
				TRANSLATED-PATHNAME
				OPEN-KEYWORDS))
      ;; Version-control files are always character files
      NIL)))
(DEFMETHOD (:PROPERTIES vc-FILE-ACCESS-PATH-ENCAPSULATION) (PATHNAME &OPTIONAL PROPS)
  (IGNORE PROPS)
  (WITH-OPEN-FILE (PROBE-STREAM PATHNAME :DIRECTION :PROBE :IF-DOES-NOT-EXIST :ERROR)
    (LET ((PLIST `(:LENGTH ,(SEND PROBE-STREAM :LENGTH)
		   :AUTHOR ,(SEND PROBE-STREAM :AUTHOR)
		   :CREATION-DATE ,(SEND PROBE-STREAM :CREATION-DATE)
		   :CHARACTERS T)))
      (VALUES PLIST NIL))))
(DEFUN VCI::OPEN-INPUT-STREAM (PATHNAME BASE-PATHNAME
			       FILE-VERSION
			       FILE-ACCESS-PATH
			       TRANSLATED-PATHNAME
			       OPEN-KEYWORDS)
  OPEN-KEYWORDS
  (LET ((ENCACHED-FILE (VCI:FIND-OR-MAKE-LOCKED-ENCACHED-FILE
			 :PATHNAME BASE-PATHNAME :NEW-FILE-P NIL :MAKE-OK NIL)))
    (WHEN ENCACHED-FILE
      (VCI:ENCACHED-FILE-HEADER-MERGE-VERSION ENCACHED-FILE FILE-VERSION)
      (RETURN-FROM VCI::OPEN-INPUT-STREAM
	(MAKE-INSTANCE 'VCI:ENCACHED-FILE-VERSION-STREAM
		       :ENCACHED-FILE ENCACHED-FILE
		       :VERSION FILE-VERSION
		       'PATHNAME PATHNAME
		       'VCI:RETURN-VC-PATHNAMES T))))
  ;; don't use an encached file header. we have to read the entire file anyway,
  ;; so we gain nothing except speed in the undefined version case.
  ;; on the other hand, it would be spiffy to leave what we learned encached.
  (LET ((STREAM NIL))
    (UNWIND-PROTECT-CASE ()
	(PROGN
	  (SETQ STREAM (OPEN BASE-PATHNAME :ELEMENT-TYPE 'CHARACTER))
	  (MAKE-INSTANCE 'VCI:ONE-VERSION-FILE-STREAM
			 :STREAM STREAM
			 :FILE-ACCESS-PATH FILE-ACCESS-PATH
			 :TRANSLATED-PATHNAME TRANSLATED-PATHNAME
			 :ENCACHE-FILE-HEADER T
			 :VERSION FILE-VERSION
			 :PATHNAME PATHNAME	;make the stupid file stream mixin happy.
			 'PATHNAME PATHNAME
			 'VCI:RETURN-VC-PATHNAMES T))
      (:ABORT (WHEN STREAM (CLOSE STREAM T))))))
(DEFMETHOD (:COMPLETE-STRING VC-FILE-ACCESS-PATH-ENCAPSULATION) (PATHNAME STRING OPTIONS)
  D,#TD1PsT[Begin using 006 escapes](1 0 (NIL 0) (NIL :ITALIC NIL) "CPTFONTI");; this gets called if the Default has a VC component.
0  1;; which, to tell you the truth, has very little to do with
0  1;; anything. This version is an interim version that
0  1;; implements completion as far as the non-vc part of the string.
0  (COMPLETE-VC-PATHNAME PATHNAME STRING OPTIONS))
(DEFUN COMPLETE-VC-PATHNAME (PATHNAME STRING OPTIONS)
  (LET ((FLAT-PATHNAME (VC-PATHNAME-FLAT-PATHNAME PATHNAME))
	(ESCAPE-X (STRING-SEARCH-CHAR #\ STRING)))
    1;; if the user typed a trailing , they are looking for a flat file,
0    1;; so pay no attention to anything else.
0    (WHEN (AND ESCAPE-X (= ESCAPE-X (1- (STRING-LENGTH STRING))))
      (SETQ ESCAPE-X NIL STRING (SUBSTRING STRING 0 (1- (STRING-LENGTH STRING)))))
    (MULTIPLE-VALUE-BIND (NEW-STRING FLAT-SUCCESS)
	(SEND FLAT-PATHNAME :COMPLETE-STRING (IF ESCAPE-X (SUBSTRING STRING 0 ESCAPE-X)
						 STRING)
	      OPTIONS)
      (VALUES
	(COND (ESCAPE-X (STRING-APPEND NEW-STRING (SUBSTRING STRING ESCAPE-X)))
	      1;;--- missing here is what to do with VC information in the default
0	      1;;--- when the user hasn't typed any. 
0	      (T NEW-STRING))
	(IF (AND ESCAPE-X (EQ FLAT-SUCCESS :OLD)) :NEW FLAT-SUCCESS)))))
(DEFMETHOD (:DIRECTORY-LIST VC-FILE-ACCESS-PATH-ENCAPSULATION) (PATHNAME &OPTIONAL OPTIONS)
  (LET ((FLAT-PATHNAME (VC-PATHNAME-FLAT-PATHNAME PATHNAME)))
    (SEND FLAT-PATHNAME :DIRECTORY-LIST OPTIONS)))
(ZWEI:DEFINE-SECTION-NAME VC-FILE-ACCESS-PATH-ENCAPSULATION-COMBINED-METHODS)

(COMPILE-FLAVOR-METHODS VC-FILE-ACCESS-PATH-ENCAPSULATION)

#|| entertaining, but not the right thing
(DEFUN GENERATE-ENCAPSULATING-FILE-ACCESS-PATH-METHODS (METHOD-FLAVOR ENCAPSULATED-IV
							PROTOTYPE-FLAVOR ENV)
  (LET ((PROTO-METHODS (FLAVOR::COLLECT-METHODS PROTOTYPE-FLAVOR 
						:ENV ENV))
	(VANILLA-METHODS (FLAVOR::COLLECT-METHODS 'FLAVOR:VANILLA :ENV ENV)))
    (LET ((INTERESTING-METHODS (CL:NSET-DIFFERENCE PROTO-METHODS VANILLA-METHODS
						   :KEY #'CAR)))
      (LOOP FOR (G-F . NIL) IN INTERESTING-METHODS
	    AS NAME = (GENERIC-FUNCTION-NAME G-F)
	    AS MESSAGE-P = (FLAVOR::GENERIC-FUNCTION-MESSAGE-P G-F)
	    IF MESSAGE-P
	      COLLECT
	    `(DEFMETHOD (,NAME ,METHOD-FLAVOR) (&REST ARGUMENTS)
	       (LEXPR-SEND ,ENCAPSULATED-IV ,NAME ARGUMENTS))
	    ELSE COLLECT
	    `(DEFMETHOD (,NAME ,METHOD-FLAVOR) (&REST ARGUMENTS)
	       (CL:APPLY ,NAME ARGUMENTS))))))
||#
(add-initialization "Enable VC pathname parsing"
		    '(setq fs:*vc-pathname-parsing-enabled* t)
		    nil
		    'vci:*initializations*)
