;;; Matrix arithmetic.   MMcM  7/23/80  -*- Base: 8; Mode: Lisp; Package: MATH -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Condition flavors
(DEFFLAVOR SINGULAR-MATRIX ((OPERATION 'INVERT-MATRIX)) (SYS:ARITHMETIC-ERROR))

(DEFMETHOD (:REPORT SINGULAR-MATRIX) (STREAM)
  (SEND STREAM ':STRING-OUT "The matrix is singular."))

(COMPILE-FLAVOR-METHODS SINGULAR-MATRIX)


;;; Convert a 2d array into a list of lists of the elements
(DEFUN LIST-2D-ARRAY (ARRAY)
  (CHECK-ARG ARRAY (AND (ARRAYP ARRAY)
			(= (ARRAY-/#-DIMS ARRAY) 2))
	     "A Two-dimensional array")
  (DO ((I 0 (1+ I))
       (DIM-1 (ARRAY-DIMENSION-N 1 ARRAY))
       (DIM-2 (ARRAY-DIMENSION-N 2 ARRAY))
       (LIST NIL))
      (( I DIM-1)
       (NREVERSE LIST))
    (PUSH (DO ((J 0 (1+ J))
	       (LIST NIL))
	      (( J DIM-2)
	       (NREVERSE LIST))
	    (PUSH (AREF ARRAY I J) LIST))
	  LIST)))

;;; Fill up a 2d array from a list, like fillarray, the lists can wrap around as needed
(DEFUN FILL-2D-ARRAY (ARRAY LIST)
  (CHECK-ARG ARRAY (AND (ARRAYP ARRAY)
			(= (ARRAY-/#-DIMS ARRAY) 2))
	     "A Two-dimensional array")
  (LET ((DIM-1 (ARRAY-DIMENSION-N 1 ARRAY))
	(DIM-2 (ARRAY-DIMENSION-N 2 ARRAY)))
    ;; "circular" here should really be "pseudo-circular"
    (LOOP FOR I BELOW DIM-1
	  FOR CIRCULAR-LIST = LIST THEN (OR (CDR CIRCULAR-LIST) LIST)
	  DO
      (LOOP WITH SUBLIST = (CAR CIRCULAR-LIST)
	    FOR J BELOW DIM-2
	    FOR CIRCULAR-SUBLIST = SUBLIST THEN (OR (CDR CIRCULAR-SUBLIST) SUBLIST)
	    DO
	(SETF (AREF ARRAY I J) (CAR CIRCULAR-SUBLIST)))))
  ARRAY)

;;; Multiply two matrices into a third.  
;;; A 1d array of dimension N is treated as a Nx1 array.
(DEFUN MULTIPLY-MATRICES (MATRIX-1 MATRIX-2 &OPTIONAL MATRIX-3)
  ;; FOLLOW-STRUCTURE-FORWARDING because eqness is checked below.
  (LET ((MATRIX-1 (FOLLOW-STRUCTURE-FORWARDING MATRIX-1))
	(MATRIX-2 (FOLLOW-STRUCTURE-FORWARDING MATRIX-2))
	(SAVED-MATRIX-3 NIL)		;Used if result must be copied
	SPAN-3)				;SETQ'ed below
    (DECLARE (SYS:ARRAY-REGISTER-1D MATRIX-1 MATRIX-2))
    ;; Decode the ranks, dimensions, and spans of the arguments
    ;; Note that we call DECODE-RASTER-ARRAY because it's fast, but it
    ;; returns its results in the "wrong" order
    (MULTIPLE-VALUE-BIND (COM-DIM DIM-1 SPAN-1)
	(CL:CASE (CL:ARRAY-RANK MATRIX-1)
	  (2 (DECODE-RASTER-ARRAY MATRIX-1))
	  (1 (VALUES 1 (ARRAY-LENGTH MATRIX-1) 1))
	  (OTHERWISE (ERROR "The argument ~S is not a 1- or 2-dimensional array" MATRIX-1)))
      (MULTIPLE-VALUE-BIND (DIM-2 COM-DIM-2 SPAN-2)
	  (CL:CASE (CL:ARRAY-RANK MATRIX-2)
	    (2 (DECODE-RASTER-ARRAY MATRIX-2))
	    (1 (VALUES 1 (ARRAY-LENGTH MATRIX-2) 1))
	    (OTHERWISE (ERROR "The argument ~S is not a 1- or 2-dimensional array" MATRIX-2)))
	(COMPILER:%ERROR-UNLESS (= COM-DIM COM-DIM-2)
	  (ERROR "The matrices ~S and ~S are not compatible for multiplication"
		 MATRIX-1 MATRIX-2))
	;; Decode the result array, creating it if necessary, and set SPAN-3
	(LET ((MATRIX-3
		(IF MATRIX-3
		    (MULTIPLE-VALUE-BIND (DIM-3-2 DIM-3-1 SPAN)
			(CL:CASE (CL:ARRAY-RANK MATRIX-3)
			  (2 (DECODE-RASTER-ARRAY MATRIX-3))
			  (1 (VALUES 1 (ARRAY-LENGTH MATRIX-3) 1))
			  (OTHERWISE
			    (ERROR "The result-argument ~S is not a 1- or 2-dimensional array"
				   MATRIX-3)))
		      (SETQ SPAN-3 SPAN)
		      (COMPILER:%ERROR-UNLESS (AND (= DIM-3-1 DIM-1) (= DIM-3-2 DIM-2))
			(ERROR "The matrix ~S is not the right size to contain the result~@
				of multiplying ~S and ~S"
			       MATRIX-3 MATRIX-1 MATRIX-2))
		      (SETQ MATRIX-3 (FOLLOW-STRUCTURE-FORWARDING MATRIX-3))
		      (COMPILER:%ERROR-WHEN (OR (EQ MATRIX-3 MATRIX-1) (EQ MATRIX-3 MATRIX-2))
			(SETQ SAVED-MATRIX-3 MATRIX-3
			      MATRIX-3 (MAKE-ARRAY (ARRAY-DIMENSIONS MATRIX-3)
						   :TYPE (ARRAY-TYPE MATRIX-3))))
		      MATRIX-3)
		    (STACK-LET ((DIMS (LIST DIM-1 DIM-2)))
		      (SETQ SPAN-3 DIM-2)
		      (MAKE-ARRAY (IF (= DIM-2 1) DIM-1 DIMS) :TYPE (ARRAY-TYPE MATRIX-1))))))
	  (DECLARE (SYS:ARRAY-REGISTER-1D MATRIX-3))
	  ;; Do the actual multiplication:  M3[I,J] := SUM(K, M1[I,K] * M2[K,J])
	  (LOOP REPEAT DIM-1
		FOR I1 FROM 0 BY SPAN-1
		FOR I3 FROM 0 BY SPAN-3 DO
	    (LOOP FOR J FROM 0 BELOW DIM-2 DO
	      (SETF (SYS:%1D-AREF MATRIX-3 (+ I3 J))
		    (LOOP FOR K1 FROM I1 BELOW (+ I1 COM-DIM)
			  FOR K2 FROM J BY SPAN-2
			  SUM (* (SYS:%1D-AREF MATRIX-1 K1)
				 (SYS:%1D-AREF MATRIX-2 K2))))))
	  ;; Return the result
	  (COND ((NOT SAVED-MATRIX-3) MATRIX-3)
		(T (COPY-ARRAY-CONTENTS MATRIX-3 SAVED-MATRIX-3)
		   (RETURN-ARRAY MATRIX-3)
		   SAVED-MATRIX-3)))))))

;;; Gauss-Jordan inversion
(DEFUN INVERT-MATRIX (MATRIX &OPTIONAL INTO-MATRIX)
  (MULTIPLE-VALUE-BIND (DIM DIM-2 SPAN-1)
      (DECODE-RASTER-ARRAY MATRIX)
    (COMPILER:%ERROR-UNLESS (= DIM DIM-2)
      (ERROR "~S is not a square matrix" MATRIX))
    (LET* ((SPAN-2
	     (IF INTO-MATRIX
		 (MULTIPLE-VALUE-BIND (DIM-1 DIM-2 SPAN)
		     (DECODE-RASTER-ARRAY INTO-MATRIX)
		   (COMPILER:%ERROR-UNLESS (= DIM DIM-1 DIM-2)
		     (ERROR "~S is not the correct shape to hold the inverse of ~S"
			    INTO-MATRIX MATRIX))
		   SPAN)
		 (STACK-LET ((DIMS (LIST DIM DIM)))
		   (SETQ INTO-MATRIX (MAKE-ARRAY DIMS :TYPE (ARRAY-TYPE MATRIX)))
		   DIM)))
	   (MATRIX MATRIX)
	   (INTO-MATRIX INTO-MATRIX))
      (DECLARE (SYS:ARRAY-REGISTER-1D MATRIX INTO-MATRIX))
      (LOOP REPEAT DIM
	    FOR I1 FROM 0 BY SPAN-1
	    FOR I2 FROM 0 BY SPAN-2 DO
	(LOOP FOR J FROM 0 BELOW DIM DO
	  (SETF (SYS:%1D-AREF INTO-MATRIX (+ I2 J)) (SYS:%1D-AREF MATRIX (+ I1 J)))))
      (STACK-LET* ((DIMS (LIST DIM DIM))
		   (COLS (MAKE-ARRAY DIM))
		   (COLS-USED (MAKE-ARRAY DIM :TYPE ART-BOOLEAN))
		   ;; N.B. the array-register declaration will only take
		   ;; on the last array in a stack-let*
		   (TEM (MAKE-ARRAY DIMS)))
	(DECLARE (SYS:ARRAY-REGISTER-1D TEM))
	(MACROLET
	  ((PIVOT (FROM-MATRIX FROM-INDEX FROM-SPAN TO-MATRIX TO-SPAN)
	     `(LET ;; Find the greatest element in this row in an unused column
		   ((J (LOOP FOR J FROM 0 BELOW DIM WITH MAX = 0 WITH POS WITH TEMP
			     DO (UNLESS (AREF COLS-USED J)
				  (WHEN (> (SETQ TEMP (ABS (SYS:%1D-AREF ,FROM-MATRIX
									 (+ ,FROM-INDEX J))))
					   MAX)
				    (SETQ MAX TEMP POS J)))
			     FINALLY (IF (ZEROP MAX) (ERROR 'SINGULAR-MATRIX)
					 (RETURN POS)))))
		(SETF (AREF COLS I) J)
		(SETF (AREF COLS-USED J) T)
		;; Pivot about I,J
		(LOOP FOR K FROM 0 BELOW DIM
		      FOR K-FROM FROM 0 BY ,FROM-SPAN
		      FOR K-TO FROM 0 BY ,TO-SPAN
		      AS ELEM-I-J = (SYS:%1D-AREF ,FROM-MATRIX (+ ,FROM-INDEX J)) DO
		  (LOOP FOR L FROM 0 BELOW DIM
			AS ELEM-K-J = (SYS:%1D-AREF ,FROM-MATRIX (+ K-FROM J))
			AS ELEM = (SYS:%1D-AREF ,FROM-MATRIX (+ K-FROM L)) DO
		    (SETF (SYS:%1D-AREF ,TO-MATRIX (+ K-TO L))
			  (IF (= K I)		;Same row?
			      (IF (= L J)	;Corner itself?
				  (SYS:RATIONAL-QUOTIENT ELEM)
				  (SYS:RATIONAL-QUOTIENT ELEM ELEM-I-J))
			      (IF (= L J)	;Same column?
				  (- (SYS:RATIONAL-QUOTIENT ELEM ELEM-I-J))
				  (- ELEM (SYS:RATIONAL-QUOTIENT
					    (* ELEM-K-J (SYS:%1D-AREF ,FROM-MATRIX
								      (+ ,FROM-INDEX L)))
					    ELEM-I-J))))))))))
	  (LOOP FOR I FROM 0 BELOW DIM
		FOR I2 FROM 0 BY SPAN-2
		FOR I3 FROM 0 BY DIM DO
	    (IF (ODDP I)
		(PIVOT TEM I3 DIM INTO-MATRIX SPAN-2)
		(PIVOT INTO-MATRIX I2 SPAN-2 TEM DIM))))
	(WHEN (ODDP DIM)
	  ;; Copy TEM back into INTO-MATRIX
	  (LOOP REPEAT DIM
		FOR I2 FROM 0 BY SPAN-2
		FOR I3 FROM 0 BY DIM DO
	    (LOOP FOR J FROM 0 BELOW DIM DO
	      (SETF (SYS:%1D-AREF INTO-MATRIX (+ I2 J)) (SYS:%1D-AREF TEM (+ I3 J))))))
	;; And finally permute
	(LOOP FOR I FROM 0 BELOW DIM
	      FOR I2 FROM 0 BY SPAN-2
	      AS K = (AREF COLS I)
	      AS K3 = (* K DIM) DO
	  (LOOP FOR J FROM 0 BELOW DIM DO
	    (SETF (SYS:%1D-AREF TEM (+ K3 J)) (SYS:%1D-AREF INTO-MATRIX (+ I2 J)))))
	(LOOP FOR I FROM 0 BELOW DIM
	      AS J = (AREF COLS I) DO
	  (LOOP REPEAT DIM
		FOR K2 FROM 0 BY SPAN-2
		FOR K3 FROM 0 BY DIM DO
	    (SETF (SYS:%1D-AREF INTO-MATRIX (+ K2 I)) (SYS:%1D-AREF TEM (+ K3 J)))))
	INTO-MATRIX))))

(DEFUN TRANSPOSE-MATRIX (MATRIX &OPTIONAL INTO-MATRIX &AUX SPAN-2)
  (CHECK-ARG MATRIX (AND (ARRAYP MATRIX)
			 (= (ARRAY-/#-DIMS MATRIX) 2))
	     "A 2 dimensional array")
  ;; We call DECODE-RASTER-ARRAY because it's fast, but note that values are in "wrong" order
  (MULTIPLE-VALUE-BIND (DIM-2 DIM-1 SPAN-1)
      (DECODE-RASTER-ARRAY MATRIX)
    (LET ((MATRIX (FOLLOW-STRUCTURE-FORWARDING MATRIX))
	  (INTO-MATRIX
	    (IF INTO-MATRIX
		(MULTIPLE-VALUE-BIND (DIM-2-2 DIM-2-1 SPAN)
		    (DECODE-RASTER-ARRAY INTO-MATRIX)
		  (SETQ SPAN-2 SPAN)
		  (COMPILER:%ERROR-UNLESS (AND (= DIM-2-1 DIM-2) (= DIM-2-2 DIM-1))
		    (ERROR "~S is the wrong shape to hold the transpose of ~S"
			   INTO-MATRIX MATRIX))
		  (FOLLOW-STRUCTURE-FORWARDING INTO-MATRIX))
		(STACK-LET ((DIMS (LIST DIM-2 DIM-1)))
		  (SETQ SPAN-2 DIM-1)
		  (MAKE-ARRAY DIMS :TYPE (ARRAY-TYPE MATRIX))))))
      (DECLARE (SYS:ARRAY-REGISTER-1D MATRIX INTO-MATRIX))
      (IF (NEQ MATRIX INTO-MATRIX)
	  (LOOP FOR I1 FROM 0 BY SPAN-1		;Normal case
		FOR I FROM 0 BELOW DIM-1 DO
	    (LOOP FOR J2 FROM I BY SPAN-2
		  FOR J1 FROM I1 BELOW (+ I1 DIM-2) DO
	      (SETF (SYS:%1D-AREF INTO-MATRIX J2) (SYS:%1D-AREF MATRIX J1))))
	  (LOOP FOR I1 FROM 0 BY SPAN-1		;Special case
		FOR I FROM 0 BELOW DIM-1 DO
	    (LOOP FOR J2 FROM (+ I I1 SPAN-2) BY SPAN-2	;Don't bother swapping the diagonal
		  FOR J1 FROM (+ I1 I 1) BELOW (+ I1 DIM-2) DO
	      (SETF (SYS:%1D-AREF MATRIX J2)
		    (PROG1 (SYS:%1D-AREF MATRIX J1)
			   (SETF (SYS:%1D-AREF MATRIX J1) (SYS:%1D-AREF MATRIX J2)))))))
      INTO-MATRIX)))

;Determinant, based on the facts that the determinant of a triangular
;matrix is the product of the diagonal elements, and the determinant of
;the product of two matrices is the product of the determinants.
(DEFUN DETERMINANT (MATRIX)
  (CONDITION-CASE ()
      (MULTIPLE-VALUE-BIND (LU PS)
	  (DECOMPOSE MATRIX NIL NIL T)
	(DO ((I (1- (ARRAY-LENGTH PS)) (1- I))
	     (DET 1 (* DET (AREF LU (AREF PS I) I))))
	    ((MINUSP I)
	     (IF (MINUSP (PERMUTATION-SIGN PS)) (SETQ DET (- DET)))
	     (RETURN-ARRAY PS)
	     (RETURN-ARRAY LU)
	     DET)))
    (SINGULAR-MATRIX 0)))

;Note that this trashes its argument
(DEFUN PERMUTATION-SIGN (PS)
  (LOOP WITH SIGN = +1
	FOR I FROM 0 BELOW (ARRAY-LENGTH PS)
	AS J = (AREF PS I)
	WHEN ( I J)	;Found a cycle, determine its length-1
	  DO (LOOP AS K = (AREF PS J)
		   DO (ASET J PS J)
		      (SETQ SIGN (- SIGN))
		      (SETQ J K)
		   UNTIL (= J I))
	FINALLY (RETURN SIGN)))

;;; Linear equation solving.   DLW 8/4/80

;;; The functions below are useful for solving systems of simultaneous
;;; linear equations.  They are taken from the text "Computer Solution of
;;; Linear Algebraic Systems", by Forsythe and Moler, Prentice-Hall 1967.
;;; 
;;; The function DECOMPOSE takes a square matrix A (N by N elements) and
;;; returns a square matrix holding the LU decomposition of A.  The
;;; function finds the unique solution of L * U = A, where L is a lower
;;; triangular matrix with 1's along the diagonal, and U is an upper
;;; triangular matrix.  The function returns a square matrix holding L-I+U;
;;; that is, the lower triangle not including the diagonal holds L, and the
;;; rest holds U, with the 1's along the diagonal of L not actually stored.
;;; (Note: the LU decomposition exists uniquely only if all of the
;;; principle minor matrices made from the first K rows and columns are
;;; non-singular; see Forsythe and Moler, Theorem 9.2.)
;;; 
;;; The function SOLVE takes the LU decomposition of A, and a vector of
;;; solutions of the equations B, and returns X where A * X = B.
;;; 
;;; DECOMPOSE uses partial pivoting.  Rather than actually moving the
;;; elements of the array from one row to another, it returns a permutation
;;; array PS telling how the rows of LU are permuted.  The PS array must
;;; then be passed into SOLVE so that it can interpret LU properly.
;;;
;;; Iterative improvement is not yet implemented.


;;; Utility functions and macros.

(DEFUN 1D-ARRAYP (ARRAY)
   (AND (ARRAYP ARRAY)
	(= (ARRAY-/#-DIMS ARRAY) 1)))

(DEFUN 2D-ARRAYP (ARRAY)
   (AND (ARRAYP ARRAY)
	(= (ARRAY-/#-DIMS ARRAY) 2)))

(DEFMACRO EXCHANGE (F1 F2)
   (LET ((V1 (GENSYM))
	 (V2 (GENSYM)))
     `(LET ((,V1 ,F1)
	    (,V2 ,F2))
	(SETF ,F1 ,V2)
	(SETF ,F2 ,V1))))


;;; DECOMPOSE
;;; A is an N by N array.
;;; Two values are returned: LU and PS.
;;; The caller may provide arrays to be used for LU and PS by passing
;;; the optional arguments; otherwise, new arrays will be allocated.
;;; If the same array is passed as A and LU, A is overwriten with
;;; the decomposition correctly.
;;; The condition SINGULAR-MATRIX is signalled if the matrix is singular.

(DEFUN DECOMPOSE (A &OPTIONAL LU PS IGNORE &AUX N)
   (DECLARE (VALUES LU PS))
   ;; Prepare arguments.
   (CHECK-ARG A 2D-ARRAYP "a two-dimensional array")
   (SETQ N (ARRAY-DIMENSION-N 1 A))
   (CHECK-ARG A (= N (ARRAY-DIMENSION-N 2 A)) "a square array.")
   (IF LU
       (CHECK-ARG LU 2D-ARRAYP "a two-dimensional array")
       (SETQ LU (MAKE-ARRAY (LIST N N) ':TYPE (ARRAY-TYPE A))))
   (IF PS
       (CHECK-ARG PS 1D-ARRAYP "a one-dimensional array")
       (SETQ PS (MAKE-ARRAY N ':TYPE 'ART-Q)))

   (LET ((SCALES (MAKE-ARRAY N ':TYPE 'ART-Q)))
     ;; Init PS to the identity, LU to A, and SCALES to the reciprocal
     ;; of the largest-magnitude element on a given row.
     (DOTIMES (I N)
	(ASET I PS I)
	(LET ((NORMROW 0))
	  (DOTIMES (J N)
	     (LET ((AIJ (AREF A I J)))
	       (ASET AIJ LU I J)
	       (SETQ NORMROW (MAX (ABS AIJ) NORMROW))))
	  (IF (ZEROP NORMROW)
	      (ERROR 'SINGULAR-MATRIX))
	  (ASET (SYS:RATIONAL-QUOTIENT NORMROW) SCALES I)))

     ;; Gaussian elimination with partial pivoting.
     (DOTIMES (K (- N 1))
	;; Find the pivot index.
	(LET ((PIVOTINDEX NIL)
	      (BIGGEST 0))
	  (DO I K (1+ I) (>= I N)
	    (LET ((SIZE (* (ABS (AREF LU (AREF PS I) K))
			   (AREF SCALES (AREF PS I)))))
	      (COND ((> SIZE BIGGEST)
		     (SETQ BIGGEST SIZE)
		     (SETQ PIVOTINDEX I)))))
	  (IF (ZEROP BIGGEST)
	      (ERROR 'SINGULAR-MATRIX))
	  (EXCHANGE (AREF PS PIVOTINDEX) (AREF PS K)))
 
	;; Do the elimination with that pivoting.
	(LET* ((PSK (AREF PS K))
	       (PIVOT (AREF LU PSK K)))
	  (DO I (1+ K) (1+ I) (>= I N)
	    (LET ((PSI (AREF PS I)))
	      (LET ((MULT (SYS:RATIONAL-QUOTIENT (AREF LU PSI K) PIVOT)))
		(ASET MULT LU PSI K)
		(IF (NOT (ZEROP MULT))
		    (DO J (1+ K) (1+ J) (>= J N)
			(ASET (- (AREF LU PSI J) (* MULT (AREF LU PSK J)))
			      LU PSI J))))))))
     (IF (ZEROP (AREF LU (AREF PS (1- N)) (1- N)))
	 (ERROR 'SINGULAR-MATRIX))
     (RETURN-ARRAY SCALES))
   (VALUES LU PS))

;;; SOLVE
;;; LU is the N by N LU-decomposition of A.
;;; PS is the N-long permutation vector for LU.  B is an N-long array
;;; of solutions to the equations.
;;; The returned value is X: the solution of A * X = B.
;;; The caller may provide the array to be used as X by passing the optional
;;; argument.

(DEFUN SOLVE (LU PS B &OPTIONAL X &AUX N)
   ;; Prepare arguments.
   (CHECK-ARG LU 2D-ARRAYP "a two-dimensional array")
   (SETQ N (ARRAY-DIMENSION-N 1 LU))
   (OR (= N (ARRAY-DIMENSION-N 2 LU))
       (FERROR NIL "The first argument must be a square array."))
   (CHECK-ARG PS 1D-ARRAYP "a one-dimensional array")
   (CHECK-ARG B 1D-ARRAYP "a one-dimensional array")
   (IF X
       (CHECK-ARG X 1D-ARRAYP "a one-dimensional array")
       (SETQ X (MAKE-ARRAY N ':TYPE (ARRAY-TYPE B))))

   (DOTIMES (I N)
      (LET ((PSI (AREF PS I))
	    (DOT 0))
	(DOTIMES (J I)
	   (SETQ DOT (+ DOT (* (AREF LU PSI J) (AREF X J)))))
	(ASET (- (AREF B PSI) DOT) X I)))

   (DO I (1- N) (1- I) (< I 0)
      (LET ((PSI (AREF PS I))
	    (DOT 0))
	(DO J (1+ I) (1+ J) (>= J N)
	   (SETQ DOT (+ DOT (* (AREF LU PSI J) (AREF X J)))))
	(ASET (SYS:RATIONAL-QUOTIENT (- (AREF X I) DOT) (AREF LU PSI I))
	      X I)))

   X)
