;;; -*- Mode: LISP; Syntax: Common-lisp; Package: DEMONSTRATION; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defflavor abort-demonstration () (sys:abort))

(defun abort-demonstration () (signal 'abort-demonstration))

(defmacro catch-demonstration-abort (string &body forms &environment env)
  (once-only (string &environment env)
    `(condition-case ()
	  (progn ,@forms)
	(abort-demonstration
	  (format t "~&~A prematurely terminated.~2%" ,string)))))

(defvar *loaded-demonstrations* (make-hash-table :test #'string-equal))

(defun find-loaded-demonstration (name &key (if-does-not-exist :error))
  (or (gethash name *loaded-demonstrations*)
      (ecase if-does-not-exist
	(:error (error "~S does not name a loaded demonstration." name))
	((nil)  nil))))

(defun (future-common-lisp:setf find-loaded-demonstration) (value name)
  (if (not value)
      (remhash name *loaded-demonstrations*)
      (setf (gethash name *loaded-demonstrations*) value))
  value)

(defflavor demonstration (name
			  (legal-notice '())
			  (options '())
			  (pretty-name nil)
			  (restrictions '())
			  (required-systems '())
			  (initializer nil)
			  (initialized-p nil)
			  (background-information nil)
			  (instructions nil)
			  summary
			  function)
	   ()
  :initable-instance-variables
  :writable-instance-variables
  (:required-init-keywords :name :function :summary))

(defmethod (make-instance demonstration :after) (&rest ignore)
  (unless pretty-name (setq pretty-name (string-capitalize name))))

(defmethod (sys:print-self demonstration) (stream ignore slashify-p)
  (if slashify-p
      (future-common-lisp:print-unreadable-object (self stream :type t :identity t)
	(princ pretty-name stream)
	(if initialized-p (princ " (initialized)" stream)))
      (princ pretty-name stream)))

(defun funcall-string-for-demonstration (demonstration string stream description)
  (cond ((not string)
	 (format stream "~&The ~A demonstration has no ~A." demonstration description))
	((stringp string)
	 (fresh-line stream)
	 ;; Don't use FORMAT here just in case the person has given us a 
	 ;; presentation-recording-string, which FORMAT seems to not handle correctly.
	 ;; -kmp 17-May-90
	 (princ string stream)
	 (fresh-line stream))
	(t
	 (fresh-line stream)
	 (funcall string stream)
	 (fresh-line stream))))

(defmethod (show-demonstration-instructions demonstration)
	   (&optional (stream *standard-output*)
	    &key (mention-options t))
  (funcall-string-for-demonstration self instructions stream "special instructions")
  (when (and options mention-options)
    (format t "~2&This demonstration has variable options which can be interactively ~
	          specified by doing:~
	        ~%  ~@\\presentation\\~%"
	    `(com-run-demonstration ,self :specify-options t)
	    'cp:command)))

(defmethod (show-demonstration-background-information demonstration)
	   (&optional (stream *standard-output*))
  (funcall-string-for-demonstration self background-information stream
				    "accompanying background information"))

(defmethod (show-demonstration-legal-notice demonstration)
	   (&optional (stream *standard-output*))
  (funcall-string-for-demonstration self legal-notice stream "apparent legal notice"))

(defmethod (show-demonstration-summary demonstration)
	   (&optional (stream *standard-output*))
  (funcall-string-for-demonstration self summary stream "brief summary"))

(defmethod (initialize-demonstration demonstration) (&key force)
  (when (or (not initialized-p) force)
    (when required-systems
      (let* ((missing-systems (mapcan #'(lambda (required-system)
					  (unless (sct:get-system-version required-system)
					    (ncons required-system)))
				      required-systems))
	     (n-systems (length missing-systems)))
	(when missing-systems
	  (unless (yes-or-no-p "The ~A demonstration requires system~P ~{~A~^, ~}.~
			      ~%Load ~:[them~;it~]? "
			       self n-systems missing-systems (= n-systems 1))
	    (abort-demonstration))
	  (dolist (missing-system missing-systems)
	    (sct:load-system missing-system :silent t :query nil)))))
    (when initializer (funcall initializer))
    (setq initialized-p t)))

(defprop define-demonstration "Demonstration" si:definition-type-name)

(defmacro define-demonstration (name options (&key pretty-name
						   required-systems
						   restrictions
						   initializer
						   instructions
						   background-information
						   legal-notice
						   initialize)
				summary
				&body forms)
  (declare (zwei:indentation 2 4 4 2))
  (check-type name (and symbol (not null)) "a demonstration name")
  (check-type summary string "a brief documentation string")
  (check-type forms (not null) "a non-null list of forms")
  (sys:check-arg pretty-name (or (not pretty-name)
				 (and (stringp pretty-name)
				      (string-equal pretty-name name)))
	     (format nil "a string which differs from ~:\\QUOTED-STRING\\ only in casification"
		     name))
  (sys:check-arg options (and (listp options)
			      (every #'(lambda (option)
					 (and (listp option)
					      (let ((length (length option)))
						(>= length 2)
						(oddp length)
						(and (symbolp (car option))
						     (not (constantp (car option))))
						(do ((l (cdddr option) (cddr l)))
						    ((null l) t)
						  (unless (keywordp (car l))
						    (return nil))))))
				     options))
		 "an options list ((var value type &rest accept-keywords) ...)")
  `(progn (sys:multiple-definition ,name define-demonstration
	    (setf (find-loaded-demonstration ',name)
		  (make-instance 'demonstration
				 :name ',name
				 :restrictions ,restrictions
				 :pretty-name ,pretty-name
				 :initializer ,initializer
				 :required-systems ,required-systems
				 :background-information ,background-information
				 :summary ,summary
				 :options
				   ',(mapcar #'(lambda (option)
						 (let* ((key (intern (string (car option))
								    "KEYWORD"))
							(type (caddr option))
							(result (list* key type
								       :default (cadr option)
								       :query-identifier key
								       (cdddr option))))
						   (unless (getf (cdr result) :prompt)
						     (push (string-capitalize key)
							   (cddr result))
						     (push :prompt (cddr result)))
						   result))
					     options)
				 :instructions ,instructions
				 :legal-notice ,legal-notice
				 :function
				   #'(lambda (&key ,@(mapcar #'(lambda (option)
								 (list (car option)
								       (cadr option)))
							     options))
				       ,@forms))))
	  ,@(cond ((eq initialize t) `((initialize-demonstration ',name)))
		  ((eq initialize nil) '())
		  (t `((when ,initialize (initialize-demonstration ',name)))))
	  ',name))



(define-presentation-type loaded-demonstration ()
   :history t
   :parser ((stream &key initially-display-possibilities type)
	    (dw:completing-from-suggestions (stream :type type
						    :partial-completers '(#\- #\Space)
						    :initially-display-possibilities
						       initially-display-possibilities)
	      (maphash #'(lambda (name value)
			   (ignore name)
			   (when value ;It shouldn't happen that it's NIL, but just in case.
			     (dw:suggest (demonstration-pretty-name value) value)))
		       *loaded-demonstrations*)))
   :printer ((object stream)
	     (princ (demonstration-name object) stream)))

(defvar *demonstration-pathnames* '("SYS:SITE;*.DEMO.NEWEST"))

(defflavor fake-demonstration (name pathname (real-thing nil)) ()
  :initable-instance-variables
  :writable-instance-variables
  (:required-init-keywords :name :pathname))

(defmethod (demonstration-name fake-demonstration) ()
  (if real-thing (demonstration-name real-thing) name))

(defmethod (demonstration-pretty-name fake-demonstration) ()
  (if real-thing (demonstration-pretty-name real-thing) name))

(defmethod (demonstration-summary fake-demonstration) ()
  (if real-thing
      (demonstration-summary real-thing)
      (dw:with-output-to-presentation-recording-string (str)
	(present pathname 'pathname :stream str)
	(write-string " is not yet loaded." str))))

(defmethod (sys:print-self fake-demonstration) (stream ignore slashify-p)
  (if slashify-p
      (future-common-lisp:print-unreadable-object (self stream :type t :identity t))
      (princ (demonstration-pretty-name self) stream)))

(defmethod (:unclaimed-message fake-demonstration) (op &rest args)
  (lexpr-send op
	      (or real-thing
		  (setq real-thing (or (find-loaded-demonstration name :if-does-not-exist nil)
				       (progn
					 (load pathname :verbose nil :print nil)
					 (find-loaded-demonstration name)))))
	      args))

(define-presentation-type unloaded-demonstration ()
   :history t
   :parser ((stream &key initially-display-possibilities type)
	    (dw:completing-from-suggestions (stream
					      :type type
					      :partial-completers '(#\- #\Space)
					      :initially-display-possibilities
					      initially-display-possibilities)
	      (flet ((suggest-demo (pathname)
		       (let ((name (send pathname :name)))
			 (unless (find-loaded-demonstration name :if-does-not-exist nil)
			   (dw:suggest name
				       (make-instance 'fake-demonstration
						      :name name
						      :pathname pathname))))))
		(dolist (wildcard-pathname *demonstration-pathnames*)
		  (dolist (pathname (directory wildcard-pathname))
		    (suggest-demo pathname))))))
   :printer ((object stream)
	     (princ object stream)))

(define-presentation-type any-demonstration ()
   :abbreviation-for `(or loaded-demonstration unloaded-demonstration)
   :description "a demonstration")

(defun all-demonstrations-in-alphabetical-order ()
  (values (sort (loop for x being the hash-elements of *loaded-demonstrations* collect x)
		#'string-lessp :key #'demonstration-pretty-name)
	  (sort (mapcan #'(lambda (pathname)
			   (let ((name (send pathname :name)))
			     (unless (find-loaded-demonstration name :if-does-not-exist nil)
			       (ncons (make-instance 'fake-demonstration
						     :pathname pathname
						     :name name)))))
		       (apply #'append (mapcar #'directory *demonstration-pathnames*)))
		#'string-lessp :key #'demonstration-pretty-name)))

(cp:define-command (com-show-demonstration-names :command-table "Demonstration") ()
   (multiple-value-bind (loaded unloaded)
       (all-demonstrations-in-alphabetical-order)
     (when loaded 
       (format t "~&The following demo~P ~:*~\\HAS-HAVE\\ been loaded:~%"
	       (length loaded))
       (dolist (demo loaded)
	 (dw:with-output-as-presentation (:type 'any-demonstration
					  :object demo
					  :single-box t
					  :allow-sensitive-inferiors nil)
	   (format t "~&  ~A: ~~A~" demo (demonstration-summary demo)))))
     (when unloaded 
       (format t "~&The following demo~P ~:*~\\HAS-HAVE\\ not yet been loaded:~%  "
	       (length unloaded))
       (dw:formatting-table (*standard-output* :multiple-columns t)
	 (dolist (demo unloaded)
	   (dw:formatting-row ()
	     (dw:formatting-cell () (present demo 'any-demonstration))))))))

(defmethod (run-demonstration demonstration) (&key (show-instructions :ask)
						   (specify-options nil)
						   (character-style '(:jess :roman :normal)))
  (with-character-style (character-style)
    (demonstration::catch-demonstration-abort "Demonstration"
      (let ((screen (tv:console-default-superior)))
	(dolist (restriction restrictions)
	  (ecase restriction
	    (:large-screen-only
	      (when (or (< (send screen :inside-height) 500.)
			(< (send screen :inside-width) 750.))
		(format t "~&This demonstration does not work on small screens.~%")
		(abort-demonstration)))
	    (:local-screen-only
	      (when (typep screen 'tv:basic-remote-screen)
		(format t "~&This demonstration does not work on a remote screen.~%")
		(abort-demonstration)))
	    (:local-terminal-only
	      (when (sys:remote-terminal-p)
		(format t "~&This demonstration does not work on a remote terminal.~%")
		(abort-demonstration))))))
      (initialize-demonstration self)
      (if (cond ((and instructions
		      (or (eq show-instructions 't)
			  (and (eq show-instructions ':ask)
			       (y-or-n-p "Do you need instructions? "))))
		 (show-demonstration-instructions self
						  *standard-output*
						  :mention-options
						  (not specify-options))
		 (y-or-n-p "Are you ready to begin? "))
		(t t))
	  (unwind-protect-case ()
	      (apply function
		     (if options
			 (if specify-options
			     (dw:accepting-values (*query-io*
						    :own-window t
						    :label
						    (format nil "Select options for ~
							          ~A demonstration:"
							    self))
			       (mapcan #'(lambda (x)
					   (list* (car x)
						  (apply #'accept (mapcar #'eval (cdr x)))
						  nil))
				       options))
			     (mapcan #'(lambda (x)
					 (list* (car x)
						(eval (getf (cddr x) :default))
						nil))
				     options))
			 '()))
	    (:normal (format t "~&~A demonstration completed.~%" self))
	    (:abort  (format t "~&~A demonstration aborted.~%" self)))
	  (format t "~&~A demonstration cancelled.~%" self)))))

(cp:define-command (com-run-demonstration :provide-output-destination-keyword nil
					  :command-table "Demonstration")
    ((demonstration 'any-demonstration :prompt "name")
     &key
     (show-instructions '(alist-member :alist (("Yes" . t) ("No" . nil) ("Ask" . :ask)))
			:when (demonstration-instructions demonstration)
			:default t
			:documentation
			"Whether to show any instructions before running the demonstration.")
     (specify-options 'boolean
		      :default nil
		      :mentioned-default t
		      :documentation
     "Whether to prompt interactively for option values in demonstrations that have variable options."))
   (run-demonstration demonstration
		      :show-instructions show-instructions
		      :specify-options specify-options))

(define-presentation-to-command-translator mouse-run-demonstration
   (any-demonstration :gesture :select :documentation "Run Demonstration")
   (demo)
  `(com-run-demonstration ,demo))

(cp:define-command (com-initialize-demonstration :provide-output-destination-keyword nil
					   :command-table "Demonstration")
    ((demonstration 'any-demonstration :prompt "name")
     &key
     (force 'boolean :default nil :mentioned-default t
	    :documentation "Whether to force a re-load of this demonstration."))
   (catch-demonstration-abort "Demonstration initialization"
     (initialize-demonstration demonstration :force force)))

(define-presentation-to-command-translator mouse-initialize-demonstration
   (any-demonstration :gesture :select
		      :documentation "Initialize Demonstration"
		      :tester ((demo)
			       (or (and (typep demo 'fake-demonstration)
					(let ((x (fake-demonstration-real-thing demo)))
					  (or (not x) ;Don't autoload to find out!
					      (demonstration-initializer x))))
				   (demonstration-initializer demo))))
   (demo)
  `(com-initialize-demonstration ,demo))

(cp:define-command (com-show-demonstration-summary :command-table "Demonstration")
    ((demonstration 'any-demonstration :prompt "name"))
   (show-demonstration-summary demonstration))

(define-presentation-to-command-translator mouse-show-demonstration-summary
   (any-demonstration :gesture nil
		      :documentation "Show Demonstration Summary")
   (demo)
  `(com-show-demonstration-summary ,demo))

(cp:define-command (com-show-demonstration-instructions :command-table "Demonstration")
    ((demonstration 'any-demonstration :prompt "name"))
   (show-demonstration-instructions demonstration *standard-output*))

(define-presentation-to-command-translator mouse-show-demonstration-instructions
   (any-demonstration :gesture nil
		      :documentation "Show Demonstration Instructions"
		      :tester ((demo)
			       (or (and (typep demo 'fake-demonstration)
					(let ((x (fake-demonstration-real-thing demo)))
					  (or (not x) ;Don't autoload to find out!
					      (demonstration-instructions x))))
				   (demonstration-instructions demo))))
   (demo)
  `(com-show-demonstration-instructions ,demo))

(cp:define-command (com-show-demonstration-legal-notice :command-table "Demonstration")
    ((demonstration 'any-demonstration :prompt "name"))
   (show-demonstration-legal-notice demonstration *standard-output*))

(define-presentation-to-command-translator mouse-show-demonstration-legal-notice
   (any-demonstration :gesture nil
		      :documentation "Show Demonstration Legal Notice"
		      :tester ((demo)
			       (or (and (typep demo 'fake-demonstration)
					(let ((x (fake-demonstration-real-thing demo)))
					  (or (not x) ;Don't autoload to find out!
					      (demonstration-legal-notice x))))
				   (demonstration-legal-notice demo))))
   (demo)
  `(com-show-demonstration-legal-notice ,demo))

(cp:define-command (com-show-demonstration-background-information :command-table "Demonstration")
    ((demonstration 'any-demonstration :prompt "name"))
   (show-demonstration-background-information demonstration *standard-output*))

(define-presentation-to-command-translator mouse-show-demonstration-background-information
   (any-demonstration :gesture :describe
		      :documentation "Show Demonstration Background Information"
		      :tester ((demo)
			       (or (and (typep demo 'fake-demonstration)
					(let ((x (fake-demonstration-real-thing demo)))
					  (or (not x) ;Don't autoload to find out!
					      (demonstration-background-information x))))
				   (demonstration-background-information demo))))
   (demo)
  `(com-show-demonstration-background-information ,demo))
