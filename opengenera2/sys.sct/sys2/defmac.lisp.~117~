;;; -*- Mode: LISP; Package: System-Internals; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Common Lisp version of DEFMACRO and DESTRUCTURING-BIND, a complete rewrite
;;; Backtranslated to Zetalisp for the lexically-scoped system

;;; In order to compile this file, it must have been already loaded because it
;;; depends on itself.  Selective compilation from the editor breaks the recursion.

;--- Deficiencies remain to be fixed herein, search for ---
;--- &LIST-OF (old Zetalisp feature) is not supported, maybe it ought to be added?

;;; Main entry point
(defmacro defmacro (name pattern &body body)
  (defmacro-0 'macro name pattern body))

;Note that this does no error-checking other than what CAR and CDR themselves do
(defmacro destructuring-bind (pattern datum &body body &environment env)
  (declare (zwei:indentation 1 3 2 1)
	   (compiler:do-not-record-macroexpansions))
  (multiple-value-bind (bindings additional-forms)
      (translate-destructuring pattern datum nil)
    (multiple-value-bind (declarations body)
	(find-body-declarations body env)
      `(let* ,bindings
	 ,@declarations
	 ,@additional-forms
	 ,@body))))

;This is needed because the zwei:indentation declaration breaks the default setup
(defprop scl:destructuring-bind gprint::format-special-form-2 gprint::formatter)

;An alternate version that does full error checking (proposed for Common Lisp)
(defmacro scl:destructuring-bind (pattern datum &body body &environment env)
  (declare (zwei:indentation 1 3 2 1)
	   (compiler:do-not-record-macroexpansions))
  (setq datum (cli::constant-fold-form datum env))
  ;; Check for special case of a pattern that does not destructure anything
  (when (or (and (symbolp pattern) (neq pattern nil))
	    (and (eq (first pattern) '&rest)
		 (listp (cdr pattern))
		 (and (symbolp (second pattern)) (neq (second pattern) nil))
		 (null (cddr pattern))))
    (return-from scl:destructuring-bind
      (if (and (listp datum)
	       (memq (car datum) '(list xr-bq-list)))
	  (let ((temp (gensym)))
	    `(with-stack-list (,temp ,@(cdr datum))
	       (let ((,(if (atom pattern) pattern (second pattern)) ,temp))
		 ,@body)))
	  `(let ((,(if (atom pattern) pattern (second pattern)) ,datum))
	     ,@body))))

  ;; Check for special case of putting something together and taking it apart again
  ;; in the same pattern, so that no error checking nor temporary variables are required.
  (when (and (listp datum)
	     (memq (car datum) '(list xr-bq-list list* xr-bq-list* cons xr-bq-cons quote)))
    (multiple-value-bind (element-values dotted)
	(selectq (car datum)
	  ((list xr-bq-list)
	   (values (cdr datum) nil))
	  ((list* xr-bq-list* cons xr-bq-cons)
	   (if (member (car (last datum)) '(nil 'nil))
	       (values (butlast (cdr datum)) nil)
	       (values (cdr datum) t)))
	  ((quote)
	   (loop for list = (second datum) then (cdr list) until (atom list)
		 collect `',(car list) into elements
		 finally (return (if (null list)
				     (values elements nil)
				     (values `(,@elements ',list) t)))))
	  (otherwise
	    (ferror "fell off the end of SELECTQ")))
      (let* ((element-variables (loop repeat (length element-values)
				      collect (gensym)))
	     (elements element-variables)
	     (pattern pattern)
	     (vars nil)
	     (vals nil)
	     (optional nil)
	     (rest nil)
	     item)
	(loop do
	  (cond ((null pattern)
		 (when (null elements)		;unless too many arguments
		   (return-from scl:destructuring-bind
		     `(let* (,@(mapcar #'list element-variables element-values)
			     ,@(reverse (mapcar #'list vars vals)))
			,@body)))
		 (return))
		((atom pattern) (setq item pattern rest t pattern nil))
		(t (setq item (pop pattern))))
	  (cond ((eq item '&optional) (setq optional t))
		((memq item '(&rest &body)) (setq rest t))
		((memq item lambda-list-keywords) (return))	;punt
		((and (symbolp item)
		      (char= (aref (get-pname item) 0) #/&))
		 (compiler:warn () "~S appears to be a mis-spelled &-keyword" item))
		(t
		 (multiple-value-bind (var default)
		     (if (and optional (not rest) (listp item))
			 (values (first item) (second item))
			 (values item nil))
		   (when (null var) (setq var 'ignore))
		   (push var vars)
		   (cond ((listp var) (return))	;punt if multilevel destruc
			 ((null elements)
			  (unless (or optional rest) (return))	;punt if too few arguments
			  (push default vals))
			 (rest
			  (push (cond ((not dotted)
				       (if (loop for item in elements
						 always (and (listp item)
							     (eq (car item) 'quote)))
					   `',(mapcar #'second elements)
					   `(list ,@elements)))
				      ((null (cdr elements)) (car elements))
				      ((loop for item in elements
					     always (and (listp item)
							 (eq (car item) 'quote)))
				       `'(,@(mapcar #'second (butlast elements))
					  . ,(second (car (last elements)))))
				      (t `(list* ,@elements)))
				vals)
			  (setq elements nil))
			 ((or (cdr elements) (not dotted))
			  (push (pop elements) vals))
			 (t (return))))))))))	;punt if dotted list too short

  ;; Normal case
  (let ((tag (gensym)))
    (multiple-value-bind (bindings additional-forms)
	(translate-destructuring pattern tag `(go ,tag))
      (multiple-value-bind (declarations body)
	  (find-body-declarations body env)
	`(block ,tag
	   (let ((,tag ,datum))
	     (tagbody
	       (let* ,bindings
		 ,@declarations
		 ,@additional-forms
		 (return-from ,tag (progn ,@body)))
	       ,tag
	       (return-from ,tag
		 (destructuring-bind-argument-error-1 ',pattern ,tag)))))))))

;Various other Zetalispoid macro-defining forms
(defmacro macro-displace (name arglist &body body &environment env)
  (multiple-value-bind (declarations body)
      (find-body-declarations body env arglist)
    `(macro ,name ,arglist
	    ,@declarations
	    (displace ,(first arglist) (progn . ,body)))))

(defmacro defmacro-displace (name pattern &body body)
  (defmacro-0 'macro-displace name pattern body))

(defmacro deflambda-macro (name pattern &body body)
  (defmacro-1 'lambda-macro 'lambda-macro name pattern body))

(defprop deflambda-macro "Lambda Macro" si:definition-type-name)

(defmacro lambda-macro-displace (name arglist &body body &environment env)
  (multiple-value-bind (declarations body)
      (find-body-declarations body env arglist)
    `(lambda-macro ,name ,arglist
		   ,@declarations
		   (displace ,(first arglist) (progn . ,body)))))

(defmacro deflambda-macro-displace (name pattern &body body)
  (defmacro-1 'lambda-macro-displace 'lambda-macro name pattern body))

(defprop deflambda-macro-displace "Lambda Macro" si:definition-type-name)

;;; Subroutine of defmacro and defmacro-displace
(defun defmacro-0 (defining-form name pattern body)
  (multiple-value-bind (form indentation)
      (defmacro-1 defining-form 'macro name pattern body)  
    `(progn ,(if indentation
		 `(defmacro-set-indentation-for-zwei ',name ',indentation)
		 `(defmacro-clear-indentation-for-zwei ',name))
       ,form)))

;;; Translate a macro definition into an expander function
;;; Also called by MACROLET
(defun defmacro-1 (defining-form type name pattern body)
  (declare (values form indentation))
  (setq name (standardize-function-spec name))
  (let ((compiler:default-warning-function name)
	(environment-p nil)	 
	(whole `.form.)
	(environment `.env.)
	(block (and (symbolp name) name))
	(tag (gensym)))
    ;; Gross kludge: &whole means something different at top level
    (loop for l = pattern then (cdr l) until (atom l) do
      (when (eq (car l) '&whole)
	(unless (or (eq pattern l)
		    (and (eq (car pattern) '&environment)
			 (eq (cddr pattern) l)))
	  (warn "~a should only appear before the destructuring variables" '&whole))
	(setq pattern (subst-that-works (cddr l) l pattern))
	(setq whole (cadr l))
	(return)))
    ;; Look ahead for &environment
    (loop for l = pattern then (cdr l) until (atom l) do
      (when (eq (car l) '&environment)
	(setq pattern (subst-that-works (cddr l) l pattern))
	(setq environment (cadr l))
	(setq environment-p t)
	(return)))
    (multiple-value-bind (bindings additional-forms indentation)
	(translate-destructuring pattern `(cdr ,whole) `(go ,tag))
      (multiple-value-bind (declarations specials body documentation debugging-info var-dcls
			    unspecials fun-dcls)
	  (parse-body-declarations body nil pattern)
	(declare (ignore specials unspecials))
	;; Declared indentation overrides indentation implied by &body
	(let ((dcl (assq 'zwei:indentation declarations)))
	  (when dcl
	    (setq declarations (delq dcl declarations))
	    (setq indentation (cdr dcl))))
	(values `(,defining-form
		  ,@(when (neq defining-form 'lambda) `(,name))
		  (,whole ,@(if (eq type 'lambda-macro)
				;; In fact, environment will never be passed, but
				;; but in a future major release it could be.
				`(&optional (,environment
					     *lambda-macro-environment*))
			      `(,environment)))
		  ,@(when (eq defining-form 'lambda)
		      `((declare (sys:function-name ,name))))
		  ,@(and documentation `(,documentation))
		  ,@(unless (assq 'arglist declarations)
		      `((declare (arglist . ,(if (and (listp pattern)
						      (null (cdr (last pattern))))
						 (ldiff pattern (memq '&aux pattern))
						 pattern)))))
		  ,@(and debugging-info `((declare ,@debugging-info)))
		  (declare ,@(reconstitute-var-dcl (assq whole var-dcls)))
		  (declare ,@(reconstitute-var-dcl (assq environment var-dcls)))
		  ,@(and (eq type 'special)
			 `((declare (compiler:do-not-record-macroexpansions))))
		  (block ,block
		    (tagbody
		      (let* (,@(if (eq type 'lambda-macro)
				   '((*lambda-macro-environment* nil))
				   '())
			     ,@bindings)
			(declare ,@declarations)
			(declare ,@(reconstitute-body-declarations
				     var-dcls fun-dcls (list whole environment) ()))
			,@additional-forms
			,@(unless environment-p	
			    ;; Suppress compiler warning if environment unused
			    `((ignore .env.)))
			(return-from ,block (progn ,@body)))
		      ,tag
		      (return-from ,block
			(,(cdr (assq type '((macro . defmacro-argument-error)
					    (lambda-macro . defmacro-argument-error)
					    (special . special-form-argument-error)
					    )))
			 ',name ',pattern ,whole)))))
		indentation)))))

;;; Return some bindings and some additional forms to be evaluated (SETQs typically)
;;; to implement a destructuring.
;;; The third value is a flag, normally NIL.  If &BODY was used at top level, it is
;;;  the number of subforms that precede the body.
;;; error is NIL or code to evaluate if an argument-matching error occurs.
;;; validate-keyword-function is normally not supplied, but is supplied by
;;;  PRESENTATION-TYPE-DESTRUCTURE to include the meta-presentation-args in the checking.
(defun translate-destructuring
       (pattern datum error &optional (validate-keyword-function 'validate-defmacro-keywords))
  ;; Translate the pattern into a sequence of variable settings
  (multiple-value-bind (translation body-flag)
      (translate-destructuring-1 pattern datum error validate-keyword-function)
    ;; Combine redundant settings of the same variable
    (do* ((l (cdr translation) (cdr l))
	  (this (car translation) next)
	  (next (car l) (car l)))
	((null l))
      (when (and (car next)
		 (eq (car this) (car next))
		 (simple-structure-reference-p (cadr this) (car this)))
	(setq translation (delq this translation))
	(setf (car l)
	      (setq next `(,(car this) ,(subst (cadr next) (car this) (cadr this)))))))
    ;; Convert into LET*'s and SETQ's
    (let ((bindings nil)
	  (additional-forms nil))
      (dolist (clause (nreverse translation))
	(cond ((and (car clause)
		    (not (assq (car clause) bindings)))
	       ;; Variable seen for the first time
	       (when additional-forms
		 (setq clause `(,(car clause) (progn ,.(nreverse additional-forms)
						     ,(cadr clause)))
		       additional-forms nil))
	       (push clause bindings))
	      (t
	       ;; Variable seen again, or random form, use SETQ instead of binding
	       (push (if (car clause)
			 (cons 'setq clause)
			 (cadr clause))
		     additional-forms))))
      (unless (or bindings additional-forms)
	;; No destructuring required, don't forget to evaluate datum.
	(setq additional-forms (cond ((and (listp datum) (eq (first datum) 'cdr))
				      ;; Generate better code for a common special case
				      `(,(second datum)))
				     (t `(,datum)))))
      (values (nreverse bindings) (nreverse additional-forms) body-flag))))

;Convert a destructuring pattern into a list of variable/value or NIL/form lists.
;The variables are to be set to the values, sequentially.  A variable
;may appear more than once; the first appearance is assumed to be a LET*
;and the remaining appearances to be SETQs.
;datum is a form that evaluates to the object to be destructured.
;error is NIL or code to evaluate if an argument-matching error occurs.
;The list returned is backwards!
(defun translate-destructuring-1
       (pattern datum error &optional (validate-keyword-function 'validate-defmacro-keywords))
  (multiple-value-bind (temp nil n-required n-maximum)
      (get-destructuring-temp pattern)
    (if temp
	(let ((mode nil)
	      (result `((,temp ,datum)))
	      (nthcdr 0)
	      (argno 0)
	      (original-pattern pattern)
	      (validate-keywords error)
	      (body-flag nil)
	      var)
	  (loop do
	    (when (atom pattern)
	      (when pattern			;Dotted list or atom as a pattern
		(unless (eq pattern 'ignore)
		  (setq temp (generate-nthcdr nthcdr temp))
		  (unless (eq temp pattern)
		    (push `(,pattern ,temp) result))))
	      (when (and (symbolp temp) (not (symbol-package temp)))
		;; make sure gensymmed vars get referenced to inhibit compiler warnings
		(push `(NIL ,temp) result))
	      (return (values result body-flag)))
	    (setq var (pop pattern))
	    (cond ((memq var '(&optional &rest &body &aux))
		   (setq mode var))
		  ((eq var '&key)
		   (setq mode var)
		   ;; Cdr down the datum to the point where this argument is
		   (unless (zerop nthcdr)
		     (push `(,temp ,(generate-nthcdr nthcdr temp)) result)
		     (setq nthcdr 0))
		   ;; Do error-checking, if required, before the keyword arguments
		   (when (and validate-keywords
			      (not (memq '&allow-other-keys original-pattern)))
		     (let ((keys (loop for x in (cdr (memq '&key original-pattern))
				       until (memq x '(&rest &body &aux))
				       unless (eq x '&allow-other-keys)
					 collect (cond ((atom x)
							(intern (string x)
								pkg-keyword-package))
						       ((atom (car x))
							(intern (string (car x))
								pkg-keyword-package))
						       (t (caar x))))))
		       (push `(nil (or (,validate-keyword-function ,temp ',keys)
				       ,error))
			     result))))
		  ((eq var '&whole)
		   (unless (and (eq mode nil) (zerop argno))
		     (compiler:warn () "~S is out of order in a destructuring pattern" var))
		   (setq mode '&whole))
		  ((eq var '&environment)
		   (compiler:warn () "~S is out of order in a destructuring pattern" var))
		  ((eq var '&allow-other-keys))
		  ((memq var lambda-list-keywords)
		   (compiler:warn () "~S is not allowed in a destructuring pattern" var))
		  ((and (symbolp var)
			(char= (aref (get-pname var) 0) #/&))
		   (compiler:warn () "~S appears to be a mis-spelled &-keyword" var))
		  ((eq mode '&aux)
		   (cond ((atom var)
			  (push `(,var nil) result))
			 ((and (atom (car var))
			       (null (cddr var)))
			  (push `(,(car var) ,(cadr var)) result))
			 (t (compiler:warn "~S is an ill-formed &aux binding" var))))
		  ((memq var '(nil ignore))
		   ;; Don't bind anything, but do check for wrong-number-of-arguments error
		   (when (memq mode '(nil &optional))
		     (incf argno)
		     (cond ((and error (or (= argno n-required) (eql argno n-maximum)))
			    (unless (zerop nthcdr)
			      (push `(,temp ,(generate-nthcdr nthcdr temp)) result)
			      (setq nthcdr 0))
			    (when (= argno n-required)
			      (push `(nil (and (atom ,temp) ,error)) result)
			      (incf nthcdr))
			    (when (eql argno n-maximum)
			      (push `(nil (and (cdr ,temp) ,error)) result)))
			   (t
			    (incf nthcdr)))))
		  (t
		   ;; Take one argument, possibly destructuring it
		   ;; Cdr down the datum to the point where this argument is
		   (unless (zerop nthcdr)
		     (push `(,temp ,(generate-nthcdr nthcdr temp)) result)
		     (setq nthcdr 0))
		   ;; Check for too-few-arguments error at last required argument
		   ;; Check for too-many-arguments error at last argument
		   (when (memq mode '(nil &optional))
		     (incf argno)
		     (and error (= argno n-required)
			  (push `(nil (and (atom ,temp) ,error)) result))
		     (and error (eql argno n-maximum)
			  (push `(nil (and (cdr ,temp) ,error)) result)))
		   ;; Take the argument according to mode
		   (cond ((memq mode '(&body &rest))
			  (unless (eq var temp)
			    (setq result (nconc (translate-destructuring-1
						  var temp error
						  validate-keyword-function)
						result)))
			  (when (eq mode '&body)
			    (setq body-flag argno)))
			 ((eq mode '&key)
			  ;; Parse the argument specifier
			  (multiple-value-bind (var key default supplied-p)
			      (cond ((atom var)
				     (values var (intern (string var) pkg-keyword-package)
					     nil nil))
				    ((atom (car var))
				     (when (or (cdddr var)
					       (not (symbolp (car var)))
					       (not (symbolp (caddr var))))
				       (compiler:warn () "~S is an ill-formed &key binding"
						      var))
				     (values (car var) (intern (string (car var))
							       pkg-keyword-package)
					     (cadr var) (caddr var)))
				    (t
				     (when (or (cdddr var)
					       (not (symbolp (caar var)))
					       (not (symbolp (caddr var))))
				       (compiler:warn () "~S is an ill-formed &key binding"
						      var))
				     (values (cadar var) (caar var)
					     (cadr var) (caddr var))))
			    ;; Take the argument, with possible destructuring and defaulting
			    ;;--- Use same instruction as &key argument taking?
			    ;;--- Would require patching the compiler slightly
			    (setq result (nconc (translate-destructuring-1 var
						  (if default
						      (let ((value (gensymbol "VALUE"))
							    (foundp (gensymbol "FOUNDP")))
							`(multiple-value-bind (,value ,foundp)
							     (cli::rgetf ',key ,temp)
							   (if ,foundp
							       ,value
							       ,default)))
						      `(cl:getf ,temp ',key))
						  error validate-keyword-function)
						result))
			    (when supplied-p
			      (push (let ((value (gensymbol "VALUE"))
					  (foundp (gensymbol "FOUNDP")))
				      `(,supplied-p (multiple-value-bind (,value ,foundp)
							(cli::rgetf ',key ,temp)
						      (declare (ignore ,value))
						      (cl:consp ,foundp))))
				    result))))
			 ((eq mode '&whole)
			  (unless (symbolp var)
			    (compiler:warn () "~S is an ill-formed &WHOLE binding" var))
			  (push `(,var ,temp) result)
			  (setq mode nil))
			 ((and (eq mode '&optional) (listp var))
			  ;; Take an optional argument with a default
			  (when (or (cdddr var)
				    (not (symbolp (caddr var))))
			    (compiler:warn () "~S is an ill-formed &OPTIONAL binding" var))
			  (setq result (nconc (translate-destructuring-1
						(car var)
						(if (null (cadr var)) `(car ,temp)
						    `(if ,temp (car ,temp) ,(cadr var)))
						error validate-keyword-function)
					      result))
			  (when (caddr var)
			    (push `(,(caddr var) (not (null ,temp))) result))
			  (incf nthcdr))
			 ((listp var)
			  ;; Take a required argument that involves destructuring
			  (when (and error (< argno n-required))
			    (push `(nil (and (atom ,temp) ,error)) result))
			  (setq result (nconc (translate-destructuring-1
						var `(car ,temp) error
						validate-keyword-function)
					      result))
			  (incf nthcdr))
			 (t
			  ;; Take a simple required or optional argument
			  (when (and error (< argno n-required))
			    (push `(nil (and (atom ,temp) ,error)) result))
			  (push `(,var (car ,temp)) result)
			  (incf nthcdr)))))))
	;; No bindings required, there may still be some argument checking to be done
        (let ((result nil))
	  ;; look for &AUX
	  (loop with mode = nil
		until (atom pattern)
		as var = (pop pattern)
		do (cond ((memq var lambda-list-keywords) (setq mode var))
			 ((eq mode '&aux)
			  (cond ((atom var)
				 (push `(,var nil) result))
				((and (atom (car var))
				      (null (cddr var)))
				 (push `(,(car var) ,(cadr var)) result))
				(t (compiler:warn "~S is an ill-formed &aux binding" var))))
			 ;; ignore everything else.  Argument checking done elsewhere
			 ))	  
	  (when error
	     (if (> n-required 0)
		 (if n-maximum
		     (push `(nil (or ( ,n-required (length ,datum) ,n-maximum) ,error)) result)
		     (push `(nil (or ( ,n-required (length ,datum)) ,error)) result))
		 (if n-maximum
		     (if (zerop n-maximum)
			 (push `(nil (and ,datum ,error)) result)
			 (push `(nil (or ( (length ,datum) ,n-maximum) ,error)) result))
		     nil)))
	  result))))

;Find a variable to bind to a list to be destructured.
;The first value is the variable, or NIL if no variable seems to be needed.
;The second value is a list of variables used freely by any default value forms
; for optional or keyword arguments, or by initializations for aux variables.
; These variables are not necessarily free in the whole lambda list, just free where used.
;The third value is the number of required arguments.
;The fourth value is the maximum number of arguments, or NIL if there is no maximum.
;The bracketed sentences are inoperative:
;    [Try to use the last parameter variable as the temporary variable, to save
;     a binding.  This can't be done if it is special or if an outer variable
;     with the same name is referenced freely before the place where this variable
;     is supposed to be bound.  If it can't be done, give up and use a gensym.]
; because that will not cause unused variable warnings for the last
; item.  It may have saved a binding, but several customers complained
; that it was inconsistent.  --dcp 11/01/85
(defun get-destructuring-temp (pattern)
  (let ((variable nil)
	(free-vars nil)
	(aux-free-vars nil)
	(mode nil)
	(need-destructuring nil)
	(n-required 0)
	(n-maximum 0)
	var)
    (loop do
      (when (atom pattern)
	(unless (or (null pattern)		;Dotted list means &rest
		    (eq mode '&aux))
	  (setq n-maximum nil)
	  (unless (eq pattern 'ignore)
	    (setq variable pattern)))
	(when need-destructuring
	  #| See preface comment | (when (or (null variable)
					     (memq variable free-vars)
					     (special-variable-p variable))
				     (setq variable (gensym))) ||#
	  (setq variable (gensym)))
	(return (values variable (nunion free-vars aux-free-vars) n-required n-maximum)))
      (setq var (pop pattern))
      (cond ((cl:member var '(&key &rest &body))
	     (setq mode var)
	     (setq n-maximum nil)
	     (when (eq var '&key)
	       (setq need-destructuring t)))	;Destructure only for error-checking
	    ((cl:member var '(&whole &optional &aux))
	     (setq mode var))
	    ((cl:member var lambda-list-keywords))	;ignore these until second pass
	    ((eq mode '&aux)
	     (when (listp var)
	       (setq aux-free-vars (nunion (variables-free-in-form (cadr var))
					   aux-free-vars))))
	    (t
	     (when (eq mode nil)
	       (incf n-required))
	     (cond ((cl:member mode '(nil &optional))
		    (incf n-maximum))
		   ((eq mode '&whole)
		    (setq mode nil))
		   (t (setq n-maximum nil)))
	     (cond ((cl:member var '(nil ignore))
		    (when (cl:member mode '(nil &optional))
		      (setq variable nil		;Can't use variable to left
			    need-destructuring t)))	;Destructure only for error-checking
		   ((atom var)
		    (setq variable var)
		    (unless (cl:member mode '(&whole &rest &body &aux))
		      (setq need-destructuring t)))
		   ((cl:member mode '(&optional &key))
		    (multiple-value-bind (temp free)
			(get-destructuring-temp (if (and (eq mode '&key) (listp (car var)))
						    (cadar var)
						    (car var)))
		      (when temp
			(setq variable temp))
		      (setq free-vars (nunion (nunion (variables-free-in-form (cadr var))
						      free-vars)
					      free))
		      (when (caddr var)
			(setq variable (caddr var)))
		      (setq need-destructuring t)))
		   (t
		    (multiple-value-bind (temp free)
			(get-destructuring-temp var)
		      (when temp
			(setq variable temp))
		      (setq free-vars (nunion free-vars free))
		      (unless (cl:member mode '(&whole &rest &body &aux))
			(setq need-destructuring t))))))))))

;More like the Common Lisp SUBST
(defun subst-that-works (new old s-exp)
    (cond ((eql old s-exp) new)
	  ((atom s-exp) s-exp)
	  (t (do ((s s-exp (cdr s))
		  (prev nil s)
		  (n 0 (1+ n))
		  (copied nil))
		 ((atom s)
		  (let ((new (subst-that-works new old s)))
		    (unless (eq new s)
		      (cond ((null prev) (setq s-exp new))
			    (t (unless copied
				 (setq s-exp (copylist s-exp))
				 (setq prev (nthcdr (1- n) s-exp)))
			       (setf (cdr prev) new))))))
	       (when (eql s old)
		 (cond ((null prev) (setq s-exp new))
		       (t (unless copied
			    (setq s-exp (copylist s-exp))
			    (setq prev (nthcdr (1- n) s-exp)))
			  (setf (cdr prev) new)))
		 (return))
	       (let ((newcar (subst-that-works new old (car s))))
		 (unless (eq newcar (car s))
		   (unless copied
		     (setq s-exp (copylist s-exp))
		     (setq s (nthcdr n s-exp))
		     (setq copied t))
		   (setf (car s) newcar))))
	     s-exp)))

;True if the variable's known value can be substituted in-line into the form
;when combining redundant settings of the same variable.
(defun simple-structure-reference-p (form var)
  (or (eq form var)
      (and (listp form)
	   (memq (car form) '(cdr cddr cdddr cddddr car cadr caddr cadddr))
	   (simple-structure-reference-p (cadr form) var))
      (and (listp form)
	   (eq (car form) 'nthcdr)
	   (numberp (cadr form))
	   (simple-structure-reference-p (caddr form) var))))

;This is redundant with a compiler optimizer, I guess it's just to make the
;generated code easier to read / faster to interpret.
(defun generate-nthcdr (nthcdr datum)
  (selectq nthcdr
    (0 datum)
    (1 `(cdr ,datum))
    (2 `(cddr ,datum))
    (3 `(cdddr ,datum))
    (4 `(cddddr ,datum))
    (otherwise `(nthcdr ,nthcdr ,datum))))

;For now, CLCP isn't loaded so we don't have mapforms, fake it in a conservative way
;We can depend on the form being pretty small (typically it's an &optional default form)
;so don't worry about asymptotically efficient techniques.
(defun variables-free-in-form (form)
  (cond ((atom form)
	 (unless (cl:constantp form)
	   (ncons form)))
	((eq (car form) 'quote) nil)
	(t (mapcan #'variables-free-in-form (cdr form)))))

;--- Use this definition once CLCP is a permanent part of the world
;--- Put in appropriate package prefixes
;(defun variables-free-in-form (form)
;  (mapforms #'(lambda (form kind ignore free-vars)
;		(and (memq kind '(set symeval))
;		     (not (memq form *mapforms-bound-variables*))
;		     (not (memq form free-vars))
;		     (push form free-vars))
;		free-vars)
;	    form ':bound-variables nil :expand-substs t))

;All argument-matching errors in defmacros come through here.
;This could be arbitrarily haired-up to reparse the pattern and report the specific error!

;This flavor is needed to adjust the prinlevel/prinlength for the error message
(defflavor defmacro-argument-error (name pattern form type) (error)
  :initable-instance-variables)

(defmethod (:report defmacro-argument-error) (stream)
  (let ((prinlevel (and prinlevel (max prinlevel 4)))
	(prinlength (and prinlength (max prinlength 10))))
    (format stream "Incorrect arguments to ~S:~@
		    The ~A's argument pattern ~:S~%does not match the form ~S."
	    name type pattern form)))

(compile-flavor-methods defmacro-argument-error)

(defun defmacro-argument-error (name pattern form)
  (declare (dbg:error-reporter))
  (signal 'defmacro-argument-error :name name :pattern pattern :form form :type "macro"))

(defun special-form-argument-error (name pattern form)
  (declare (dbg:error-reporter))
  (signal 'defmacro-argument-error :name name :pattern pattern :form form
				   :type "special form"))

;;;

(defflavor destructuring-bind-argument-error () (ferror))

(compile-flavor-methods destructuring-bind-argument-error)

;This one doesn't really need its own condition, since we can't necessarily get at the
;actual datum being destructured.
;Wrong!  You may want to just bind for the condition, regardless of the datum.
(defun destructuring-bind-argument-error (pattern name)
  (declare (dbg:error-reporter))
  (error 'destructuring-bind-argument-error
	 :format-string "The value of ~S failed to match the DESTRUCTURING-BIND pattern ~S"
	 :format-args (list name pattern)))

(defun destructuring-bind-argument-error-1 (pattern datum)
  (declare (dbg:error-reporter))
  (error 'destructuring-bind-argument-error
	 :format-string "The value ~S failed to match the DESTRUCTURING-BIND pattern ~S"
	 :format-args (list datum pattern)))
