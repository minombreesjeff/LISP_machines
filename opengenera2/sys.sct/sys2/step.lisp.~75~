;;; -*- Mode:LISP; Package:System-Internals; Lowercase:T; Base:8 -*-
;;; Ultra-simple stepper for lisp-machine.
;;; Wins with multiple values


;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;NOTES:
; The way it decides whether it needs to reprint the form when showing
; you the values is pretty kludgey right now.  Can it check the cursorpos
; or ask itself whether it typed anything or something?
;
; Would like to be able to evaluate and/or substitute in atoms and forms
; without having to break first.
;
; Would like to be able to type c-A and have it stop after evaluating the
; args, before calling the function.
;
; Raid registers
;
; Hook up to DDT?
; 
; If an error happens, user should be able to throw back into the stepper.

(defvar step-level)            ;depth in recursion
(defvar step-array)            ;contains pending forms
(defvar step-max)              ;max depth at which to type out
(defvar step-form)	       ;current form, user may change in a breakpoint
(defvar step-value)	       ;first value, changing this in a bkpt returns it
(defvar step-values)	       ;list of values, may be changed in a breakpoint

;Main entry point.
(defun step (form &optional env)
  (setq step-level -1 step-max 0)
  (or (variable-boundp step-array)
      (setq step-array (make-array 200)))
  (step-eval form env))

;This is for TRACE, mainly.  The idea is to do an apply,
;stepping under it but not showing the user the apply itself.
(defun step-apply (fcn args)
  (applyhook fcn args #'step nil))

;Check for macros, they are treated specially.
(defun step-macro-p (form)
  (and (listp form)
       (symbolp (car form))
       (fboundp (car form))
       (macro-function (car form))
       (not (special-form-p (car form)))))

(defvar *step-indentation-restart-fraction* 0.5
  "A non-zero fraction of the screen size after which the stepper
should go back to column 0 for its indentation rather than reducing
the display to nothingness against the right margin.")

;Print a form, suitably indented, marked, and truncated to one line.
(defun step-print-form (form level)
  (terpri)
  (let* ((n (* 2 level))
	 (nn (if *step-indentation-restart-fraction*
		 (mod n
		      (truncate (* (funcall standard-output :size-in-characters)
				   *step-indentation-restart-fraction*)))
		 n)))
    (when ( n nn)
      (cl:write-string "... "))
    (do ((n nn (1- n))) ((<= n 0))
      (tyo #\SP)))
  (tyo (cond ((step-macro-p form) #/)
             (t #/)))
  (tyo #\SP)
  (print-truncated form 75.))

;print whatever is necessary, read a command, set special variables
;and return how to proceed:  eval (just eval), evalhook (recurse), more options later.
;If calling for eval, step-values is nil, otherwise calling for return.
(defun step-cmdr (form values print-form-p env)
  (prog (ch ch1
	 (standard-input trace-output)	; Is this right??
	 (standard-output trace-output))
    (and print-form-p (step-print-form form step-level))
 pv (do ((l values (cdr l))
         (ch #/ #/))
        ((null l))
      (terpri-if-insufficient-space 80.)
      (tyo #\SP) (tyo ch) (tyo #\SP)
      (print-truncated (car l) 90.))
 rd (setq ch1 (funcall standard-input ':tyi))
    (setq ch (char-upcase ch1))
    (cond ((char= ch #\SP) (setq step-max step-level) (return 'eval))
          ((char= ch #\c-U) (setq step-max (max 0 (1- step-level))) (return 'eval))
          ((char= ch #\c-N) (setq step-max (1+ step-level)) (return 'evalhook))
          ((char= ch #\c-X) (setq step-max -1) (return 'eval))
          ((char= ch #\c-B)
	   (break-internal 'step t env)
           (setq ch 0)
           (setf (aref step-array step-level) step-form)
           (go redis1))
          ((char= ch #\c-E)
           (ed)
           (setq ch 10.)
           (go redisplay))
          ((or (char= ch #\Clear-Screen) (char= ch #\c-L))
           (setq ch 10.)
           (go redisplay))
	  ((char= ch #\m-L)
	   (setq ch 10.)
	   (go redis1))
          ((char= ch #\c-m-L)
           (setq ch step-level)
           (go redisplay))
          ((or (char= ch #\c-G) (char= ch #\c-T))
           (setq ch (cond ((char= ch #\c-G) (function cl:pprint)) ((function print))))
           (cond ((null values) (funcall ch form))
                 ((do l values (cdr l) (null l)
                    (funcall ch (car l)))))
           (go rd))
	  ((char= ch #\Help)
	   (terpri)
	   (princ
	     (cond ((null step-values) "You are about to evaluate the above form.")
		   (t "You have evaluated a form and are about to return the above values.")))
	   (terpri)
	   (princ "Commands are single characters, usually control, which don't echo:")
	   (terpri)
	   (princ "c-N to next thing evaled, <space> next thing at same level, c-U up a level")
	   (terpri)
	   (princ "c-X up all levels (exit), c-E escape to editor, c-T retype in full, c-G grind")
	   (terpri)
	   (princ "c-B break: STEP-FORM is the form, STEP-VALUES is the list of values,")
	   (terpri)
	   (princ "          STEP-VALUE is the first value.  If you change these, it wins.")
	   (terpri)
	   (princ "c-L or <form> clear & show last 10., m-L don't clear, c-m-L clear & show all")
	   (terpri)
	   (princ "Just type and it will be read, evaluated, and printed")
	   (terpri)
	   (princ "Magic flags:  form,  macro,  values,  next value")
	   (setq ch 0)
	   (go redis1))
	  ((zerop (char-bits ch))
	   (funcall standard-input ':untyi ch1)
	   (princ " Eval: ")
	   (catch-error-restart ((error abort) "Return to stepper top level")
	     (print (eval (read-for-top-level) env)))
	   (terpri)
	   (setq ch 0)
	   (go redis1))
          (t (beep)
             (go rd)))
 redisplay 
    (funcall standard-output ':clear-screen)
 redis1 
    (do i (max 0 (- step-level ch)) (1+ i) (> i step-level)
      (step-print-form (aref step-array i) i))
    (go pv)))

;This is evalhooked in in place of EVAL.  Works by calling step-cmdr
;to let the user see what's going on and say what to do, then continues
;evaluation using either EVAL or EVALHOOK based on what the user typed.
;Has special hair for macros and for atoms.
(defun step-eval (step-form &optional env)
  (prog ((step-level (1+ step-level)) step-value step-values tem val)
	(and (>= step-level (ARRAY-LENGTH step-array))
	     (adjust-array-size step-array (+ 100 step-level)))
     mc (setf (aref step-array step-level) step-form)
	(cond ((nlistp step-form)
	       (setq step-values (list (eval step-form env)))
	       (setq tem 'atom)
	       (go rl))
	      ((<= step-level step-max)
	       (setq tem (step-cmdr step-form nil t env)))
	      (t (setq tem 'eval)))
	(cond ((step-macro-p step-form)
	       (setq step-form (macroexpand-1 step-form env))
	       (go mc))
	      ((eq tem 'eval)
	       (setq step-values (multiple-value-list (eval step-form env))))
	      ((eq tem 'evalhook)
	       (setq step-values (multiple-value-list
				   (evalhook step-form (function step-eval)
					     nil env))))
	      ((ferror "Unknown function ~S" tem)))
     rl (setq step-value (setq val (car step-values)))
	(cond ((<= step-level step-max)
	       (setq tem (step-cmdr step-form step-values (neq tem 'eval) env)))
	      (t (setq tem 'eval)))
	(and (neq step-value val) (return step-value))
     rt (return (values-list step-values))))

;PRINT abbreviated spacewise rather than listwise

(DEFVAR PRINT-TRUNCATED) ;YECH

(DEFUN TERPRI-IF-INSUFFICIENT-SPACE (PERCENT-WIDTH)
  (LET ((X (// (* PERCENT-WIDTH (FUNCALL STANDARD-OUTPUT ':INSIDE-SIZE)) 100.)))
    (AND ( (FUNCALL STANDARD-OUTPUT ':READ-CURSORPOS ':PIXEL) X)
	 (TERPRI))))

(DEFUN PRINT-TRUNCATED (SEXP PERCENT-WIDTH)
  (LET* ((CL:*PRINT-PRETTY* NIL)		;No line wrapping.
	 (PRINT-TRUNCATED (// (* PERCENT-WIDTH (FUNCALL STANDARD-OUTPUT ':INSIDE-SIZE)) 100.)))
    (CATCH 'PRINT-TRUNCATED
	    (PRIN1 SEXP (CLOSURE '(PRINT-TRUNCATED STANDARD-OUTPUT)
				 (FUNCTION PRINT-TRUNCATED-STREAM))))))

(DEFUN PRINT-TRUNCATED-STREAM (OP &OPTIONAL ARG1 &REST REST)
  (SELECTQ OP
    (:TYO
     (COND (( (FUNCALL STANDARD-OUTPUT ':READ-CURSORPOS ':PIXEL)
		PRINT-TRUNCATED)
	    (THROW 'PRINT-TRUNCATED NIL))
	   (T (FUNCALL STANDARD-OUTPUT ':TYO ARG1))))
    (:WHICH-OPERATIONS '(:TYO))
    (OTHERWISE
     (STREAM-DEFAULT-HANDLER 'PRINT-TRUNCATED-STREAM OP ARG1 REST))))
