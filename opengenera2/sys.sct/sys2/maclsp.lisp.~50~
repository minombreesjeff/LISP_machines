;;; -*- Package:SYSTEM-INTERNALS; Mode:LISP; Base:8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Totally random maclisp compatible functions

;Functions for compatibility with MACLISP LEXPRs.  DEFUN-COMPATIBILITY
;is used to convert MACLISP LEXPR and FEXPR DEFUNs to Lisp machine form.

(DEFVAR *LEXPR-ARGLIST*)

(DEFUN ARG (N)
  (DECLARE LT:(SIDE-EFFECTS READER))
  (COND ((NULL N) (LENGTH *LEXPR-ARGLIST*))
	(T (LET ((ARGPTR (NTHCDR (1- N) *LEXPR-ARGLIST*)))
	     (COND ((OR ( N 0) (NULL ARGPTR))
		    (FERROR "~D is not between 1 and the number of args" N)))
	     (CAR ARGPTR)))))

(DEFUN SETARG (N X)
    (LET ((ARGPTR (NTHCDR (1- N) *LEXPR-ARGLIST*)))
      (COND ((OR ( N 0) (NULL ARGPTR))
	     (FERROR "~D is not between 1 and the number of args" N)))
      (RPLACA ARGPTR X)
      X))

(DEFUN LISTIFY (N)
  (DECLARE LT:(SIDE-EFFECTS READER))
  (COND ((MINUSP N) (APPEND (NLEFT (- N) *LEXPR-ARGLIST*) NIL))
	((ZEROP N) NIL)
	(T (FIRSTN N *LEXPR-ARGLIST*))))

(DEFUN MAKNAM (CHARL)
  (MAKE-SYMBOL (MACLISP-MAKE-STRING CHARL)))

(DEFUN MACLISP-MAKE-STRING (CHARL &OPTIONAL AREA)
  (LET* ((TYPE (OR (DOLIST (CHAR CHARL)
		     (WHEN (CHAR-FAT-P (CHARACTER CHAR))
		       (RETURN ART-FAT-STRING)))
		   ART-STRING))
	 (PNAME (MAKE-ARRAY (LENGTH CHARL) :AREA AREA :TYPE TYPE)))
    (LOOP FOR I FROM 0
	  FOR CHAR IN CHARL
	  DO
      (SETF (AREF PNAME I) (CHARACTER CHAR)))
    PNAME))

(DEFUN GETCHARN (S I)
  (DECLARE LT:(SIDE-EFFECTS REDUCIBLE))
  (SETQ S (STRING S))
  (COND ((AND (> I 0) (<= I (ARRAY-ACTIVE-LENGTH S)))
	 (AREF S (1- I)))
	(T 0)))

(DEFUN GETCHAR (S I)
  (DECLARE LT:(SIDE-EFFECTS REDUCIBLE))
  (SETQ S (STRING S))
  (COND ((AND (> I 0) (<= I (ARRAY-ACTIVE-LENGTH S)))
	 (ASCII (AREF S (1- I))))
	(T NIL)))

(DEFUN ASCII (N)
  (DECLARE LT:(SIDE-EFFECTS SIMPLE REDUCIBLE))
  (LET* ((CHAR (CHARACTER N))
	 (STR (MAKE-ARRAY 1
			  :AREA PNAME-AREA
			  :TYPE (IF (CHAR-FAT-P CHAR) ART-FAT-STRING ART-STRING))))
    (SETF (AREF STR 0) CHAR)
    (MULTIPLE-VALUE-BIND (SYM FLAG)
	(INTERN STR)
      (AND FLAG (RETURN-ARRAY STR))
      SYM)))

(DEFUN IMPLODE (X)
  (PROG (VAL TEM TOK)
	(MULTIPLE-VALUE (VAL TEM)
	  (INTERN (SETQ TOK (MACLISP-MAKE-STRING X PNAME-AREA))))
	(AND TEM (RETURN-ARRAY TOK))
	(RETURN VAL)))

(DEFUN EXPLODE (X &AUX (*IOLST NIL) (*IOCH T))
  (DECLARE LT:(SIDE-EFFECTS READER))
  (PRIN1 X (FUNCTION EXPLODE-STREAM))
  (NREVERSE *IOLST))

(DEFUN EXPLODEC (X &AUX (*IOLST NIL) (*IOCH T))
  (DECLARE LT:(SIDE-EFFECTS READER))
  (PRINC X (FUNCTION EXPLODE-STREAM))
  (NREVERSE *IOLST))

(DEFUN EXPLODEN (X &AUX (*IOLST NIL) (*IOCH NIL))
  (DECLARE LT:(SIDE-EFFECTS READER))
  (PRINC X (FUNCTION EXPLODE-STREAM))
  (NREVERSE *IOLST))

(DEFPROP EXPLODE-STREAM T IO-STREAM-P)

(DEFUN EXPLODE-STREAM (OPERATION &OPTIONAL ARG1 &REST REST &AUX STR OLDP)
  (COND ((EQ OPERATION ':TYO)
	 (COND (*IOCH
		(MULTIPLE-VALUE (ARG1 OLDP) (INTERN (SETQ STR (STRING ARG1))))
		(AND OLDP (RETURN-ARRAY STR))))
	 (SETQ *IOLST (CONS ARG1 *IOLST)))
	((EQ OPERATION ':WHICH-OPERATIONS)
	 '(:TYO))
	(T (STREAM-DEFAULT-HANDLER 'EXPLODE-STREAM OPERATION ARG1 REST))))

;;;--- this is a kludge to help the user know that STORE is not supported
(DEFUN (COMPILER:STYLE-CHECKER OLD-STORE STORE) (FORM)
  (SCL:DESTRUCTURING-BIND (NIL (FCN ARGS) VALUE) FORM
    (WARN "~S is no longer supported.  Please replace ~S with ~S."
	  'STORE FORM `(SETF (AREF #',FCN ,@ARGS) ,VALUE))))

(DEFMACRO STORE ((FCN ARGS) VALUE)
  `(SETF (AREF #',FCN ,@ARGS) ,VALUE))

(DEFMACRO ARRAY (X TYPE &REST DIMLIST)
  `(*ARRAY ',X ',TYPE ,@DIMLIST))

(DEFUN *ARRAY (X TYPE &REST DIMLIST &AUX ARRAY)
  (AND (MEMQ TYPE '(READTABLE OBARRAY))
       (FERROR "The array type ~S does not exist on Lisp Machines" TYPE))
  (SETQ ARRAY (MAKE-ARRAY DIMLIST ':TYPE 'ART-Q
				  ':INITIAL-VALUE (SELECTQ TYPE
						    (FIXNUM 0)
						    (FLONUM 0.0)
						    (OTHERWISE NIL))))
  (COND ((NULL X)
	 ARRAY)
	((SYMBOLP X)
	 (SETF (FSYMEVAL X) ARRAY)
	 X)
	(T (FERROR "~S is not a legal first arg for *ARRAY" X))))

;;The LM-2 gets this declared special during the cold load but the 3600 doesn't.
(DEFVAR-RESETTABLE *RSET T)

(DEFUN *RSET (&OPTIONAL (NEW-MODE T))
  (SETQ *RSET NEW-MODE))

;;; The following definitions of FILLARRAY and LISTARRAY should be completely
;;; compatible with Maclisp.  Slow, maybe, but compatible.

;;; When filling from an array, extra elements in the destination get the default initial
;;; value for the array type.  When filling from a list it sticks at the last element.
;;; Extra elements in the source are ignored.  copy-array-contents
;;; does the right thing for one-d arrays, but for multi-dimensional arrays
;;; uses column-major rather than row-major order.

(DEFRESOURCE FILLARRAY-INDEX-ARRAYS ()
	:CONSTRUCTOR (MAKE-ARRAY 10)
	:INITIAL-COPIES 2)

(DEFUN FILLARRAY (ARRAY SOURCE)
  (LET ((DEST (IF (AND (SYMBOLP ARRAY)
		       (FBOUNDP ARRAY)
		       (ARRAYP (FSYMEVAL ARRAY)))
		  (FSYMEVAL ARRAY)
		  ARRAY)))
    (CHECK-ARG ARRAY (ARRAYP DEST) "an array or a symbol FBOUND to an array")
    ;; Note, I really mean LISTP here -- Maclisp does not allow NIL, and that is right.
    ;; Well, there is code in the system that depends on the empty list working as a source,
    ;; at least for zero-length arrays.  This code says filling from () means fill
    ;; with the default initial value for the destination array type.
    (CHECK-ARG SOURCE (OR (ARRAYP SOURCE) (CL:LISTP SOURCE)) "an array or a list")
    (LET ((DEST-NDIMS (ARRAY-#-DIMS DEST))
	  (SOURCE-IS-AN-ARRAY-P (ARRAYP SOURCE)))
      (COND (SOURCE-IS-AN-ARRAY-P
	     (LET ((SOURCE-NDIMS (ARRAY-#-DIMS SOURCE)))
	       (COND ((AND (= DEST-NDIMS 1)
			   (= SOURCE-NDIMS 1))
		      ;; One-D array into a one-D array is in microcode!
		      (LET ((N-ELEMENTS (MIN (ARRAY-LENGTH SOURCE)
					     (ARRAY-LENGTH DEST))))
			(COPY-ARRAY-PORTION SOURCE 0 N-ELEMENTS DEST 0 N-ELEMENTS)))
		     (T
		      ;; Hairy case, some array is multi-dimensional.
		      (USING-RESOURCE (SOURCE-INDEX-ARRAY FILLARRAY-INDEX-ARRAYS)
			(USING-RESOURCE (DEST-INDEX-ARRAY FILLARRAY-INDEX-ARRAYS)
			  (DOTIMES (I 10)
			    (ASET 0 SOURCE-INDEX-ARRAY I)
			    (ASET 0 DEST-INDEX-ARRAY I))
			  (LET ((SOURCE-ELEMENTS (ARRAY-LENGTH SOURCE))
				(DEST-ELEMENTS (ARRAY-LENGTH DEST)))
			    (DOTIMES (I (MIN SOURCE-ELEMENTS DEST-ELEMENTS))
			      (DECLARE (IGNORE I))
			      (FILLARRAY-PUT (FILLARRAY-GET SOURCE
							    SOURCE-INDEX-ARRAY
							    SOURCE-NDIMS)
					     DEST DEST-INDEX-ARRAY DEST-NDIMS)))))))))
	    ((NULL SOURCE) (COPY-ARRAY-PORTION DEST 0 0 DEST 0 (ARRAY-LENGTH DEST)))
	    (T
	     ;; Source is a list.
	     (COND ((= DEST-NDIMS 1)
		    (LET ((DEST DEST))
		      (DECLARE (SYS:ARRAY-REGISTER DEST))
		      (DOTIMES (X (ARRAY-DIMENSION-N 1 DEST))
			(ASET (CAR SOURCE) DEST X)
			(IF (NOT (NULL (CDR SOURCE))) (SETQ SOURCE (CDR SOURCE))))))
		   ((= DEST-NDIMS 2)
		    (DOTIMES (X (ARRAY-DIMENSION-N 1 DEST))
		      (DOTIMES (Y (ARRAY-DIMENSION-N 2 DEST))
			(ASET (CAR SOURCE) DEST X Y)
			(IF (NOT (NULL (CDR SOURCE))) (SETQ SOURCE (CDR SOURCE))))))
		   ((= DEST-NDIMS 3)
		    (DOTIMES (X (ARRAY-DIMENSION-N 1 DEST))
		      (DOTIMES (Y (ARRAY-DIMENSION-N 2 DEST))
			(DOTIMES (Z (ARRAY-DIMENSION-N 3 DEST))
			  (ASET (CAR SOURCE) DEST X Y Z)
			  (IF (NOT (NULL (CDR SOURCE))) (SETQ SOURCE (CDR SOURCE)))))))
		   (T
		    (USING-RESOURCE (DEST-INDEX-ARRAY FILLARRAY-INDEX-ARRAYS)
		      (DOTIMES (I 10)
			(ASET 0 DEST-INDEX-ARRAY I))
		      (DOTIMES (I (ARRAY-LENGTH DEST))
			(DECLARE (IGNORE I))
			(FILLARRAY-PUT (CAR SOURCE) DEST DEST-INDEX-ARRAY DEST-NDIMS)
			(IF (NOT (NULL (CDR SOURCE))) (SETQ SOURCE (CDR SOURCE)))))))))))
  ARRAY)

(PROGN 'COMPILE
(DEFUN FILLARRAY-GET (ARRAY INDEX-ARRAY NDIMS &AUX (I 0))
  (%START-FUNCTION-CALL #'AREF T (1+ NDIMS) NIL)
  (%PUSH ARRAY)
  (LOOP UNTIL ( I NDIMS)
	DO (%PUSH (AREF INDEX-ARRAY I))
	   (INCF I))
  (PROG1 (%FINISH-FUNCTION-CALL #'AREF T (1+ NDIMS) NIL)
	 (FILLARRAY-INCREMENT-INDEX ARRAY INDEX-ARRAY NDIMS)))

(DEFUN FILLARRAY-PUT (VALUE ARRAY INDEX-ARRAY NDIMS &AUX (I 0))
  (%START-FUNCTION-CALL #'ASET NIL (+ NDIMS 2) NIL)
  (%PUSH VALUE)
  (%PUSH ARRAY)
  (LOOP UNTIL ( I NDIMS)
	DO (%PUSH (AREF INDEX-ARRAY I))
	   (INCF I))
  (%FINISH-FUNCTION-CALL #'ASET NIL (+ NDIMS 2) NIL)
  (FILLARRAY-INCREMENT-INDEX ARRAY INDEX-ARRAY NDIMS))
)

(DEFUN FILLARRAY-INCREMENT-INDEX (ARRAY INDEX-ARRAY NDIMS)
  (DO ((DIM NDIMS (1- DIM)))
      (( DIM 0))
    (LET ((VAL (1+ (AREF INDEX-ARRAY (1- DIM)))))
      (COND ((< VAL (ARRAY-DIMENSION-N DIM ARRAY))
	     (ASET VAL INDEX-ARRAY (1- DIM))
	     (RETURN NIL))
	    (T
	     (ASET 0 INDEX-ARRAY (1- DIM)))))))

;;; LISTARRAY of a one-dimensional array respects the fill pointer, but
;;; for multi-dimensional arrays it ignores the fill pointer.
(DEFUN LISTARRAY (ARRAY &OPTIONAL LIMIT)
  (DECLARE LT:(SIDE-EFFECTS READER))
  (IF (AND (SYMBOLP ARRAY)
	   (FBOUNDP ARRAY)
	   (ARRAYP (FSYMEVAL ARRAY)))
      (SETQ ARRAY (FSYMEVAL ARRAY)))
  (CHECK-ARG ARRAY ARRAYP "an array or a symbol FBOUND to an array")
  (CHECK-ARG LIMIT (OR (NULL LIMIT) (FIXP LIMIT)) "NIL or a fixnum")
  (LET* ((NDIMS (ARRAY-#-DIMS ARRAY))
	 (ELEMENTS (IF (= NDIMS 1)
		       (ARRAY-ACTIVE-LENGTH ARRAY)
		       ;; ARRAY-NUMBER-OF-ELEMENTS
		       (LOOP WITH PRODUCT = 1 FINALLY (RETURN PRODUCT)
			     FOR DIM FROM 1 TO NDIMS
			     DO (SETF PRODUCT (* PRODUCT (ARRAY-DIMENSION-N DIM ARRAY))))))
	 (TIMES (IF (NULL LIMIT)
		    ELEMENTS
		    (MIN LIMIT ELEMENTS)))
	 (LIST (MAKE-LIST TIMES))
	 (L LIST)
	 (COUNT 0))
    (COND ((= NDIMS 1)
	   (DOTIMES (X (ARRAY-ACTIVE-LENGTH ARRAY))
	     (SETQ COUNT (1+ COUNT))
	     (IF (> COUNT TIMES)
		 (RETURN))
	     (RPLACA L (AREF ARRAY X))
	     (SETQ L (CDR L))))
	  ((= NDIMS 2)
	   (DOTIMES (X (ARRAY-DIMENSION-N 1 ARRAY))
	     (DOTIMES (Y (ARRAY-DIMENSION-N 2 ARRAY))
	       (SETQ COUNT (1+ COUNT))
	       (IF (> COUNT TIMES)
		   (RETURN))
	       (RPLACA L (AREF ARRAY X Y))
	       (SETQ L (CDR L)))))
	  ((= NDIMS 3)
	   (DOTIMES (X (ARRAY-DIMENSION-N 1 ARRAY))
	     (DOTIMES (Y (ARRAY-DIMENSION-N 2 ARRAY))
	       (DOTIMES (Z (ARRAY-DIMENSION-N 3 ARRAY))
		 (SETQ COUNT (1+ COUNT))
		 (IF (> COUNT TIMES)
		     (RETURN))
		 (RPLACA L (AREF ARRAY X Y Z))
		 (SETQ L (CDR L))))))
	  (T
	   (USING-RESOURCE (INDEX-ARRAY FILLARRAY-INDEX-ARRAYS)
	     (DOTIMES (I 10) (ASET 0 INDEX-ARRAY I))
	     (DOTIMES (I TIMES)
	       (DECLARE (IGNORE I))
	       (RPLACA L (FILLARRAY-GET ARRAY INDEX-ARRAY NDIMS))
	       (SETQ L (CDR L))))))
    LIST))

;;; For (declare compatibility

(DEFUN NOTE-FUNCTIONS-DEFINED (FUNCTIONS)
  `(EVAL-WHEN (COMPILE)
     ,@(MAPCAR #'(LAMBDA (FUNCTION) `(COMPILER:FUNCTION-DEFINED ',FUNCTION))
	       FUNCTIONS)))

(DEFMACRO *EXPR (&REST FUNCTIONS) (NOTE-FUNCTIONS-DEFINED FUNCTIONS))
(DEFMACRO *LEXPR (&REST FUNCTIONS) (NOTE-FUNCTIONS-DEFINED FUNCTIONS))
(DEFMACRO *FEXPR (&REST FUNCTIONS) (NOTE-FUNCTIONS-DEFINED FUNCTIONS))

(DEFMACRO COMPILER:CLOSED (&REST IGNORE) NIL)
(DEFMACRO COMPILER:NOTYPE (&REST IGNORE) NIL)
(DEFMACRO COMPILER:FIXNUM (&REST IGNORE) NIL)
(DEFMACRO COMPILER:ARRAY* (&REST IGNORE) NIL)

;;; This is the definition of the old *catch in terms of the new meaning of catch.
(DEFMACRO *CATCH (TAG &BODY BODY)
  `(CATCH ,TAG (VALUES (PROGN ,@BODY) 'NIL)))

;;; The theory is that throw propagates multiple values, and that
;;; *throw simulates the old behavior wherein the tag is the second
;;; value returned.
(DEFUN *THROW (TAG VALUE)
  (THROW TAG (VALUES VALUE TAG)))

(DEFMACRO SIGNP (TEST NUMBER &ENVIRONMENT ENV)
  (ONCE-ONLY (NUMBER &ENVIRONMENT ENV)
    `(AND (NUMBERP ,NUMBER)
	  (,(SELECTOR (STRING TEST) STRING-EQUAL
	      ("L" '<)
	      ("LE" '<=)
	      ("E" '=)
	      ("N" ')
	      ("GE" '>=)
	      ("G" '>)
	      (OTHERWISE (FERROR "~S is not a test name for SIGNP" TEST)))
	   ,NUMBER 0))))

#||
(DEFINE-SPECIAL-FORM SIGNP (TEST NUMBER &ENVIRONMENT ENV)
  (SETF NUMBER (EVAL NUMBER ENV))
  (COND ((NOT (NUMBERP NUMBER)) NIL)
	((STRING-EQUAL TEST "L") (< NUMBER 0))
	((STRING-EQUAL TEST "LE") (<= NUMBER 0))
	((STRING-EQUAL TEST "E") (= NUMBER 0))
	((STRING-EQUAL TEST "N") ( NUMBER 0))
	((STRING-EQUAL TEST "GE") (>= NUMBER 0))
	((STRING-EQUAL TEST "G") (> NUMBER 0))
	((FERROR "~S is not a test name for SIGNP" TEST))))
||#

(DEFVAR *IOLST)
(DEFVAR *IOCH)
(DEFVAR *IOLIMIT)

(DEFUN READLIST (*IOLST &AUX (*IOCH NIL))
  (READ 'READLIST-STREAM))

(DEFPROP READLIST-STREAM T IO-STREAM-P)

(DEFUN READLIST-STREAM (OPERATION &OPTIONAL ARG1 &REST REST)
  (COND ((EQ OPERATION ':TYI)
	 (COND ((NOT (NULL *IOCH))
		(PROG1 *IOCH (SETQ *IOCH NIL)))
	       ((NULL *IOLST)
		(AND ARG1 (ERROR 'END-OF-FILE ':FORMAT-STRING ARG1
				 ':STREAM 'READLIST-STREAM)))
	       (T (PROG1 (CHARACTER (CAR *IOLST))
			 (SETQ *IOLST (CDR *IOLST))))))
	((EQ OPERATION ':UNTYI)
	 (SETQ *IOCH ARG1))
	((EQ OPERATION ':WHICH-OPERATIONS)
	 '(:TYI :UNTYI))
	(T (STREAM-DEFAULT-HANDLER 'READLIST-STREAM OPERATION ARG1 REST))))

;;;

(DEFUN LIST-SUM (X)
  (DO ((L X (CDR L))
       (ANS 0))
      ((NULL L) ANS)
    (SETQ ANS (+ ANS (ATOMEVAL (CAR L))))))

(DEFUN LIST-PRODUCT (X)
  (DO ((L X (CDR L))
       (ANS 1))
      ((NULL L) ANS)
    (SETQ ANS (* ANS (ATOMEVAL (CAR L))))))
       
(DEFUN ATOMEVAL (X)
  (COND ((NUMBERP X) X)
	(T (SYMEVAL X))))

;;;

;; Stupid.
(DEFUN DBG:MACLISP-COMPATIBILITY-ERROR (MESSAGE &OPTIONAL (OBJECT NIL OBJECT-P) INTERRUPT)
  (DECLARE (DBG:ERROR-REPORTER))
  (FUNCALL (IF INTERRUPT #'FSIGNAL #'FERROR)
	   (IF OBJECT-P "~S ~A" "~*~A")
	   OBJECT MESSAGE))

;; Stupid Stupid.  If ARG exists, and there is an ERRSET, throw ARG.
(COMPILER:MAKE-OBSOLETE ERR "use ERROR or FERROR")
(DEFUN ERR (&OPTIONAL (ARG NIL ARGP))
  (DECLARE (DBG:ERROR-REPORTER))
  (WHEN ARGP
    (DO ((L DBG:*BOUND-HANDLERS* (CDR L))) ((NULL L))
      (AND (EQ (CAR L) 'DBG:IGNORE-ERRORS-HANDLER)
	   (THROW (%MAKE-POINTER DTP-LOCATIVE L) (VALUES ARG T)))))
  (FERROR "ERR"))

;; Stupid Stupid Stupid.
(COMPILER:MAKE-OBSOLETE CERROR "use FERROR or FSIGNAL")
(DEFUN CERROR (PROCEEDABLE RESTARTABLE CONDITION FORMAT-STRING &REST FORMAT-ARGS)
  (DECLARE (DBG:ERROR-REPORTER))
  RESTARTABLE CONDITION		;Ignored, obsolete, and stupid
  (LET ((PROCEED-TYPES (COND ((NULL PROCEEDABLE) NIL)
			     ((EQ PROCEEDABLE T) '(:RETURN-VALUE))
			     (T '(:NO-ACTION)))))
    (MULTIPLE-VALUE-BIND (NIL VALUE)
	(SIGNAL 'CERROR
		':FORMAT-STRING FORMAT-STRING
		':FORMAT-ARGS (COPYLIST FORMAT-ARGS)
		':PROCEED-TYPES PROCEED-TYPES)
      VALUE)))

