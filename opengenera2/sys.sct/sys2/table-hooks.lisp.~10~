;;; -*- Mode: LISP; Syntax: Common-lisp; Package: COMMON-LISP-INTERNALS; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; ****************************************************************

;;; support for wobbling things

(defvar *rehash-these-tables-after-full-gc* nil)
(defvar si:rehash-these-hash-tables-before-cold nil)

(defun rehash-tables-after-full-gc ()
  (mapc #'rehash-if-necessary *rehash-these-tables-after-full-gc*))

(add-initialization "Rehash tables" '(rehash-tables-after-full-gc) '(:after-full-gc))

(defun rehash-tables-before-cold ()
  (mapc #'rehash-if-necessary si:rehash-these-hash-tables-before-cold))

(add-initialization "REHASH-BEFORE-COLD" '(rehash-tables-before-cold) '(:before-cold))

;;; ****************************************************************

;;; More stuff that doesn't really have a better place to live


;;; Support for the resource.
;;; We want a two-pass resource search


;;; There is no point to recycling and growing a small one as opposed to
;;; creating a new big one.  The trick is that we would like to use the
;;; real size thresholds, which is tricky.
;;; It is unwise in the extreme to pass lexical closures into here as test
;;; functions.
(defresource -hash-table- (pass test entry-size size)
  :initial-copies 0
  :clear-for-gc :cleanup
  :constructor (progn
		 (ignore entry-size)
		 (if (= pass 1)
		     (throw '-hash-table-pass-failed- nil)
		     (cl:make-hash-table :locking nil :test test
					 :size size)))
  :matcher (progn
	     (ignore entry-size)
	     (if (= pass 1)
		 (eq (make-table-internal :instantiate nil
					  :locking nil
					  :test test
					  :size size)
		     (%instance-flavor object))
		 ;; on pass 2, don't bother with size, we will mutate as needed.
		 (equal test (sys:function-name (test-function object)))))
  :deinitializer (clrhash object))

(defresource hash-table (&key (test 'eql) (entry-size 2) (size *default-table-size*))
  :finder hash-table-resource-allocator
  :deinitializer (deallocate-resource '-hash-table- object))

(defun hash-table-resource-allocator (descriptor
				      &key
				      (test 'eql)
				      (entry-size 2)
				      (size *default-table-size*))
  (ignore descriptor)
  (or (catch '-hash-table-pass-failed-
	(allocate-resource '-hash-table- 1
			   test
			   entry-size
			   size))
      (let ((table-of-some-flavor
	      (allocate-resource '-hash-table- 2
				 test
				 entry-size
				 size)))
		    ;; what we want here is not to return a table from a
		    ;; different bucket than we were asked for.
		    ;; that will make some operations really slow.
		    ;; if we hand out a 
		    ;; a bigger one is ok, since it will be concisely mutated.
		    ;; since the interface dosen't exist, we cheat slightly.
;	(let ((mutation
;		(cond ((and (< size (- *list-max* 2))
;			    (> (table-size table-of-some-flavor) (- *list-max* 2)))
;		       :shrink)
;		      ((and (< size (+ *block-array-max* 2))
;			    (> (table-size table-of-some-flavor) (+ *block-array-max* 2)))
;		       :shrink)
;		      ((and ( size (- *list-max* 2))
;			    (< (table-size table-of-some-flavor) (- *list-max* 2)))
;		       :grow)
;		      ((and ( size (+ *block-array-max* 2))
;			    (< (table-size table-of-some-flavor) (+ *block-array-max* 2)))
;		       :grow))))
;	  (when mutation (mutate table-of-some-flavor mutation))
	table-of-some-flavor)))

(defresource si:vanilla-hash-table (&optional (size *default-table-size*))
  :initial-copies 0
  :clear-for-gc :cleanup
  :constructor (cl:make-hash-table :locking nil :size size)
  :matcher (let ((old-size (table-size object)))
	     (>= old-size size))
  :deinitializer (clrhash object))


;;; compatibility def for older bin files

(defun make-table-internal (&rest args)
  (apply #'make-hash-table args))


;;; 
;;; Cloning tables.  This appears to only be used by DW's select-key
;;; hacking mechanism.
;;;
;;; This implementation *does not* attempt to use the hairy
;;; structure-copying technology that the old table system used, but
;;; simply makes a new table with the options of the one passed in, and
;;; copies the contents of the old one into the new one.
;;;

(defmethod (copy-table basic-table) ()
  (with-stack-list (opts :name name
			 :test test-function
			 :hash-function hash-function
			 :locking (and lock t)
			 :ignore-gc (table-flags-ignore-gc-p flags)
			 :gc-protect-values (table-flags-gc-protect-values-p flags)
			 :store-hash-code (table-flags-store-hash-code-p flags)
			 :number-of-values (table-flags-number-of-values flags)
			 :area area
			 :size n-filled-elements
			 :growth-factor growth-factor
			 :growth-threshold growth-threshold)
    (let ((new-table
	    (apply #'make-hash-table opts)))
      (maphash #'(lambda (k v) (setf (gethash k new-table) v)) self)
      new-table)))

;;; ****************************************************************

#||

Provide support for new ANSI table accessors.  the following is excerpted from
X3J13 cleanup proposal HASH-TABLE-ACCESS:PROVIDE:

 
Proposal: (HASH-TABLE-ACCESS:PROVIDE)
 
  Add the following functions to the language:
 
  HASH-TABLE-REHASH-SIZE hash-table
 
    Returns the current rehash size of a hash table.
 
  HASH-TABLE-REHASH-THRESHOLD hash-table
 
    Returns the current rehash threshold of a hash table.
 
  HASH-TABLE-SIZE hash-table
 
    Returns the current size of a hash table.
 
  HASH-TABLE-TEST hash-table
 
    Returns the test used for comparing keys in the hash table.
    By default the value will be EQL.
 
  Define that the results of HASH-TABLE-REHASH-SIZE, 
  HASH-TABLE-REHASH-THRESHOLD, and HASH-TABLE-SIZE are suitable
  for use in a call to MAKE-HASH-TABLE in order to produce a hash
  table with state corresponding to the current state of the hash
  table.

  Clarify that the result of HASH-TABLE-TEST is always a symbol
  naming a function rather than the function itself if the test
  is one of those defined by this standard. (Implementations which
  provide additional tests for hash tables may determine how this
  function relates to such extended tests.)
 
||#

(defmethod (future-common-lisp:hash-table-rehash-size basic-table) ()
  growth-factor)

(defmethod (future-common-lisp:hash-table-rehash-threshold basic-table) ()
  growth-threshold)

(defmethod (future-common-lisp:hash-table-size basic-table) ()
  (table-size self))

(defmethod (future-common-lisp:hash-table-test basic-table) ()
  (multiple-value-bind (fun name)
      (fixup-function-for-table-system test-function)
    (ignore fun)
    name))

(defun hash-table-equalp (x y)
  (and (equal (future-common-lisp:hash-table-test x) (future-common-lisp:hash-table-test y))
       (eql (hash-table-count x) (hash-table-count y))
       (progn
	 (maphash #'(lambda (xkey xvalue)
		      (unless (equalp xvalue (gethash xkey y (null xvalue)))
			(return-from hash-table-equalp nil)))
		  x)
	 t)))

(defmacro future-common-lisp:with-hash-table-iterator ((next-function table) &body body)
  (let ((generator (gensym))
	(key (gensym))
	(value (gensym)))
    `(si:with-table-elements-1
       ,table
       #'(lambda (,generator)
	   (let (,key ,value)
	     (macrolet ((,next-function ()
			 `(progn
			    (when ,',generator
			      (multiple-value-setq (,',value ,',key ,',generator)
				(funcall ,',generator)))
			    (if ,',generator
				(values (not (null ,',generator))
					,',key
					,',value)
				nil))))
	       ,@body))))))
