;;; -*-Package:SYSTEM-INTERNALS; Base:8.; Mode:LISP-*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;A PLANE is an array whose bounds, in each dimension,
;are plus-infinity and minus-infinity.  All integers are legal as indices.
;Planes are distinguished not by size and shape, but by number of dimensions alone.
;When a plane is created, a "default value" must be specified.
;At that moment, every component of the plane has that value.
;As you can't ever change more than a finite number of components,
;only a finite region of the plane need actually be stored.

;You can use MAKE-PLANE to create a plane,
;PLANE-REF or PLANE-AREF to get the value of a component,
;PLANE-STORE or PLANE-ASET to store into a component.
;ARRAY-#-DIMS will work on a plane.

;A plane is actually stored as an array with a leader.
;The array corrsponds to a rectangular, aligned region of the plane,
;containing all the components in which a PLANE-STORE has been done
;(and others, in general, whcih have never been altered).
;The lowest-co-ordinate corner of that rectangular region is
;given by the PLANE-ORIGIN in the array leader.
;The highest co-ordinate corner can be found by adding the PLANE-ORIGIN
;to the ARRAY-DIMENSIONS of the array.
;The PLANE-DEFAULT is the contents of all the
;elements of the plane which are not actually stored in the array.
;The PLANE-EXTENSION is the amount to extend a plane by in any direction
;when the plane needs to be extended.  The default is 32.

(DEFSUBST PLANE-ORIGIN (PLANE) (ARRAY-LEADER PLANE 0))
(DEFSUBST PLANE-DEFAULT (PLANE) (ARRAY-LEADER PLANE 1))
(DEFSUBST PLANE-EXTENSION (PLANE) (ARRAY-LEADER PLANE 2))

(DEFUN PLANE-AREF (PLANE &REST POINT)
  (PLANE-REF PLANE POINT))

(DEFUN PLANE-ASET (DATUM PLANE &REST POINT)
  (PLANE-STORE DATUM PLANE POINT))

;Access the element of PLANE at co-ordinates POINT.
;Absolutely any point is legal.
(DEFUN PLANE-REF (PLANE POINT)
  (DO ((PT POINT (CDR PT)) (PO (PLANE-ORIGIN PLANE) (CDR PO))) ((NULL PT))
    (RPLACA PT (- (CAR PT) (CAR PO))))
  (COND ((LEXPR-FUNCALL 'ARRAY-IN-BOUNDS-P PLANE POINT)
	 (%LEXPR-AREF PLANE POINT))
	(T (PLANE-DEFAULT PLANE))))

;Store DATUM in PLANE at co-ordinates POINT.
;PLANE is extended if necessary.
(DEFUN PLANE-STORE (DATUM PLANE POINT &AUX POINT1)
  (SETQ POINT1 (MAPCAR (FUNCTION -) POINT (PLANE-ORIGIN PLANE)))
  (COND ((NOT (LEXPR-FUNCALL 'ARRAY-IN-BOUNDS-P PLANE POINT1))
	 (PLANE-EXTEND PLANE POINT)
	 (%LEXPR-ASET DATUM PLANE (MAPCAR (FUNCTION -) POINT (PLANE-ORIGIN PLANE))))
	(T (%LEXPR-ASET DATUM PLANE POINT1))))

(DEFUN PLANE-EXTEND (PLANE POINT &AUX TOP-EXTEND BOTTOM-EXTEND NEW-PLANE
				      OLD-DIMS (MIN (PLANE-EXTENSION PLANE)))
  (SETQ OLD-DIMS (ARRAY-DIMENSIONS PLANE))
  (SETQ BOTTOM-EXTEND
	(MAPCAR (FUNCTION (LAMBDA (PT OLD-BOT)
			    (MAX 0 (- OLD-BOT PT))))
		POINT
		(PLANE-ORIGIN PLANE)))
  (SETQ TOP-EXTEND
	(MAPCAR (FUNCTION (LAMBDA (PT OLD-BOT OLD-LEN)
			    (MAX 0 (1+ (- PT OLD-BOT OLD-LEN)))))
		POINT
		(PLANE-ORIGIN PLANE)
		OLD-DIMS))
  (COND ((AND (ZEROP (APPLY '+ BOTTOM-EXTEND))
	      (ZEROP (APPLY '+ TOP-EXTEND))))
	(T
	 (SETQ NEW-PLANE (MAKE-PLANE-INTERNAL
			   (ARRAY-TYPE PLANE)
			   (MAPCAR #'(LAMBDA (DIM BOT TOP) #DIM+(BOT+TOP+MIN-1)/MIN*MIN)
				   OLD-DIMS
				   BOTTOM-EXTEND
				   TOP-EXTEND)
			   (MAPCAR (FUNCTION -)
				   (PLANE-ORIGIN PLANE)
				   BOTTOM-EXTEND)
			   (PLANE-DEFAULT PLANE)
			   T
			   (PLANE-EXTENSION PLANE)))
	 (PLANE-COPY PLANE NEW-PLANE)
	 (STRUCTURE-FORWARD PLANE NEW-PLANE)))
  PLANE)

;Make a new plane, for the user.  Specify the number of dimensions,
;and optionally the array type, default value, and extension.
(DEFUN MAKE-PLANE (RANK &KEY
		   (TYPE 'ART-Q) (DEFAULT-VALUE NIL DEFAULT-VALUE-SUPPLIED) (EXTENSION 32.)
		   (INITIAL-DIMENSIONS NIL) (INITIAL-ORIGINS NIL))
  (CHECK-ARG RANK FIXP "a fixnum")	       
    (MAKE-PLANE-INTERNAL TYPE
			 ;; SIZE is a list of 1's, as many as there are dimensions.
			 (OR INITIAL-DIMENSIONS (MAKE-LIST RANK ':INITIAL-VALUE 1))
			 ;; ORIGIN gets a similar list of zeroes.
			 (OR INITIAL-ORIGINS (MAKE-LIST RANK ':INITIAL-VALUE 0))
			 DEFAULT-VALUE
			 DEFAULT-VALUE-SUPPLIED
			 EXTENSION))

;Create a new plane of specified type (an array type) and default value,
;with a specified region in actual existence.
(DEFUN MAKE-PLANE-INTERNAL (TYPE SIZE ORIGIN DEFAULT DEFAULT-VALUE-SUPPLIED EXTENSION
			    &AUX PLANE INDEX)
  (SETQ PLANE (MAKE-ARRAY SIZE ':TYPE TYPE ':LEADER-LENGTH 3))
  (SETQ INDEX (MAPCAR (FUNCTION -) SIZE SIZE))
  (UNLESS DEFAULT-VALUE-SUPPLIED
    (SETQ DEFAULT (%LEXPR-AREF PLANE INDEX)))
  (SETF (PLANE-DEFAULT PLANE) DEFAULT)
  (SETF (PLANE-ORIGIN PLANE) ORIGIN)
  (SETF (PLANE-EXTENSION PLANE) EXTENSION)
  (PROG ()
     LOOP
	(%LEXPR-ASET DEFAULT PLANE INDEX)
	(AND (DO ((OI INDEX (CDR OI))
		  (DIMS SIZE (CDR DIMS)))
		 ((NULL OI))
	       (RPLACA OI (1+ (CAR OI)))
	       (OR (< (CAR OI) (CAR DIMS))
		   (RPLACA OI 0))
	       (OR (ZEROP (CAR OI))
		   (RETURN T)))
	     (GO LOOP))
	(RETURN PLANE)))

(DEFUN PLANE-COPY (OLD NEW &AUX OLD-ORIGIN NEW-ORIGIN OLD-DIMS
		                OLD-INDICES NEW-INDICES)
  (PROG NIL
    ;; OLD-ORIGIN and NEW-ORIGIN are the origins (lowest corners) of the planes.
    ;; OLD-DIMS is the list of actual dimensions of the old plane. 
    (SETQ OLD-ORIGIN (PLANE-ORIGIN OLD))
    (SETQ NEW-ORIGIN (PLANE-ORIGIN NEW))
    (SETQ OLD-DIMS (ARRAY-DIMENSIONS OLD))
    (AND (ZEROP (APPLY '+ OLD-DIMS)) (RETURN NEW))
    ;; OLD-INDICES has the real indices in the old plane of a point.
    ;; NEW-INDICES has the corresponding indices in the new plane.
    ;; We update both lists simultaneously by RPLACA to avoid consing.
    (SETQ OLD-INDICES (MAPCAR (FUNCTION -) OLD-ORIGIN OLD-ORIGIN))
    (SETQ NEW-INDICES (MAPCAR (FUNCTION -) OLD-ORIGIN NEW-ORIGIN))
  LOOP
    (%LEXPR-ASET (%LEXPR-AREF OLD OLD-INDICES) NEW NEW-INDICES)
    (OR (DO ((OI OLD-INDICES (CDR OI))
	     (NI NEW-INDICES (CDR NI))
	     (DIMS OLD-DIMS (CDR DIMS))
	     (NEW-ORIGIN NEW-ORIGIN (CDR NEW-ORIGIN))
	     (OLD-ORIGIN OLD-ORIGIN (CDR OLD-ORIGIN)))
	    ((NULL OI))
	  (RPLACA OI (1+ (CAR OI)))
	  (OR (< (CAR OI) (CAR DIMS))
	      (RPLACA OI 0))
	  (RPLACA NI (+ (- (CAR OI) (CAR NEW-ORIGIN)) (CAR OLD-ORIGIN)))
	  (OR (ZEROP (CAR OI))
	      (RETURN T)))
	(RETURN NEW))
    (GO LOOP)))

(DEFUN PLANE-AREF-SETF (REF VAL)
  `(PLANE-ASET ,VAL . ,(CDR REF)))
(DEFPROP PLANE-AREF PLANE-AREF-SETF SETF)
