;;; -*- Mode: Lisp; Base: 8; Package: System-Internals -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; The New New GC Control Panel System

(SCL:DEFINE-PRESENTATION-TYPE GC-REPORT-STREAM ()
   :ABBREVIATION-FOR `((SCL:TOKEN-OR-TYPE
			 (("discarded" . NIL)
			  ("notification" . T))
			 EXPRESSION))
   :PRINTER ((VALUE STREAM &KEY ACCEPTABLY)
	     (SELECTQ VALUE
	       ((NIL)
		(PRINC "discarded" STREAM))
	       ((T)
		(PRINC "notification" STREAM))
	       (OTHERWISE
		(UNLESS ACCEPTABLY
		  (PRINC "printed on " STREAM))
		(PRIN1 VALUE STREAM))))
   )

;;; This is a accept-variable-values list of all the user-settable parameters in the GC
(DEFCONST *GC-PARAMETERS*
  '(" "
    "Garbage collector report controls:"
    (GC-EPHEMERAL-REPORTS-ENABLE
      "  Report the activity of the ephemeral GC" SCL:BOOLEAN)
    (GC-REPORTS-ENABLE
      "  Report the activity of the dynamic GC" SCL:BOOLEAN)
    (GC-AREA-RECLAIM-REPORT
      "  Report space reclaimed individually for each area"
      ((SCL:ALIST-MEMBER :ALIST (("Yes" . T)
				 ("No" . NIL)
				 ("Dynamic only" . :DYNAMIC)
				 ("Ephemeral only" . :EPHEMERAL)))))
    (GC-WARNINGS-ENABLE
      "  Enable warnings, for example that the GC should be turned on" SCL:BOOLEAN)
    (GC-WARNING-INTERVAL
      "  Minimum interval between repetitions of a GC warning"
      ((SCL:TOKEN-OR-TYPE (("Forever" . NIL)) TIME:TIME-INTERVAL-60THS)))
    (GC-WARNING-THRESHOLD
      "  Minimum adequate level of free space to suppress GC warnings" CL:INTEGER)
    (GC-WARNING-EPHEMERAL-THRESHOLD
      "  Minimum free space to suppress warnings when ephemeral GC is on" CL:INTEGER)
    (GC-WARNING-RATIO
      "  Ratio of free space sizes on successive GC warnings" CL:NUMBER)
    (GC-REPORT-STREAM "  Disposition of GC reports" GC-REPORT-STREAM)
    (EGC-PROGRESS "  Show Ephemeral GC progress notes"
      ((SCL:ALIST-MEMBER :ALIST (("No" . NIL)
				 ("Foreground Only" . :FOREGROUND)
				 ("Yes" . :BACKGROUND)
				 ("Override" . :OVERRIDE)))))
    (DGC-PROGRESS "  Show Dynamic GC progress notes"
      ((SCL:ALIST-MEMBER :ALIST (("No" . NIL)
				 ("Foreground Only" . :FOREGROUND)
				 ("Yes" . :BACKGROUND)
				 ("Override" . :OVERRIDE)))))
    " "
    "Garbage collection options:"
    (GC-RECLAIM-IMMEDIATELY
      "  Normal garbage collection mode"
      ((SCL:ALIST-MEMBER :ALIST (("Incremental" . NIL) ("Immediate" . T)))))
    (GC-RECLAIM-IMMEDIATELY-IF-NECESSARY
      "  Mode when free space is low"
      ((SCL:ALIST-MEMBER :ALIST (("Turn GC off" . NIL) ("Immediate" . T)))))
    (GC-RECLAIM-EPHEMERAL-IMMEDIATELY
      "  Mode when collecting ephemeral objects"
      ((SCL:ALIST-MEMBER :ALIST (("Incremental" . NIL) ("Immediate" . T)))))
    (GC-FLIP-RATIO
      "  Fraction of free space committed to the garbage collector"
      ((CL:NUMBER 0 1)))
    (GC-FLIP-MINIMUM-RATIO
      "  Minimum fraction of free space GC will accept"
      ((SCL:TOKEN-OR-TYPE (("Same" . NIL)) ((CL:NUMBER 0 1)))))
    " "
    "Garbage collector process controls:"
    (GC-PROCESS-FOREGROUND-PRIORITY
      "  Process priority for foreground operations" CL:INTEGER)
    (GC-PROCESS-BACKGROUND-PRIORITY
      "  Process priority for background operations" CL:INTEGER)
    (GC-PROCESS-IMMEDIATE-RECLAIM-PRIORITY
      "  Process priority for immediate garbage collection mode" CL:INTEGER)
    (GC-DAEMON-PRIORITY
      "  Priority of GC daemon processes" CL:INTEGER)
    (GC-FLIP-INHIBIT-TIME-UNTIL-WARNING
      "  Delay before warning that flipping is inhibited" TIME:TIME-INTERVAL-60THS)
    (GC-FLIP-INHIBIT-WAIT-INTERVAL
      "  Time that processes wait before inhibiting flips" TIME:TIME-INTERVAL-60THS)
    " "
    "Scavenger performance options:"
    (SCAVENGE-WORK-PER-WHACK
      "  Amount of /"scavenger work/" done with interrupts inhibited" CL:INTEGER)
    (SCAVENGE-MICROSECONDS-PER-WHACK
      "  Maximum time (microseconds) with interrupts inhibited" CL:INTEGER)
    (SCAVENGE-REGION-SWITCH-DELAY
      "  Number of words scavenged before turning to another region" CL:INTEGER)
    (SCAVENGE-COPYSPACE-PREFETCH
      "  Number of pages of Copy space to prefetch"
      ((SCL:NULL-OR-TYPE CL:INTEGER)))
    (SCAVENGE-ESRT-PREFETCH
      "  Number of pages that refer to ephemeral objects to prefetch"
      ((SCL:NULL-OR-TYPE CL:INTEGER)))
    (SCAVENGE-OLDSPACE-PREFETCH
      "  Number of pages of Old space to prefetch"
      ((SCL:NULL-OR-TYPE CL:INTEGER)))
    (SCAVENGE-MAX-LOOKAHEAD
      "  Number of words to look ahead for prefetchable Old space references"
      ((SCL:NULL-OR-TYPE CL:INTEGER)))
    (SCAVENGE-POSTPURGE-ENABLE
      "  Declare pages flushable from main memory after scavenging them" SCL:BOOLEAN)
    " "
    ))

(DEFUN CHOOSE-GC-PARAMETERS ()
  (LET ((EGC-PROGRESS (GETF *GC-PROGRESS-NOTE-ENABLE* :EPHEMERAL))
	(DGC-PROGRESS (GETF *GC-PROGRESS-NOTE-ENABLE* :DYNAMIC)))
    (DECLARE (SPECIAL EGC-PROGRESS DGC-PROGRESS))
    (MULTIPLE-VALUE-BIND (EGC-ON DGC-ON VARIABLES)
	(DW:ACCEPTING-VALUES ()
	  (FLET ((FIXED-LINE (STRING)
		   (DW:WITH-REDISPLAYABLE-OUTPUT (:UNIQUE-ID STRING
						  :CACHE-VALUE STRING
						  :STREAM QUERY-IO)
		     (CL:WRITE-LINE STRING QUERY-IO))))
	    (FIXED-LINE "Garbage collector status:")
	    (VALUES (ACCEPT '((SCL:ALIST-MEMBER :ALIST (("Off" . NIL) ("On" . T))))
			    :PROMPT "  Ephemeral GC"
			    :DEFAULT (NOT (NULL (GET (LOCF GC-ON) :EPHEMERAL)))
			    :PROVIDE-DEFAULT T)
		    (ACCEPT '((SCL:ALIST-MEMBER :ALIST (("Off" . NIL) ("On" . T))))
			    :PROMPT "  Dynamic GC"
			    :DEFAULT (NOT (NULL (GET (LOCF GC-ON) :DYNAMIC)))
			    :PROVIDE-DEFAULT T)
		    (LOOP FOR THING IN *GC-PARAMETERS*
			  IF (ATOM THING)
			    DO (FIXED-LINE THING)
			  ELSE COLLECT (DESTRUCTURING-BIND (VAR PROMPT TYPE) THING
					 (LIST VAR
					       (ACCEPT TYPE :PROMPT PROMPT
						       :PROVIDE-DEFAULT T
						       :DEFAULT (SYMEVAL VAR))))))))
      (GC-ON :EPHEMERAL EGC-ON :DYNAMIC DGC-ON)
      (LOOP FOR (VAR VAL) IN VARIABLES
	    DO (SET VAR VAL))
      (ENABLE-GC-PROGRESS-NOTES :EPHEMERAL EGC-PROGRESS :DYNAMIC DGC-PROGRESS)
      NIL)))

;; Selective GC by areas.

(DEFINE-PRESENTATION-TYPE AREA ()
   :DESCRIPTION "an area"
   :ABBREVIATION-FOR `((AND SYMBOL ((SCL:SATISFIES AREA-NAME-P))))
   :PARSER ((STREAM &KEY INITIALLY-DISPLAY-POSSIBILITIES ORIGINAL-TYPE)
	    (DW::COMPLETE-INPUT-FROM-SYMBOL-SET
	      STREAM SYS:AREA-LIST ORIGINAL-TYPE INITIALLY-DISPLAY-POSSIBILITIES))
   )

(DEFUN AREA-NAME-P (SYMBOL)
  (AND (SYMBOLP SYMBOL)
       (CL:MEMBER SYMBOL SYS:AREA-LIST)))

(DEFUN GC-DYNAMIC-SPACE-SUMMARY (&OPTIONAL (STREAM STANDARD-OUTPUT)
				 AREAS AREA-DYNAMIC-SPACE BOLD-AREAS)
  (DECLARE (VALUES DYNAMIC-SPACE FREE-SPACE))
  (LET ((TOTAL-DYNAMIC 0))
    (WITH-DATA-STACK
      (UNLESS AREAS
	(SETQ AREAS (MAKE-STACK-ARRAY (N-AREAS))))
      (UNLESS AREA-DYNAMIC-SPACE
	(SETQ AREA-DYNAMIC-SPACE (MAKE-STACK-ARRAY (N-AREAS) :INITIAL-VALUE 0)))
      (MULTIPLE-VALUE-BIND (NIL NIL FREE-SPACE)
	  (GC-GET-SPACE-SIZES)
	(LOOP FOR AREA BELOW (N-AREAS)
	      AS DYNAMIC = 0
	      DO (SETF (AREF AREAS AREA) AREA)
		 (DO-AREA-REGIONS (REGION AREA)
		   (LET ((BITS (REGION-BITS REGION)))
		     (SELECTOR (LDB %%REGION-SPACE-TYPE BITS) =
		       ((%REGION-SPACE-NEW %REGION-SPACE-COPY)
			(WHEN ( (LEVEL-TYPE (LDB %%REGION-LEVEL BITS)) %LEVEL-TYPE-DYNAMIC)
			  (INCF DYNAMIC (REGION-FREE-POINTER REGION)))))))
		 (SETF (AREF AREA-DYNAMIC-SPACE AREA) DYNAMIC)
		 (INCF TOTAL-DYNAMIC DYNAMIC))
	(CL:SORT AREAS #'> :KEY #'(LAMBDA (AREA)
				    (DECLARE (DOWNWARD-FUNCTION))
				    (AREF AREA-DYNAMIC-SPACE AREA)))
	(FORMAT STREAM "~&~'iArea Name~~38T~'iDynamic Space~")
	(LOOP FOR AREA-INDEX BELOW (N-AREAS)
	      AS AREA = (AREF AREAS AREA-INDEX)
	      AS DYNAMIC = (AREF AREA-DYNAMIC-SPACE AREA)
	      UNTIL (ZEROP DYNAMIC)
	      DO (WITH-CHARACTER-STYLE ((IF (AND (> TOTAL-DYNAMIC FREE-SPACE)
						 (MEMQ (AREA-NAME AREA) BOLD-AREAS))
					    '(NIL :BOLD NIL)
					    '(NIL NIL NIL))
					STREAM)
		   (FORMAT STREAM "~%~A~38T~13:D" (AREA-NAME AREA) DYNAMIC))
	      FINALLY
		(FORMAT STREAM "~2%~'iTotal Dynamic Space~~38T~13:D" TOTAL-DYNAMIC)
		(FORMAT STREAM  "~%~'iTotal Free Space Available~~38T~13:D" FREE-SPACE)
		(RETURN (VALUES TOTAL-DYNAMIC FREE-SPACE)))))))

(DEFVAR *GC-IMMEDIATELY-BY-AREA-LIKELY-AREAS*
	'(WORKING-STORAGE-AREA
	  DW::*HANDLER-EPHEMERAL-AREA*
	  DW::*HANDLER-DYNAMIC-AREA*
	  DW::*PRESENTATION-AREA*))

(DEFUN GC-IMMEDIATELY-BY-AREA ()
  ;; Make sure the output below is meaningful.
  (LOOP UNTIL %GC-FLIP-READY DO
    (UNLESS *EPHEMERAL-GC-IN-PROGRESS*
      (FORMAT ERROR-OUTPUT
	      "~&[The Dynamic GC in progress will be finished before selecting areas to GC.]"))
    (GC-RECLAIM-OLDSPACE))
  ;; Show the current status by areas.
  ;;--- This should be redisplayable so you can sort it differently.
  (STACK-LET ((AREAS (MAKE-ARRAY (N-AREAS)))
	      (AREA-DYNAMIC-SPACE (MAKE-ARRAY (N-AREAS) :INITIAL-VALUE 0)))
    (MULTIPLE-VALUE-BIND (TOTAL-DYNAMIC FREE-SPACE)
	(GC-DYNAMIC-SPACE-SUMMARY STANDARD-OUTPUT AREAS AREA-DYNAMIC-SPACE
				  *GC-IMMEDIATELY-BY-AREA-LIKELY-AREAS*)
      (FORMAT T
	      (IF (> TOTAL-DYNAMIC FREE-SPACE)
		  "~%
Since the total dynamic space exceeds free space, and GC must reserve enough copyspace
to copy all of oldspace, not all areas can be flipped (that is, changed from dynamic
space to oldspace).  If you choose to flip a subset of these areas whose total size is
less than the free space remaining, then GC can complete successfully.  Note however
that you must not allocate other objects while the GC is in progress.  Additionally,
flipping an area does not guarantee that garbage in that area will be collected, since
there may be references to the garbage from garbage in areas that you don't flip.

If you have enough space, and you have done a GC Cleanup, flipping the ~'bbold~ areas
will probably be a good trade-off, maximizing garbage collected while minimizing space
used by GC.

Alternatively, you could try ~\cp:command\.
This form of GC has a smaller memory requirement, but takes longer and disables ~'iall~
I//O during its execution.  Refer to the documentation for more details.~2%"
		  #+3600 "~%
Since the total free space exceeds dynamic space allocated, a copying garbage collection
can complete without individually selecting areas to flip.  The speed of GC is not
significantly affected by the amount of storage that is flipped.~2%"
		  #+IMach "~%
Since the total free space exceeds dynamic space allocated, a copying garbage collection
can complete without individually selecting areas to flip.  Note that on Symbolics
Ivory processors, GC will complete more quickly when all dynamic areas are flipped.~2%")
		  '(COM-START-GC :IMMEDIATELY :IN-PLACE))
      (LOOP NAMED FLIP-LOOP
	    AS AREAS = (ACCEPT '(SCL:TOKEN-OR-TYPE (:ALL :NONE) (SCL:SEQUENCE AREA))
			       :PROMPT "Enter one or more areas to flip, All, or None"
			       :DEFAULT (IF (> TOTAL-DYNAMIC FREE-SPACE)
					    *GC-IMMEDIATELY-BY-AREA-LIKELY-AREAS*
					    :ALL))
	    WHEN (EQ AREAS :ALL)
	      RETURN (PROGN (FORMAT T "
Flipping all areas.  Dynamic Space=~:D words, Free Space=~:D words"
				    TOTAL-DYNAMIC FREE-SPACE)
			    (SI:GC-IMMEDIATELY T))
	    WHEN (EQ AREAS :NONE)
	      RETURN NIL
	    DO (STACK-LET ((FLIP-AREA-P (MAKE-ARRAY (N-AREAS) :TYPE ART-BOOLEAN)))
		 (LOOP FOR AREA-NAME IN AREAS
		       AS AREA = (SYMEVAL AREA-NAME)
		       WHEN (PLUSP (AREF AREA-DYNAMIC-SPACE AREA))
			 SUM (AREF AREA-DYNAMIC-SPACE AREA) INTO SUM
			 AND DO (SETF (AREF FLIP-AREA-P AREA) T)
		       ELSE DO (FORMAT T
				 "~%~A will not be flipped since it has no dynamic space."
				 AREA-NAME)
		       FINALLY
			 (WHEN ( SUM FREE-SPACE)
			   (UNLESS (FQUERY FORMAT:YES-OR-NO-P-OPTIONS
"The areas you have specified contain ~:D words, but there are only ~:D words
of free space available for copying.  Do you want to continue anyway, and risk
running out of virtual memory?  " SUM FREE-SPACE)
			       (RETURN NIL)))
			 (FORMAT T "
Flipping the specified areas.  Flipped Dynamic Space=~:D words, Free Space=~:D words"
				 SUM FREE-SPACE)
			 ;; Well, he said to do it!
			 (LET-GLOBALLY ((GC-IMMEDIATELY-IN-PROGRESS T))
			   (DYNAMIC-GC-FLIP :INSUFFICIENT-ADDRESS-SPACE-ACTION :PROCEED
					    :AREA-MASK FLIP-AREA-P)
			   (RETURN-FROM FLIP-LOOP
			     (GC-RECLAIM-OLDSPACE)))))))))

(DEFUN GC-IN-PLACE-BY-AREA ()
  ;; Make sure the output below is meaningful.
  (LOOP UNTIL %GC-FLIP-READY DO
    (UNLESS *EPHEMERAL-GC-IN-PROGRESS*
      (FORMAT ERROR-OUTPUT
	      "~&[The Dynamic GC in progress will be finished before selecting areas to GC.]"))
    (GC-RECLAIM-OLDSPACE))
  ;; Show the current status by areas.
  ;;--- This should be redisplayable so you can sort it differently.
  (GC-DYNAMIC-SPACE-SUMMARY STANDARD-OUTPUT)
  (FORMAT T "~2%")
  (LET ((AREAS (ACCEPT '(SCL:TOKEN-OR-TYPE (:ALL :NONE) (SCL:SEQUENCE AREA))
		       :PROMPT "Enter one or more areas to garbage-collect, All, or None"
		       :DEFAULT :ALL)))
    (CL:CASE AREAS
      (:ALL (GC-IN-PLACE))
      (:NONE NIL)
      (OTHERWISE
	(GC-IN-PLACE-AREA AREAS)))))

;;; The Old New GC Control Panel System
#||

;;; This is a choose-variable-values list of all the user-settable parameters in the GC
(DEFVAR *GC-PARAMETERS*
      '(""
	"Garbage collector status:"
	(EGC-ON "  Ephemeral GC" :ASSOC (("Off" . NIL) ("On" . T)))	;Unreal variable
	(DGC-ON "  Dynamic GC" :ASSOC (("Off" . NIL) ("On" . T)))	;Unreal variable
	""
	"Garbage collector report controls:"
	(GC-EPHEMERAL-REPORTS-ENABLE
	  "  Report the activity of the ephemeral GC" :BOOLEAN)
	(GC-REPORTS-ENABLE
	  "  Report the activity of the dynamic GC" :BOOLEAN)
	(GC-AREA-RECLAIM-REPORT
	  "  Report space reclaimed individually for each area"
	  :ASSOC (("Yes" . T) ("No" . NIL)
		  ("Dynamic only" . :DYNAMIC) ("Ephemeral only" . :EPHEMERAL)))
	(GC-WARNINGS-ENABLE
	  "  Enable warnings, for example that the GC should be turned on" :BOOLEAN)
	(GC-WARNING-INTERVAL
	  "  Minimum interval between repetitions of a GC warning"
	  TIME-INTERVAL-60THS-OR-FOREVER)
	(GC-WARNING-THRESHOLD
	  "  Minimum adequate level of free space to suppress GC warnings" :DECIMAL-NUMBER)
	(GC-WARNING-EPHEMERAL-THRESHOLD
	  "  Minimum free space to suppress warnings when ephemeral GC is on" :DECIMAL-NUMBER)
	(GC-WARNING-RATIO
	  "  Ratio of free space sizes on successive GC warnings" :DECIMAL-NUMBER)
	(GC-REPORT-STREAM NIL GC-REPORT-STREAM)
	""
	"Garbage collection options:"
	(GC-RECLAIM-IMMEDIATELY
	  "  Normal garbage collection mode" :ASSOC (("Incremental" . NIL) ("Immediate" . T)))
	(GC-RECLAIM-IMMEDIATELY-IF-NECESSARY
	  "  Mode when free space is low" :ASSOC (("Turn GC off" . NIL) ("Immediate" . T)))
	(GC-RECLAIM-EPHEMERAL-IMMEDIATELY
	  "  Mode when collecting ephemeral objects"
	  :ASSOC (("Incremental" . NIL) ("Immediate" . T)))
	(GC-FLIP-RATIO
	  "  Fraction of free space committed to the garbage collector"
	  :DOCUMENTATION "Click left to enter a number between 0.0 and 1.0 from the keyboard."
	  :DECIMAL-NUMBER)
	(GC-FLIP-MINIMUM-RATIO
	  "  Minimum fraction of free space GC will accept"
	  :DOCUMENTATION "Click left to enter a number between 0.0 and 1.0, or /"Same/", from the keyboard."
	  GC-FLIP-MINIMUM-RATIO)
	""
	"Garbage collector process controls:"
	(GC-PROCESS-FOREGROUND-PRIORITY
	  "  Process priority for foreground operations" :DECIMAL-NUMBER)
	(GC-PROCESS-BACKGROUND-PRIORITY
	  "  Process priority for background operations" :DECIMAL-NUMBER)
	(GC-PROCESS-IMMEDIATE-RECLAIM-PRIORITY
	  "  Process priority for immediate garbage collection mode" :DECIMAL-NUMBER)
	(GC-DAEMON-PRIORITY
	  "  Priority of GC daemon processes" :DECIMAL-NUMBER)
	(GC-FLIP-INHIBIT-TIME-UNTIL-WARNING
	  "  Delay before warning that flipping is inhibited" :TIME-INTERVAL-60THS)
	(GC-FLIP-INHIBIT-WAIT-INTERVAL
	  "  Time that processes wait before inhibiting flips" :TIME-INTERVAL-60THS)
	""
	"Scavenger performance options:"
	(SCAVENGE-WORK-PER-WHACK
	  "  Amount of /"scavenger work/" done with interrupts inhibited" :DECIMAL-NUMBER)
	(SCAVENGE-MICROSECONDS-PER-WHACK
	  "  Maximum time (microseconds) with interrupts inhibited" :DECIMAL-NUMBER)
	(SCAVENGE-REGION-SWITCH-DELAY
	  "  Number of words scavenged before turning to another region" :DECIMAL-NUMBER)
	(SCAVENGE-COPYSPACE-PREFETCH
	  "  Number of pages of Copy space to prefetch" :DECIMAL-NUMBER-OR-NONE)
	(SCAVENGE-ESRT-PREFETCH
	  "  Number of pages that refer to ephemeral objects to prefetch"
	  :DECIMAL-NUMBER-OR-NONE)
	(SCAVENGE-OLDSPACE-PREFETCH
	  "  Number of pages of Old space to prefetch" :DECIMAL-NUMBER-OR-NONE)
	(SCAVENGE-MAX-LOOKAHEAD
	  "  Number of words to look ahead for prefetchable Old space references"
	  :DECIMAL-NUMBER-OR-NONE)
	(SCAVENGE-POSTPURGE-ENABLE
	  "  Declare pages flushable from main memory after scavenging them" :BOOLEAN)
	""
	))

(DEFUN CHOOSE-GC-PARAMETERS ()
  (LET ((EGC-ON (NOT (NOT (GET (LOCF GC-ON) :EPHEMERAL))))
	(DGC-ON (NOT (NOT (GET (LOCF GC-ON) :DYNAMIC)))))
    (DECLARE (SPECIAL EGC-ON DGC-ON))
    (TV:CHOOSE-VARIABLE-VALUES *GC-PARAMETERS*
		:LABEL '(:STRING "Examine//Modify Garbage Collector Parameters"
			 :STYLE (:FIX :BOLD-EXTENDED :NORMAL))
		:MAX-LINES (LENGTH *GC-PARAMETERS*)
		:FUNCTION #'(LAMBDA (QUERY-IO VARIABLE IGNORE IGNORE)
			      (WHEN (MEMQ VARIABLE '(EGC-ON DGC-ON))
				;; This might ask the user a question, ask on right window
				(LET ((BL (TV:SHEET-FOLLOWING-BLINKER QUERY-IO)))
				  (UNWIND-PROTECT
				      (WITH-CHARACTER-STYLE ((SEND QUERY-IO :NAME-STYLE)
							     QUERY-IO
							     :BIND-LINE-HEIGHT T)
					(SEND QUERY-IO :HOME-CURSOR)
					;; Next two lines make the mouse highlight go away
					(SEND QUERY-IO :SET-SENSITIVE-ITEM-TYPES NIL)
					(TV:MOUSE-WAKEUP)
					(TV:BLINKER-SET-VISIBILITY BL ':BLINK)
					(GC-ON :EPHEMERAL EGC-ON :DYNAMIC DGC-ON)
					;; In case a question was asked and the user said "no"
					(SETQ EGC-ON (NOT (NOT (GET (LOCF GC-ON) :EPHEMERAL)))
					      DGC-ON (NOT (NOT (GET (LOCF GC-ON) :DYNAMIC))))
					;; In case the screen clobbered by a question
					(MULTIPLE-VALUE-BIND (X Y)
					    (SEND QUERY-IO :READ-CURSORPOS)
					  (UNLESS (AND (ZEROP X) (ZEROP Y))
					    (SEND QUERY-IO :REFRESH))))
				    ;; Cleanup forms
				    (TV:BLINKER-SET-VISIBILITY BL NIL)
				    (SEND QUERY-IO :SET-SENSITIVE-ITEM-TYPES T))))
			      ;; Return NIL to specify normal redisplay
			      NIL))))

;;; Private extensions to CVV that don't belong in the source of it

(DEFPROP GC-REPORT-STREAM (PRINT-GC-REPORT-STREAM-VALUE (READ-GC-REPORT-STREAM-VALUE)
			   NIL NIL NIL
			   "Click left to specify a new destination for GC reports")
	 TV:CHOOSE-VARIABLE-VALUES-KEYWORD)

(DEFUN PRINT-GC-REPORT-STREAM-VALUE (VALUE STREAM)
  (SELECTQ VALUE
    ((NIL) (PRINC "  GC reports are discarded." STREAM))
    ((T) (PRINC "  GC reports are sent as notifications." STREAM))
    (OTHERWISE (FORMAT STREAM "  GC reports are printed on ~S." GC-REPORT-STREAM))))

(DEFUN READ-GC-REPORT-STREAM-VALUE (QUERY-IO)
  (LET ((VALUE (FQUERY '(:CHOICES (((T "GC reports are sent as notifications.") #/N)
				   ((NIL "GC reports are discarded.") #/D)
				   ((STREAM "GC reports are printed on a stream.") #/S)))
		       "Destination for GC reports? ")))
    (IF (EQ VALUE 'STREAM)
	(PROMPT-AND-READ :EVAL-FORM "Type a form whose value is the stream: ")
	VALUE)))

(DEFPROP GC-FLIP-MINIMUM-RATIO (PRINT-GC-FLIP-MINIMUM-RATIO READ-GC-FLIP-MINIMUM-RATIO)
	 TV:CHOOSE-VARIABLE-VALUES-KEYWORD)

(DEFUN PRINT-GC-FLIP-MINIMUM-RATIO (VALUE STREAM)
  (IF VALUE (TV:PRINT-DECIMAL-NUMBER VALUE STREAM)
      (PRINC "Same as above" STREAM)))

(DEFUN READ-GC-FLIP-MINIMUM-RATIO (STREAM)
  (READ-TOKEN STREAM NIL
	      #'(LAMBDA (STRING)
		  (IF (%STRING-EQUAL STRING 0 "Same" 0 4) NIL
		      (LET ((NUMBER (IGNORE-ERRORS (LET ((IBASE 10.))
						     (READ-FROM-STRING STRING)))))
			(IF (NUMBERP NUMBER)
			    NUMBER
			    (PARSE-FERROR "A decimal number or /"Same/" is required.")))))))

(DEFPROP TIME-INTERVAL-60THS-OR-FOREVER
	 (PRINT-INTERVAL-60THS-OR-FOREVER READ-INTERVAL-60THS-OR-FOREVER 
	  NIL NIL NIL "Click left to input a time interval or /"forever/".")
	 TV:CHOOSE-VARIABLE-VALUES-KEYWORD)

(DEFUN PRINT-INTERVAL-60THS-OR-FOREVER (INTERVAL STREAM)
  (IF INTERVAL
      (TIME:PRINT-INTERVAL-OR-NEVER (ROUND INTERVAL 60.) STREAM)
      (PRINC "forever" STREAM)))

(DEFUN READ-INTERVAL-60THS-OR-FOREVER (STREAM &OPTIONAL OR-NIL)
  (READ-TOKEN STREAM OR-NIL #'(LAMBDA (STRING)
				(IF (STRING-EQUAL STRING "forever") NIL
				    (TV:PARSE-INTERVAL-60THS STRING)))))
||#
