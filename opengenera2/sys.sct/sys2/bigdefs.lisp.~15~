;;; -*- Mode: LISP; Base: 8; Package: SYSTEM-INTERNALS; Lowercase: T -*- 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defconstant *bignum-digit-size* 32.)
(defsubst bits-bignum-digits (x)
  (ldb (byte 27. 5.) x))			;fast //32
(defsubst bits-bignum-residue (x)
  (ldb (byte 5 0) x))				;fast \32

(defsubst bignump (x)
  (bigp x))

(defsubst bignum-length (bignum)
  (%p-ldb %%bignum-length bignum))

(defsubst bignum-sign (bignum)
  (- (%p-ldb %%bignum-sign bignum)))

(cl:defsetf bignum-sign (x) (val) `(%p-dpb ,val %%bignum-sign ,x))

(defsubst other-bignum-sign (sign)
  (- -1 sign))					;200 nanoseconds faster than logxor -1

(defsubst positive-bignum-p (bignum)
  (zerop (%p-ldb %%bignum-sign bignum)))

(defsubst negative-bignum-p (bignum)
  (= (%p-ldb %%bignum-sign bignum) 1))

(defmacro bignum-ref (bignum i &optional xor-mask)
  (let ((ref-code `(%p-contents-offset ,bignum (1+ ,i))))
    (if xor-mask `(logxor ,ref-code ,xor-mask) ref-code)))

(defmacro bignum-set (bignum i val &optional xor-mask)
  (let ((val-code (if xor-mask `(logxor ,val ,xor-mask) val)))
    `(%p-store-contents-offset ,val-code ,bignum (1+ ,i))))

(cl:defsetf bignum-ref (x i &rest rest) (val)
  `(bignum-set ,x ,i ,val ,@rest))


;;; hairier ideas

(defsubst get-bignum-advancing-pointer (bignum first-active-index)
  (%p-structure-offset bignum first-active-index))

(defsubst get-bignum-pointer-retreating (bignum first-active-index)
  (%p-structure-offset bignum (1+ first-active-index)))

(defmacro bignum-advance-ref (bignum-pointer &optional xor-mask)
  (let ((ref-code `(%p-contents-increment-pointer ,bignum-pointer)))
    (if xor-mask `(logxor ,ref-code ,xor-mask) ref-code)))

(defmacro bignum-advance-set (bignum-pointer val &optional xor-mask)
  (let ((val-code (if xor-mask `(logxor ,val ,xor-mask) val)))
    #-VLM `(%p-store-contents-increment-pointer ,val-code ,bignum-pointer)
    #+VLM `(progn (setf ,bignum-pointer (%pointer-plus ,bignum-pointer 1))
		  (%memory-write ,bignum-pointer ,val-code))))

(defmacro bignum-ref-retreat (bignum-pointer &optional xor-mask)
  (let ((ref-code `(%p-contents-pointer-decrement ,bignum-pointer)))
    (if xor-mask `(logxor ,ref-code ,xor-mask) ref-code)))

(defmacro bignum-set-retreat (bignum-pointer val &optional xor-mask)
  (let ((val-code (if xor-mask `(logxor ,val ,xor-mask) val)))
    #-VLM `(%p-store-contents-pointer-decrement ,val-code ,bignum-pointer)
    #+VLM `(prog1 (%memory-write ,bignum-pointer ,val-code)
		  (setf ,bignum-pointer (%pointer-plus ,bignum-pointer -1)))))

(cl:defsetf bignum-advance-ref (bignum-pointer &rest rest) (val)
  `(bignum-advance-set ,bignum-pointer ,val ,@rest))

(cl:defsetf bignum-ref-retreat (bignum-pointer &rest rest) (val)
  `(bignum-set-retreat ,bignum-pointer ,val ,@rest))


;;; For multiplication the basic step is to multiply two digits (in x and
;;; y) and add the result into a three digit running total (in (c,b,a)).
;;; The new three digit total is returned.  Unlike the add and sub
;;; functions for digits, we only deal with non-negative fixnums here.
;;; As with the add/sub-bignum-digits functions a frequent use of
;;; multiply-bignum-digits keeps the B and C arguments zero and the third value
;;; always 0.

(defsubst multiply-bignum-step (x y a b c)
  (multiple-value-bind (.low. .high. .carry.)
       (%multiply-bignum-step x y)
     (values (multiple-value (nil .carry.) (%add-bignum-step a .low. 0))
	     (multiple-value (nil .carry.) (%add-bignum-step b .high. .carry.))
	     (%32-bit-plus c .carry.))))

(defsubst fixnum-sign (f)
  (- (ldb (byte 1 31.) f)))

;;; SIGN =  0: LOGXOR doesn't change FIXNUM, subtracting 0 does no harm
;;; SIGN = -1: LOGXOR complements FIXNUM, subtracting -1 results in
;;;	       adding 1.  complement and add 1 is how two's complement
;;;	       negation is done!
;;; This is fast.
(defsubst fixnum-minus-maybe (fixnum sign)
  "If SIGN is 0, returns FIXNUM.  If SIGN is -1, returns -FIXNUM (as a fixnum)"
   (%32-bit-difference (logxor fixnum sign) sign))

(defsubst unsigned-< (x y)
  #+3600
  (multiple-value-bind (nil borrow) (%sub-bignum-step x y 0)
    (not (zerop borrow)))
  #+IMach
  (%unsigned-lessp x y))
