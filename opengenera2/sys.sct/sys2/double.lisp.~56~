;;; -*- Base: 10; Mode: LISP; Package: SYSTEM-INTERNALS; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

(defun describe-double (x)
  (when (double-float-p x)
    (format t "~%~s is a double-precision floating-point number.~%  " x)
    (with-double-components (x high low)
      (let ((fraction (dpb low (byte 32 0) (ash (ldb %%double-fraction-high high) 32))))
	(format t "Sign ~1O, exponent ~4,'0O, 52-bit fraction ~18,'0O"
		(ldb %%double-sign high) (ldb %%double-exponent high)
		fraction)
	(scl:select (ldb %%double-exponent high)
	  (0
	    (format t " (~:[denormalized~;zero~])" (zerop fraction)))
	  (%double-exponent-max
	    (cond ((zerop fraction) (princ "  (infinity)"))
		  (t (princ "  (NaN)"))))
	  (otherwise (princ "  (not including hidden bit)")))
	(unless (or scl:*print-exact-float-value*
		    (= (ldb %%double-exponent high) %double-exponent-max))
	  (let ((scl:*print-exact-float-value* t))
	    (format t "~%  Its exact decimal value is ~S" x))))))
  x)


;; Macrology for the functions
(eval-when (compile load eval)
(defconst *double-conversion-alist*
	  '((fixnum . %convert-fixnum-to-double)
	    (bignum . dfloat-components)
	    (float . %convert-single-to-double)
	    (double . %fast-double-components)))
);eval-when compile load eval

(eval-when (compile load eval)
(defconst *double-operator-alist*
	  '((+ . %double-floating-add)
	    (- . %double-floating-sub)
	    (* . %double-floating-multiply)
	    (// . %double-floating-divide)
	    (rational-quotient . %double-floating-divide)
	    (\ . %double-floating-remainder)
	    #+3600(mod . %double-floating-mod)
	    #+imach(min . %double-floating-min)
	    #+imach(max . %double-floating-max)
	    (> . plusp)
	    (< . minusp)
	    (= . zerop)))
);eval-when compile load eval

#+3600
(defmacro %fast-double-components (x)
  ;; x must be the only reference to a local lexical variable (or argument)
  `(values (sys:%p-contents-increment-pointer ,x)
	   (sys:%p-contents-increment-pointer ,x)))

#+imach
(defmacro %fast-double-components (x)
  `(double-components ,x))

(defmacro construct-double-operator (operation type-1 type-2 &optional (predicate-p nil))
  (let ((arg-1 (intern (string-append type-1 "-1")))
	(arg-2 (intern (string-append type-2 "-2")))
	(operator (cdr (assq operation *double-operator-alist*)))
	(type-op-1 (cdr (assq type-1 *double-conversion-alist*)))
	(type-op-2 (cdr (assq type-2 *double-conversion-alist*))))
    `(defnumop ,operation ((,arg-1 ,type-1) (,arg-2 ,type-2))
       ,(if predicate-p
	    `(,operator (%multiple-value-call-n %double-floating-compare
						(,type-op-1 ,arg-1) 2
						(,type-op-2 ,arg-2) 2))
	    `(%multiple-value-call-n
	       %make-double
	       (%multiple-value-call-n ,operator
				       (,type-op-1 ,arg-1) 2
				       (,type-op-2 ,arg-2) 2)
	       2)))))

;; Functions not in microcode
(defmacro %double-floating-greaterp (a b c d)
  `(> (%double-floating-compare ,a ,b ,c ,d) 0))
(defmacro %double-floating-lessp (a b c d)
  `(< (%double-floating-compare ,a ,b ,c ,d) 0))
(defmacro %double-floating-= (a b c d)
  `(zerop (%double-floating-compare ,a ,b ,c ,d)))

;;; Tee hee hee, create the operators
;; Commutative
(construct-double-operator + fixnum double)
(construct-double-operator + bignum double)
(construct-double-operator + float double)
(construct-double-operator + double double)
(construct-double-operator * fixnum double)
(construct-double-operator * bignum double)
(construct-double-operator * float double)
(construct-double-operator * double double)
;; These are commutative with complementary operation
(construct-double-operator > fixnum double t)
(construct-double-operator > float double t)
(construct-double-operator > double double t)
(construct-double-operator < fixnum double t)
(construct-double-operator < float double t)
(construct-double-operator = fixnum double t)
(construct-double-operator = float double t)
(construct-double-operator = double double t)

;; Noncommutative
(construct-double-operator - fixnum double)
(construct-double-operator - double fixnum)
(construct-double-operator - bignum double)
(construct-double-operator - double bignum)
(construct-double-operator - float double)
(construct-double-operator - double float)
(construct-double-operator - double double)
(construct-double-operator // fixnum double)
(construct-double-operator // double fixnum)
(construct-double-operator // bignum double)
(construct-double-operator // double bignum)
(construct-double-operator // float double)
(construct-double-operator // double float)
(construct-double-operator // double double)
(construct-double-operator rational-quotient fixnum double)
(construct-double-operator rational-quotient bignum double)
(construct-double-operator rational-quotient double fixnum)
(construct-double-operator rational-quotient double bignum)
(construct-double-operator rational-quotient float double)
(construct-double-operator rational-quotient double float)
(construct-double-operator rational-quotient double double)

#+3600(progn
(construct-double-operator \ fixnum double)
(construct-double-operator \ double fixnum)
(construct-double-operator \ bignum double)
(construct-double-operator \ double bignum)
(construct-double-operator \ float double)
(construct-double-operator \ double float)
(construct-double-operator \ double double)
);End #+3600

(defnumop ash ((d double) (f fixnum))
  (double-to-consed (double-ash (%fast-double-components d) f)))

#+3600
(progn
(construct-double-operator mod fixnum double)
(construct-double-operator mod double fixnum)
(construct-double-operator mod bignum double)
(construct-double-operator mod double bignum)
(construct-double-operator mod float double)
(construct-double-operator mod double float)
(construct-double-operator mod double double)
)

#+IMACH
(progn
;;; Min, Max are macrocoded. logand, logior, and logxor are illegal
(defnumop min ((x fixnum) (y double))
  (if (si:double-< (si:integer-to-double x) (si:double-components y))
      x y))

(defnumop min ((x bignum) (y double))
  (if (lessp-bignum-double x y)
      x y))

(defnumop min ((x ratio) (y double))
  (if (lessp-ratio-double x y)
      x y))

(defnumop min ((x float) (y double))
  (if (si:double-< (si:single-to-double x) (si:double-components y))
      x y))

(defnumop min ((x double) (y double))
  (if (si:double-< (si:double-components x) (si:double-components y))
      x y))
)

#+imach
(defun %double-floating-min (d1-high d1-low d2-high d2-low)
  (if (minusp (%double-floating-compare d1-high d1-low d2-high d2-low))
      (values d1-high d1-low)
      (values d2-high d2-low)))

#+IMACH
(progn
(defnumop max ((x fixnum) (y double))
  (if (si:double-> (si:integer-to-double x) (si:double-components y))
      x y))

(defnumop max ((x bignum) (y double))
  (if (lessp-bignum-double x y)
      y x))

(defnumop max ((x ratio) (y double))
  (if (lessp-ratio-double x y)
      y x))

(defnumop max ((x float) (y double))
  (if (si:double-> (si:single-to-double x) (si:double-components y))
      x y))

(defnumop max ((x double) (y double))
  (if (si:double-> (si:double-components x) (si:double-components y))
      x y))
)

#+imach
(defun %double-floating-max (d1-high d1-low d2-high d2-low)
  (if (minusp (%double-floating-compare d1-high d1-low d2-high d2-low))
      (values d2-high d2-low)
      (values d1-high d1-low)))

;;; EQL is a lot like EQ (not like =)
;(defnumop eql ((x double) (y double))
;  (and (= (double-high x) (double-high y))
;       (= (double-low x) (double-low y))))

;Mixed-type EQLs are always NIL
;(defnumop eql ((x rational) (y double))
;  (declare (ignore x y))
;  nil)

;(defnumop eql ((x bignum) (y double))
;  (declare (ignore x y))
;  nil)

(defnumop = ((x rational) (y double))
  (double-let* ((y (double-components y)))
    (and (not (and (zerop y-low)
		   (zerop (ldb %%double-except-sign-high y-high))))		; not zero
	 ( (ldb %%double-exponent y-high)
	    %double-exponent-max)		; not infinite
	 (with-float-operating-mode ((:trap-disables :overflow :underflow))
	   (si:double-= (si:double-dfloat x) y)))))

(defnumop = ((x bignum) (y double))
  (double-let* ((y (double-components y)))
    (and ( (ldb %%double-exponent y-high)
	    %double-exponent-max)		; not infinite
	 (with-float-operating-mode ((:trap-disables :overflow))
	   (si:double-= (si:double-dfloat x) y)))))

(defun lessp-bignum-double (bignum double)
  (double-let* ((double (double-components double)))
    (if (and (zerop double-low)
	     (= (ldb %%double-except-sign-high double-high)
		(ldb %%double-except-sign-high (double-high +1d))))
	(plusp double-high)			; double is infinite
	(with-float-operating-mode ((:trap-disables :overflow))
	  (si:double-< (si:double-dfloat bignum) double)))))

(defun lessp-double-bignum (double bignum)
  (double-let* ((double (double-components double)))
    (if (and (zerop double-low)
	     (= (ldb %%double-except-sign-high double-high)
		(ldb %%double-except-sign-high (double-high +1d))))
	(minusp double-high)			; double is infinite
	(with-float-operating-mode ((:trap-disables :overflow))
	  (si:double-< double (si:double-dfloat bignum))))))

(defnumop < ((x bignum) (y double))
  (lessp-bignum-double x y))

(defnumop < ((x double) (y bignum))
  (lessp-double-bignum x y))

(defun lessp-ratio-double (ratio double)
  (double-let* ((double (double-components double)))
    (cond ((and (zerop double-low)
		(zerop (ldb %%double-except-sign-high double-high)))
	   (minusp (rational-numerator ratio)))	; double is zero
	  ((and (zerop double-low)
		(= (ldb %%double-except-sign-high double-high)
		   (ldb %%double-except-sign-high (double-high +1d))))
	   (plusp double-high))			; double is infinite
	  (t
	   (with-float-operating-mode ((:trap-disables :overflow :underflow))
	     (si:double-< (si:double-dfloat ratio) double))))))

(defun lessp-double-ratio (double ratio)
  (double-let* ((double (double-components double)))
    (cond ((and (zerop double-low)
		(zerop (ldb %%double-except-sign-high double-high)))
	   (plusp (rational-numerator ratio)))	; double is zero
	  ((and (zerop double-low)
		(= (ldb %%double-except-sign-high double-high)
		   (ldb %%double-except-sign-high (double-high +1d))))
	   (minusp double-high))			; double is infinite
	  (t
	   (with-float-operating-mode ((:trap-disables :overflow :underflow))
	     (si:double-< double (si:double-dfloat ratio)))))))

(defnumop < ((x ratio) (y double))
  (lessp-ratio-double x y))

(defnumop < ((x double) (y ratio))
  (lessp-double-ratio x y))

(defnumop zerop ((d1 double))
  (with-double-components (d1 d1-high d1-low)
    (and (zerop (ldb %%double-except-sign-high d1-high))
	 (zerop d1-low))))

;; Abs is macrocoded

(defnumop minus ((d1 double))
  (%multiple-value-call-n %make-double
			  (%multiple-value-call-n %double-floating-minus
						  (%fast-double-components d1) 2)
			  2))

(defnumop plusp ((d1 double))
  (plusp (%multiple-value-call-n %double-floating-compare
				 (%fast-double-components d1) 2
				 0 1 0 1)))

(defnumop minusp ((d1 double))
  (minusp (%multiple-value-call-n %double-floating-compare
				  (%fast-double-components d1) 2
				  0 1 0 1)))

#+3600
(defnumop fix ((d double))
  (with-float-operating-mode ((:round :minus))
    (%multiple-value-call-n %convert-double-to-fixnum (%fast-double-components d) 2)))

#+3600
(defnumop float ((d double))
  (%multiple-value-call-n %convert-double-to-single (%fast-double-components d) 2))

;; Haulong, oddp, and evenp are illegal



;; The numbers are copied into safeguarded-objects-area mainly for locality.
;; On Ivory, this means we have to embed the numbers into an array, since they're list format.
;; Don't bind default-cons-area to do this unless you want all the intermediate
;; garbage results in safeguarded-objects-area too.
(defun make-dfloat-and-scale-table ()
  (let ((table (make-array (* 2 2 9) ':area safeguarded-objects-area :type art-q-list)))
    (macrolet ((copy (n)
		 #+3600 `(copy-extended-number ,n safeguarded-objects-area)
		 #+imach n))
      (loop for digit from 1 to 9
	    do (setf (aref table (- digit 1))   (copy (- (// (dfloat digit) 10))))
	       (setf (aref table (+ digit 8.))  (copy (- (dfloat digit))))
	       (setf (aref table (+ digit 17.)) (copy (// (dfloat digit) 10)))
	       (setf (aref table (+ digit 26.)) (copy (dfloat digit)))))
    #+imach
    (loop for copy in (copy-lists-into-art-q-list-array (g-l-p table) safeguarded-objects-area)
	  for i from 0
	  do (setf (aref table i) copy))
    table))

(add-initialization "Make *DFLOAT-AND-SCALE-TABLE*"
		    '(setq *dfloat-and-scale-table* (make-dfloat-and-scale-table))
		    '(:once))
