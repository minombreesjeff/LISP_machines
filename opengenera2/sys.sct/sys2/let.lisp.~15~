;;; -*- Mode: Lisp; Package: System-Internals; Lowercase: Yes; Base: 10. -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This file defines three new, unsupported special forms that
;;; work similarly to built-in special forms, except that in place
;;; of a variable to be assigned to you may provide a tree of variables;
;;; the value being assigned must be a tree of the same shape, and
;;; will be disassembled into its component parts; each variable
;;; will be assigned to the corresponding component of the value tree.
;;; Thus assigning the value ((1 2) 3) to the destructuring pattern (A B)
;;; will assign (1 2) to A and 3 to B.
;;;
;;;  DLET is like LET
;;;  DLET* is like LET*
;;;  DESETQ is like SETQ
;;;
;;; In prior versions, this file actually redefined the built-in LET
;;; and LET* special forms.  There were several reasons that this was
;;; not a good idea, including the fact that DLET fails to scope
;;; SPECIAL declarations properly.
;;;
;;; The special forms defined in this file are somewhat compatible with
;;; the destructuring LET, DESETQ, and DEFUN available for Maclisp.

(defmacro dlet (pairs &body body &environment env)
  (multiple-value-bind (declarations body)
      (find-body-declarations body env)
    (do ((pairs pairs (cdr pairs))
	 (vars nil)
	 (let-macro-vals nil)
	 (tem))
	((null pairs)
	 `((lambda ,(reverse vars) ,@declarations ,@body) ,@(reverse let-macro-vals)))
      (cond ((atom (car pairs))
	     (unless (symbolp (car pairs))
	       (ferror "Garbage found in DLET pattern: ~S" (car pairs)))
	     (setq vars (cons (car pairs) vars))
	     (setq let-macro-vals (cons nil let-macro-vals)))
	    (t
	     (setq tem vars)
	     (labels ((let-macro-get-vars (pattern vars)
			  (cond ((null pattern) vars)
				((atom pattern)
				 (or (symbolp pattern)
				     (ferror "Garbage found in DLET pattern: ~S" pattern))
				 (setq let-macro-vals (cons nil let-macro-vals))
				 (cons pattern vars))
				(t (let-macro-get-vars (cdr pattern)
						       (let-macro-get-vars (car pattern)
									   vars))))))
	       (setq vars (let-macro-get-vars (caar pairs) vars)))
	     (unless (eq tem vars)
	       (setq body (nconc (let-macro-hair (caar pairs)
						 (cadar pairs)
						 let-macro-vals)
				 body))))))))

(defmacro desetq p
  (do ((p p (cddr p))
       (body nil)
       (tem))
      ((null p)
       `(progn . ,body))
    (cond ((atom (cdr p))
	   (ferror "Odd number of args to DESETQ: ~S" p))
	  ((atom (car p))
	   (or (symbolp (car p))
	       (ferror "Garbage found in DESETQ pattern: ~S" (car p)))
	   (and (null (car p))
		(ferror "Bad DESETQ pattern: ~S" (car p)))
	   (setq body (nconc body `((setq ,(car p) ,(cadr p))))))
	  (t
	   (setq tem (cons nil nil))
	   (setq body (nconc body
			     `((setq ,(let-macro-get-last-var (car p))
				     . ,tem)
			       . ,(let-macro-hair (car p) (cadr p) tem))))))))

(defun let-macro-get-last-var (pattern)
  (cond ((atom pattern) pattern)
	(t
	 (or (let-macro-get-last-var (cdr pattern))
	     (let-macro-get-last-var (car pattern))))))

(defun let-macro-hair (pattern code cell)
  (cond ((null pattern) nil)
	((atom pattern)
	 (rplaca cell code)
	 nil)
	(t
	 ((lambda (avar dvar)
	    (cond ((null avar)
		   (cond ((null dvar) nil)
			 (t (let-macro-hair (cdr pattern)
					    `(cdr ,code)
					    cell))))
		  ((null dvar)
		   (let-macro-hair (car pattern)
				   `(car ,code)
				   cell))
		  (t
		   (rplaca cell code)
		   ((lambda (acell dcell)
		      (cons `(setq ,avar . ,acell)
			    (nconc (let-macro-hair (car pattern)
						   `(car ,dvar)
						   acell)
				   (cons `(setq ,dvar . ,dcell)
					 (let-macro-hair (cdr pattern)
							 `(cdr ,dvar)
							 dcell)))))
		    (cons nil nil)
		    (cons nil nil)))))
	  (let-macro-get-last-var (car pattern))
	  (let-macro-get-last-var (cdr pattern))))))

(defmacro dlet* (pairs &body body)
  (do ((a (reverse pairs) (cdr a))
       (b `(let () ,@body) `(dlet (,(car a)) ,b)))
      ((null a) b)))
