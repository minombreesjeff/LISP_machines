;;;-*- Base: 8;Mode: Lisp; Package: System-internals; Lowercase: Unfortunately-*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;Implement the mechanism by which advised functions operate.

(deff advise-prog #'prog)
(deff advise-setq #'setq)
(deff advise-progn #'progn)
(deff advise-multiple-value-list #'multiple-value-list)
(deff advise-values-list #'values-list)
(deff advise-apply #'apply)
(deff advise-let #'let)
(deff advise-list* #'list*)

;; Now done in clcp>mapforms.lisp so that we know that (:property setq lt:mapforms) exists
;; already.
#|
;;Allow mapforms to work with advise setq
(deff (:property advise-setq lt:mapforms) #'(:property setq lt:mapforms))
|#

(defmacro compiler-p1-advise-form (operator)
  (let* ((opname (scl:symbol-name operator))
	 (advise-opname (string-append "ADVISE-" opname))
	 (advise-operator (intern advise-opname (pkg-find-package "SI")))
	 (transformer (intern (string-append advise-opname "-TO-" opname)
			      (pkg-find-package "SI"))))
    `(progn
       (compiler:delete-transformer ,advise-operator ,transformer ,operator)
       (defun (,advise-operator compiler:phase-1-handler) (body destination)
	 (compiler:phase-1 (cons ',operator body) destination nil)))))

(compiler-p1-advise-form setq)
(compiler-p1-advise-form prog)
(compiler-p1-advise-form progn)
(compiler-p1-advise-form multiple-value-list)
(compiler-p1-advise-form values-list)
(compiler-p1-advise-form apply)
(compiler-p1-advise-form let)
(compiler-p1-advise-form list*)


(defmacro advised-function (before after around inner-function-expression)
  (let ((default-cons-area background-cons-area))
    `(advise-prog (values)
	(declare (special values))	;For now, at least
	,@(if after
	      `((advise-setq values
			     (advise-multiple-value-list
			       (advise-progn
				 ,@before
				 ,(advise-merge-arounds around inner-function-expression))))
		,@after
		(return (advise-values-list values)))
	      `(,@before
		(return ,(advise-merge-arounds around inner-function-expression)))))))

;; Take the list of around advise and merge it together
;; Producing a form which evaluates them around the body.

(defun advise-merge-arounds (advice-list inner-function-expression)
  (cond ((null advice-list) `(advise-apply ,inner-function-expression arglist))
	(t (subst (advise-merge-arounds (cdr advice-list) inner-function-expression)
		  ':do-it
		  (car advice-list)))))

(defvar *advice-compiled-by-default* nil)

;; This should probably be stored using FUNCTION-SPEC-PUTPROP and FUNCTION-SPEC-GET
;; rather than a structure, and just store the function-spec on the list.
(defstruct (advised-function-info :conc-name (:type named-array)
				  (:print "#<ADVICE-INFO for function ~S>"
				   (advised-function-info-name advised-function-info)))
  name
  (before (ncons nil))
  (after (ncons nil))
  (around (ncons nil))
  (flags 0))

;; New format is a list of structs.
(defvar advised-functions nil)

(defun (advise encapsulation-grind-function) (function def width real-io untyo-p)
  (ignore def)
  (let ((info (find-functions-advice function)))
    (if info
	(progn
	  (grind-print-advice-slot (car (advise-find-slot info ':before)) ':before
				   function width real-io untyo-p)
	  (grind-print-advice-slot (car (advise-find-slot info ':after)) ':after
				   function width real-io untyo-p)
	  (grind-print-advice-slot (car (advise-find-slot info ':around)) ':around
				   function width real-io untyo-p))
	(cl:pprint `(advise ,function "<Encapsulated, but can't find advice>") real-io))))

(defun grind-print-advice-slot (slot-contents slot-name function width real-io untyo-p)
  untyo-p width
  (do ((l slot-contents (cdr l)) (i 0 (1+ i)))  ((null l))
    (let ((permanent (equal (third (car l)) ''permanent)))
    (cl:pprint `(,(if permanent 'advise-permanently 'advise)
		 ,function
		 ,slot-name
		 ,(second (second (car l)))
		 ;; in some release >after< 7.2, we won't have to
		 ;; conditionalize this, since we've started to
		 ;; put NIL instead of 'PERMANENT for
		 ;; non-permanent advice, so it would simply be
		 ;; (cdddar l) for both.
		 ,i . ,(if permanent (cdddar l) (cddar l)))
	       real-io))))


;; List of all functions which have been advised - for UNADVISE.

(defun find-functions-advice (function)
  (loop for advice-info in advised-functions
	when (eq (fdefinition function)
		 (fdefinition (advised-function-info-name advice-info)))
	  do (return advice-info)))

;; Make a specifed function into an advised function
;; (with no advice, as yet) if it isn't one already.
;; Undisplace the advised-function macro if it has displaced itself.

(defun advise-init (function)
  (check-arg function (and (validate-function-spec function)
			   (fdefinedp function))
	     "a function-spec of a defined function.")
  (let* ((default-cons-area background-cons-area)
	 (spec1 (unencapsulate-function-spec function 'advise))
	 (spec2 (unencapsulate-function-spec spec1 '(advise))))
    (or
      ;; either get advice-info that is already on list, (making sure to get function
      ;; definition into clean state - even if it isn't on the list.
      (and (neq spec1 spec2)
	   ;; already being advised, make sure it is unencapsulated, and return info.
	   (fdefine spec1 (fdefinition spec2))
	   ;; find info
	   (find-functions-advice function))
      (find-functions-advice function)
      ;; if advice-info isn't on list, create it and put it there.
      (let ((info (make-advised-function-info name function)))
	(push info advised-functions)
	(setf (scl:logbitp 1 (advised-function-info-flags info))
	      *advice-compiled-by-default*)
	info))))

(defmacro advise (function class name position &body forms)
  `(advise-1 ',function ',class ',name ',position ',forms))

(defun compose-advice (function info)
  (if (scl:logbitp 1 (advised-function-info-flags info))
      (encapsulate-and-compile
	(unencapsulate-function-spec function 'advise)
	function
	'advise
	`(advised-function ,(car (advised-function-info-before info))
			   ,(car (advised-function-info-after info))
			   ,(car (advised-function-info-around info))
			   ,encapsulated-function))
      (encapsulate (unencapsulate-function-spec function 'advise)
		   function
		   'advise
		   `(advised-function ,(car (advised-function-info-before info))
				      ,(car (advised-function-info-after info))
				      ,(car (advised-function-info-around info))
				      ,encapsulated-function))))

(defun advise-1 (function class name position forms)
  (check-arg position (or (symbolp position) (and (fixp position) (>= position 0)))
	     "a symbol or a positive fixnum")
  (check-arg-type name :symbol "a symbol")
  (setq function (get-defined-function-spec function))
  (without-interrupts
    (let ((info (advise-init function)))
      (setq forms (rename-within-new-definition-maybe function forms))
      (advise-update-list (advise-find-slot info class) name position forms)
      (compose-advice function info))))

(defun advise-find-slot (info class)
  (cond ((string-equal class "BEFORE") (advised-function-info-before info))
	((string-equal class "AFTER")  (advised-function-info-after info))
	((string-equal class "AROUND") (advised-function-info-around info))
	(t (ferror "Second argument is ~S, neither :BEFORE, :AFTER, nor :AROUND"
		   class))))

(defun advise-update-list (slot-location name position forms)
  (let* ((default-cons-area background-cons-area)
	 (permanent (and (listp position) (eq (car position) :permanent)))
	 (position (if permanent (cadr position) position))
	 preceding (new-unit `(progn ',name ,(when permanent ''permanent) . ,forms)))
    (cond ((numberp position)
	   (or (setq preceding (nthcdr position (locf (car slot-location))))
	       (progn (setq preceding (locf (car slot-location)))
		      (do () ((null (cdr preceding)))
			(pop preceding)))))
	  ((and (null name) (null position)))
	  ((or (symbolp position) (null position))
	   (setq preceding (mem #'(lambda (p elt) (eq p (cadadr elt)))
				(or position name) (locf (car slot-location))))))
    ;; If the symbol isn't found, or no position is specified,
    ;; inser new advice at the beginning.
    (or preceding (setq preceding (locf (car slot-location))))
    (push new-unit (cdr preceding))
    ;; If we have a name, delete any old advice with that name.
    (and name
	 (do ((l (locf (car slot-location)) (cdr l))) ((null l))
	   (and (eq (cadadr (cadr l)) name)
		(neq (cadr l) new-unit)
		(return (rplacd l (cddr l))))))
    nil))



(defmacro unadvise (&optional function class position)
  (cond ((null function)
	 (let ((gensym (gensym)))
	   `(dolist (,gensym advised-functions)
	      (unadvise-1 (advised-function-info-name ,gensym) ',class ',position))))
	(t `(unadvise-1 ',function ',class ',position))))

(defun unadvise-1 (function &optional class position)
  (check-arg position (or (symbolp position) (and (fixp position) (>= position 0)))
	     "a symbol or a positive fixnum")
  (let ((old-ints si:inhibit-scheduling-flag))
  (without-interrupts
    (let* ((info (or (find-functions-advice function) (advise-init function)))
	   (permanent (scl:logbitp 0 (advised-function-info-flags info))))
      (cond ((and (or class permanent) (null position))
	     ;class specified, no position
	     (if permanent
		 (flet ((strip-class (info class-1)
			  (loop with slot-location = (advise-find-slot info class-1)
				for body in (car slot-location)
				when (equal (third body) ''permanent)
				  collect body into perms
				finally (setf (car slot-location) perms))))
		   (if class
		       (strip-class info class)
		       (loop for class-1 in '(:before :after :around) 
			     do (strip-class info class-1))))
		 (rplaca (advise-find-slot info class) nil)))

	    (position 			;; position specified, maybe class as well
	     (loop for scan-class in '(:before :after :around)
		   ;; if a class (therefore slot) already exists, use it.  Else use scan-class
		   as slot-location = (advise-find-slot info (or class scan-class))
		   ;; Now try and use slot-position, from whereever it came from
		   do (cond ((numberp position)
			     (let ((preceding (nthcdr position (locf (car slot-location)))))
			       (cond ((cdr preceding)
				      (let ((body (cadr preceding)))
					(if (equal (third body) ''permanent)
					    (let ((si:inhibit-scheduling-flag old-ints))
					      (ferror 
						"The ~:R piece of ~S-advise for function ~S is permanent.  Use ~S to remove it."
						position scan-class function
						(list 'unadvise-permanent
						      function
						      scan-class
						      position)))
					    (rplacd preceding (cddr preceding)))))
				     (class ;; don't error if no class specified
				      (ferror
					"Function ~S has less than ~D pieces of ~S-advise"
					function position class)))))
			    ((symbolp position)
			     (do ((l (locf (car slot-location)) (cdr l)))
				 ((null l)
				  (if class ;; again, don't error if no class specified
				      (let ((si:inhibit-scheduling-flag old-ints))
					(ferror "Function ~S has no ~A-advice named ~S"
						function class position))))
			       (and (eq (cadadr (cadr l)) position)
				    (return
				      (if (equal (third (cadr l)) ''permanent)
					  (let ((si:inhibit-scheduling-flag old-ints))
					    (ferror 
					      "The piece of ~S-advise named ~S for function ~S is permanent.  Use ~S to remove it."
					      scan-class position function
					      (list 'unadvise-permanent
						    function
						    scan-class
						    position)))
					  (rplacd l (cddr l))))))))
		      ;; We have done at least one loop, whether it be for all
		      ;; classes or a specified one.  Continue if unspecified.
		   while (null class))))
      (let ((info (advise-init function)))
	(if (and (or permanent class position)	;; If there is a chance that
		 ;;  some advice is left
		 (or (car (advise-find-slot info ':before))	; and if some actually
		     (car (advise-find-slot info ':after))	; still exists
		     (car (advise-find-slot info ':around))))
	    ;; Then there is still advice on this function.  Set it up again.
	    (compose-advice function info)
	    ;; OK. No more advice at all.  
	    (setq advised-functions (delete info advised-functions)))))))
  nil)


;;
;; Permanent advice.

(defun show-permanent-advice ()
  (let ((permanent-advice nil))
    (loop for info in advised-functions do
      (when (scl:logbitp 0 (advised-function-info-flags info))
	(loop for class in '(:before :around :after) do
	  (loop for index from 0
		for body in (car (advise-find-slot info class)) do
	    (when (equal (third body) ''permanent)
	      (push (list (advised-function-info-name info) class (second body) index)
		    permanent-advice))))))
    (scl:fresh-line)
    (if permanent-advice
	(formatting-table ()
	  (formatting-column-headings (standard-output :underline-p 't)
	    (formatting-cell () (princ "Function"))
	    (formatting-cell () (princ "Class"))
	    (formatting-cell () (princ "Name"))
	    (formatting-cell () (princ "Position")))
	  (loop for entry in permanent-advice do
	    (formatting-row ()
	      (formatting-cell () (princ (first entry)))
	      (formatting-cell () (princ (second entry)))
	      (formatting-cell () (princ (third entry)))
	      (formatting-cell () (princ (fourth entry))))))
	(format t "No permanent advice found."))))


(defmacro advise-permanently (function class name position &body forms)
  `(advise-permanently-1 ',function ',class ',name ',position ',forms))

(defun advise-permanently-1 (function class name position forms)
  (check-arg position (or (symbolp position) (and (fixp position) (>= position 0)))
	     "a symbol or a positive fixnum")
  (setq function (get-defined-function-spec function))
  (setq position (list :permanent position))
  (without-interrupts
    (let ((info (advise-init function)))
      (setq forms (rename-within-new-definition-maybe function forms))
      (advise-update-list (advise-find-slot info class) name position forms)
      (setf (scl:logbitp 0 (advised-function-info-flags info)) 't)
      (compose-advice function info))))

(defmacro unadvise-permanent (function class &optional position)
  `(unadvise-permanent-1 ',function ',class ',position))

(defun unadvise-permanent-1 (function class &optional position)
  (check-arg position (or (symbolp position) (and (fixp position) (>= position 0)))
	     "a symbol or a positive fixnum")
  (check-arg class (or (string-equal class "BEFORE")
		       (string-equal class "AFTER")
		       (string-equal class "AROUND"))
	     "one of :BEFORE, :AFTER, :AROUND")
  (check-arg function (and (validate-function-spec function)
			   (fdefinedp function))
	     "a function-spec of a defined function.")
  (let ((old-ints si:inhibit-scheduling-flag))
    (without-interrupts
    (let ((info (or (find-functions-advice function) (advise-init function))))
      (if (null position)
	  (rplaca (advise-find-slot info class) nil)
	  (let ((slot-location (advise-find-slot info class)))
	    ;; Now try and use slot-position
	    (cond ((numberp position)
		   (let ((preceding (nthcdr position (locf (car slot-location)))))
		     (if (cdr preceding)
			 (rplacd preceding (cddr preceding))
			 (let ((si:inhibit-scheduling-flag old-ints))
			   (ferror
			     "Function ~S has less than ~D pieces of ~S-advise"
			     function position class)))))
		  ((symbolp position)
		   (do ((l (locf (car slot-location)) (cdr l)))
		       ((null l)
			(let ((si:inhibit-scheduling-flag old-ints))
			  (ferror "Function ~S has no ~A-advice named ~S"
				  function class position)))
		     (and (eq (cadadr (cadr l)) position)
			  (return (rplacd l (cddr l))))))))) 
      (let ((info (advise-init function)))
	;; if some advice is left
	(if (or (car (advise-find-slot info ':before))
		(car (advise-find-slot info ':after))
		(car (advise-find-slot info ':around)))
	    ;; Then there is still advice on this function.  Set it up again.
	    (compose-advice function info)
	    ;; OK. No more advice at all.  
	    (setq advised-functions (delete info advised-functions)))))))
  nil)


;; compiled-advice

(defun compile-advice (function)
  (check-arg function (and (validate-function-spec function)
			   (fdefinedp function))
	     "a function-spec of a defined function.")
  (let ((info (find-functions-advice function)))
    (if info
	(if (scl:logbitp 1 (advised-function-info-flags info))
	    (format error-output "~&Advice for function ~S is already compiled" function)
	    (let ((info (advise-init function)))
	      (setf (scl:logbitp 1 (advised-function-info-flags info)) 't)
	      (compose-advice function info)
	      function))
	(ferror "No advice exists for function ~S" function))))


(defun interpret-advice (function)
  (check-arg function (and (validate-function-spec function)
			   (fdefinedp function))
	     "a function-spec of a defined function.")
  (let ((info (find-functions-advice function)))
    (if info
	(if (scl:logbitp 1 (advised-function-info-flags info))
	    (let ((info (advise-init function)))
	      (setf (scl:logbitp 1 (advised-function-info-flags info)) nil)
	      (compose-advice function info)
	      function)
	    (format error-output "~&Advice for function ~S is already interpreted" function))
	(ferror "No advice exists for function ~S" function))))



;;ADVISE-WITHIN: advise one function but only when called from another specific one.
;;An alternative to advising (:within foo bar).

(defmacro advise-within (within-function function-to-advise class name position &body forms)
  `(advise-within-1 ',within-function ',function-to-advise ',class ',name ',position ',forms))

(defun advise-within-1 (within-function function-to-advise class name position forms)
  (advise-1 `(:within ,within-function ,function-to-advise)
	    class name position forms))

(defmacro unadvise-within (within-function &optional advised-function class position)
  `(unadvise-within-1 ',within-function ',advised-function ',class ',position))

;; UNADVISE-WITHIN is not superfluous because if you specify
;; just the within-function, or nothing at all,
;; it eliminates all advising of anything within that within-function,
;; or all advising within anything.

(defun unadvise-within-1 (within-function &optional advised-function class position)
    (cond ((null within-function)
	   (dolist (fn advised-functions)
	     (and (listp fn) (eq (car fn) ':within)
		  (unadvise-1 fn))))
	  ((null advised-function)
	   (dolist (fn advised-functions)
	     (and (listp fn) (eq (car fn) ':within)
		  (eq (cadr fn) within-function)
		  (unadvise-1 fn))))
	  (t (unadvise-1 `(:within ,within-function ,advised-function) class position))))
