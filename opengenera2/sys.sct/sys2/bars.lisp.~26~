;;; -*- Mode: LISP; Syntax: Zetalisp; Package: SI; Base: 10 -*-
;;;
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; This needs its own file because it uses the LT stuff and has to be able to run on
;;; the L machine.  The two macros are listed in the shared definitions.

;;; This isn't really done yet, but it's supposed to be correct.

;;; BLOCK-READS -- just have to keep them in the right order for each BAR.  They
;;; don't depend on the code in the body (by assumption).
;;; BLOCK-WRITES -- just have to keep them in the right order -- the body code does
;;; not depend on their side-effects by assumption.
(EVAL-WHEN (COMPILE LOAD EVAL)
CLI::
(DEFUN SI:BLOCK-MEMORY-OPTIMIZE (ENVIRONMENT BODY)
  (LET* ((VAR-STATE)
	 (READERS))
    (LABELS
      ((EXTRACT-BLOCK-READS-INTERNAL (SUBFORM KIND USAGE)
	 ;; By assumption, any block reads can be moved out of the body
	 ;; and reordered so that all the block reads for a given BAR
	 ;; are grouped together.  We do not change the order that the
	 ;; reads for a given bar are performed.
	 (DECLARE (IGNORE USAGE))
	 (LET ((BAR))
	   (COND ((AND (NULL KIND)
		       (SETQ BAR
			     (CASE (CAR SUBFORM)
			       ((%BLOCK-1-READ %BLOCK-1-READ-SHIFT) 1)
			       ((%BLOCK-2-READ %BLOCK-2-READ-SHIFT) 2)
			       ((%BLOCK-3-READ %BLOCK-3-READ-SHIFT) 3)
			       (OTHERWISE NIL))))
		  (LET ((TEMP-VAR (GENSYM)))
		    (PUSH `(,TEMP-VAR T) VAR-STATE)
		    (PUSH `(,TEMP-VAR ,SUBFORM) (GETF READERS BAR))
		    (VALUES TEMP-VAR T)))
		 (T SUBFORM)))))
      (LET ((FORM (COPYFORMS
		    #'EXTRACT-BLOCK-READS-INTERNAL BODY
		    :ENVIRONMENT ENVIRONMENT
		    :EXPAND-ALL-MACROS T
		    :EXPAND-SUBSTS T)))
	`(LET* (,@(LOOP FOR (GROUP-READS GROUP) ON (NREVERSE READERS) BY #'CDDR
			DOING
		    (IGNORE GROUP)
		    ;; Set :LAST-WORD on the last two reads of each BAR
		    (LET ((LAST-READ (FIRST GROUP-READS))
			  (SECOND-LAST-READ (SECOND GROUP-READS)))
		      (WHEN LAST-READ
			(SETF (%LOGLDB #+3600 ISYS:%%MEMORY-LAST-WORD
				       #+IMACH SYS:%%MEMORY-LAST-WORD
				       (SECOND (SECOND LAST-READ))) 1))
		      (WHEN SECOND-LAST-READ
			(SETF (%LOGLDB #+3600 ISYS:%%MEMORY-LAST-WORD
				       #+IMACH SYS:%%MEMORY-LAST-WORD
				       (SECOND (SECOND SECOND-LAST-READ))) 1)))
		       NCONCING (NREVERSE GROUP-READS)))
	   ,FORM)))))

;(DEFUN SI:BLOCK-MEMORY-OPTIMIZE (ENVIRONMENT BODY NOT-OKAY-TO-INLINE-VARS)
;  (LET* ((VAR-STATE)
;	 (READERS)
;	 (CONST-TEMPS)
;	 (WRITE-TEMPS)
;	 (WRITERS))
;    (LABELS
;      ((EXTRACT-BLOCK-READS-INTERNAL (SUBFORM KIND USAGE)
;	 ;; By assumption, any block reads can be moved out of the body
;	 ;; and reordered so that all the block reads for a given BAR
;	 ;; are grouped together.  We do not change the order that the
;	 ;; reads for a given bar are performed.
;	 (DECLARE (IGNORE USAGE))
;	 (LET ((BAR))
;	   (COND ((AND (NULL KIND)
;		       (SETQ BAR
;			     (CASE (CAR SUBFORM)
;			       ((%BLOCK-1-READ %BLOCK-1-READ-SHIFT) 1)
;			       ((%BLOCK-2-READ %BLOCK-2-READ-SHIFT) 2)
;			       ((%BLOCK-3-READ %BLOCK-3-READ-SHIFT) 3)
;			       (OTHERWISE NIL))))
;		  (LET ((TEMP-VAR (GENSYM)))
;		    (PUSH `(,TEMP-VAR T) VAR-STATE)
;		    (PUSH `(,TEMP-VAR ,SUBFORM) (GETF READERS BAR))
;		    (VALUES TEMP-VAR T)))
;		 (T SUBFORM))))
;       (EXTRACT-BLOCK-WRITES-INTERNAL (SUBFORM KIND USAGE)
;	 ;; All block writes of a non-trivial value are replaced by a block write of
;	 ;; a variable which contains the value.  The block writes are moved to the
;	 ;; end of the body and are grouped according to the BAR that they use.  The
;	 ;; orderring of the block writes for a particular BAR are not changed.
;	 (DECLARE (IGNORE USAGE))
;	 (COND
;	   ((AND (NULL KIND)			;Function
;		 (MEMBER (FIRST SUBFORM)
;			 '(%BLOCK-1-WRITE %BLOCK-2-WRITE %BLOCK-3-WRITE)))
;	    (LET ((VALUE (SECOND SUBFORM))
;		  (ALREADY))
;	      (COND ((AND (INTEGERP VALUE)
;			  ( 0 VALUE 255.))
;		     ;; Real easy case.  It can be an immediate operand.
;		     (PUSH SUBFORM (GETF WRITERS (FIRST SUBFORM)))
;		     (VALUES VALUE T))
;		    ((CONSTANTP VALUE)
;		     ;; It is constant, but not suitable for an immediate operand.
;		     ;; In order to do the block write in one instruction, we are
;		     ;; going to have to make a local for the constant and let the
;		     ;; block write refer to the local.  Since there is no point in
;		     ;; having more than one local for the same constant, we keep a
;		     ;; table of associations between constants and locals we are
;		     ;; keeping in them.
;		     (COND ((SETQ ALREADY (RASSOC (CADR SUBFORM) CONST-TEMPS :KEY #'CAR))
;			    ;; There's alread a variable for it
;			    (PUSH `(,(FIRST SUBFORM) ,(CAR ALREADY))
;				  (GETF WRITERS (FIRST SUBFORM)))
;			    (VALUES (CAR ALREADY) T))
;			   (T
;			    ;; Generate a variable for the constant
;			    (LET ((TEMP-VAR (GENSYM)))
;			      (PUSH `(,(FIRST SUBFORM) ,TEMP-VAR)
;				    (GETF WRITERS (FIRST SUBFORM)))
;			      (PUSH `(,TEMP-VAR T) VAR-STATE)
;			      (PUSH `(,TEMP-VAR ,VALUE) CONST-TEMPS)
;			      (VALUES TEMP-VAR T)))))
;		    ;; If this is a reference to a variable, then it may
;		    ;; be alright to leave it as it is.  This will be
;		    ;; true if the variable is not locally bound (since
;		    ;; we are moving the write to a new contour, we
;		    ;; might not be able to reference it in the new
;		    ;; contour if it is bound) and if the variable is not set by
;		    ;; someone (all free variables which are set are passed to us in
;		    ;; not-okay-to-inline-vars).
;		    ((AND (SYMBOLP VALUE)
;			  (NOT (MEMBER VALUE *MAPFORMS-BOUND-VARIABLES*))
;			  (NOT (MEMBER VALUE NOT-OKAY-TO-INLINE-VARS)))
;		     (PUSH SUBFORM (GETF WRITERS (CAR SUBFORM)))
;		     (VALUES VALUE T))
;		    (T 
;		     (LET ((TEMP-VAR (GENSYM)))
;		       (PUSH `(,(CAR SUBFORM) ,TEMP-VAR)
;			     (GETF WRITERS (CAR SUBFORM)))
;		       ;; See if we can initialize the variable in the LET
;		       ;; rather than with a SETQ.  This can be done if there
;		       ;; are no references to variables whose values are not
;		       ;; initialized in the LET already, or are free and modified in
;		       ;; the body already.
;		       (COND ((BLOCK INLINE
;				(MAPFORMS
;				  #'(LAMBDA (FORM KIND &REST IGNORE)
;				      (LET ((TEMP))
;					(WHEN (AND (MEMBER KIND '(SET SYMEVAL))
;						   (OR (MEMBER FORM
;							       *MAPFORMS-BOUND-VARIABLES*)
;						       (MEMBER FORM NOT-OKAY-TO-INLINE-VARS)
;						       (AND (SETQ TEMP (ASSOC FORM VAR-STATE))
;							    (NULL (CADR TEMP)))))
;					  (RETURN-FROM INLINE NIL))))
;				  VALUE
;				  :BOUND-VARIABLES *MAPFORMS-BOUND-VARIABLES*
;				  :EXPAND-SUBSTS T
;				  :ENVIRONMENT ENVIRONMENT)
;				(RETURN-FROM INLINE T))
;			      (PUSH `(,TEMP-VAR ,VALUE) WRITE-TEMPS)
;			      (PUSH `(,TEMP-VAR T) VAR-STATE)
;			      (VALUES TEMP-VAR T))
;			     (T (PUSH TEMP-VAR WRITE-TEMPS)
;				(PUSH `(,TEMP-VAR NIL) VAR-STATE)
;				`(SETQ ,TEMP-VAR ,VALUE))))))))
;	   ((AND (EQ KIND 'SET)
;		 (NOT (MEMBER SUBFORM *MAPFORMS-BOUND-VARIABLES*)))
;	    ;; We are modifying a variable, so it is no longer safe to substitue
;	    ;; in-line for uses of this variable unless we do something hairy.
;	    (PROGN (PUSH `(,SUBFORM NIL) VAR-STATE)
;		   SUBFORM))
;	   (T SUBFORM))))
;      (LET ((FORM (COPYFORMS #'EXTRACT-BLOCK-WRITES-INTERNAL
;				(COPYFORMS
;				  #'EXTRACT-BLOCK-READS-INTERNAL BODY
;				  :ENVIRONMENT ENVIRONMENT
;				  :EXPAND-ALL-MACROS T
;				  :EXPAND-SUBSTS T)
;				:BOUND-VARIABLES NIL
;				:ENVIRONMENT ENVIRONMENT
;				:EXPAND-ALL-MACROS T
;				:EXPAND-SUBSTS T)))
;	`(LET* (,@(LOOP FOR (GROUP-READS GROUP) ON (NREVERSE READERS) BY #'CDDR
;			DOING
;		    ;; Set :LAST-WORD on the last two reads of each BAR
;		    (LET ((LAST-READ (FIRST GROUP-READS))
;			  (SECOND-LAST-READ (SECOND GROUP-READS)))
;		      (WHEN LAST-READ
;			(SETF (%LOGLDB #+3600 ISYS:%%MEMORY-LAST-WORD
;				       #+IMACH SYS:%%MEMORY-LAST-WORD
;				       (SECOND (SECOND LAST-READ))) 1))
;		      (WHEN SECOND-LAST-READ
;			(SETF (%LOGLDB #+3600 ISYS:%%MEMORY-LAST-WORD
;				       #+IMACH SYS:%%MEMORY-LAST-WORD
;				       (SECOND (SECOND SECOND-LAST-READ))) 1)))
;		       NCONCING (NREVERSE GROUP-READS))
;	       ,@(NREVERSE CONST-TEMPS)
;	       ,@(NREVERSE WRITE-TEMPS))
;	   ,FORM
;	   ,@(LOOP FOR (GROUP GROUP-WRITES) ON WRITERS BY #'CDDR
;		   NCONCING (NREVERSE GROUP-WRITES)))))))
);End EVAL-WHEN

(DEFMACRO REPEAT-BLOCK-FORMS (BLOCKING FORM &ENVIRONMENT ENVIRONMENT)
  (BLOCK-MEMORY-OPTIMIZE
    ENVIRONMENT
    `(PROGN ,@(LOOP REPEAT BLOCKING
		    COLLECT FORM))))

;(DEFMACRO REPEAT-BLOCK-FORMS (BLOCKING FORM &ENVIRONMENT ENVIRONMENT)
;  (BLOCK-MEMORY-OPTIMIZE
;    ENVIRONMENT
;    `(PROGN ,@(LOOP REPEAT BLOCKING
;		    COLLECT FORM))
;    (LT:MAPFORMS
;      #'(LAMBDA (FORM KIND USAGE STATE)
;	  (DECLARE (IGNORE USAGE))
;	  (IF (AND (EQ KIND 'SET)
;		   (NOT (CL:MEMBER FORM LT:*MAPFORMS-BOUND-VARIABLES*)))
;	      (CONS FORM STATE)
;	      STATE))
;      FORM
;      :BOUND-VARIABLES '()
;      :EXPAND-SUBSTS T
;      :ENVIRONMENT ENVIRONMENT)))

(DEFMACRO UNROLL-BLOCK-FORMS ((N BLOCKING) &BODY BODY &ENVIRONMENT ENVIRONMENT)
  (LET ((POS (1- (CL:INTEGER-LENGTH BLOCKING)))
	(COUNTER (GENSYM)))
    (ONCE-ONLY (N &ENVIRONMENT ENVIRONMENT)
      `(PROGN
	 ,@(UNLESS (= 1 BLOCKING)
	     ;; This is DO rather than a LOOP repeat because DO generates better code.
	     ;; Don't "fix" this without fixing the compiler.
	     `((DO ((,COUNTER (%LOGLDB (BYTE ,(- 32. POS) ,POS) ,N) (1- ,COUNTER)))
		   (( ,COUNTER 0))
		 (REPEAT-BLOCK-FORMS ,BLOCKING (PROGN ,@BODY)))))
	 ,@(LOOP FOR POS DOWNFROM (1- POS) TO 2.
		 FOR I FIRST (LSH BLOCKING -1.) THEN (LSH I -1.)
		 COLLECT
		   `(UNLESS (ZEROP (%LOGLDB (BYTE 1. ,POS) ,N))
		      (REPEAT-BLOCK-FORMS ,I (PROGN ,@BODY))))
	 (DO ((,COUNTER (LDB (BYTE 2 0) ,N) (1- ,COUNTER)))
	     (( ,COUNTER 0))
	   ;; Change all the block reads in the body to :LAST-WORD
	   ,(LT:COPYFORMS
	      #'(LAMBDA (SUBFORM KIND USAGE)
		  (DECLARE (IGNORE USAGE))
		  (COND ((AND (NULL KIND)
			      (CL:MEMBER (FIRST SUBFORM)
					 '(%BLOCK-1-READ %BLOCK-1-READ-SHIFT
							 %BLOCK-2-READ %BLOCK-2-READ-SHIFT
							 %BLOCK-3-READ %BLOCK-3-READ-SHIFT)))
			 (VALUES
			   `(,(FIRST SUBFORM)
			     ,(%LOGDPB 1
				       #+3600 ISYS:%%MEMORY-LAST-WORD
				       #+IMACH SYS:%%MEMORY-LAST-WORD
				       (SECOND SUBFORM)))
			   T))
			(T SUBFORM)))
	      `(PROGN ,@BODY)
	      :ENVIRONMENT ENVIRONMENT
	      :EXPAND-ALL-MACROS T
	      :EXPAND-SUBSTS T))))))
