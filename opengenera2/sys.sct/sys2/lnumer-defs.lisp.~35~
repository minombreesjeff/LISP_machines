;;; -*- Mode: LISP; Package: SI; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;;; FLOAT-OPERATING-MODE stuff
(eval-when (eval compile load)

(defun hyphenated-symbol (&rest syms)
  (intern (format () "~{~a~^-~}" syms) 'si))

(defun lookup-float-operating-mode-info (flag mode)
  (selectq mode
    (:round
     (values '%%FLOAT-ROUNDING-MODE
	     (selectq flag
	       (:nearest '%FLOAT-ROUNDING-MODE-NEAREST)
	       (:zero    '%FLOAT-ROUNDING-MODE-ZERO)
	       (:plus    '%FLOAT-ROUNDING-MODE-PLUS)
	       (:minus   '%FLOAT-ROUNDING-MODE-MINUS))))
    (otherwise (ferror "Bad mode ~s" mode))))

(defun lookup-float-trap-info (conditions)
  (loop for condition in conditions
	collect (selectq condition
		  (:inexact-result       '%%FLOAT-TRAP-ENABLE-INEXACT-RESULT)
		  (:invalid-operation    '%%FLOAT-TRAP-ENABLE-INVALID-OPERATION)
		  (:overflow             '%%FLOAT-TRAP-ENABLE-OVERFLOW)
		  (:underflow            '%%FLOAT-TRAP-ENABLE-UNDERFLOW)
		  (:division-by-zero     '%%FLOAT-TRAP-ENABLE-DIVISION-BY-ZERO)
		  (otherwise (ferror "Bad trap condition ~s" condition)))))
);eval-when eval compile load

;;This isn't really right.  Do we really want to consider binding
;;e.g. the rounding mode separately from the trap enables?
(defmacro with-float-operating-mode (flag-pairs &body body)
  "Dynamically bind FLOAT-OPERATING-MODE to some perturbation of itself.
You can symbolically alter the rounding mode, infinity mode, warning//normalizing mode,
and selectively enable and disable traps.
---Write some more stuff to go here."
  `(let ((.old-float-operating-mode. (float-operating-mode)))
     (unwind-protect
       (progn (set-float-operating-mode
		,(perturb-float-operating-mode (cons '(:from .old-float-operating-mode.)
						     flag-pairs)))
	      ,@body)
       (set-float-operating-mode .old-float-operating-mode.))))

(defmacro make-float-operating-mode (&rest flag-pairs)
  `(progn ,(perturb-float-operating-mode flag-pairs)))

;;(if (float-rounding-mode? :plus) ...)
(defmacro float-rounding-mode? (which &optional (where '(float-operating-mode)))
  `(= (ldb %%float-rounding-mode ,where)
      ,(hyphenated-symbol '%float-rounding-mode which)))

(defmacro float-trap-enable? (which &optional (where '(float-operating-mode)))
  `(ldb-test ,(hyphenated-symbol '%%float-trap-enable which) ,where))

(defmacro float-signal? (which &optional (where '(float-operation-status)))
  `(ldb-test ,(hyphenated-symbol '%%float-signal which) ,where))

(defmacro float-flag? (which &optional (where '(float-operation-status)))
  `(ldb-test ,(hyphenated-symbol '%%float-flag which) ,where))

(defmacro float-set-flag (which &optional (where '(float-operation-status)))
  `(setf (ldb ,(hyphenated-symbol '%%float-flag which) ,where) 1))

;; bind double-high and double-low to the component fixnums of a double
(defmacro with-double-components ((double double-high double-low) &body body &environment env)
  (once-only (double &environment env)
    `(let ((,double-high (double-high ,double))
	   (,double-low (double-low ,double)))
       ,@ body)))

(defsubst double-components (double)
  (values (double-high double) (double-low double)))

(defun float-exception-type (num)
  (argument-typecase num
    (:single-float
     (let ((f (%fixnum num)))
       (let ((expt (ldb %%single-exponent f))
	     (frac-zero (zerop (ldb %%single-fraction f))))
	 (select expt
	   (%single-exponent-max
	    (if frac-zero ':infinity ':nan))
	   (0 (if frac-zero ':zero ':denormalized))
	   (otherwise ':normal)))))
    (:double-float
     (with-double-components (num high low)
       (let ((expt (ldb %%double-exponent high))
	     (frac-zero (and (zerop (ldb %%double-fraction-high high))
			     (zerop low))))
	 (select expt
	   (%double-exponent-max
	    (if frac-zero ':infinity ':nan))
	   (0 (if frac-zero ':zero ':denormalized))
	   (otherwise ':normal)))))))

(defun perturb-float-operating-mode (flag-pairs)
  (let ((from '(float-operating-mode))
	(bps ())
	(values ()))
    (dolist (flag flag-pairs)
      (cond ((null flag))
	    ((symbolp flag)
	     (cond ((eq flag ':from-current)
		    (setq from '(float-operating-mode)))
		   ((eq flag ':from-default)
		    (setq from '*default-float-operating-mode*))
		   ((multiple-value-bind (bp value)
			(lookup-float-operating-mode-info flag :round)
		      (when (and bp value)
			(push bp bps)
			(push value values)
			(return T))))
		   (T (ferror "Bad flag ~s" flag))))
	    ((eq (first flag) ':round)
	     (unless (and (cdr flag) (listp (cdr flag)) (null (cddr flag)))
	       (ferror "Bad flag ~s" flag))
	     (destructuring-bind (mode flag) flag
	       (multiple-value-bind (bp value) (lookup-float-operating-mode-info flag mode)
		 (if (and bp value)
		     (progn (push bp bps) (push value values))
		     (ferror "Bad flag ~s" flag)))))
	    ((memq (first flag) '(:trap-enables :trap-disables))
	     (loop with value = (if (eq (first flag) ':trap-enables) 1 0)
		   for bp in (lookup-float-trap-info (rest1 flag))
		   do (push bp bps)
		      (push value values)))
	    ((eq (first flag) ':from)
	     (unless (and (cdr flag) (listp (cdr flag)) (null (cddr flag)))
	       (ferror "Bad flag ~s" flag))
	     (setq from (second flag)))
	    (T (ferror "Bad flag ~s" flag))))
    (cond ((null bps)
	   `,from)
	  ((null (rest1 bps))
	   `(dpb ,(first values) ,(first bps) ,from))
	  (T (let ((bit-clear-mask (loop with n = 0
					 for bp in bps
					 do (setq n `(dpb -1 ,bp ,n))
					 finally (return n)))
		   (value-mask (loop with n = 0
				     for bp in bps
				     for value in values
				     do (setq n `(dpb ,value ,bp ,n))
				     finally (return n))))
	       (if (equal from 0)
		   `,value-mask
		   `(logior (logand (lognot ,bit-clear-mask) ,from) ,value-mask)))))))

;The equivalent of this is in SYSDEF now
;(defconst *default-float-operating-mode*
;	  (make-float-operating-mode
;	    (:from 0)
;	    ;; IEEE wants traps disabled by default, but that's mostly for
;	    ;; batch-oriented systems (and pipelined processors)
;	    ;; We're trying to be interactive, so we'll trap by default
;	    (:trap-enables :invalid-operation :overflow :underflow :division-by-zero)
;	    ;; The rest of the defaults follow the IEEE standard
;	    (:round :nearest)
;	    (:infinity :affine)
;	    (:normalizing :normalize)))

;;;Double-precision Floating-point numeric macrology for 3600

;;Generally, represent a double as two variables with fixnum values.

(defun double-variable (name)
  "internal"
  (if (and (symbolp name) (boundp name))
      (let ((value (symeval name)))
	(if (and (listp value) (eq (first value) 'double-variable))
	    (rest1 value)))))

(defun get-double-pair (form)
  (cond ((double-float-p form)
	 `(,(double-high form) ,(double-low form)))
	((symbolp form)
	 (if (and (boundp form) (double-float-p (symeval form)))
	     (let ((value (symeval form)))
	       `(,(double-high value) ,(double-low value)))
	     (double-variable form)))
	((listp form)
	 (selectq (first form)
	   (double-pair
	    (rest1 form))
	   ((dfloat // * + -)
	    (let ((value (eval form)))
	      `(,(double-high value) ,(double-low value))))
	   ;; This is presumed by the macros below to be a form which
	   ;; returns two values
	   (otherwise nil)))))

(defmacro double-let* (bindings &body body)
  "(double-let* ((x -value-) ((y (y-hi y-lo)) -value-))  -body-)"
  (if (null bindings)
      `(let () . ,body)
      (let* ((binding (first bindings))
	     (naming (if (cl:consp binding)
			 (first binding) binding))
	     (var (if (cl:consp naming) (first naming) naming))
	     (names (and (cl:consp naming) (second naming)))
	     (var-high (if names (first names) (intern (string-append var "-HIGH"))))
	     (var-low (if names (second names) (intern (string-append var "-LOW")))))
	`(compiler-let ((,var '(double-variable ,var-high ,var-low)))
	   ,(let ((body (if (null (rest1 bindings))
			    body
			    `((double-let* ,(rest1 bindings)
				. ,body)))))
	      (if (symbolp binding)
		  `(let (,var-high ,var-low)
		     . ,body)
		  (let ((values (get-double-pair (second binding))))
		    (if values
			`(let ((,var-high ,(first values))
			       (,var-low ,(second values)))
			   . ,body)
			`(multiple-value-bind (,var-high ,var-low)
			     ,(second binding)
			   . ,body)))))))))

(defmacro with-double-names (namings &body body)
  "(with-double-names ((x (x-hi x-lo)) y) ...)"
  `(compiler-let ,(loop for naming in namings collect
			(if (symbolp naming)
			    `(,naming '(double-variable
					,(intern (string-append naming "-HIGH"))
					,(intern (string-append naming "-LOW"))))
			    `(,(first naming) '(double-variable . ,(second naming)))))
     . ,body))

;;; if evaluated for value, returns just the high part
(defmacro double-setq (var value)
  "(double-setq x value)"  
  (let ((vars (or (double-variable var) var))
	(values (get-double-pair value)))
    (if values
	`(setq ,(second vars) ,(second values)
	       ,(first vars) ,(first values))
      `(multiple-value ,vars ,value))))

(defmacro defdouble (name args value internal-name)
  "Declare that a function should be expanded mumble"
  value						; ignored for now
  `(local-declare ((sys:function-parent ,name defdouble))
     (record-source-file-name ',name 'defdouble)
     (defmacro ,name (&rest args)
       (double-expand ',internal-name ',args args))))

(defun double-expand (name arg-pattern args-supplied)
  "internal"
;  (unless (= (length arg-pattern) (length args-supplied))
;    (ferror "Wrong number of args to ~S" name))
  (let* ((spread-flag nil)
	 (args (loop for arg in args-supplied
		     for arg-type in arg-pattern append
		     (selectq arg-type
		       (:double
			(let ((values (get-double-pair arg)))
			  (cond (values
				 `(,(first values) 1 ,(second values) 1))
				((symbolp arg)
				 (ferror "Argument must be a double constant or variable: ~S"
					 arg))
				(t
				 (setq spread-flag t)
				 `(,arg 2)))))
		       (otherwise
			`(,arg 1))))))
    (if spread-flag
	`(%multiple-value-call-n ,name . ,args)
      `(,name . ,(loop for arg in args by 'cddr
		       collect arg)))))

;;; double operators -- fixnum-pair versions

(defdouble double-+ (:double :double) :double sys:%double-floating-add)
(defdouble double-- (:double :double) :double sys:%double-floating-sub)
(defdouble double-* (:double :double) :double sys:%double-floating-multiply)
(defdouble double-// (:double :double) :double sys:%double-floating-divide)
(defdouble double-minus (:double) :double sys:%double-floating-minus)
(defdouble double-abs (:double) :double sys:%double-floating-abs)
(defdouble double-compare (:double :double) :integer sys:%double-floating-compare)
(defdouble double-value (:double) :double values)
(defdouble single-to-double (:single) :double %convert-single-to-double)
(defdouble double-to-integer (:double) :integer %convert-double-to-fixnum)
(defdouble integer-to-double (:integer) :double %convert-fixnum-to-double)
(defdouble double-to-single (:double) :single %convert-double-to-single)
(defdouble double-to-consed (:double) :number %make-double)
(defdouble double-ash (:double :integer) :double %double-floating-scale)

(defmacro double-> (double1 double2)
  `(plusp (double-compare ,double1 ,double2)))
(defmacro double-< (double1 double2)
  `(minusp (double-compare ,double1 ,double2)))
(defmacro double-= (double1 double2)
  `(zerop (double-compare ,double1 ,double2)))
(defmacro double- (double1 double2)
  `(not (plusp (double-compare ,double1 ,double2))))
(defmacro double- (double1 double2)
  `(not (minusp (double-compare ,double1 ,double2))))

(defdouble double-dfloat (:number) :double dfloat-components)

(defmacro defnumeric-array (name &body values)
  `(defconst ,name (make-lnumer-array ',values)))

(defmacro defdouble-array (name &body doubles)
  `(defconst ,name (make-double-array ',doubles)))

;;; Expand polynomials by Horner's rule
(defmacro horner (x &rest coefs)
  (check-arg-type x :symbol)
  (cond ((null coefs)
	 (ferror "There must be at least one coefficient."))
	((null (rest1 coefs))
	 (first coefs))
	((null (rest2 coefs))
	 (let ((multiple (second coefs)))
	   (if (= (abs multiple) 1)
	       (if (minusp multiple)
		   `(- ,(first coefs) ,x)
		 `(+ ,(first coefs) ,x))
	     `(+ ,(first coefs) (* ,x ,multiple)))))
	(t
	 `(+ ,(first coefs) (* ,x (horner ,x . ,(rest1 coefs)))))))

(defmacro double-horner (x &rest coefs)
  (check-arg-type x :symbol)
  (cond ((null coefs)
	 (ferror "There must be at least one coefficient."))
	((null (rest1 coefs))
	 `(double-components ,(first coefs)))
	((null (rest2 coefs))
	 (let ((multiple (second coefs)))
	   (if (= multiple 1)
	       (if (minusp multiple)
		   `(double-- ,(first coefs) ,x)
		 `(double-+ ,(first coefs) ,x))
	     `(double-+ ,(first coefs)
			(double-* ,x ,multiple)))))
	(t
	 `(double-+ ,(first coefs)
		    (double-* ,x (double-horner ,x . ,(rest1 coefs)))))))

;;; Unboxed numeric macrology for 3600 complex numbers
(defmacro box-complex-values (form)
  `(%multiple-value-call-n make-complex-internal ,form 2))

(defmacro box-complex-operation (function complex-to-unbox &environment env)
  (once-only (complex-to-unbox &environment env)
    `(box-complex-values
       (,function (complex-realpart ,complex-to-unbox)
		  (complex-imagpart ,complex-to-unbox)))))

;; bind realpart and imagpart to the component parts of a complex
(defmacro with-complex-parts ((complex realpart imagpart) &body body &environment env)
  (once-only (complex &environment env)
    `(let ((,realpart (complex-realpart ,complex))
	   (,imagpart (complex-imagpart ,complex)))
       ,@ body)))

(defsubst complex-parts (complex)
  (values (complex-realpart complex) (complex-imagpart complex)))

;;Generally, represent a complex as two similarly-typed numbers.

(defun complex-variable (name)
  "internal"
  (if (and (symbolp name) (boundp name))
      (let ((value (symeval name)))
	(if (and (listp value) (eq (first value) 'complex-variable))
	    (rest1 value)))))

(defun get-complex-pair (form)
  (cond ((complexp form)
	 `(,(complex-realpart form) ,(complex-imagpart form)))
	((symbolp form)
	 (if (and (boundp form) (complexp (symeval form)))
	     (let ((value (symeval form)))
	       `(,(complex-realpart value) ,(complex-imagpart value)))
	     (complex-variable form)))
	((listp form)
	 (selectq (first form)
	   (complex-pair
	    (rest1 form))))))

(defmacro complex-let* (bindings &body body)
  "(complex-let* ((x -value-) ((y (y-real y-imag)) -value-))  -body-)"
  (if (null bindings)
      `(let () . ,body)
    (let* ((binding (first bindings))
	   (var (if (symbolp binding) binding (first binding)))
	   (var-real (intern (string-append var "-REAL")))
	   (var-imag (intern (string-append var "-IMAG"))))
      `(compiler-let ((,var '(complex-variable ,var-real ,var-imag)))
	 ,(let ((body (if (null (rest1 bindings))
			  body
			`((complex-let* ,(rest1 bindings)
				      . ,body)))))
	    (if (symbolp binding)
		`(let (,var-real ,var-imag)
		   . ,body)
	      (let ((values (get-complex-pair (second binding))))
		(if values
		    `(let ((,var-real ,(first values))
			   (,var-imag ,(second values)))
		       . ,body)
		  `(multiple-value-bind (,var-real ,var-imag)
		       ,(second binding)
		     . ,body)))))))))

(defmacro with-complex-names (namings &body body)
  "(with-complex-names ((x (x-real x-imag)) y) ...)"
  `(compiler-let ,(loop for naming in namings collect
			(if (symbolp naming)
			    `(,naming '(complex-variable
					,(intern (string-append naming "-REAL"))
					,(intern (string-append naming "-IMAG"))))
			    `(,(first naming) '(complex-variable . ,(second naming)))))
     . ,body))

;;; if evaluated for value, returns just the real part
(defmacro complex-setq (var value)
  "(complex-setq x value)"  
  (let ((vars (or (complex-variable var) var))
	(values (get-complex-pair value)))
    (if values
	`(setq ,(second vars) ,(second values)
	       ,(first vars) ,(first values))
      `(multiple-value ,vars ,value))))

(defmacro defcomplex (name args value internal-name)
  "Declare that a function should be expanded mumble"
  value						; ignored for now
  `(local-declare ((sys:function-parent ,name defcomplex))
     (record-source-file-name ',name 'defcomplex)
     (defmacro ,name (&rest args)
       (complex-expand ',internal-name ',args args))))

(defun complex-expand (name arg-pattern args-supplied)
  "internal"
;  (unless (= (length arg-pattern) (length args-supplied))
;    (ferror "Wrong number of args to ~S" name))
  (let* ((spread-flag nil)
	 (args (loop for arg in args-supplied
		     for arg-type in arg-pattern append
		     (selectq arg-type
		       (:complex
			(let ((values (get-complex-pair arg)))
			  (cond (values
				 `(,(first values) 1 ,(second values) 1))
				((symbolp arg)
				 (ferror "Argument must be a double constant or variable: ~S"
					 arg))
				(t
				 (setq spread-flag t)
				 `(,arg 2)))))
		       (otherwise
			`(,arg 1))))))
    (if (or (not spread-flag) (and (listp name) (eq (first name) 'lambda)))
	`(,name . ,(loop for arg in args by 'cddr
		       collect arg))
	`(%multiple-value-call-n ,name . ,args))))

(defsubst %single-floating-abs (single-float)
  (%flonum (ldb %%single-except-sign (%fixnum single-float))))
