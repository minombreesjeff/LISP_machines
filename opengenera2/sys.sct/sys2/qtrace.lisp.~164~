; -*- Base: 8; Package: System-internals; Mode: Lisp -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

; Trace package

;	"There is always a place for debugging.  No matter how
;	 hard you try to think of everything in advance, you
;	 will always find that there is something else that you
;	 hadn't thought of."
;			- My Life as a Mathematician
;			  by Hfpsh Dboups

;MISSING:
;	 - HAIRY DISPLAY FEATURES?
;	 - "TRACE-EDSUB"

;Non-nil to cause the traced definitions to be compiled.
;That way, PROG, COND, etc. can be traced.
(DEFVAR TRACE-COMPILE-FLAG NIL)



;List of all traced functions.
(DEFVAR TRACED-FUNCTIONS NIL)

;This is T if we are doing trace processing
;and therefore tracing should be turned off.
(DEFVAR-RESETTABLE INSIDE-TRACE NIL)

;This is the total depth within all traced functions.
;It controls the indentation of the printout.
(DEFVAR-RESETTABLE TRACE-LEVEL 0)

;This is the stream to use for trace output.
;(Under it's CL name, because that's the official home.)
(DEFVAR CL:*TRACE-OUTPUT*)


(DEFF TRACE-APPLY #'APPLY)

(DEFF TRACE-STEP-APPLY 'STEP-APPLY)

(DEFMACRO TRACE (&REST SPECS)
  (IF (NULL SPECS)
      'TRACED-FUNCTIONS
      `(APPEND ,@(MAPCAR #'(LAMBDA (SPEC) `(TRACE-1 ',SPEC))
			 SPECS))))

;;;
;;;        Differs from CL:TRACE in that it calls ANSI-CL-TRACE-1
;;;
(DEFMACRO FUTURE-COMMON-LISP:TRACE (&REST SPECS)
  (IF (NULL SPECS)
      'TRACED-FUNCTIONS
      `(APPEND ,@(MAPCAR #'(LAMBDA (SPEC) `(ANSI-CL-TRACE-1 ',SPEC))
			 SPECS))))

(DEFMACRO UNTRACE (&REST SPECS)
  (IF (NULL SPECS)
      '(MAPCAR #'UNTRACE-1 TRACED-FUNCTIONS)
      `(LIST ,@(MAPCAR #'(LAMBDA (SPEC) `(UNTRACE-1 ',SPEC))
		       SPECS))))

(DEFMACRO FUTURE-COMMON-LISP:UNTRACE (&REST SPECS)
  (IF (NULL SPECS)
      '(MAPCAR #'ANSI-CL-UNTRACE-1 TRACED-FUNCTIONS)
      `(LIST ,@(MAPCAR #'(LAMBDA (SPEC) `(ANSI-CL-UNTRACE-1 ',SPEC))
		       SPECS))))

;;; Put it in the system menu
(TV:ADD-TO-SYSTEM-MENU-PROGRAMS-COLUMN
  "Trace" '(TV:TRACE-VIA-MENUS) "Trace a function.  Options selected from menu.")

(DEFUN (TRACE ENCAPSULATION-GRIND-FUNCTION) (FUNCTION DEF WIDTH REAL-IO UNTYO-P)
  FUNCTION DEF WIDTH REAL-IO UNTYO-P
  (PRINC "
;Traced
"))

;;; A list in the args to UNTRACE is taken as a non-atomic function-name
;;; rather than a wherein-spec, as Maclisp would do, since UNTRACE WHEREIN
;;; is not implemented anyway, and since WHEREIN doesn't work that way in
;;; this TRACE anyway (that is, it still modifies the function cell.)
(DEFUN UNTRACE-1 (SPEC)
  (LET* ((SPEC1 (UNENCAPSULATE-FUNCTION-SPEC SPEC 'TRACE))
	 (SPEC2 (UNENCAPSULATE-FUNCTION-SPEC SPEC1 '(TRACE))))
    (COND ((NEQ SPEC1 SPEC2)
	   (LET ((FDEFINE-FILE-PATHNAME NIL))
	     (FDEFINE SPEC1 (FDEFINITION SPEC2) NIL T))
	   (SETQ TRACED-FUNCTIONS (DELETE SPEC TRACED-FUNCTIONS)))
	  ((NULL (VALID-FUNCTION-DEFINITION SPEC))
	   ;; If this is not a valid function definition, but it lives
	   ;; on TRACED-FUNCTIONS, remove it (this can happen when an
	   ;; internal function is traced, then the parent function is
	   ;; recompiled with the internal function removed)
	   (SETQ TRACED-FUNCTIONS (DELETE SPEC TRACED-FUNCTIONS)))))
  SPEC)

(DEFUN ANSI-CL-UNTRACE-1 (SPEC)
  (VALIDATE-FUNCTION-SPEC SPEC)
  (UNTRACE-1 SPEC))

(DEFVAR *PER-PROCESS*)				;Passed through to TRACE-MAYBE-CONDITIONALIZE.

;For now, ARGLIST and VALUES are bound as specials, not lexicals
(DEFUN TRACE-1 (SPEC)
  (PROG (BREAK EXITBREAK ENTRYCOND EXITCOND WHEREIN ARGPDL ENTRY EXIT (ARG T) (VALUE T) 
	 STEP (BARFP T) (FDEFINE-FILE-PATHNAME NIL)
	 ENTRYVALS EXITVALS MUMBLE FCN SPEC1 TRFCN ERROR *PER-PROCESS*
	 (DEFAULT-CONS-AREA BACKGROUND-CONS-AREA))
	(COND ((ATOM SPEC)
	       (SETQ FCN SPEC))
	      (T
	       (COND ((MEMQ (CAR SPEC) '(FUNCTION :FUNCTION))
		      (SETQ FCN (CADR SPEC) SPEC (CDR SPEC)))
		     ((ATOM (CAR SPEC))
		      (SETQ FCN (CAR SPEC)))
		     (T (RETURN (LOOP FOR FCN IN (CAR SPEC)
				      NCONC (TRACE-1 `(:FUNCTION ,FCN . ,(CDR SPEC)))))))
	       (DO SPECS (CDR SPEC) (CDR SPECS) (NULL SPECS)
		   (SELECTQ (CAR SPECS)
		     (:BREAK (SETQ BARFP SPECS SPECS (CDR SPECS) BREAK (CAR SPECS)))
		     (:EXITBREAK (SETQ BARFP SPECS SPECS (CDR SPECS) EXITBREAK (CAR SPECS)))
		     (:STEP (SETQ STEP T))
		     (:ERROR (SETQ ERROR T))
		     (:COND (SETQ BARFP SPECS SPECS (CDR SPECS))
		      (SETQ EXITCOND (SETQ ENTRYCOND (CAR SPECS))))
		     (:ENTRYCOND (SETQ BARFP SPECS SPECS (CDR SPECS) ENTRYCOND (CAR SPECS)))
		     (:EXITCOND (SETQ BARFP SPECS SPECS (CDR SPECS) EXITCOND (CAR SPECS)))
		     (:WHEREIN (SETQ BARFP SPECS SPECS (CDR SPECS) WHEREIN (CAR SPECS)))
		     (:ARGPDL (SETQ BARFP SPECS SPECS (CDR SPECS) ARGPDL (CAR SPECS)))
		     (:ENTRY (SETQ BARFP SPECS SPECS (CDR SPECS) ENTRY (CAR SPECS)))
		     (:EXIT (SETQ BARFP SPECS SPECS (CDR SPECS) EXIT (CAR SPECS)))
		     (:PRINT (SETQ BARFP SPECS
				   SPECS (CDR SPECS)
				   ENTRY (CONS (CAR SPECS) ENTRY)
				   EXIT (CONS (CAR SPECS) EXIT)))
		     (:ENTRYPRINT (SETQ BARFP SPECS SPECS (CDR SPECS)
					ENTRY (CONS (CAR SPECS) ENTRY)))
		     (:EXITPRINT (SETQ BARFP SPECS SPECS (CDR SPECS) EXIT (CONS (CAR SPECS) EXIT)))
		     (:PER-PROCESS (SETQ BARFP SPECS SPECS (CDR SPECS)
					 *PER-PROCESS* (EVAL (CAR SPECS))))
		     ((:ARG :VALUE :BOTH NIL)
		      (AND (EQ (CAR SPECS) ':ARG) (SETQ VALUE NIL))
		      (AND (EQ (CAR SPECS) ':VALUE) (SETQ ARG NIL))
		      (AND (EQ (CAR SPECS) NIL) (SETQ ARG NIL VALUE NIL))
		      (AND ARG (SETQ ENTRYVALS (CDR SPECS)))
		      (AND VALUE (SETQ EXITVALS (CDR SPECS)))
		      (RETURN NIL))
		     (OTHERWISE
		      (SETQ MUMBLE (CAR SPECS))
		      (RETURN NIL)))
		   (AND (NULL BARFP) (FERROR NIL "Parameter missing")) )))
	(SETQ FCN (GET-DEFINED-FUNCTION-SPEC FCN))
	(LET ((FORBIDDEN-CATEGORY-DESCRIPTION
		(SELECTQ (VALIDATE-FUNCTION-SPEC FCN)
		  (:INTERNAL "internal functions")
		  (CLOS:METHOD "CLOS methods")
		  (OTHERWISE NIL))))
	  (WHEN FORBIDDEN-CATEGORY-DESCRIPTION
	    (ERROR "Tracing ~A is not currently supported."
		   FORBIDDEN-CATEGORY-DESCRIPTION)))
	(UNTRACE-1 FCN)
	(AND MUMBLE (RETURN (FERROR NIL "Meaningless TRACE keyword: ~S" MUMBLE)))
	(CHECK-ARG ARGPDL SYMBOLP "a symbol")
	(SETQ SPEC1 (UNENCAPSULATE-FUNCTION-SPEC FCN 'TRACE))

	(SETQ TRFCN
	      (ENCAPSULATE
		SPEC1 FCN 'TRACE
		`(PROG*
		   (,@(AND ARGPDL `((,ARGPDL (CONS (LIST (1+ ,COPY) ',FCN ARGLIST)
						   ,ARGPDL))))
		    VALUES
		    (,COPY (1+ ,COPY))
		    (TRACE-LEVEL (1+ TRACE-LEVEL)))
		   ;; End of PROG var list.
		   (DECLARE (SPECIAL ,COPY VALUES))
		   ,(IF ERROR
			`(COND ((OR INSIDE-TRACE
				    . ,(AND WHEREIN
					    `((NOT (FUNCTION-ACTIVE-P ',WHEREIN)))))
				(RETURN-LIST
				  (MULTIPLE-VALUE-LIST
				    (APPLY ,ENCAPSULATED-FUNCTION ARGLIST))))
			       (T (LET ((INSIDE-TRACE T))
				    (TRACE-ENTER-DEBUGGER ',FCN))
				  (RETURN (APPLY ,ENCAPSULATED-FUNCTION ARGLIST))))
			`(COND
			   ((OR INSIDE-TRACE
				. ,(AND WHEREIN
					`((NOT (FUNCTION-ACTIVE-P ',WHEREIN)))))
			    (RETURN-LIST
			      (MULTIPLE-VALUE-LIST
				(APPLY ,ENCAPSULATED-FUNCTION ARGLIST))))
			   (T (LET ((INSIDE-TRACE T))
				,(TRACE-MAYBE-CONDITIONALIZE
				   ENTRYCOND
				   `(TRACE-PRINT
				      ,COPY 'ENTER ',FCN ',ARG ',ENTRY ',ENTRYVALS))
				,@(AND BREAK `((AND ,BREAK (LET (INSIDE-TRACE)
							     (BREAK ,FCN T)))))
				(SETQ VALUES
				      (LET ((INSIDE-TRACE NIL))
					(MULTIPLE-VALUE-LIST
					  (,(COND ((NOT STEP) 'TRACE-APPLY)
						  (T 'TRACE-STEP-APPLY))
					   ,ENCAPSULATED-FUNCTION
					   ARGLIST))))
				,(TRACE-MAYBE-CONDITIONALIZE
				   EXITCOND
				   `(TRACE-PRINT
				      ,COPY 'EXIT ',FCN ',VALUE ',EXIT ',EXITVALS))
				,@(AND EXITBREAK `((AND ,EXITBREAK
							(LET (INSIDE-TRACE)
							  (BREAK ,FCN T)))))
				(RETURN-LIST VALUES))))))))
	(SET TRFCN 0)
	(PUSH FCN TRACED-FUNCTIONS)
	(IF TRACE-COMPILE-FLAG (LET ((LOCAL-DECLARATIONS
				       (CONS `(SPECIAL ,TRFCN VALUES ARGLIST)
					     LOCAL-DECLARATIONS)))
				 (COMPILE SPEC1
					  (PROG1
					    (FDEFINITION SPEC1)
					    (FMAKUNBOUND SPEC1)))))
	(RETURN (NCONS FCN))))


;;; This is the supporting function for ANSI CL TRACE macro.
(DEFUN ANSI-CL-TRACE-1 (SPEC)
  (PROG (FCN SPEC1 TRFCN
	 ;;        These are special variables.
	 (FDEFINE-FILE-PATHNAME NIL) *PER-PROCESS* (DEFAULT-CONS-AREA BACKGROUND-CONS-AREA))
    (WHEN (VALIDATE-FUNCTION-SPEC SPEC)
      (SETQ FCN SPEC))
    (SETQ FCN (GET-DEFINED-FUNCTION-SPEC FCN))
    (UNTRACE-1 FCN)
    (SETQ SPEC1 (UNENCAPSULATE-FUNCTION-SPEC FCN 'TRACE))
    (SETQ TRFCN (ENCAPSULATE SPEC1 FCN 'TRACE
      `(PROG* (VALUES
	       (,COPY (1+ ,COPY))
	       (TRACE-LEVEL (1+ TRACE-LEVEL)))
	      ;; End of PROG var list.
	      (DECLARE (SPECIAL ,COPY VALUES))
	      (COND (INSIDE-TRACE
		     (RETURN-LIST (MULTIPLE-VALUE-LIST
				    (APPLY ,ENCAPSULATED-FUNCTION ARGLIST))))
		    (T (LET ((INSIDE-TRACE T))
			 (TRACE-PRINT ,COPY 'ENTER ',FCN 'T 'NIL 'NIL)
			 (SETQ VALUES
			       (LET ((INSIDE-TRACE NIL))
				 (MULTIPLE-VALUE-LIST
				   (TRACE-APPLY
				     ,ENCAPSULATED-FUNCTION
				     ARGLIST))))
			 (TRACE-PRINT ,COPY 'EXIT ',FCN 'T 'NIL 'NIL)
			 (RETURN-LIST VALUES)))))))
    (SET TRFCN 0)
    (PUSH FCN TRACED-FUNCTIONS)
    (IF TRACE-COMPILE-FLAG (LET ((LOCAL-DECLARATIONS
				   (CONS `(SPECIAL ,TRFCN VALUES ARGLIST)
					 LOCAL-DECLARATIONS)))
			     (COMPILE SPEC1
				      (PROG1
					(FDEFINITION SPEC1)
					(FMAKUNBOUND SPEC1)))))
    (RETURN (NCONS FCN))))

(DEFUN TRACE-MAYBE-CONDITIONALIZE (CONDITION ACTION)
  (COND ((AND CONDITION *PER-PROCESS*)
	 `(AND ,CONDITION (EQ SI:CURRENT-PROCESS ',*PER-PROCESS*) ,ACTION))
	(*PER-PROCESS*
	 `(AND (EQ SI:CURRENT-PROCESS ',*PER-PROCESS*) ,ACTION))
	(CONDITION
	  `(AND ,CONDITION ,ACTION))
	(T ACTION)))

(DEFVAR *TRACE-COLUMNS-PER-LEVEL* 2 "Number of columns of indentation per level of call.")
(DEFVAR *TRACE-BAR-P* T "T means include vertical bars; NIL means omit them.")
(DEFVAR *TRACE-BAR-RATE* 2 "Put in bars every N columns; this specifies N.")
(DEFVAR *TRACE-OLD-STYLE* NIL "Use the old-style, Maclisp-compatible output format.")

(DEFPROP ENTER "Enter" PRETTY-NAME)
(DEFPROP EXIT "Exit" PRETTY-NAME)

(DEFUN TRACE-PRINT (DEPTH DIRECTION FUNCTION PRINT-ARGS-FLAG EXTRAS-1 EXTRAS-2)
  (DECLARE (SPECIAL ARGLIST VALUES))
  (let ((scl:*print-readably* nil)
	(cl:*print-escape* t))
    (FLET ((INDENT (STREAM)
	     (LOOP FOR N FROM 1 BELOW TRACE-LEVEL DO
	       (TYO (IF (AND *TRACE-BAR-P*
			     (NOT *TRACE-OLD-STYLE*)
			     (OR (= *TRACE-BAR-RATE* 1) (= (\ N *TRACE-BAR-RATE*) 1)))
			#/|
			#\SP)
		    STREAM)
	       (WHEN (AND (> *TRACE-COLUMNS-PER-LEVEL* 1) ( N TRACE-LEVEL))
		 (LOOP REPEAT (1- *TRACE-COLUMNS-PER-LEVEL*) DO (TYO #\SP STREAM))))))
      (SCL:INDENTING-OUTPUT (TRACE-OUTPUT #'INDENT)
	(TERPRI TRACE-OUTPUT)
	(IF *TRACE-OLD-STYLE*
	    (FORMAT TRACE-OUTPUT "(~D ~A ~S" DEPTH DIRECTION FUNCTION)
	    (FORMAT TRACE-OUTPUT "~D ~A ~S"
		    DEPTH (OR (GET DIRECTION 'PRETTY-NAME) DIRECTION) FUNCTION))
	(COND (PRINT-ARGS-FLAG
	       (COND ((EQ DIRECTION 'ENTER)
		      (IF *TRACE-OLD-STYLE*
			  (FORMAT TRACE-OUTPUT " ~A" ARGLIST)
			  (FORMAT TRACE-OUTPUT "~{ ~S~}" ARGLIST)))
		     ((CDR VALUES)
		      (IF *TRACE-OLD-STYLE*
			  (FORMAT TRACE-OUTPUT " VALUES: ~S" VALUES)
			  (FORMAT TRACE-OUTPUT " Values:~{ ~S~}" VALUES)))
		     (T
		      (IF *TRACE-OLD-STYLE*
			  (FORMAT TRACE-OUTPUT " ~A" (CAR VALUES))
			  (FORMAT TRACE-OUTPUT " ~S" (CAR VALUES)))))))
	(COND (EXTRAS-1
	       (PRINC "  \\" TRACE-OUTPUT)
	       (DOLIST (E EXTRAS-1)
		 (PRINC " " TRACE-OUTPUT)
		 (PRIN1 (EVAL E) TRACE-OUTPUT))))
	(COND (EXTRAS-2
	       (PRINC "  ////" TRACE-OUTPUT)
	       (DOLIST (E EXTRAS-2)
		 (PRINC " " TRACE-OUTPUT)
		 (PRIN1 (EVAL E) TRACE-OUTPUT))))
	(WHEN *TRACE-OLD-STYLE*
	  (PRINC ")" TRACE-OUTPUT))))))

;; Debugger interface for TRACE ERROR.
;; This doesn't work by signalling a condition, because it doesn't want to be caught
;; by any condition handlers.

(DEFFLAVOR TRACE-CONDITION (FUNCTION) (DBG:NO-ACTION-MIXIN CONDITION)
  :INITABLE-INSTANCE-VARIABLES
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (DBG:CONDITION-TYPE TRACE-CONDITION) () "TRACE Break")

(DEFMETHOD (:REPORT TRACE-CONDITION) (STREAM)
  (FORMAT STREAM "~S entered." FUNCTION))

(COMPILE-FLAVOR-METHODS TRACE-CONDITION)

(DEFPROP TRACE-ENTER-DEBUGGER T :ERROR-REPORTER)
(DEFUN TRACE-ENTER-DEBUGGER (FUNCTION)
  (DBG:ENTER-DEBUGGER (MAKE-CONDITION 'TRACE-CONDITION ':FUNCTION FUNCTION)))
