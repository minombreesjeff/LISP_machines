;;; -*- Mode: LISP; Syntax: Zetalisp; Package: SI; Base: 10 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; separate because timer-queue is loaded too early.  

(define-presentation-type timer-queue-entry ()
   :description "timer queue entry"
   :no-deftype t
   :parser ((stream)
	    (let ((id
		    (dw:with-accept-help ((:subhelp
					    #'(lambda (stream ignore)
						(format stream "~2&Timer queue entries:~%")
						(print-timer-queue-brief-table stream))))
		      (scl:accept '((cl:integer 0 *)) :prompt nil :stream stream))))
	      (let ((entry
		      (and (variable-boundp *timer-queue*)
			   (send *timer-queue* :find-by-item id
				 #'(lambda (id item)
				     (= id (timer-queue-id item)))
				 t))))
		(unless entry
		  (cp::cp-error t "~D is not a valid timer queue entry ID." id))
		(values entry 'timer-queue-entry))))
   :printer ((entry stream)
	     (format stream "~D" (timer-queue-id entry)))
   )

(defun print-timer-queue-brief-table (stream)
  (terpri stream)
  (cond ((or (not (variable-boundp *timer-queue*))
	     (send *timer-queue* :empty-p))
	 (format stream "The timer queue is empty."))
	(t
	 (scl:formatting-table (stream)
	   (scl:formatting-column-headings (stream :underline-p t)
	     (scl:formatting-cell (stream) "ID")
	     (scl:formatting-cell (stream) "Name"))
	   (loop for entry being the heap-elements of *timer-queue*
		 do (multiple-value-bind (name id expires repeat func prf nil)
			(get-timer-queue-data entry)
		      (ignore expires repeat func prf)
		      (dw:with-output-as-presentation (:stream stream
						       :single-box t
						       :object entry
						       :type 'timer-queue-entry)
			
			(scl:formatting-row (stream)
			  (scl:formatting-cell (stream)
			    (format stream "~D" id))
			  (scl:formatting-cell (stream)
			    (format stream "~A" name))))))))))

(defun print-timer-queue (&optional (stream standard-output))
  (cond ((or (not (variable-boundp *timer-queue*))
	     (send *timer-queue* :empty-p))
	 (format stream "~&The timer queue is empty."))
	(t
	 (loop for entry being the heap-elements of *timer-queue*
	       do (multiple-value-bind (name id expires repeat func prf nil)
		      (get-timer-queue-data entry)
		    (dw:with-output-as-presentation (:stream stream
						     :object entry
						     :type 'timer-queue-entry)
		      (format stream
			      "~&The timer ~S (id ~D) will " name id)
		      (if (null expires)
			  (format stream "never expire.")
			  (format stream "call ~S ~@[via ~S ~] ~
                                      ~%  when it next expires at ~A (repeat spec is '~S)."
				  (function-name func) (if prf (function-name prf))
				  (time:print-universal-time expires nil)
				  repeat))))))))

(cp:define-command (com-show-timer-queue :command-table "Timer Queue")
    ()
   (print-timer-queue))

(cp:define-command (com-delete-timer-queue-entry
		     :command-table "Timer Queue"
		     :provide-output-destination-keyword nil)
    ((entry 'timer-queue-entry)
     &key
     (confirm '(token-or-type (:mouse) boolean)
	      :default nil
	      :mentioned-default t
	      :documentation
	      "Request confirmation before deleting the entry"))
  (when (cond ((eq confirm t)
	       (cl:yes-or-no-p "Delete timer-queue entry ~A" entry))
	      ((eq confirm :mouse)
	       (tv:mouse-y-or-n-p (format nil "Delete timer-queue entry ~A" entry)))
	      (t t))
    (remove-timer-queue-entry (timer-queue-id entry))))

(scl:define-presentation-to-command-translator delete-timer-queue-entry
   (timer-queue-entry
     :gesture :delete)
   (entry)
  `(com-delete-timer-queue-entry ,entry :confirm :mouse))

