;;; -*- Mode: LISP; Package: SYSTEM-INTERNALS; Lowercase: T; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; A rational with a denominator of 1 is normalized to an integer,
;;; now that we have RATIONAL-QUOTIENT (aka CL:/)
#+IMACH
(defun rational-numerator (rational)
  (if (type-member rational dtp-small-ratio)
      (small-ratio-numerator rational)
      (big-ratio-numerator rational)))

#+IMACH
(defun rational-denominator (rational)
  (if (type-member rational dtp-small-ratio)
      (small-ratio-denominator rational)
      (big-ratio-denominator rational)))

(defun-handler normalized-rational (numerator denominator) 1 nil
  (declare (dbg:error-reporter)
	   (safeguarded-function disable-reference-validation))
  (check-arg-type numerator :fix)
  (check-arg-type denominator :fix)
  (cond ((zerop denominator)
	 (signal 'sys:divide-by-zero
		 :function '*rational-quotient
		 :operands `(,numerator ,denominator)))
	(t
	 (when (minusp denominator)
	   (setq denominator (- denominator))
	   (setq numerator (- numerator)))
	 (multiple-value-bind (quotient remainder)
	     (floor numerator denominator)
	   ;; n/d = q+r/d
	   (if (zerop remainder)
	       quotient
	       ;; the division above would be the first step in the gcd, anyway
	       (let ((gcd (gcd denominator remainder)))
		 (if (eql gcd 1)
		     (%make-rational numerator denominator)
		     (let ((reduced-denominator (// denominator gcd)))
		       ;; ... = (q*d/g+r/g)/(d/g)
		       (%make-rational (+ (* quotient reduced-denominator)
					  (// remainder gcd))
				       reduced-denominator)))))))))

#+3600
(cl:proclaim '(cl:inline rationalp))
#+3600
(defun rationalp (object)
  (declare lt:(side-effects simple reducible))
  (and (= (%data-type object) dtp-extended-number)
       (let ((header-loc (%p-structure-offset object 0)))
	 (and (= (%p-ldb %%header-type-field header-loc) %header-type-number)
	      (= (%p-ldb %%header-subtype-field header-loc) %header-type-rational)))))
#+3600
(cl:proclaim '(cl:notinline rationalp))

#+IMACH
(defun rationalp (object)
  (declare lt:(side-effects simple reducible))
  (type-member object dtp-small-ratio dtp-big-ratio))

(defun numerator (rational)
  (declare lt:(side-effects simple reducible))
  (declare (cl:inline rationalp))
  (argument-typecase rational
    (:fix rational)
    #+imach
    (:small-ratio (small-ratio-numerator rational))
    #+imach
    (:big-ratio (big-ratio-numerator rational))
    #+3600
    (:rational (rational-numerator rational))))

(defun denominator (rational)
  (declare lt:(side-effects simple reducible))
  (declare (cl:inline rationalp))
  (argument-typecase rational
    (:fix 1)
    #+imach
    (:small-ratio (small-ratio-denominator rational))
    #+imach
    (:big-ratio (big-ratio-denominator rational))
    #+3600
    (:rational (rational-denominator rational))))

(defun rational (number)
  (declare lt:(side-effects simple reducible))
  (argument-typecase number
    (:rational number)
    (:fix number)
    ;; These all should probably be exact-rational, but the simpler form
    ;;   is what was here
    (:float (rationalize number))))

(defun exact-rational (number)
  (declare lt:(side-effects simple reducible))
  ;; assumes that number is exact, and returns the rational equivalent
  ;; this is the Common Lisp function RATIONAL
  (argument-typecase number
    (:float
     (multiple-value-bind (integer exponent sign)
	 (integer-decode-float number)
       (when (minusp sign)
	 (setq integer (- integer)))
       (if (minusp exponent)
	   (normalized-rational integer (ash 1 (- exponent)))
	   (ash integer exponent))))
    ((:fix :rational) number)
;    this can't be right, since the result of exact-rational ought to be rationalp
;    (:complex (complex (exact-rational (realpart number)) (exact-rational (imagpart number))))
    ))

(defun rationalize (number)
  (declare lt:(side-effects simple reducible))
  ;; returns the rational number of least denominator
  ;;   for which (= number (FLOAT (RATIONALIZE number) number)
  (multiple-value-bind (integer exponent sign)
      (integer-decode-float number)
    (if (minusp exponent)
	(let ((num (ash integer 2))
	      (den (ash 1 (- 2 exponent)))
	      (less (if (evenp integer) #' #'<)))
	  (multiple-value-bind (n d)
	      (simple-rational (- num (if (zerop (logand integer (1- integer))) 1 2))
			       den less less (+ num 2) den)
	    (when (minusp sign)
	      (setq n (- n)))
	    (%make-rational n d)))
      (ash (if (minusp number) (- integer) integer) exponent))))

(defun simplest-rational (low high &optional low-closed high-closed)
  ;; Returns the rational number of least denominator in the interval (low, high)
  ;; Low-closed includes the low value in the interval.  Similarly for high-closed.
  (cond ((> low high) nil)
	((= low high) (if (and low-closed high-closed)
			  low nil))
	((minusp low)
	 (if (minusp high)
	     (- (simplest-rational (- high) (- low) high-closed low-closed))
	     0))
	(t
	 (multiple-value-bind (num den)
	     (simple-rational (numerator low) (denominator low)
			      (if low-closed #' #'<) (if high-closed #' #'<)
			      (numerator high) (denominator high))
	   (%make-rational num den)))))

;;; courtesy of RWG
(defun simple-rational (lonum loden loless hiless hinum hiden
			&optional (lotrunc (simplerat-lesstrunc loless))
			          (hitrunc (simplerat-lesstrunc hiless))
		  &aux (term (funcall lotrunc lonum loden)))
  (if (funcall hiless (* term hiden) hinum)
      (values term 1)
    (multiple-value-bind (num den)
	(simple-rational hiden (- hinum (* (1- term) hiden)) hiless
			 loless loden (- lonum (* (1- term) loden))
			 hitrunc lotrunc)
      (values (+ den (* (1- term) num)) num))))

(defun simplerat-lesstrunc (pred)
  (cond ((eq pred #') #'(lambda (n d) (ceiling n d)))
	((eq pred #'<) #'(lambda (n d) (1+ (floor n d))))))

(defnumop zerop ((number ratio))
  (declare (ignore number))
  ;; it should have been canonicalized to a fixnum 0
  nil)

#+3600
(defnumop abs ((number ratio))
  (let ((num (rational-numerator number)))
    (if (minusp num)
	(%make-rational (abs num) (rational-denominator number))
	number)))

(defnumop - ((number ratio))
  (let ((num (rational-numerator number))
	(den (rational-denominator number)))
    (%make-rational (- num) den)))

(defnumop plusp ((number ratio))
  (plusp (rational-numerator number)))

(defnumop minusp ((number ratio))
  (minusp (rational-numerator number)))

#+3600
(defnumop fix ((r ratio))
  (values (floor (rational-numerator r) (rational-denominator r))))

#+3600
(defnumop float ((number ratio))
  (let* ((numerator (rational-numerator number))
	 (abs-numerator (abs numerator))
	 (denominator (rational-denominator number))
	 (shift-factor (+ (- (haulong denominator) (haulong abs-numerator))
			  27.))	;<significant digits>+G+R+S
	 (quotient (logior (// (ash abs-numerator shift-factor) denominator) 1)))
    ;; We want to set the sticky bit if either we shifted ones from the end of
    ;; the numerator, or the remainder is non-zero.  Fortunately, the rational
    ;; came in normalized, so if we didn't lose any ones, the remainder must be
    ;; non-zero.  So we always set the sticky bit.

    ;; The FLOAT will do correct rounding, and the ASH will check the range
    (ash (float (if (minusp numerator) (- quotient) quotient)) (- shift-factor))))

#+IMACH
(defun float-rational (number)
  (let* ((numerator (rational-numerator number))
	 (abs-numerator (abs numerator))
	 (denominator (rational-denominator number))
	 (shift-factor (+ (- (haulong denominator) (haulong abs-numerator))
			  27.))	;<significant digits>+G+R+S
	 (quotient (logior (// (ash abs-numerator shift-factor) denominator) 1)))
    ;; We want to set the sticky bit if either we shifted ones from the end of
    ;; the numerator, or the remainder is non-zero.  Fortunately, the rational
    ;; came in normalized, so if we didn't lose any ones, the remainder must be
    ;; non-zero.  So we always set the sticky bit.

    ;; The FLOAT will do correct rounding, and the ASH will check the range
    (ash (float (if (minusp numerator) (- quotient) quotient)) (- shift-factor))))

(defun decode-float-of-rational (rational)
  ;; like (DECODE-FLOAT (FLOAT rational)), but won't overflow or underflow
  (declare (values fraction exponent sign))
  (let* ((numerator (rational-numerator rational))
	 (abs-numerator (abs numerator))
	 (denominator (rational-denominator rational))
	 (shift-factor (+ (- (haulong denominator) (haulong abs-numerator))
			  27.))	;<significant digits>+G+R+S
	 (quotient (logior (// (ash abs-numerator shift-factor) denominator) 1)))
    ;; We want to set the sticky bit if either we shifted ones from the end of
    ;; the numerator, or the remainder is non-zero.  Fortunately, the rational
    ;; came in normalized, so if we didn't lose any ones, the remainder must be
    ;; non-zero.  So we always set the sticky bit.

    (multiple-value-bind (fraction exponent sign)
	(decode-float (float (if (minusp numerator) (- quotient) quotient)))
      (values fraction (- exponent shift-factor) sign))))

(defmacro defratfloatbinop (operation)
  `(progn 'compile
	  (defnumop ,operation ((x float) (y ratio))
	    (,operation x (float y)))
	  (defnumop ,operation ((x ratio) (y double))
	    (,operation (dfloat x) y))
	  ,@(unless (defnumop-binary-converse-is-identical operation)
	      `((defnumop ,operation ((x ratio) (y float))
		  (,operation (float x) y))
		(defnumop ,operation ((x double) (y ratio))
		  (,operation x (dfloat y)))))))

(defmacro defratbinop (function operation args &body body)
  (let ((extra-args (and (= (length args) 6) '(x y))))
    `(progn 'compile
       (defun ,function ,args
	 . ,body)
       (defnumop ,operation ((x ratio) (y ratio))
	 (,function (rational-numerator x) (rational-denominator x)
		    (rational-numerator y) (rational-denominator y) ,@extra-args))
       (defnumop ,operation ((x fixnum) (y ratio))
	 (,function x 1 (rational-numerator y) (rational-denominator y) ,@extra-args))
       (defnumop ,operation ((x bignum) (y ratio))
	 (,function x 1 (rational-numerator y) (rational-denominator y) ,@extra-args))
       ,@(unless (defnumop-binary-converse-is-identical operation)
	   `((defnumop ,operation ((x ratio) (y fixnum))
	       (,function (rational-numerator x) (rational-denominator x) y 1 ,@extra-args))
	     (defnumop ,operation ((x ratio) (y bignum))
	       (,function (rational-numerator x) (rational-denominator x) y 1 ,@extra-args))))
       (defratfloatbinop ,operation))))
    
(defnumop + ((x ratio) (y ratio))
  (let ((num1 (rational-numerator x))
	(den1 (rational-denominator x))
	(num2 (rational-numerator y))
	(den2 (rational-denominator y)))
    ;;; follow Knuth Vol. II way of doing gcd's before the add.
    (let ((gcd1 (\\ den1 den2)))
      (if (= gcd1 1)
	  (%make-rational (+ (* num1 den2) (* num2 den1))
			  (* den1 den2))
	  (let* ((den1r (// den1 gcd1))
		 (den2r (// den2 gcd1))
		 (tem (+ (* num1 den2r) (* num2 den1r)))
		 (gcd2 (\\ tem gcd1)))
	    (%make-rational (// tem gcd2)
			    (* den1r (// den2 gcd2))))))))

(defnumop + ((x fixnum) (y ratio))
  (selector x =
    (0 y)
    (otherwise
      (let ((num2 (rational-numerator y))
	    (den2 (rational-denominator y)))
	(%make-rational (+ (* x den2) num2)
			den2)))))

(defnumop + ((x bignum) (y ratio))
  (let ((num2 (rational-numerator y))
	(den2 (rational-denominator y)))
    (%make-rational (+ (* x den2) num2)
		    den2)))

(defratfloatbinop +)

(defnumop - ((x ratio) (y ratio))
  (let ((num1 (rational-numerator x))
	(den1 (rational-denominator x))
	(num2 (rational-numerator y))
	(den2 (rational-denominator y)))
    ;;; follow Knuth Vol. II way of doing gcd's before the sub.
    (let ((gcd1 (\\ den1 den2)))
      (if (= gcd1 1)
	  (%make-rational (- (* num1 den2) (* num2 den1))
			  (* den1 den2))
	  (let* ((den1r (// den1 gcd1))
		 (den2r (// den2 gcd1))
		 (tem (- (* num1 den2r) (* num2 den1r)))
		 (gcd2 (\\ tem gcd1)))
	    (%make-rational (// tem gcd2)
			    (* den1r (// den2 gcd2))))))))

(defnumop - ((x fixnum) (y ratio))
  (selector x =
    (0 (%make-rational (- (rational-numerator y)) (rational-denominator y)))
    (otherwise
      (let ((num2 (rational-numerator y))
	    (den2 (rational-denominator y)))
	(%make-rational (- (* x den2) num2)
			den2)))))

(defnumop - ((x ratio) (y fixnum))
  (selector x =
    (0 x)
    (otherwise
      (let ((num1 (rational-numerator x))
	    (den1 (rational-denominator x)))
	(%make-rational (- num1 (* y den1))
			den1)))))

(defnumop - ((x bignum) (y ratio))
  (let ((num2 (rational-numerator y))
	(den2 (rational-denominator y)))
    (%make-rational (- (* x den2) num2)
		    den2)))

(defnumop - ((x ratio) (y bignum))
  (let ((num1 (rational-numerator x))
	(den1 (rational-denominator x)))
    (%make-rational (- num1 (* y den1))
		    den1)))

(defratfloatbinop -)

(defnumop * ((x ratio) (y ratio))
  (let ((num1 (rational-numerator x))
	(den1 (rational-denominator x))
	(num2 (rational-numerator y))
	(den2 (rational-denominator y)))
    (let ((gcd1 (\\ num1 den2))			; do cross-gcd's.
	  (gcd2 (\\ num2 den1)))
      (unless (= gcd1 1)
	(setq num1 (// num1 gcd1)
	      den2 (// den2 gcd1)))
      (unless (= gcd2 1)
	(setq num2 (// num2 gcd2)
	      den1 (// den1 gcd2)))
      (%make-rational (* num1 num2) (* den1 den2)))))

(defnumop * ((x fixnum) (y ratio))
  (selector x =
    (0 0)
    (1 y)
    (-1 (%make-rational (- (rational-numerator y)) (rational-denominator y)))
    (otherwise
      (let ((num2 (rational-numerator y))
	    (den2 (rational-denominator y)))
	(let ((gcd1 (\\ x den2)))
	  (unless (= gcd1 1)
	    (setq x (// x gcd1)
		  den2 (// den2 gcd1)))
	  (%make-rational (* x num2) den2))))))

(defnumop * ((x bignum) (y ratio))
  (let ((num2 (rational-numerator y))
	(den2 (rational-denominator y)))
    (let ((gcd1 (\\ x den2)))
      (unless (= gcd1 1)
	(setq x (// x gcd1)
	      den2 (// den2 gcd1)))
      (%make-rational (* x num2) den2))))

(defratfloatbinop *)

(defun-handler quotient-ratio-ratio (dividend divisor) 1 nil
  (declare (safeguarded-function disable-reference-validation))
  (let ((num1 (rational-numerator dividend))
	(den1 (rational-denominator dividend))
	(num2 (rational-numerator divisor))
	(den2 (rational-denominator divisor)))
    (when (minusp num2)
      (setq num1 (- num1)
	    num2 (- num2)))
    ;;; do cross-gcd's again.
    (let ((gcd1 (\\ num1 num2))
	  (gcd2 (\\ den2 den1)))
      (unless (= gcd1 1)
	(setq num1 (// num1 gcd1)
	      num2 (// num2 gcd1)))
      (unless (= gcd2 1)
	(setq den2 (// den2 gcd2)
	      den1 (// den1 gcd2)))
      (%make-rational (* num1 den2) (* num2 den1)))))

(defun-handler quotient-integer-ratio (dividend divisor) 1 nil
  (declare (safeguarded-function disable-reference-validation))
  (if (zerop dividend)
      0
      (let ((num2 (rational-numerator divisor))
	    (den2 (rational-denominator divisor)))
	(cl:case dividend
	  (1
	    (if (minusp num2)
		(%make-rational (- den2) (- num2))
		(%make-rational den2 num2)))
	  (-1
	    (if (minusp num2)
		(%make-rational den2 (- num2))
		(%make-rational (- den2) num2)))
	  (otherwise
	    (when (minusp num2)
	      (setq dividend (- dividend)
		    num2 (- num2)))
	    (let ((gcd1 (\\ dividend num2)))
	      (unless (= gcd1 1)
		(setq dividend (// dividend gcd1)
		      num2 (// num2 gcd1)))
	      (%make-rational (* dividend den2) num2)))))))

(defun-handler quotient-ratio-integer-args-backward (#+3600 divisor dividend #+imach divisor)
	       1 nil
  (declare (dbg:error-reporter)
	   (safeguarded-function disable-reference-validation))
  (if (zerop divisor)
      (signal 'sys:divide-by-zero
	      :function '*rational-quotient
	      :operands `(,divisor ,dividend))
      (cl:case divisor
	(1 dividend)
	(-1 (%make-rational (- (rational-numerator dividend))
			    (rational-denominator dividend)))
	(otherwise
	  (let ((num1 (rational-numerator dividend))
		(den1 (rational-denominator dividend)))
	    (when (minusp divisor)
	      (setq num1 (- num1)
		    divisor (- divisor)))
	    (let ((gcd1 (\\ num1 divisor)))
	      (unless (= gcd1 1)
		(setq num1 (// num1 gcd1)
		      divisor (// divisor gcd1)))
	      (%make-rational num1 (* divisor den1))))))))

(defun-handler quotient-bignum-ratio (dividend divisor) 1 nil
  (declare (safeguarded-function disable-reference-validation))
  (let ((num2 (rational-numerator divisor))
	(den2 (rational-denominator divisor)))
    (when (minusp num2)
      (setq dividend (- dividend)
	    num2 (- num2)))
    (let ((gcd1 (\\ dividend num2)))
      (unless (= gcd1 1)
	(setq dividend (// dividend gcd1)
	      num2 (// num2 gcd1)))
      (%make-rational (* dividend den2) num2))))

(defun-handler quotient-ratio-bignum-args-backward (#+3600 divisor dividend #+imach divisor)
	       1 nil
  (declare (safeguarded-function disable-reference-validation))
  (let ((num1 (rational-numerator dividend))
	(den1 (rational-denominator dividend)))
    (when (minusp divisor)
      (setq num1 (- num1)
	    divisor (- divisor)))
    (let ((gcd1 (\\ num1 divisor)))
      (unless (= gcd1 1)
	(setq num1 (// num1 gcd1)
	      divisor (// divisor gcd1)))
      (%make-rational num1 (* divisor den1)))))

(defnumop rational-quotient ((x fixnum) (y fixnum)) normalized-rational)

(defnumop rational-quotient ((f fixnum) (b bignum))
  (if (and (= f *setz*)
	   (= (bignum-length b) 1)
	   (= (bignum-sign b) 0)
	   (= (bignum-ref b 0) *setz*))
      -1
      (normalized-rational f b)))

(defnumop rational-quotient ((b bignum) (f fixnum))
  (normalized-rational b f))			;Abbreviated defnumop syntax does not
						;work here, because of reversed arg order

(defnumop rational-quotient ((u bignum) (v bignum)) normalized-rational)

(defnumop rational-quotient ((x ratio) (y ratio))
  quotient-ratio-ratio)

(defnumop rational-quotient ((x fixnum) (y ratio))
  quotient-integer-ratio)

(defnumop rational-quotient ((x ratio) (y fixnum))
  quotient-ratio-integer-args-backward)

(defnumop rational-quotient ((x bignum) (y ratio))
  quotient-bignum-ratio)

(defnumop rational-quotient ((x ratio) (y bignum))
  quotient-ratio-bignum-args-backward)

(defratfloatbinop rational-quotient)

(defnumop // ((x ratio) (y ratio))
  quotient-ratio-ratio)

(defnumop // ((x fixnum) (y ratio))
  quotient-integer-ratio)

(defnumop // ((x ratio) (y fixnum))
  quotient-ratio-integer-args-backward)

(defnumop // ((x bignum) (y ratio))
  quotient-bignum-ratio)

(defnumop // ((x ratio) (y bignum))
  quotient-ratio-bignum-args-backward)

(defratfloatbinop //)

(defnumop = ((x ratio) (y ratio))
  (and (= (rational-numerator x) (rational-numerator y))
       (= (rational-denominator x) (rational-denominator y))))

;; with rational canonicalization, mixed-type = is NIL
(defnumop = ((x fixnum) (y ratio))
  x y
  nil)

(defnumop = ((x bignum) (y ratio))
  x y
  nil)

(defnumop < ((x ratio) (y ratio))
  (< (* (rational-numerator x) (rational-denominator y))
     (* (rational-numerator y) (rational-denominator x))))

(defnumop < ((x fixnum) (y ratio))
  (< (* x (rational-denominator y))
     (rational-numerator y)))

(defnumop < ((x bignum) (y ratio))
  (< (* x (rational-denominator y))
     (rational-numerator y)))

(defnumop < ((x ratio) (y fixnum))
  (< (rational-numerator x)
     (* y (rational-denominator x))))

(defnumop < ((x ratio) (y bignum))
  (< (rational-numerator x)
     (* y (rational-denominator x))))

#+3600
(defratbinop rational-remainder remainder (num1 den1 num2 den2)
  (let ((quotient (truncate (* num1 den2) (* num2 den1))))	;truncate of n1/n2
    (rational-quotient (- (* num1 den2) (* quotient num2 den1))
		       (* den1 den2))))

#+3600
(defratbinop rational-mod mod (num1 den1 num2 den2)
  (let* ((num3 (* num1 den2))			;compute floor of n1/n2
	 (den3 (* num2 den1)))
    (if (minusp den3)
	(setq num3 (- num3) den3 (- den3)))
    (rational-quotient (- (* num1 den2) (* (floor num3 den3) num2 den1))
		       (* den1 den2))))

(defmacro defratdivop (name)
  `(defratbinop ,(intern (string-append "RATIONAL-" name)) ,name (num1 den1 num2 den2)
     (multiple-value-bind (quotient remainder)
	 (,name (* num1 den2) (* num2 den1))
       (values quotient (rational-quotient remainder (* den1 den2))))))

#+imach
(progn
(defratdivop floor)
(defratdivop ceiling)
(defratdivop truncate)
(defratdivop round)
);End #+imach


(defun print-rational (number stream)
  (when prinradix
    (print-radix-specifier stream t))
  ;; probably we should allow the funny radix printers to decide for themselves
  ;; how to print ratios -- one half, three forty-sevenths, etc.
  (let ((cl:*print-radix* nil))
    (print-fixnum-or-bignum (rational-numerator number) stream)
    (funcall stream ':tyo (pttbl-ratio readtable))
    (print-fixnum-or-bignum (rational-denominator number) stream)))

(defun (ratio standard-read-function) (stream string &aux num1 num2 len i)
   stream  ;not used
   (setq len (array-active-length string))
   (multiple-value (num1 i)
     (xr-read-integer-internal string 0 len))
   (multiple-value (num2 i)
     (xr-read-integer-internal string (1+ i) len))
   (values (normalized-rational num1 num2) 'ratio))
