;;; -*- Mode: LISP; Package: SYSTEM-INTERNALS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Assume that real and imag are same type
(defun make-complex-internal (real imag)
  (if (and (cl:rationalp real)
	   (zerop imag))
      real
      (%make-complex real imag)))
  
(defun realpart (number)
  (declare lt:(side-effects simple reducible))
  (cl:etypecase number
    (cl:complex (complex-realpart number))
    (cl:number number)))

(defun imagpart (number)
  (declare lt:(side-effects simple reducible))
  (cl:etypecase number
    (cl:complex (complex-imagpart number))
    (cl:single-float 0.0f0)
    (cl:double-float 0.0d0)
    (cl:rational 0)))

(defun complex-1-arg (realpart)
  (cl:etypecase realpart
    (cl:single-float (%make-complex realpart 0.0f0))
    (cl:double-float (%make-complex realpart 0.0d0))
    (cl:rational realpart)))

(defun complex-2-args (realpart imagpart)
  (cl:etypecase realpart
    (cl:single-float
      (cl:etypecase imagpart
	(cl:single-float
	  (%make-complex realpart imagpart))
	(cl:double-float
	  (%make-complex (cl:float realpart 0.0d0) imagpart))
	(cl:rational
	  (%make-complex realpart (cl:float imagpart 0.0f0)))))
    (cl:double-float
      (%make-complex realpart (cl:float imagpart 0.0d0)))
    (cl:rational
      (cl:etypecase imagpart
	(cl:rational
	  (if (zerop imagpart)
	      realpart
	      (%make-complex realpart imagpart)))
	(cl:single-float
	  (%make-complex (cl:float realpart 0.0f0) imagpart))
	(cl:double-float
	  (%make-complex (cl:float realpart 0.0d0) imagpart))))))

(defun complex (realpart &optional imagpart)
  (declare lt:(side-effects simple reducible))
  (if imagpart
      (complex-2-args realpart imagpart)
      (complex-1-arg realpart)))

(compiler:defoptimizer (complex complex-1-or-2-args) (form)
  (compiler:matchp form
    (('complex realpart)
     `(complex-1-arg ,realpart))
    (('complex realpart imagpart)
     (if (and (cl:constantp imagpart compiler:*optimizer-environment*)
	      (eql (lt:evaluate-constant imagpart compiler:*optimizer-environment*) 0))
	 `(complex-1-arg ,realpart)
	 `(complex-2-args ,realpart ,imagpart)))
    (* form)))

(defun phase (number)
  (declare lt:(side-effects simple reducible))
  ;; From issue IEEE-ATAN-BRANCH-CUT:
  ;;	y=+0  x>0			   +0
  ;;	y=-0  x>0			   -0
  ;;	y=+0  x<0			   +pi
  ;;	y=-0  x<0			   -pi
  ;;	y=+0  x=+0			   +0
  ;;	y=-0  x=+0			   -0
  ;;	y=+0  x=-0			   +pi
  ;;	y=-0  x=-0			   -pi
  (cl:etypecase number
    (cl:complex
      (cl:atan (complex-imagpart number) (complex-realpart number)))
    (cl:single-float
      (if (minusp (%fixnum number)) (float pi) 0.0))
    (cl:double-float
      (if (minusp (double-high number)) pi 0.0d0))
    (cl:number
      (if (minusp number) (float pi) 0.0))))

(defun conjugate (number)
  (declare lt:(side-effects simple reducible))
  (cl:etypecase number
    (cl:complex (%make-complex (complex-realpart number) (- (complex-imagpart number))))
    (cl:number number)))
      
(defun cis (radians)
  (declare lt:(side-effects simple reducible))
  (box-complex-values (cis-components radians)))

(defun cis-components (number)
  (cl:etypecase number
    (cl:single-float
     (if (< (ldb %%single-exponent (%fixnum number))
	    (ldb %%single-exponent (%fixnum 2.5e-4)))	;big x s.t. float(cos(dfloat(x)))=1.0
	 (values 1.0 number)
	 (%multiple-value-call-n
	   cos-and-sin-internal
	   number 1
	   (double-components #.(dfloat (// 2 pi))) 2)))
    (cl:double-float
     (double-let* ((n (double-components number)))
       (if (< (ldb %%double-exponent n-high)
	      #.(ldb %%double-exponent (double-high 1.09d-8)))
	   (values 1.0d0 number)
	   (double-let* ((d (double-* n #.(dfloat (// 2 pi)))))
	     (values (double-to-consed (double-sin-cos-aux d 1))
		     (double-to-consed (double-sin-cos-aux d 0)))))))
    (future-common-lisp:real
     (cis-components (float number)))))

(defun cisd-components (number)
  (cl:etypecase number
    (cl:single-float
     (if (< (ldb %%single-exponent (%fixnum number))
	    (ldb %%single-exponent (%fixnum .013)))	;big x s.t. float(cosd(dfloat(x)))=1.0
	 (values 1.0 (* number (float (// pi 180))))
	 (%multiple-value-call-n
	   cos-and-sin-internal
	   number 1
	   (double-components #. (dfloat 1//90)) 2)))
    (cl:double-float
      (double-let* ((n (double-components number)))
	(if (< (ldb %%double-exponent n-high)
	       #.(ldb %%double-exponent (double-high 6.036d-8)))
	    (values 1.0d0 (double-to-consed (double-* n #.(dfloat (// pi 180)))))
	    (double-let* ((d (double-* n #.(dfloat 1//90))))
	      (values (double-to-consed (double-sin-cos-aux d 1))
		      (double-to-consed (double-sin-cos-aux d 0)))))))
    (future-common-lisp:real
     (values (sind-cosd-rational-internal number 1)
	     (sind-cosd-rational-internal number 0)))))

(defnumop zerop ((number complex))
  (and (zerop (complex-realpart number))
       (zerop (complex-imagpart number))))

#+3600
(defnumop abs ((number complex))
  (complex-abs-components (complex-realpart number) (complex-imagpart number)))

(defun complex-abs-components (real imag)
  (cl:typecase real
    (cl:float
     (multiple-value-bind (ignore exponent ignore)
	 (decode-float (max (abs real) (abs imag)))
       (with-float-operating-mode ((:trap-disables :underflow))
	 (ash (cl:sqrt (+ (^ (ash real (- exponent)) 2)
			  (^ (ash imag (- exponent)) 2)))
	      exponent))))
    (otherwise (cl:sqrt (+ (^ real 2) (^ imag 2))))))

(defnumop - ((number complex))
  (%make-complex (- (complex-realpart number)) (- (complex-imagpart number))))

;; Give better error messages for these?
#||
(defnumop plusp ((number complex)))
(defnumop minusp ((number complex)))
(defnumop float ((number complex)))
||#

;; This can't be left to the default because it us called from Lisp, not from microcode.
#+3600
(defnumop fix ((number complex))
  (error "~S is not defined for the complex argument ~S." 'fix number))


(defmacro defcomplexbinop (function operation args boxing &body body)
  (check-arg boxing (memq boxing '(:box :nobox)) "one of :BOX or :NOBOX")
  (let ((extra-args (and (= (length args) 6) '(x y))))
    (flet ((collect-defnumops (list)
	     (loop for (x-type y-type . args)
		    in list
		    for form = `(,function ,@args ,@extra-args)
		    collect `(defnumop ,operation ((x ,x-type) (y ,y-type))
			       ,(if (eq boxing :box)
				    `(box-complex-values ,form)
				    form)))))
      `(progn 
	 (defsubst ,function ,args
	   . ,body)
	 ,@(collect-defnumops
	     '((complex complex
			(complex-realpart x) (complex-imagpart x)
			(complex-realpart y) (complex-imagpart y))
	       (fixnum complex
		       x 0 (complex-realpart y) (complex-imagpart y))
	       (bignum complex
		       x 0 (complex-realpart y) (complex-imagpart y))
	       (float complex
		      x 0.0 (complex-realpart y) (complex-imagpart y))
	       (complex double
			(complex-realpart x) (complex-imagpart x) y 0.0d0)
	       (rational complex
			 x 0 (complex-realpart y) (complex-imagpart y))
	       ))
	 ,@(unless (defnumop-binary-converse-is-identical operation)
	     (collect-defnumops
	       '((complex fixnum
			  (complex-realpart x) (complex-imagpart x) y 0)
		 (complex bignum
			  (complex-realpart x) (complex-imagpart x) y 0)
		 (complex float
			  (complex-realpart x) (complex-imagpart x) y 0.0)
		 (double complex
			 x 0.0d0 (complex-realpart y) (complex-imagpart y))
		 (complex rational
			  (complex-realpart x) (complex-imagpart x) y 0)
		 )))))))

;;; Rationals cannot be used here
(defcomplexbinop complex-add + (real1 imag1 real2 imag2) :box
  (values (+ real1 real2) (+ imag1 imag2)))
    
(defcomplexbinop complex-sub - (real1 imag1 real2 imag2) :box
  (values (- real1 real2) (- imag1 imag2)))

(defcomplexbinop complex-mul * (real1 imag1 real2 imag2) :box
  (values
    (- (* real1 real2) (* imag1 imag2))
    (+ (* real1 imag2) (* real2 imag1))))

(defcomplexbinop complex-rational-quotient rational-quotient (real1 imag1 real2 imag2)
		 :box
  ;; handle zero cases here -- they'll screw the exponent comparison in the float case below
  (cond ((zerop imag2)
	 (values
	   (cl:// real1 real2)
	   (cl:// imag1 real2)))
	((zerop real2)
	 (values
	   (cl:// imag1 imag2)
	   (- (cl:// real1 imag2))))
	((cl:floatp real2)
	 ;;---unboxed double-precision macrology some other day
	 (multiple-value-bind (real2-frac real2-expt real2-sign) (decode-float real2)
	   (multiple-value-bind (imag2-frac imag2-expt imag2-sign) (decode-float imag2)
	     (when (minusp real2-sign) (setq real2-frac (- real2-frac)))
	     (when (minusp imag2-sign) (setq imag2-frac (- imag2-frac)))
	     (unless (floatp real1)
	       (setq real1 (cl:float real1 real2)
		     imag1 (cl:float imag1 real2)))
	     (with-float-operating-mode ((:trap-disables :underflow))
	       ;;All the hair is to scale the denominator to be near 1.0,
	       ;;so we don't overflow.
	       (if (> real2-expt imag2-expt)
		   (let* ((expt-diff (- imag2-expt real2-expt))
			  (denom-frac (+ (^ real2-frac 2)
					 (^ (ash imag2-frac expt-diff) 2))))
		     (setq real1 (ash real1 (- real2-expt))
			   imag1 (ash imag1 (- real2-expt)))
		     (values
		       (rational-quotient (+ (* real1 real2-frac)
					     (ash (* imag1 imag2-frac) expt-diff))
					  denom-frac)
		       (rational-quotient (- (* imag1 real2-frac)
					     (ash (* real1 imag2-frac) expt-diff))
					  denom-frac)))
		   (let* ((expt-diff (- real2-expt imag2-expt))
			  (denom-frac (+ (^ (ash real2-frac expt-diff) 2)
					 (^ imag2-frac 2))))
		     (setq real1 (ash real1 (- imag2-expt))
			   imag1 (ash imag1 (- imag2-expt)))
		     (values
		       (rational-quotient (+ (ash (* real1 real2-frac) expt-diff)
					     (* imag1 imag2-frac))
					  denom-frac)
		       (rational-quotient (- (ash (* imag1 real2-frac) expt-diff)
					     (* real1 imag2-frac))
					  denom-frac))))))))
	(t
	 (let ((denom (+ (* real2 real2) (* imag2 imag2))))
	   (values (rational-quotient (+ (* real1 real2) (* imag1 imag2)) denom)
		   (rational-quotient (- (* imag1 real2) (* real1 imag2)) denom))))))

(defcomplexbinop complex-quo // (real1 imag1 real2 imag2) :box
  (complex-rational-quotient real1 imag1 real2 imag2))

(defcomplexbinop complex-= = (real1 imag1 real2 imag2) :nobox
  (and (= real1 real2) (= imag1 imag2)))

;;; Better error messages on these?
#|
(defcomplexbinop complex-greater > (real1 imag1 real2 imag2) :nobox)
(defcomplexbinop complex-less < (real1 imag1 real2 imag2) :nobox)
(defcomplexbinop complex-min min (real1 imag1 real2 imag2 x y) :nobox)
(defcomplexbinop complex-max max (real1 imag1 real2 imag2 x y) :nobox)
|#

;;; Other operations which we don't handle yet
#|
remainder
mod
;;; All optimize rational cases of complex numbers
|#

(defun print-complex (complex stream)
  (send stream :tyo #/#)
  (send stream :tyo #/C)
  (send stream :tyo (pttbl-open-paren readtable))
  (print-object (complex-realpart complex) 0 t stream)
  (send stream ':tyo (pttbl-space readtable))
  (print-object (complex-imagpart complex) 0 t stream)
  (send stream :tyo (pttbl-close-paren readtable)))

(defun complex-sqrt-components (real imag)
  (cond ((zerop imag)
	 (if (minusp real)
	     (let ((sqrt-imag (cl:sqrt (- real))))
	       (values (typed-zero sqrt-imag) sqrt-imag))
	     (let ((sqrt-real (cl:sqrt real)))
	       (values sqrt-real (typed-zero sqrt-real)))))
	((typep real :float)
	 (multiple-value-bind (ignore exponent ignore)
	       (decode-float (max (abs real) (abs imag)))
	     (with-float-operating-mode ((:trap-disables :underflow))
	       (setq exponent (logand -2 exponent))
	       (setq real (ash real (- exponent))
		     imag (ash imag (- exponent)))
	       (let* ((norm (cl:sqrt (+ (* real real) (* imag imag))))
		      (b (cl:sqrt (ash (+ norm (abs real)) -1)))
		      (c (rational-quotient imag (ash b 1))))
		 (let ((expt2 (floor exponent 2)))
		   (setq b (ash b expt2)
			 c (ash c expt2)))
		 (cond (( real 0)
			(values b c))
		       (( imag 0)
			(values c b))
		       (t (values (- c) (- b))))))))
	(T
	 (let* ((norm (cl:sqrt (+ (* real real) (* imag imag))))
		(b (cl:sqrt (rational-quotient (+ norm (abs real)) 2)))
		(c (rational-quotient imag (* b 2))))
	   (cond (( real 0)
		  (values b c))
		 (( imag 0)
		  (values c b))
		 (t (values (- c) (- b))))))))

#| Square root testing
(defun csqrt (x)
  (box-complex-operation complex-sqrt-components x))

(loop for phas from 0 by 45 to 360
      for sin = (sind (dfloat phas))
      for cos = (cosd (dfloat phas))
      for complex = (complex cos sin)
      for sqrt = (csqrt complex)
      for sqrt-re = (realpart sqrt)
      for sqrt-im = (imagpart sqrt)
      for sqrt-mag = (abs sqrt)
      do (format T "~&Phase ~3d sqrt ~27<~s~;~> mag ~14f phase ~s square-mag ~s"
		 phas sqrt sqrt-mag (float (* (phase complex) (// 180 pi))) (abs (^ sqrt 2))))

|#

#|
;; This is for currently not supported zeta-lisp functional changes
(defvar *enable-complex-numeric-results* t)

;;For testing this stuff before Common Lisp prevails
(defmacro winning (&body body)
  `(let ((*enable-complex-numeric-results* T)) ,@body))
(defmacro losing (&body body)
  `(let ((*enable-complex-numeric-results* ())) ,@body))
|#

#| 
(defvar *offering-to-catch-complex-result* ())	;top level value

(defmacro catching-complex-result (&body body)
  `(let ((*offering-to-catch-complex-result* T))
     (catch 'complex-result
       (condition-bind ((offer-complex-result-mixin 'consider-offering-complex-result))
	 ,@body))))

(defun consider-offering-complex-result (condition)
  (when (and *offering-to-catch-complex-result* *enable-complex-numeric-results*)
    (let ((complex-result (send condition :complex-result)))
      (when complex-result
	(throw 'complex-result complex-result)))))

(defflavor offer-complex-result-mixin ((complex-result ()))
	   ()
  :gettable-instance-variables
  :initable-instance-variables)

(defmethod (make-instance offer-complex-result-mixin :after) (&rest ignore)
  (let ((proceed-types (send self :proceed-types)))
    (cond (*offering-to-catch-complex-result*
	   (when complex-result
	     (unless (memq :offer-complex-result proceed-types)
	       (send self :set-proceed-types (cons :offer-complex-result proceed-types)))))
	  (T
	   (send self :set-proceed-types (remq :offer-complex-result proceed-types))))))

(defmethod (:proceed offer-complex-result-mixin :case :offer-complex-result) ()
  "Use the offered complex result"
  (if complex-result
      (throw 'complex-result complex-result)
      (ferror "Somehow you were offered this proceed option ~
		when there was no complex result computed")))

(defmethod (:document-proceed-type offer-complex-result-mixin :case :offer-complex-result)
	   (stream)
  (format stream "Use the complex result: ~s" complex-result))

;;A better name is solicited.
;;---It would be nice to not have to cons the complex result.
(defun maybe-complex-result (error-flavor
			     &key operation operands
			     complex-result non-trap-result
			     unbox-double)
  (declare (dbg:error-reporter))
  (cond ((and *enable-complex-numeric-results*
	      *offering-to-catch-complex-result*
	      complex-result)
	 (throw 'complex-result complex-result))
	((float-trap-enable? :invalid-operation)
	   (multiple-value-bind (key value)
	       (lexpr-funcall 'signal error-flavor
			      :operation operation
			      :operands operands
			      :proceed-types '(:use-non-trap-result :new-value)
			      (let (gack)
				(when non-trap-result
				  (setq gack (list* :non-trap-result non-trap-result gack)))
				(when complex-result
				  (setq gack (list* :complex-result complex-result gack)))))
	     (selectq key
	       (:use-non-trap-result
		(if unbox-double (double-components value) value))
	       (:new-value
		(if unbox-double (double-components value) value)))))
	(T
	 (float-set-flag :invalid-operation)
	 (if unbox-double
	     (double-components non-trap-result)
	     non-trap-result))))

(defflavor negative-sqrt
	()
	(offer-complex-result-mixin float-invalid-operation)
  :gettable-instance-variables
  :initable-instance-variables)

;;In the complex world, this should become LOG-OF-ZERO
(defflavor non-positive-log
	(dbg:number)
	(offer-complex-result-mixin arithmetic-error)
  :gettable-instance-variables
  :initable-instance-variables
  (:required-init-keywords :number))

 |#

(defcomplex complex-sqrt (:complex) :complex complex-sqrt-components)
(defcomplex complex-log (:complex) :complex complex-log-components)
(defcomplex complex-exp (:complex) :complex complex-exp-components)
(defcomplex complex-+ (:complex :complex) :complex complex-add)
(defcomplex complex-- (:complex :complex) :complex complex-sub)
(defcomplex complex-* (:complex :complex) :complex complex-mul)
(defcomplex complex-// (:complex :complex) :complex complex-rational-quotient)

;;These turkey must be closed-coded because %multiple-value-call-n can't hack (lambda ...)
(defcomplex complex-1+ (:complex) :complex complex-1+-components)
(defun complex-1+-components (real imag) (values (1+ real) imag))
(defcomplex complex-*i (:complex) :complex complex-*i-components)
(defun complex-*i-components (real imag) (values (- imag) real))
(defcomplex complex-*-i (:complex) :complex complex-*-i-components)
(defun complex-*-i-components (real imag) (values imag (- real)))
(defcomplex complex-^2 (:complex) :complex complex-^2-components)
(defun complex-^2-components (real imag)
  (values (- (* real real) (* imag imag))
	  (* real imag 2)))
(defcomplex complex-minus (:complex) :complex complex-minus-components)
(defsubst complex-minus-components (real imag)
  (values (- real) (- imag)))

(defun complex-log-components (real &optional imag)
  (cond ((or (null imag) (zerop imag))
	 (let ((log (cl:log (abs real))))
	   (cond ((> real 0)
		  (values log (cl:float 0 log)))
		 ((< real 0)
		  (values log (cl:typecase imag
				(cl:double-float
				  (if (minusp (double-high imag))
				      (- (dfloat pi))
				      (dfloat pi)))
				(cl:single-float
				  (if (minusp (%fixnum imag))
				      (- (float pi))
				      (float pi)))
				(otherwise (cl:float pi log))))))))
	(T (condition-case ()
	       (let ((log (cl:log (complex-abs-components real imag)))
		     (phase (cl:atan imag real)))
		 (values log phase))
	     (floating-exponent-overflow
	       (multiple-value-bind (ignore exponent ignore)
		   (decode-float (max (abs real) (abs imag)))
		 (with-float-operating-mode ((:trap-disables :underflow))
		   (setq real (ash real (- exponent))
			 imag (ash imag (- exponent)))
		   (let ((log (cl:log (cl:sqrt (+ (* real real) (* imag imag))))))
		     (values (+ log (* exponent (cl:float (cl:log 2.0d0) log)))
			     (cl:atan imag real))))))))))

(defun complex-2-arg-log (real1 imag1 real2 imag2)
  (cond ((and (zerop real1) (zerop imag1))
	 (error 'non-positive-log :number (make-complex-internal real1 imag1)))
	((zerop imag2)
	 (if (zerop imag1)
	     (let ((log (cl:log real1 real2)))
	       ;; return a complex value
	       (cl:typecase log
		 (cl:complex log)
		 (otherwise (complex log))))
	     (multiple-value-bind (log-real log-imag)
		 (if (and (double-float-p real2)
			  (not (double-float-p real1)))
		     (complex-log-components (dfloat real1) (dfloat imag1))
		     (complex-log-components real1 imag1))
	       (let* ((abs-real2 (if (minusp real2) (- real2) real2))
		      (log (if (double-float-p real1)
			       (dlog-of-float abs-real2)
			       (cl:log abs-real2))))
		 (if (minusp real2)
		     (box-complex-values (complex-// (values log-real log-imag)
						     (values log
							     (if (double-float-p log)
								 pi (cl:float pi 0.0)))))
		     (%make-complex (cl:// log-real log)
				    (cl:// log-imag log)))))))
	(T
	 (cond ((double-float-p real1)
		(unless (double-float-p real2)
		  (setq real2 (dfloat real2))
		  (setq imag2 (dfloat imag2))))
	       ((double-float-p real2)
		(setq real1 (dfloat real1))
		(setq imag1 (dfloat imag1))))
	 (box-complex-values (complex-// (complex-log-components real1 imag1)
					 (complex-log-components real2 imag2))))))

#|
(let ((n (complex most-positive-single-float most-positive-single-float)))
  (let ((result (box-complex-operation complex-log-components n)))
    (list (+ (log (sqrt 2)) (log most-positive-single-float))
	  result)))
|#

#|
(log -1)
(log 0)
(let (*enable-complex-numeric-results*) (log -1))
|#

(defun complex-exp-components (real imag)
  (let ((mag (exp real)))
    (multiple-value-bind (r i) (cis-components imag)
      (values (* mag r) (* mag i)))))

;;This internal function assumes that its args have already been verified not to be zero.
(defun complex-expt (num expt)
  (multiple-value-bind (num-real num-imag)
      (cl:etypecase num
	(cl:complex (complex-parts num))
	(cl:number (values num (typed-zero num))))
    (multiple-value-bind (expt-real expt-imag)
	(cl:etypecase expt
	  (cl:complex (complex-parts expt))
	  (cl:number (values expt (typed-zero expt))))
      (when (and (double-float-p expt-real)
		 (not (double-float-p num-real)))
	(setq num-real (dfloat num-real))
	(setq num-imag (dfloat num-imag)))
      (box-complex-values
	(with-complex-names (num expt)
	  (complex-exp (complex-* expt (complex-log num))))))))

#| 
(defflavor argument-out-of-real-range
	()
	(offer-complex-result-mixin ;;--- float-invalid-operation
	 arithmetic-error)
  :gettable-instance-variables
  :initable-instance-variables)

(defmethod (:report argument-out-of-real-range) (stream)
  (format stream "Attempt to take ~s of ~{~s~^ and ~}, which would not admit a real result"
	  dbg:operation dbg:operands))

 |#

;;; These are so bad that we dont want them in the regular system yet
(defun cl:asinh (number)
  (declare lt:(side-effects simple reducible))
  (cl:etypecase number
    (cl:complex
     (complex-let* ((number (complex-parts number)))
       (box-complex-values
	 (if (or (minusp number-real)
		 (and (zerop number-real)
		      (minusp number-imag)))
	     (complex-minus
	       (complex-log (complex-- (complex-sqrt (complex-1+ (complex-^2 number)))
				       number)))
	     (complex-log (complex-+ (complex-sqrt (complex-1+ (complex-^2 number)))
				     number))))))
    (cl:double-float
     (double-let* ((number (double-components number)))
       (double-to-consed
	 (double-log (double-+ number (double-sqrt
					(double-+ 1.0d0 (double-* number number))))))))
    (cl:number (cl:log (+ number (cl:sqrt (+ 1 (^ number 2))))))))

(defun cl:acosh (number)
  (declare lt:(side-effects simple reducible))
  (cl:log (+ number (* (1+ number) (cl:sqrt (rational-quotient (- number 1) (+ number 1)))))))

(defun cl:atanh (number)
  (declare lt:(side-effects simple reducible))
  ;;Mary Poppins said (log (* (1+ number) (sqrt (- 1 (rational-quotient (^2 number)))))),
  ;;but that would blow up at zero, which is clearly wrong.
  (cl:etypecase number
    (cl:single-float
      (if (< (%single-floating-abs number) (expt (* 5 cl:single-float-epsilon) 1\4))
	  ;; atanh z = z + z^3/3 + z^5/5 + ...
	  (if (< (%single-floating-abs number) (sqrt (* 3 cl:single-float-epsilon)))
	      number
	      (+ number (* (expt number 3) (float 1\3))))
	  (cl:// (cl:log (cl:// (+ 1.0 number) (- 1.0 number))) 2.0)))
    (cl:double-float
      (if (< (abs number) (expt (* 5 cl:double-float-epsilon) 1\4))
	  ;; atanh z = z + z^3/3 + z^5/5 + ...
	  (if (< (abs number) (sqrt (* 3 cl:double-float-epsilon)))
	      number
	      (+ number (* (expt number 3) (dfloat 1\3))))
	  (cl:// (cl:log (cl:// (+ 1.0d0 number) (- 1.0d0 number))) 2.0d0)))
    (cl:ratio
      (if (< (abs number) (cl:rationalize (expt (* 5 cl:single-float-epsilon) 1\4)))
	  (cl:atanh (float number))
	  (cl:// (cl:log (cl:// (+ 1 number) (- 1 number))) 2)))
    (cl:number
      (cl:// (cl:log (cl:// (+ 1 number) (- 1 number))) 2))))
