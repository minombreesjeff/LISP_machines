;;; -*- Mode: LISP;  Package: SYSTEM-INTERNALS;  Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Macros to do things similar to BLISS' SELECT.

(DEFMACRO COND-EVERY (&BODY CLAUSES)
  "COND-EVERY has a COND-like syntax.  Unlike COND, though, it executes all the
clauses whose tests succeed.  It also recognizes two special symbols in place
of a test: T executes in all cases, and OTHERWISE executes if no previous
clause has executed.  The value returned is that of the last clause executed,
or NIL if no clauses executed, and the macro will not return multiple-values."
  (LET* ((FLAG (GENSYM))
	 (VALUE (GENSYM))
	 (HAS-OTHERWISE-P (DO ((CS CLAUSES (CDR CS))
			       (CLAUSE (CAR CLAUSES) (CADR CS)))
			      ((NULL CS))
			    (WHEN (MEMBER (CAR CLAUSE) '(OTHERWISE :OTHERWISE))
			      (RETURN T))))
	 (FORMS (DO ((CS CLAUSES (CDR CS))
		     (CLAUSE (CAR CLAUSES) (CADR CS))
		     (FORMS NIL)
		     (SEEN-OTHERWISE-OR-ALWAYS NIL))
		    ((NULL CS) (NREVERSE FORMS))
		  (PUSH
		    (SELECTQ (CAR CLAUSE)
		       ((T :T :ALWAYS)
			(UNLESS (EQ (CAR CLAUSE) 'T)
			   (COMPILER:WARN
			     ()
			     "The syntactic words for COND-EVERY are not keywords.~@
			      Assuming you meant T when you wrote ~S."
			     (CAR CLAUSE)))
			(SETQ SEEN-OTHERWISE-OR-ALWAYS T)
			`(SETQ ,VALUE (PROGN . ,(CDR CLAUSE))))
		       ((OTHERWISE :OTHERWISE)
			(UNLESS (EQ (CAR CLAUSE) 'OTHERWISE)
			   (COMPILER:WARN
			     ()
			     "The syntactic words for COND-EVERY are not keywords.~@
			      Assuming you meant ~A when you wrote ~:*~S."
			     (CAR CLAUSE)))
			(IF SEEN-OTHERWISE-OR-ALWAYS
			    (FERROR "OTHERWISE after a previous OTHERWISE or T")
			    (SETQ SEEN-OTHERWISE-OR-ALWAYS 'OTHERWISE)
			    `(OR ,FLAG
				 (SETQ ,VALUE (PROGN . ,(CDR CLAUSE))))))
		       (OTHERWISE
			`(AND ,(CAR CLAUSE)
			      (SETQ ,VALUE (PROGN . ,(CDR CLAUSE))
				    . ,(IF (OR SEEN-OTHERWISE-OR-ALWAYS
					       (NOT HAS-OTHERWISE-P))
					   NIL
					   `(,FLAG T))))))
		    FORMS))))
    `(LET (,@(WHEN HAS-OTHERWISE-P `((,FLAG))) (,VALUE))
	,@FORMS
	,VALUE)))

(DEFMACRO SELECTQ-EVERY (OBJ &BODY CLAUSES)
  "Just like COND-EVERY but with SELECTQ-like syntax."
  (IF (ATOM OBJ)
      (SELECTQ-EVERY-GENERATE-CODE OBJ CLAUSES)
      (LET ((SYM (GENSYM)))
	`(LET ((,SYM ,OBJ))
	   ,(SELECTQ-EVERY-GENERATE-CODE SYM CLAUSES)))))

(DEFUN SELECTQ-EVERY-GENERATE-CODE (COMPARE-AGAINST CLAUSES)
  `(COND-EVERY
    . ,(DO ((CS CLAUSES (CDR CS))
	    (CLAUSE (CAR CLAUSES) (CADR CS))
	    (FORMS NIL))
	   ((NULL CS) (NREVERSE FORMS))
	 (PUSH
	   (COND ((MEMQ (CAR CLAUSE) '(OTHERWISE T))
		  CLAUSE)
		 ((EQ (CAR CLAUSE) ':OTHERWISE)
		  (COMPILER:WARN () "The syntactic words for SELECTQ-EVERY are not keywords.~@
				    Assuming you meant ~A when you wrote ~:*~S."
				 (CAR CLAUSE))
		  (CONS 'OTHERWISE (CDR CLAUSE)))
		 ((MEMQ (CAR CLAUSE) '(:ALWAYS :T))
		  (COMPILER:WARN () "The syntactic words for SELECTQ-EVERY are not keywords.~@
				    Assuming you meant T when you wrote ~S."
				 (CAR CLAUSE))
		  (CONS 'T (CDR CLAUSE)))
		 (T
		  `((,(IF (LISTP (CAR CLAUSE)) 'MEMQ 'EQ) ,COMPARE-AGAINST ',(CAR CLAUSE))
		    . ,(CDR CLAUSE))))
	   FORMS))))
