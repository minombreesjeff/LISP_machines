;;; -*- Mode: Lisp; Package: SI; Base: 8; Lowercase: Yes -*-

;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; Once upon a time, in a very ancient computer, there existed a data
;;; type called DTP-SELECT-METHOD.  Pointers of this data type pointed
;;; to alists of keys and functions, and when one called such an object,
;;; it did an ASSQ on that list, dispatching to the appropriate function
;;; or a tail-pointer in the alist.  This was the basis for a message
;;; passing system called CLASSES.  CLASSES were soon superceded by
;;; FLAVORS, which did their dispatching with hash tables, and select
;;; methods soon fell into disuse, except when defined by a rather nice
;;; macro, DEFSELECT.

;;; Well, times change, and as computers come and go, so did select
;;; methods.  However DEFSELECT lives on in the 3600 as a macro which
;;; defines a normal function.  There was no reason to define a
;;; DTP-SELECT-METHOD; functions can dispatch just as fast as anything
;;; on the 3600.

;;; Select methods served the MIT CADRs and Symbolics LM-2s well, and
;;; these comments are dedicated to them.

;;; -- DLA, in a moment of emotional reminiscence.

;;; (DEFSELECT <symbol or (<function-spec> <function-to-be-called-if-no-match>)>
;;;   (<keyword or (<keyword> <keyword> ... <keyword>)> 
;;;    . <function or (<arglist> . <body>)>)

;;; (defselect file-chaosnet-command
;;;   (:foo (baz &rest bar)
;;;         (do-some-work))
;;;   (:spazz (&optional (bar 1))
;;;           (spzza)))

(defmacro defselect (fspec &body methods)
  (construct-defselect fspec methods nil))

(defmacro defselect-cold (fspec &body methods)
  (construct-defselect fspec methods t))

(defun construct-defselect (fspec methods cold-p)
  (let (no-which-operations tail-pointer methods-list)
    ;; Decode FSPEC
    (and (listp fspec)
	 (setq tail-pointer (cadr fspec)
	       no-which-operations (caddr fspec)
	       fspec (car fspec)))
    ;; Turn (FOO BAR) into (:PROPERTY FOO BAR)
    (setq fspec (standardize-function-spec fspec))
    (setq methods-list
	  (loop for method in methods
		when (listp (car method)) append (car method)
		else collect (car method)))
    `(defun ,fspec (operation &rest select-method-args)
       (declare (defselect-info ,(and (not no-which-operations)
				      methods-list)
				,tail-pointer))
       (selectq operation
	 ,@(loop for method in methods
		 collecting
		   `(,(if (listp (car method))
			  (car method)
			  (list (car method)))	;Don't get fooled by OTHERWISE.
		     (lexpr-funcall
		       #',(if (nlistp (cdr method))
			      (cdr method)
			      `(named-lambda ,(list (car method))
					     (**defselect-op** . ,(cadr method))
					     **defselect-op**
					     . ,(cddr method)))
		       operation
		       ,@(when (listp (cdr method))
		            (loop repeat (defselect-count-required-arguments (cadr method))
				  collect '(pop select-method-args)))
		       select-method-args)))
	 ,@(unless no-which-operations
	     (if cold-p
		 (let ((wo (defselect-cons-which-operations methods-list tail-pointer)))
		   `((:which-operations
		       ',wo)
		     (:operation-handled-p
		       (memq (first select-method-args) ',wo))
		     (:send-if-handles
		       (when (memq (first select-method-args) ',wo)
			 (lexpr-funcall #',fspec select-method-args)))))
		 `(((:which-operations :operation-handled-p :send-if-handles)
		    (defselect-invoke-which-operations
		      #',fspec
		      ',(if (and compiler:qc-file-in-progress
				 (not compiler:qc-file-load-flag))
			    (cons compiler:eval-at-load-time-marker
				  `(defselect-cons-which-operations
				     ',methods-list ',tail-pointer))
			    (defselect-cons-which-operations methods-list tail-pointer))
		      operation select-method-args)))))
	 (otherwise
	  ,(if tail-pointer
	       `(lexpr-funcall #',tail-pointer operation select-method-args)
	       `(error 'unclaimed-message
		       ':object #',fspec
		       ':message operation
		       ':arguments (copylist select-method-args))))))))

(defun defselect-count-required-arguments (lambda-list)
  (loop for element in lambda-list
	count (not (memq element lambda-list-keywords))
	until (memq element '(&optional &rest &key &aux))))

(defprop defselect-info t debug-info)

;; The A-machine conses this at run-time, and tries harder to work with
;; closures, etc.  Maybe if somebody is motivated...
(defun defselect-cons-which-operations (wo tail-pointer &aux tem)
  (and tail-pointer
       (fdefinedp tail-pointer)
       (setq tem (debugging-info-user-entry tail-pointer 'defselect-info))
       (setq tem (apply #'defselect-cons-which-operations (cdr tem))))
  (append wo tem))

(defun defselect-invoke-which-operations (function which-operations operation arguments)
  (selectq operation
    (:which-operations which-operations)
    (:operation-handled-p
     (memq (car arguments) which-operations))
    (:send-if-handles
     (and (memq (car arguments) which-operations)
	  (lexpr-funcall function arguments)))
    (otherwise
     (ferror "The ~S operation is not handled by this function" operation))))
