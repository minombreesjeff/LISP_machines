;;; -*- Mode: LISP; Package: SYSTEM-INTERNALS; Base: 10; Lowercase: T -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; Heaps, taken from page 61 of Fundamentals of Computer Algorithms by
;; Horowitz and Shani.

;;   Use MAKE-HEAP to create a new heap.  Init options are :PREDICATE,
;; :SIZE, and :GROWTH-FACTOR.  There are two kinds of heaps which can
;; be interlocked for use by multiple processes.  These may be created
;; by including :INTERLOCKING T or :INTERLOCKING :WITHOUT-INTERRUPTS.
;; If GROWTH-FACTOR is NIL, HEAP-OVERFLOW will be signalled instead of
;; growing the heap.
;;
;; Defined operations on heaps are:
;; :CLEAR
;;    - clears the heap
;; :DELETE-BY-ITEM ITEM &OPTIONAL (EQUAL-PREDICATE #'=) NO-ERROR-P
;;    - finds the first item which satisfies EQUAL-PREDICATE, and deletes it,
;;	 returning the item and key if it was found, otherwise it signals
;;	 HEAP-ITEM-NOT-FOUND
;; :DELETE-BY-KEY KEY &OPTIONAL (EQUAL-PREDICATE #'=) NO-ERROR-P
;;    - finds an item by its key, and deletes it, returning the item and key if
;;      it was found, otherwise it signals HEAP-ITEM-NOT-FOUND
;; :DESCRIBE STREAM
;;    - describes the heap
;; :FIND-BY-ITEM ITEM &OPTIONAL (EQUAL-PREDICATE #'=) NO-ERROR-P
;;    - finds the first item which satisfies EQUAL-PREDICATE, returning the item
;;	 and key if it was found, otherwise signals HEAP-ITEM-NOT-FOUND 
;; :FIND-BY-KEY KEY &OPTIONAL (EQUAL-PREDICATE #'=) NO-ERROR-P
;;    - finds an item by its key, returning the item and key if it was found,
;;      otherwise it signals HEAP-ITEM-NOT-FOUND
;; :EMPTY-P
;;    - returns T if the heap is empty, otherwise return NIL
;; :INSERT ITEM KEY
;;    - inserts ITEM into the heap based on its key KEY, returns ITEM and KEY
;; :REMOVE
;;    - removes the top item on the heap and returns it and its key as values.
;;	 A third value of NIL is returned if the heap was empty, otherwise it's T.
;; :TOP
;;    - returns the value and key of the top item on the heap.  A third value of
;;	 NIL is returned if the heap was empty, otherwise it's T.
;;
;;   The HEAP-ELEMENTS loop iteration path is also defined, but it returns the
;; items in an implementation-dependent way, not in the heap-ordering.  Note
;; that the iteration path does not provide for locking the heap!

;; Some useful error conditions...
(defflavor heap-overflow
	(heap)
	(error)
  :initable-instance-variables
  :gettable-instance-variables)

(defmethod (:report heap-overflow) (stream)
  (format stream "The heap ~S has overflowed." heap))

(defflavor heap-item-not-found
	(heap key)
	(error)
  :initable-instance-variables
  :gettable-instance-variables)

(defmethod (:report heap-item-not-found) (stream)
  (format stream "Could not find item for key ~S in heap ~S." key heap))


(defconst default-heap-size 100.)

(defflavor heap
	   ((size default-heap-size)
	    (active-size 0)
	    (heap-array nil)			;contains (key . item)
	    (predicate #'<)
	    (growth-factor 1.5))
	   ()
  :gettable-instance-variables
  (:initable-instance-variables size predicate growth-factor)
  (:init-keywords :interlocking))

;; Call this to make a new heap
(defun make-heap (&rest init-options &key interlocking &allow-other-keys)
  (declare
    (arglist
      (&key (size 100.) (predicate #'<) (growth-factor 1.5) interlocking)))
  (lexpr-funcall 'make-instance
		 (cond ((eq interlocking :without-interrupts) 'without-interrupts-heap)
		       (interlocking 'process-locking-heap)
		       (t 'heap))
		 init-options))

(defmethod (:init heap :after) (&rest ignore)
  ;; Make the growth-factor reasonable
  (let ((gf growth-factor))
    (when gf
      (typecase gf
	(:fixnum
	 (cond ((< gf 2) (setq gf 2))
	       ((> gf size) (setq gf size))))
	((:single-float :double-float)
	 (cond (( gf (// (float (1+ size)) size)) (setq gf 1.5))
	       ((> gf 10.0) (setq gf 10.0))))
	(otherwise (setq gf 1.5)))
      (setq growth-factor gf)))
  (setq heap-array (make-array size)))

(defmacro heap-empty-p ()			;for my convenience, not yours...
  `(zerop active-size))

(defmethod (:empty-p heap) ()
  (heap-empty-p))

(defmethod (:clear heap) ()
  (setq active-size 0))

;; For internal use only...
(defmethod (:adjust-heap heap) (i)
  (loop with key-and-item = (aref heap-array i)
	for j first (* 2 i) then (* 2 j)
	while ( j active-size)
	if (and (< j active-size)
		(funcall predicate
			 (car (aref heap-array (1+ j)))
			 (car (aref heap-array j))))
	  do (incf j)
	while (funcall predicate
		       (car (aref heap-array j))
		       (car key-and-item))
	do (setf (aref heap-array (// j 2)) (aref heap-array j))
	finally (setf (aref heap-array (// j 2)) key-and-item)))

;; If for some reason the heap is no longer in sorted order (the user
;; could have bashed an entry), rebuild-heap will make it sorted again.
;; For internal use only...
(defmethod (:rebuild-heap heap) ()
  (loop for i from (// active-size 2) downto 1
	do (send self :adjust-heap i)))

(defmethod (:insert heap) (item key)
  (incf active-size)
  ;; Copy the heap if it's full up
  (when ( active-size size)
    (if (null growth-factor)
	(signal 'heap-overflow :heap self)
      (let* ((new-size (if (fixp growth-factor)
			   (+ size growth-factor)
			 (fix (* size growth-factor))))
	     (new-heap-array (make-array new-size)))
	(copy-array-contents heap-array new-heap-array)
	(setq heap-array new-heap-array)
	(setq size new-size))))
  (loop with j = active-size
	with i = (// active-size 2)
	while (and (> i 0)
		   (funcall predicate
			    key (car (aref heap-array i))))
	do (setf (aref heap-array j) (aref heap-array i))
	   (setq j i)
	   (setq i (// i 2))
	finally (setf (aref heap-array j) (cons key item)))
  (values item key))

(defmacro with-top-key-and-item ((key item) &body body)
  `(let* ((.key-and-item. (aref heap-array 1))
	  (,key (car .key-and-item.))
	  (,item (cdr .key-and-item.)))
     ,@body))

(defmethod (:top heap) ()
  (if (heap-empty-p)
      (values nil nil nil)
    (with-top-key-and-item (key item)
       (values item key t))))

(defmethod (:remove heap) ()
  (if (heap-empty-p)
      (values nil nil nil)
    (with-top-key-and-item (key item)
      (setf (aref heap-array 1) (aref heap-array active-size))
      (decf active-size)
      (send self :adjust-heap 1)
      (values item key t))))


;; Define a loop iteration path for heaps
(define-loop-path heap-elements loop-heap-elements-path (of with-key with-index))

(defun loop-heap-elements-path (path variable data-type prep-phrases
				inclusive? allowed-preps data
				&aux (heap nil) (key-var nil) (index-var (gensym)))
  path data-type allowed-preps data		;ignored
  (when inclusive?
    (ferror "Inclusive stepping is not supported by the HEAP-ELEMENTS path"))
  (loop for (prep expr) in prep-phrases		;parse prep-phrases
	do (cond ((loop-tequal prep 'of) (setq heap expr))
		 ((loop-tequal prep 'with-key) (setq key-var expr))
		 ((loop-tequal prep 'with-index) (setq index-var expr))
		 (t (ferror "~S is not a known preposition for the HEAP-ELEMENTS path" prep))
		 ))
  (when (null heap)
    (ferror "The heap must be specified (the OF clause was missing)."))
  (let* ((heap-var (gensym))
	 (bindings `((,heap-var ,heap)
		     (,index-var 0)		;first element is in 1, not 0
		     ,@(when key-var `((,key-var)))
		     (,variable)))
	 (endtest `(> (incf ,index-var) (send ,heap-var :active-size)))
	 (key-and-item `(aref (send ,heap-var :heap-array) ,index-var)))
    (if key-var
	(list* bindings ()
	       `(,endtest
		 (,variable ,key-and-item)
		 ()
		 (,key-var (pop ,variable))))
	(list* bindings ()
	       `(,endtest
		 (,variable (cdr ,key-and-item))
		 ()
		 ())))))

;; Now we can write the describe method...
(defmethod (:describe heap) (&optional (stream standard-output))
  (format stream "~&~S is a heap using predicate ~S, containing ~D element~:P."
	  self (function-name predicate) active-size)
  (when (and (not (heap-empty-p))
	     (y-or-n-p "Do you want to see the contents of the heap? "))
    (loop for item being the heap-elements of self with-key key
	  do (format stream "~&Key ~S~20T~S" key item)
	  finally (format stream "~%"))))

;; Here come the fancy, non-canonical heap methods
(defmethod (:delete-by-item heap) (item &optional (equal-predicate #'=) no-error-p)
  (loop for this-item being the heap-elements of self with-key this-key with-index i
	if (funcall equal-predicate item this-item)
	  do (setf (aref heap-array i) (aref heap-array active-size))
	     (setf (aref heap-array active-size) nil)
	     (decf active-size)
	     (send self :rebuild-heap)
	     (return (values this-item this-key))
	finally (if no-error-p
		    (return (values nil nil))
		  (signal 'heap-item-not-found :heap self :key item))))

(defmethod (:delete-by-key heap) (key &optional (equal-predicate #'=) no-error-p)
  (loop for this-item being the heap-elements of self with-key this-key with-index i
	if (funcall equal-predicate key this-key)
	  do (setf (aref heap-array i) (aref heap-array active-size))
	     (setf (aref heap-array active-size) nil)
	     (decf active-size)
	     (send self :rebuild-heap)
	     (return (values this-item this-key))
	finally (if no-error-p
		    (return (values nil nil))
		  (signal 'heap-item-not-found :heap self :key key))))

(defmethod (:find-by-item heap) (item &optional (equal-predicate #'=) no-error-p)
  (loop for this-item being the heap-elements of self with-key this-key
	if (funcall equal-predicate item this-item)
	  do (return (values this-item this-key))
	finally (if no-error-p
		    (return (values nil nil))
		  (signal 'heap-item-not-found :heap self :key item))))

(defmethod (:find-by-key heap) (key &optional (equal-predicate #'=) no-error-p)
  (loop for this-item being the heap-elements of self with-key this-key
	if (funcall equal-predicate key this-key)
	  do (return (values this-item this-key))
	finally (if no-error-p
		    (return (values nil nil))
		  (signal 'heap-item-not-found :heap self :key key))))


;; Mixin and wrapping form for process-locking heaps
(defflavor process-locking-heap-mixin
	((lock (process:make-lock "Heap Lock")))
	()
  :gettable-instance-variables
  :abstract-flavor)

(defmacro with-heap-process-locked (&body body)
  `(process:with-lock (lock)
     ,@body))

;; Mixin and wrapping form for without-interrupts heaps
(defflavor without-interrupts-heap-mixin
	()
	()
  :gettable-instance-variables
  :abstract-flavor)

;; Define all the methods for a heap mixin
(defmacro make-interlocking-heap-methods (mixin locking-form)
  `(progn
     ;; :empty-p and :clear are atomic, and need not be interlocked.
     ;; :adjust-heap and :rebuild-heap assume the heap is locked.
     (defwhopper-subst (:insert ,mixin) (item key)
       (,locking-form (continue-whopper item key)))
     (defwhopper-subst (:top ,mixin) ()
       (,locking-form (continue-whopper)))
     (defwhopper-subst (:remove ,mixin) ()
       (,locking-form (continue-whopper)))
     (defwhopper-subst (:describe ,mixin) ()
       (,locking-form (continue-whopper)))
     (defwhopper-subst (:delete-by-item ,mixin)
		       (item &optional (equal-predicate #'=) no-error-p)
       (,locking-form (continue-whopper item equal-predicate no-error-p)))
     (defwhopper-subst (:delete-by-key ,mixin)
		       (key &optional (equal-predicate #'=) no-error-p)
       (,locking-form (continue-whopper key equal-predicate no-error-p)))
     (defwhopper-subst (:find-by-item ,mixin)
		       (item &optional (equal-predicate #'=) no-error-p)
       (,locking-form (continue-whopper item equal-predicate no-error-p)))
     (defwhopper-subst (:find-by-key ,mixin)
		       (key &optional (equal-predicate #'=) no-error-p)
       (,locking-form (continue-whopper key equal-predicate no-error-p)))))

(make-interlocking-heap-methods process-locking-heap-mixin with-heap-process-locked)
(make-interlocking-heap-methods without-interrupts-heap-mixin without-interrupts)

;; The lockable forms of heaps
(defflavor process-locking-heap
	   ()
	   (process-locking-heap-mixin heap))

(defflavor without-interrupts-heap
	   ()
	   (without-interrupts-heap-mixin heap))

(compile-flavor-methods heap process-locking-heap without-interrupts-heap
			heap-overflow heap-item-not-found)
