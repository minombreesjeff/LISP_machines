;;; -*- Mode:Lisp; Package:System-internals; Base: 10; Lowercase: Yes -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>
;;; Edited 13 JUL 79 by rWG to fix expt-hard

(DEFSTRUCT (RANDOM-NUMBER-TABLE :ARRAY-LEADER)
  RANDOM-FILL-POINTER
  RANDOM-SEED
  RANDOM-POINTER-1
  RANDOM-POINTER-2)

(DEFUN RANDOM-CREATE-ARRAY (SIZE OFFSET SEED &OPTIONAL (AREA NIL))
  (LET ((ARRAY (MAKE-RANDOM-NUMBER-TABLE
		 :MAKE-ARRAY (:AREA AREA
			      :TYPE 'ART-Q-LIST
			      :LENGTH SIZE)
		 RANDOM-FILL-POINTER SIZE
		 RANDOM-SEED SEED
		 RANDOM-POINTER-1 0
		 RANDOM-POINTER-2 OFFSET)))
    (RANDOM-INITIALIZE ARRAY)
    ARRAY))

(DEFUN RANDOM-INITIALIZE (ARRAY &OPTIONAL NEW-SEED &AUX SIZE X)
  (IF (NOT (NULL NEW-SEED))
      (SETF (RANDOM-SEED ARRAY) NEW-SEED))
  (SETQ SIZE (RANDOM-FILL-POINTER ARRAY))
  (SETF (RANDOM-POINTER-2 ARRAY) (\ (+ SIZE (- (RANDOM-POINTER-2 ARRAY)
					       (RANDOM-POINTER-1 ARRAY)))
				    SIZE))
  (SETF (RANDOM-POINTER-1 ARRAY) 0)
  (DO I 0 (1+ I) (= I SIZE)
      (ASET 0 ARRAY I))
  (SETQ X (RANDOM-SEED ARRAY))
  (LOOP FOR I BELOW SIZE DOING 
      (SETQ X (%MULTIPLY-BIGNUM-STEP X 4093))	;4093 is a prime number.Multiply &
						;discard high bits
      (setf (%logldb (BYTE 8 24) (aref array i)) (LDB (BYTE 12 11) X)))
  (LOOP FOR I BELOW SIZE DOING 
      (SETQ X (%MULTIPLY-BIGNUM-STEP X 4093))	;4093 is a prime number.Multiply &
						;discard high bits
      (setf (%logldb (BYTE 12 12) (aref array i)) (LDB (BYTE 12 11) X)))
  (LOOP FOR I BELOW SIZE DOING 
      (SETQ X (%MULTIPLY-BIGNUM-STEP X 4093))	;4093 is a prime number.Multiply &
						;discard high bits
      (setf (%logldb (BYTE 12 0) (aref array i)) (LDB (BYTE 12 11) X))))

(DEFVAR RANDOM-ARRAY (RANDOM-CREATE-ARRAY 71 35 69))

(DEFUN RANDOM (&OPTIONAL ARG (ARRAY RANDOM-ARRAY) &AUX PTR1 PTR2 SIZE ANS)
  (WITHOUT-INTERRUPTS
    (SETQ PTR1 (RANDOM-POINTER-1 ARRAY)
	  PTR2 (RANDOM-POINTER-2 ARRAY)
	  SIZE (RANDOM-FILL-POINTER ARRAY))
    (OR (< (SETQ PTR1 (1+ PTR1)) SIZE)
	(SETQ PTR1 0))
    (OR (< (SETQ PTR2 (1+ PTR2)) SIZE)
	(SETQ PTR2 0))
    (SETF (RANDOM-POINTER-1 ARRAY) PTR1)
    (SETF (RANDOM-POINTER-2 ARRAY) PTR2)
    (SETQ ANS (%32-BIT-PLUS (AREF ARRAY PTR1) (AREF ARRAY PTR2)))
    (ASET ANS ARRAY PTR2))
  ;--- This is *NOT* the right way to get a number evenly distributed between 0 and ARG!!
  (COND (ARG (\ (LDB (BYTE 31 0) ANS) ARG))	;assure positive
	(T ANS)))

;; Return a randomly chosen number at least LOW and less than HIGH.
(DEFUN RANDOM-IN-RANGE (LOW HIGH)
  (LET* ((R (RANDOM))
	 (RNORM (// (LOGAND R #o777777) (FLOAT #o1000000))))
    (+ LOW (* RNORM (- HIGH LOW)))))

(DEFUN SIGNUM (NUMBER)
  (DECLARE LT:(SIDE-EFFECTS SIMPLE REDUCIBLE))
  (ARGUMENT-TYPECASE NUMBER
    ((:FIX :RATIONAL)
      (COND ((PLUSP NUMBER) 1)
	    ((MINUSP NUMBER) -1)
	    (T NUMBER)))
    (:SINGLE-FLOAT
      (COND ((PLUSP NUMBER) 1.0)
	    ((MINUSP NUMBER) -1.0)
	    (T NUMBER)))
    (:DOUBLE-FLOAT
      (COND ((PLUSP NUMBER) 1.0d0)
	    ((MINUSP NUMBER) -1.0d0)
	    (T NUMBER)))
    (:COMPLEX
     (LET ((REAL (COMPLEX-REALPART NUMBER))
	   (IMAG (COMPLEX-IMAGPART NUMBER)))
       (COND ((ZEROP IMAG)
	      (IF (ZEROP REAL)
		  NUMBER
		  (MAKE-COMPLEX-INTERNAL (SIGNUM REAL) IMAG)))
	     ((ZEROP REAL)
	      (MAKE-COMPLEX-INTERNAL REAL (SIGNUM IMAG)))
	     (T (LET ((MAGNITUDE (COMPLEX-ABS-COMPONENTS REAL IMAG)))
		  (MAKE-COMPLEX-INTERNAL (RATIONAL-QUOTIENT REAL MAGNITUDE)
					 (RATIONAL-QUOTIENT IMAG MAGNITUDE)))))))
    ))

;;; Routines for decimal-to-binary floating-point conversion
;;;
;;; The general theory is to scale by some appropriate power of five,
;;;   FLOAT and scale by a power of two.  The order of operations may vary, in
;;;   an attempt to get the correct answer without using exact (bignum) arithmetic.
;;;   But when there's a question, exact arithmetic is used.
;;;
;;; Note that negation must be done before FLOATing, since some rounding modes
;;;   are sensitive to the sign.
;;;
;;; We produce the correctly rounded #+3600 (according to float-operating-mode)
;;;   results in almost all cases.
;;;   Exceptions:
;;;      -- (abs power-of-10) must be  441, or power-of-5-components overflows
;;;      -- Denormalized results will have been rounded twice: once in FLOAT, once in ASH

(defun float-and-scale (negative-p integer power-of-10 &optional (power-of-2 0))
  ;; integer must be non-negative
  ;; negative-p is needed for directed roundings
  (cond ((zerop integer)
	 (if negative-p
	     (- 0.0)				; avoid bootstrapping problems
	     0.0))
	((zerop power-of-10)
	 (float-and-scale-by-power-of-2 ':single negative-p integer power-of-2))
	((< power-of-10 -441)
	 (float-underflow-result (single-float-big-underflow-value (if negative-p -1 1))
				 'float-and-scale
				 negative-p integer power-of-10 power-of-2))
	((> power-of-10 441)
	 (float-overflow-result (single-float-overflow-value (if negative-p -1 1))
				'float-and-scale
				negative-p integer power-of-10 power-of-2))
	(t
	 (or (float-and-scale-inexact negative-p integer power-of-10 power-of-2)
	     (float-and-scale-exact ':single negative-p integer power-of-10 power-of-2)))))

(defvar *dfloat-and-scale-table*)		;filled in later

(defun dfloat-and-scale (negative-p integer power-of-10 &optional (power-of-2 0))
  ;; don't cons for some set of "usual" numbers
  (cond ((zerop integer)
	 (if negative-p -0.0d0 0.0d0))
	((< power-of-10 -441)
	 (float-underflow-result (double-float-big-underflow-value (if negative-p -1 1))
				 'dfloat-and-scale
				 negative-p integer power-of-10 power-of-2))
	((> power-of-10 441)
	 (float-overflow-result (double-float-overflow-value (if negative-p -1 1))
				'dfloat-and-scale
				negative-p integer power-of-10 power-of-2))
	(t
	 (when (and ( integer 90)
		    (zerop (mod integer 10)))
	   ;; handle 1.0d0, etc.
	   (setq integer (floor integer 10))
	   (incf power-of-10))
	 (if (and ( integer 9)
		  ( -1 power-of-10 0)
		  (zerop power-of-2))
	     (let ((index (1- integer)))
	       (unless negative-p (incf index 18.))
	       (when (zerop power-of-10) (incf index 9.))
	       (aref *dfloat-and-scale-table* index))
	     (double-to-consed
	       (dfloat-and-scale-components negative-p integer power-of-10 power-of-2))))))

(defun dfloat-and-scale-components (negative-p integer power-of-10 &optional (power-of-2 0))
  (cond ((zerop integer)
	 (values (if negative-p #.(%logdpb 1 %%double-sign 0) 0) 0))
	((zerop power-of-10)
	 (float-and-scale-by-power-of-2 ':double-float negative-p integer power-of-2))
	(t
	 (double-let* ((double (dfloat-and-scale-inexact-components
				 negative-p integer power-of-10 power-of-2)))
	   (if double-high
	       (double-value double)
	       (float-and-scale-exact ':double-float negative-p integer
				      power-of-10 power-of-2))))))

(defun float-and-scale-inexact (negative-p integer power-of-10 power-of-2)
  ;; compute a result using inexact arithmetic (double-precision)
  ;; if the error in computation could make a difference in the answer, return NIL
  (let ((length (haulong integer))
	inexact-result)
    (double-let* (fraction)
      (let ((old-status (float-operation-status)))
	(unwind-protect
	  (progn 
	    (setf (float-operation-status) 0)
	    ;; compute double, but don't change status
	    ;; save inexact-result flag from this computation
	    ;; shift by length, in case the luser gave us a huge integer
	    (double-setq fraction
			 (float-and-scale-by-power-of-2 ':double-float negative-p integer
							(- length)))
	    (double-setq fraction
			 (if (minusp power-of-10)
			     (double-// fraction
					(power-of-5-components (- power-of-10)))
			     (double-* fraction (power-of-5-components power-of-10))))
	    (setq inexact-result (float-flag? :inexact-result)))
	  (setf (float-operation-status) old-status)))
      (unless (and inexact-result
		   (selectq (ldb (byte 27 2) fraction-low)
		     ((#o400000000 #o377777777)
		      ;; if it's near .5 and rounding-to-nearest, punt
		      (float-rounding-mode? :nearest))
		     ((#o777777777 #o000000000)
		      ;; if it's near 1 or 0 and {truncate, floor, ceiling}, punt
		      (not (float-rounding-mode? :nearest)))))
	(when inexact-result
	  (setq fraction-low (logior fraction-low 1)))
	(ash (double-to-single fraction) (+ power-of-10 power-of-2 length))))))

(defun dfloat-and-scale-inexact-components (negative-p integer power-of-10 power-of-2)
  ;; compute the result, if possible, using only double-precision arithmetic
  ;; if there's any doubt, punt
  (let ((length (haulong integer))
	exact-fraction)
    (double-let* (fraction)
      (let ((old-status (float-operation-status)))
	(unwind-protect
	  (progn 
	    (setf (float-operation-status) 0)
	    (double-setq fraction (float-and-scale-by-power-of-2 ':double-float
								 negative-p integer
								 (- length)))
	    (setq exact-fraction (not (float-flag? :inexact-result))))
	  (setf (float-operation-status) old-status)))
      (when (and exact-fraction
		 (or ( (abs power-of-10) 22)	;exact powers of five
		     ;; the following assumes that the result of power-of-five-components
		     ;; has been rounded at most once.
		     (and ( power-of-10 0)	;it's a multiply
			  (zerop fraction-low)	;by a power of two
			  (zerop (ldb %%double-fraction-high fraction-high)))))
	(double-let* ((fives (power-of-5-components (abs power-of-10))))
	  (double-ash (if (minusp power-of-10)
			  (double-// fraction fives)
			(double-* fraction fives))
		      (+ power-of-10 power-of-2 length)))))))

(defsubst bignum-lowpart-zerop (num n)
  (zerop (haipart num (- n))))

(defun float-and-scale-exact (type negative-p integer power-of-10 power-of-2)
  (let ((2s (+ power-of-10 power-of-2)))
    (if (minusp power-of-10)
	(let* ((divisor (integer-power-of-5 (- power-of-10)))
	       ;; make sure we will have enough bits in the quotient
	       ;; (and a couple extra for rounding)
	       (shift-factor (+ (- (haulong divisor) (haulong integer))
				(selectq type
				  (:double-float 56)
				  (otherwise 27))))	;fraction + G + R + S
	       (scaled-integer (ash integer shift-factor))
	       (quotient (// scaled-integer divisor)))
	  (when (and (evenp quotient)
		     (or (and (minusp shift-factor)
			      (not (bignum-lowpart-zerop integer
							 (- shift-factor))))
			 (not (zerop (\ scaled-integer divisor)))))
	    (setq quotient (logior quotient 1)))
	  (float-and-scale-by-power-of-2 type negative-p quotient (- 2s shift-factor)))
      (float-and-scale-by-power-of-2 type negative-p
				     (* integer (integer-power-of-5 power-of-10))
				     2s))))

;;; Printing most-positive-single-float needs 38, (nextafter 0.0 1.0) needs 45
;;; Printing most-positive-double-float needs 308, (nextafter 0.0d0 1.0d0) needs 324
;;; Dogs don't have denorms, so they even though the exponent size is the same,
;;;   they don't need as much
(defconst *integer-powers-of-5-size* 325)

(defun make-integers-powers-of-5 ()
  (loop with array = (make-array *integer-powers-of-5-size* ':area safeguarded-objects-area)
	with default-cons-area = safeguarded-objects-area ;; This is for locality, mainly.
	for expt below *integer-powers-of-5-size*
	as power = 1 then (* power 5) do (setf (aref array expt) power)
	finally (return array)))

(defconst *integer-powers-of-5* (make-integers-powers-of-5)
  "The integer powers of five, for decimal//binary conversions.")

;;; use powers of five, so we don't generate so many spurious zero bits
(defun integer-power-of-5 (n)
  ;; save a little bignum consing, for common exponents
  (if (< n *integer-powers-of-5-size*)
      (aref *integer-powers-of-5* n)
      (^ 5 n)))

(defun power-of-5-components (n)
  ;; Callers need to know tht the result has been rounded no more than once
  (dfloat-components (integer-power-of-5 n)))

(defun float-and-scale-by-power-of-2 (type negative-p integer power-of-2)
  ;; basically a FLOAT and an ASH, but it's careful to work when the
  ;;    integer is big but the power-of-2 is negative
  ;; it does use the FLOAT and ASH operators, so it is sensitive to the rounding and
  ;;    over/underflow modes -- also it sets the inexact-result flag appropriately
  ;; denormalized results are rounded twice -- once by FLOAT and once by ASH,
  ;;    so they may not be as accurate
  (let* ((haulong-integer (haulong integer))
	 (shift-amount (if (> haulong-integer 100)
			   ;; make sure the float won't overflow
			   (- 100 haulong-integer)
			 0))
	 (exponent-adjustment (- power-of-2 shift-amount))
	 (integer-for-floating (ash integer shift-amount)))
    (when (and (evenp integer-for-floating)
	       (minusp shift-amount)
	       ;; shift-amount is only negative for bignums
	       ;; see if we lost any one-bits
	       (not (bignum-lowpart-zerop integer (- shift-amount))))
      (setq integer-for-floating (logior integer-for-floating 1)))
    (when negative-p
      ;; negate before floating, so directed rounding modes work
      (setq integer-for-floating (- integer-for-floating)))
    ;; let float worry about rounding, let ash worry about over/underflow
    (selectq type
      (:double-float
       (double-ash (double-dfloat integer-for-floating) exponent-adjustment))
      (otherwise
       (ash (float integer-for-floating) exponent-adjustment)))))

(defun print-float-digits (string exponent sign n-digits digits stream)
  (when (minusp sign)
    (send stream ':tyo (pttbl-minus-sign readtable)))
  (when ( exponent 0)
    (send stream ':tyo #\0))
  (print-digits-with-decimal-point string n-digits exponent digits stream))

(defun print-float-digits-e-format (stream string sign print-sign
				    print-leading-zero
				    n-digits digits scale
				    exponent-type-character print-exponent-sign
				    exponent-zero-padding printed-exponent)
  (when print-sign
    (send stream :tyo (if (minusp sign) #\- #\+)))
  (when print-leading-zero
    (send stream :tyo #\0))
  (print-digits-with-decimal-point string n-digits scale (or digits n-digits) stream)
  (send stream :tyo exponent-type-character)
  (cond (print-exponent-sign
	 (send stream :tyo (if (minusp printed-exponent) #\- #\+))
	 (when exponent-zero-padding
	   (loop repeat exponent-zero-padding
		 do (send stream :tyo #\0)))
	 (print-integer-digits printed-exponent 10 stream))
	(t
	 (print-integer printed-exponent 10 stream))))

(defun print-digits-with-decimal-point (string digits-in-string pre-.-digits total-digits
					stream)
  ;; prints the digits in the string with a decimal point inserted according to exponent
  ;; and with zeros after the point or trailing zeros if necessary
  (let ((leading-digits (min digits-in-string pre-.-digits)))
    (when ( 0 leading-digits)
      (send stream ':string-out string 0 leading-digits)))
  (loop repeat (max 0 (- pre-.-digits digits-in-string))
	do (send stream ':tyo #\0))
  (send stream ':tyo (si:pttbl-decimal-point readtable))
  (when ( pre-.-digits digits-in-string)
    (loop repeat (- pre-.-digits)
	  do (send stream ':tyo #\0))
    (send stream ':string-out string
	  (max 0 pre-.-digits) digits-in-string))
  (loop repeat (- total-digits digits-in-string
		  (if (minusp pre-.-digits)
		      (- pre-.-digits)
		      (max (- pre-.-digits digits-in-string) 0)))
	do (send stream ':tyo #\0)))

(defun fixed-width-decimal-digits-from-float
       (float digits relative-p
	&optional all-digits (string (make-array (max 20 digits)
						 ':type 'art-string
						 ':fill-pointer 0)))
  (multiple-value-bind (integer exponent sign)
      (integer-decode-float float)
    (if (zerop integer)
	(values string 0 sign 0)
      (multiple-value-bind (ignore decimal-exponent n-digits)
	  (fixed-width-decimal-digits integer exponent digits relative-p all-digits string)
	(values string decimal-exponent sign n-digits)))))

(defun fixed-width-decimal-digits (integer exponent digits relative-p all-digits string)
  (declare (values string decimal-exponent n-digits))
  ;; (not relative-p) => round to <digits> places
  ;; relative-p => round to <digits> places before/after the decimal-point
  ;; (not all-digits) => don't print past the last significant place
  (if (zerop integer)
      (values string 0 0)
      (with-float-operating-mode (:from-default)
       (let* ((ulp 1)
	      (den 1)
	      (eps 1)
	      (length (haulong integer))
	      (decimal-scale (fix (* (+ exponent length) 0.30103)))
	      (digit-count (fill-pointer string))
	      (decimal-digits (1+ (fix (* length 0.30103))))
	      (asked-digits (if relative-p
				(if ( decimal-scale digits)
				    ;; make certain we look for round-up
				    ;; adjust decimal-scale accordingly
				    (progn (setq decimal-scale (1+ digits))
					   1)
				    (- decimal-scale digits))
				digits))
	      (max-digits (if all-digits asked-digits
			      ;; limit it, but check the estimate later
			      (min decimal-digits asked-digits)))
	      (5s (- decimal-scale))
	      (2s (- exponent decimal-scale))
	      (eps2s (- -1 max-digits))
	      (eps5s (- max-digits)))
	 ;; do the appropriate rational arithmetic to put ulp and eps over
	 ;; a common denominator
	 ;; but don't cons the rationals or reduce (that's not necessary)
	 (let ((2sdiff (- 2s eps2s)))
	   (if (minusp 2sdiff)
	       (setq eps (ash eps (- 2sdiff)))
	       (setq 2s eps2s
		     ulp (ash ulp 2sdiff))))
	 (let ((5sdiff (- 5s eps5s)))
	   (if (minusp 5sdiff)
	       (setq eps (* eps (integer-power-of-5 (- 5sdiff))))
	       (setq 5s eps5s
		     ulp (* ulp (integer-power-of-5 5sdiff)))))
	 (when (minusp 2s)
	   (setq den (ash den (- 2s))))
	 (when (minusp 5s)
	   (setq den (* den (integer-power-of-5 (- 5s)))))
	 (let ((num (* ulp integer)))
	   (when (and (not relative-p) ( num den))
	     ;; decimal-scale was off by one, so adjust eps accordingly
	     (setq eps (* eps 10)))
	   (when (and (not all-digits)
		      (if (zerop (logand integer (1- integer)))
			  ;; exact power of two
			  ( (* 40 eps) ulp)	;10 eps  ulp/4
			  (if (evenp integer)
			      ( (* 20 eps) ulp)	;10 eps  ulp/2
			      (< (* 20 eps) ulp))))	;10 eps < ulp/2
	     ;; decimal-digits was off by one, so adjust eps
	     (setq eps (* eps 10)))
	   (if (< num eps)
	       (values string 0 0)
	       (let ((round-up (simple-decimal-rational (- num eps) den (+ eps eps)
							nil t string)))
		 (when round-up
		   (incf decimal-scale))
		 (values string decimal-scale (- (fill-pointer string) digit-count)))))))))

;;; modified from RWG's simple-rational
(defun simple-decimal-rational (num den eps low-closed high-closed string)
  ;; puts decimal digits into string
  ;; returns a boolean telling whether the first digit was non-zero,
  ;; as will be the case if we round up, or if we were off in our initial exponent guess by 1
  (loop with first-digit = nil
	for term = (if low-closed
		       (ceiling num den)
		       (1+ (floor num den)))
	as term-value = (* term den)
	until (if high-closed
		  ( term-value (+ num eps))
		  (< term-value (+ num eps)))
	do (setq num (* (- num (- term-value den)) 10)
		 eps (* eps 10))
	   (when (or first-digit (> (setq first-digit term) 1))
	     (array-push string (digit-char (1- term))))
	finally (array-push string (digit-char term))
		(return (or (not first-digit) (> first-digit 1)))))


(defun short-decimal-digits-from-float
       (float &optional (string (make-array 20 ':type 'art-string ':fill-pointer 0)))
  (multiple-value-bind (integer exponent sign)
      (integer-decode-float float)
    (if (zerop integer)
	(values string 0 sign 0)
      (multiple-value-bind (ignore decimal-exponent n-digits)
	  (short-decimal-digits integer exponent string)
	(values string decimal-exponent sign n-digits)))))

(defun short-decimal-digits (integer exponent string)
  (declare (values string decimal-exponent n-digits))
  (if (zerop integer)
      (values string 0 0)
    (with-float-operating-mode (:from-default)
     (let* ((num (ash integer 1))
	    (den 1)
	    (eps 1)
	    ;; this is either exact or one too big
	    (decimal-scale (fix (* (+ exponent (haulong integer)) 0.30103)))
	    (2s (- exponent decimal-scale 1))
	    (digit-count (fill-pointer string)))
       (if (minusp 2s)
	   (setq den (ash den (- 2s)))
	 (setq num (ash num 2s)
	       eps (ash eps 2s)))
       (if (minusp decimal-scale)
	   (let ((fives (integer-power-of-5 (- decimal-scale))))
	     (setq num (* num fives)
		   eps (* eps fives)))
	 (setq den (* den (integer-power-of-5 decimal-scale))))
       (let ((round-up (if (zerop (logand integer (1- integer)))
			   (short-decimal-rational (+ num num) (+ den den)
						   eps (ash eps 1) t t t string)
			   (short-decimal-rational num den eps eps
						   (evenp integer) (evenp integer)
						   t string))))
	 (when round-up
	   (incf decimal-scale))
	 (values string decimal-scale (- (fill-pointer string) digit-count)))))))

(defun short-decimal-rational
       (num den low-eps high-eps low-closed high-closed decimal-rounded string)
  ;; puts decimal digits into string
  ;; returns a boolean telling whether the first digit was non-zero,
  ;; as will be the case if we round up, or if we were off in our initial exponent guess by 1
  (let* ((first-digit nil)
	 (last-term (loop do (multiple-value-bind (term rem)
				 (floor num den)
			       (cond ((if low-closed
					  ( rem low-eps)
					  (< rem low-eps))
				      (when (if high-closed
						( den (+ rem high-eps))
						(< den (+ rem high-eps)))
					(return (if (< (+ rem rem) den)
						    term (1+ term))))
;				      (unless (< (+ rem rem) den)
;				        (format t "[shouldn't round down]"))
				      (when (or (not decimal-rounded)
						(< (+ rem rem) den))
					(return term)))
				     ((if high-closed
					  ( den (+ rem high-eps))
					  (< den (+ rem high-eps)))
;				      (unless ( (+ rem rem) den)
;				        (format t "[shouldn't round up]"))
				      (when (or (not decimal-rounded)
						( (+ rem rem) den))
					(return (1+ term)))))
			       (when (or first-digit (> (setq first-digit term) 0))
				 (array-push string (digit-char term)))
			       (setq num (* rem 10)
				     low-eps (* low-eps 10)
				     high-eps (* high-eps 10))))))
    (array-push string (digit-char last-term))
    (or (not first-digit) (> first-digit 0))))

(defun single-float-overflow-value (z-sign)
  (cond ((float-rounding-mode? :nearest)
	 (if (minusp z-sign) infinite-negative-single-float infinite-positive-single-float))
	((float-rounding-mode? :plus)
	 (if (minusp z-sign) most-negative-single-float infinite-positive-single-float))
	((float-rounding-mode? :minus)
	 (if (minusp z-sign) infinite-negative-single-float most-positive-single-float))
	(t
	 (if (minusp z-sign) most-negative-single-float most-positive-single-float))))

(defun double-float-overflow-value (z-sign)
  (cond ((float-rounding-mode? :nearest)
	 (if (minusp z-sign) infinite-negative-double-float infinite-positive-double-float))
	((float-rounding-mode? :plus)
	 (if (minusp z-sign) most-negative-double-float infinite-positive-double-float))
	((float-rounding-mode? :minus)
	 (if (minusp z-sign) infinite-negative-double-float most-positive-double-float))
	(t
	 (if (minusp z-sign) most-negative-double-float most-positive-double-float))))

(defun float-underflow-result (non-trap-result function &rest operands)
  (declare (dbg:error-reporter))
  (cond ((float-trap-enable? :underflow)
	 (signal-proceed-case ((value)
			       'floating-exponent-underflow
			       :function function
			       :operation function
			       :operands (copylist operands)
			       :non-trap-result non-trap-result
			       :saved-float-operation-status (float-operation-status))
	   (:use-non-trap-result value)
	   (:new-value value)))
	(t
	 (float-set-flag :underflow)
	 (float-set-flag :inexact-result)
	 non-trap-result)))

(defun float-overflow-result (non-trap-result function &rest operands)
  (declare (dbg:error-reporter))
  (cond ((float-trap-enable? :overflow)
	 (signal-proceed-case ((value)
			       'floating-exponent-overflow
			       :function function
			       :operation function
			       :operands (copylist operands)
			       :non-trap-result non-trap-result
			       :saved-float-operation-status (float-operation-status))
	   (:use-non-trap-result value)
	   (:new-value value)))
	(t
	 (float-set-flag :overflow)
	 (float-set-flag :inexact-result)
	 non-trap-result)))

(defun single-float-big-underflow-value (z-sign)
  (cond ((float-rounding-mode? :plus)
	 cl:least-positive-single-float)
	((float-rounding-mode? :minus)
	 cl:least-negative-single-float)
	(t
	 (if (minusp z-sign) -0.0 0.0))))

(defun double-float-big-underflow-value (z-sign)
  (cond ((float-rounding-mode? :plus)
	 cl:least-positive-double-float)
	((float-rounding-mode? :minus)
	 cl:least-negative-double-float)
	(t
	 (if (minusp z-sign) -0.0d0 0.0d0))))

(defnumop ash ((n float) (n-bits bignum))
  (selectq (float-exception-type n)
    ((:zero :infinity :nan) n)
    (otherwise
     (if (minusp n-bits)
	 (float-underflow-result (single-float-big-underflow-value n) 'ash n n-bits)
	 (float-overflow-result (single-float-overflow-value n) 'ash n n-bits)))))

(defnumop ash ((n double) (n-bits bignum))
  (selectq (float-exception-type n)
    ((:zero :infinity :nan) n)
    (otherwise
     (if (minusp n-bits)
	 (float-underflow-result (double-float-big-underflow-value n) 'ash n n-bits)
	 (float-overflow-result (double-float-overflow-value n) 'ash n n-bits)))))


(defun sticky-right-ash (n n-bits)
  (if (cond ((bignump n)
	     (bignum-lowpart-zerop n n-bits))
	    ((< n-bits #.(ash 1 %%byte-spec-size))
	     (zerop (ldb (byte n-bits 0) n)))
	    (t
	     (zerop n)))
      (ash n (- n-bits))
      (logior (ash n (- n-bits)) 1)))

(defun right-ash-and-round-fraction (n n-bits sign)
  ;; Note that the round-up could overflow into the normalize bit.
  ;; But only if the resulting value is #2r10000000....
  ;; As long as you're throwing away the normalize bit, who cares?
  ;; If you're not, you could always just logior it back in or something.
  (if (< n-bits 0)
      (ferror "Right shifting to left? (internal error)")
      (selectq n-bits
	(0 n)
	(1 (right-ash-and-round-fraction (ash n 2) (+ n-bits 2) sign))
	(2 (right-ash-and-round-fraction (ash n 1) (+ n-bits 1) sign))
	(otherwise
	 (let ((frac (sticky-right-ash n (- n-bits 3))))
	   (cond ((float-rounding-mode? :nearest)
		  (selectq (ldb (byte 4 0) frac)
		    (#b(0000 1000)		;0000, 1000
		     (ash frac -3))
		    (#b(0001 0010 0011 0100 1001 1010 1011)	;0001, 001x, 0100, 1001, 101x
		     (float-set-flag inexact-result)
		     (ash frac -3))
		    (otherwise			;01xx, 11xx
		     (float-set-flag inexact-result)
		     (1+ (ash frac -3)))))
		 ((float-rounding-mode? :zero)
		  (when (ldb-test (byte 3 0) frac)
		    (float-set-flag inexact-result))
		  (ash frac -3))
		 ((float-rounding-mode? :plus)
		  (cond ((zerop (ldb (byte 3 0) frac))
			 (ash frac -3))
			((minusp sign)
			 (float-set-flag inexact-result)
			 (ash frac -3))
			(T
			 (float-set-flag inexact-result)
			 (1+ (ash frac -3)))))
		 (T ;;rounding-mode-minus
		  (cond ((zerop (ldb (byte 3 0) frac))
			 (ash frac -3))
			((minusp sign)
			 (float-set-flag inexact-result)
			 (1+ (ash frac -3)))
			(T
			 (float-set-flag inexact-result)
			 (ash frac -3))))))))))


(defun pack-denormalized-single (sign expt frac)
  (%flonum (%logdpb (right-ash-and-round-fraction frac (- 4 expt) sign)
		    %%single-except-sign
		    sign)))

;(defun repack-single-parts-as-double (sign expt frac)
;  (%make-double (%logdpb (ldb %%single-sign sign) %%double-sign
;			 (dpb (+ expt #.(- %double-exponent-bias %single-exponent-bias))
;			      %%double-exponent
;			      (ldb (byte 20. 6) frac)))
;		(%logdpb (ldb (byte 5 1) frac) (byte 5 27.) 0)))

(defun pack-denormalized-double-components (sign expt frac-high frac-low)
  (let ((frac (right-ash-and-round-fraction (dpb frac-low (byte 32. 0)
						 (ash frac-high 32.))
					    (- 4 expt) sign)))
    ;; get rid of NGRS
    (values (%logdpb (ldb (byte 21. 32.) frac)	; exponent might be 1 by rounding
		     %%double-except-sign-high sign)
	    (%logdpb (ldb (byte 1 31.) frac) (byte 1 31.)
		     (ldb (byte 31. 0) frac)))))
