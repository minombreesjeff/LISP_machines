;;;-*- Mode: LISP; Package: SYSTEM-INTERNALS; Base: 8-*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;; NOTE: These macros make no attempt to preserve order of evaluation,
;; or number of times evaluation, in the reference being expanded.
;; The caller should not depend on such things.

(DEFMACRO SETF (ACCESSOR VALUE &ENVIRONMENT ENV)
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  (DO ((REF ACCESSOR) (VAL VALUE) (FCN) (LOCAL)) (NIL)
    (COND ((SYMBOLP REF)			;SPECIAL CASE NEEDED.
	   (WHEN (EQ REF (SETQ REF (MACROEXPAND-1-WITH-STYLE-CHECK REF ENV)))
	     (RETURN `(SETQ ,REF ,VAL))))
	  ((NOT (LISTP REF))
	   (FERROR "~S is not a valid SETF accessor." REF))
	  ((NOT (SYMBOLP (CAR REF)))
	   (FERROR NIL "~S non-symbolic function in SETF" (CAR REF)))
	  ((AND (NOT (SETF LOCAL (LOCAL-FUNCTION-DEFINITION (CAR REF) ENV)))
		(SETQ FCN (GET (CAR REF) 'SETF)))
	   (RETURN (LOCF-APPLY FCN REF T VAL)))
	  ((AND (NOT LOCAL) (SETQ FCN (GET (CAR REF) 'SETF-EXPANDER)))
	   (SETQ REF (LOCF-APPLY FCN REF NIL NIL)))
	  ((AND (NOT LOCAL) (FBOUNDP (CAR REF)) (ARRAYP (FSYMEVAL (CAR REF))))
	      (RETURN `(ASET ,VAL (FUNCTION ,(CAR REF)) . ,(CDR REF))))
	  ;; Not very modular, but it works.
	  ((AND (NOT LOCAL)
		(OR (LOOP FOR PROP IN SI:*SETF-PROPERTIES*
			  THEREIS (GETDECL (CAR REF) PROP))
		    (LT:FIND-INLINE-FORM-METHOD (CAR REF) ENV)))
	   (RETURN `(CL:SETF ,REF ,VALUE)))
	  ((NOT (EQ REF (SETQ REF (MACROEXPAND-1-WITH-STYLE-CHECK REF ENV)))))
	  (T (MULTIPLE-VALUE-BIND (NIL SYM)
		 (SIGNAL 'UNKNOWN-SETF-REFERENCE
			 ':FORM REF
			 ':PROCEED-TYPES '(:NEW-SYMBOL))
	       (SETQ REF (CONS SYM (CDR REF))))))))

(DEFUN (:PROPERTY SETF :UNDO-FUNCTION) (FORM)
  (LET ((ACCESSOR (SECOND FORM)))
    (IF (CONDITION-CASE ()
	    (LOCATION-BOUNDP (EVAL `(LOCF ,ACCESSOR)))
	  ;; if we can't take LOCF, then assume it has a value (e.g.,
	  ;; some byte field, or forms that don't have LOCF expanders.
	  (ERROR T))
	`(SETF ,ACCESSOR ',(EVAL ACCESSOR))
	`(LOCATION-MAKUNBOUND (LOCF ,ACCESSOR)))))

(DEFUN LOCF-APPLY (FCN REF VAL-P VAL)
    (COND ((OR (ATOM FCN) (MEMQ (CAR FCN) '(DIGESTED-LAMBDA LAMBDA NAMED-LAMBDA)))
	   (COND (VAL-P (FUNCALL FCN REF VAL))
		 (T (FUNCALL FCN REF))))
	  (T (DO ((PATTERN (CDAR FCN) (CDR PATTERN))
		  (REF (CDR REF) (CDR REF))
		  (SUBS
		     (AND VAL-P (LIST (CONS 'VAL VAL)))
		     (CONS (CONS (CAR PATTERN) (CAR REF)) SUBS)))
		 ((OR (ATOM PATTERN) (ATOM REF))
		  (COND ((AND (ATOM PATTERN) (NOT (NULL PATTERN)))
			 (PUSH (CONS PATTERN REF) SUBS))
			((OR PATTERN REF)
			 (FERROR "Reference not same length as pattern - LOCF or SETF")))
		  (SUBLIS SUBS (CDR FCN)))))))

(DEFMACRO SWAPF (A B)
  (DECLARE (COMPILER:DO-NOT-RECORD-MACROEXPANSIONS))
  `(CL:ROTATEF ,A ,B))

;Load time defprops for SETF and LOCF.
;Value of the SETF property is either an symbol which is a function
; which is applied to two arguments: the reference and the value 
; to be stored into it, or it is CONS of a 1-level pattern to
; match against REF and a form in which substitutions
; are made for the symbol VAL and the pattern atoms.
;The value of the LOCF property is very similar; if it is
;a symbol then it is a function to be applied to one argument,
;the reference.  Otherwise it is a pattern as in SETF, except
;that the symbol VAL is not special.

;A SETF-EXPANDER property looks like a LOCF property,
;but instead of telling how to get the location of the value
;it gives another expression for the same value.
;The idea is that that expression will be amenable to SETF/LOCF.

;;; (DEFPROP AREF ((AREF ARRAY . SUBSCRIPTS)
;;;                 ASET VAL ARRAY . SUBSCRIPTS) SETF)
;;; (DEFPROP AREF ((AREF ARRAY . SUBSCRIPTS)
;;;                 ALOC ARRAY . SUBSCRIPTS) LOCF)

(DEFPROP AREF AREF-SETF SETF)
(DEFUN AREF-SETF (REF VAL)
    `(ASET ,VAL . ,(CDR REF)))
#||(DEFPROP AREF AREF-LOCF LOCF)||#
;;(DEFUN AREF-LOCF (REF)
;;    `(ALOC . ,(CDR REF)))

(DEFPROP AR-1 ((AR-1 ARRAY INDEX)
	       AS-1 VAL ARRAY INDEX) SETF)
#||(DEFPROP AR-1 ((AR-1 ARRAY INDEX)
	       AP-1 ARRAY INDEX) LOCF)||#

(DEFPROP AR-2 ((AR-2 ARRAY INDEX1 INDEX2)
	       AS-2 VAL ARRAY INDEX1 INDEX2) SETF)
#||(DEFPROP AR-2 ((AR-2 ARRAY INDEX1 INDEX2)
	       AP-2 ARRAY INDEX1 INDEX2) LOCF)||#

(DEFPROP AR-3 ((AR-3 ARRAY INDEX1 INDEX2 INDEX3)
	       AS-3 VAL ARRAY INDEX1 INDEX2 INDEX3) SETF)
#||(DEFPROP AR-3 ((AR-3 ARRAY INDEX1 INDEX2 INDEX3)
	       AP-3 ARRAY INDEX1 INDEX2 INDEX3) LOCF)||#

(DEFPROP ARRAY-LEADER ((ARRAY-LEADER ARRAY INDEX)
		       STORE-ARRAY-LEADER VAL ARRAY INDEX) SETF)
#||(DEFPROP ARRAY-LEADER ((ARRAY-LEADER ARRAY INDEX)
		       AP-LEADER ARRAY INDEX) LOCF)||#

(DEFPROP %1D-AREF ((%1D-AREF ARRAY INDEX) . (%1D-ASET VAL ARRAY INDEX)) SETF)

#||(DEFPROP %1D-AREF ((%1D-AREF ARRAY INDEX) . (%1D-ALOC ARRAY INDEX)) LOCF)||#

(DEFPROP FTN-AR-1 ((FTN-AR-1 INDEX) . (FTN-AS-1 VAL INDEX)) SETF)

#||(DEFPROP FTN-AR-1 ((FTN-AR-1 INDEX) . (FTN-AP-1 INDEX)) LOCF)||#

(DEFPROP ARRAYCALL ARRAYCALL-SETF SETF)
(DEFUN ARRAYCALL-SETF (REF VAL)
  `(ASET ,VAL . ,(CDDR REF)))
#||(DEFPROP ARRAYCALL ARRAYCALL-LOCF LOCF)
(DEFUN ARRAYCALL-LOCF (REF)
  `(ALOC . ,(CDDR REF)))||#

(DEFPROP CDR ((CDR ITEM) . (RPLACD ITEM VAL)) SETF)
#||(DEFPROP CDR ((CDR LIST) . LIST) LOCF)||#

(DEFPROP CAR ((CAR LIST) . (RPLACA LIST VAL)) SETF)
#||(DEFPROP CAR ((CAR LIST) . (CAR-LOCATION LIST)) LOCF)||#

(DEFPROP CDDR ((CDDR ITEM) . (CDR (CDR ITEM))) SETF-EXPANDER)
(DEFPROP CDDDR ((CDDDR ITEM) . (CDR (CDDR ITEM))) SETF-EXPANDER)
(DEFPROP CDDDDR ((CDDDDR ITEM) . (CDR (CDDDR ITEM))) SETF-EXPANDER)
(DEFPROP CDDDAR ((CDDDAR ITEM) . (CDR (CDDAR ITEM))) SETF-EXPANDER)
(DEFPROP CDDAR ((CDDAR ITEM) . (CDR (CDAR ITEM))) SETF-EXPANDER)
(DEFPROP CDDADR ((CDDADR ITEM) . (CDR (CDADR ITEM))) SETF-EXPANDER)
(DEFPROP CDDAAR ((CDDAAR ITEM) . (CDR (CDAAR ITEM))) SETF-EXPANDER)
(DEFPROP CDAR ((CDAR ITEM) . (CDR (CAR ITEM))) SETF-EXPANDER)
(DEFPROP CDADR ((CDADR ITEM) . (CDR (CADR ITEM))) SETF-EXPANDER)
(DEFPROP CDADDR ((CDADDR ITEM) . (CDR (CADDR ITEM))) SETF-EXPANDER)
(DEFPROP CDADAR ((CDADAR ITEM) . (CDR (CADAR ITEM))) SETF-EXPANDER)
(DEFPROP CDAADR ((CDAADR ITEM) . (CDR (CAADR ITEM))) SETF-EXPANDER)
(DEFPROP CDAAAR ((CDAAAR ITEM) . (CDR (CAAAR ITEM))) SETF-EXPANDER)
(DEFPROP CADR ((CADR ITEM) . (CAR (CDR ITEM))) SETF-EXPANDER)
(DEFPROP CADDR ((CADDR ITEM) . (CAR (CDDR ITEM))) SETF-EXPANDER)
(DEFPROP CADDDR ((CADDDR ITEM) . (CAR (CDDDR ITEM))) SETF-EXPANDER)
(DEFPROP CADDAR ((CADDAR ITEM) . (CAR (CDDAR ITEM))) SETF-EXPANDER)
(DEFPROP CADAR ((CADAR ITEM) . (CAR (CDAR ITEM))) SETF-EXPANDER)
(DEFPROP CADADR ((CADADR ITEM) . (CAR (CDADR ITEM))) SETF-EXPANDER)
(DEFPROP CADAAR ((CADAAR ITEM) . (CAR (CDAAR ITEM))) SETF-EXPANDER)
(DEFPROP CAAR ((CAAR ITEM) . (CAR (CAR ITEM))) SETF-EXPANDER)
(DEFPROP CAADR ((CAADR ITEM) . (CAR (CADR ITEM))) SETF-EXPANDER)
(DEFPROP CAADDR ((CAADDR ITEM) . (CAR (CADDR ITEM))) SETF-EXPANDER)
(DEFPROP CAADAR ((CAADAR ITEM) . (CAR (CADAR ITEM))) SETF-EXPANDER)
(DEFPROP CAAADR ((CAAADR ITEM) . (CAR (CAADR ITEM))) SETF-EXPANDER)
(DEFPROP CAAAAR ((CAAAAR ITEM) . (CAR (CAAAR ITEM))) SETF-EXPANDER)

(DEFPROP NTH ((NTH N LIST) . (CAR (NTHCDR N LIST))) SETF-EXPANDER)

(DEFPROP NTHCDR ((NTHCDR N LIST) . (CDR (NTHCDR (1- N) LIST))) SETF-EXPANDER)

(DEFPROP FSYMEVAL ((FSYMEVAL SYMBOL) . (FSET SYMBOL VAL)) SETF)
#||(DEFPROP FSYMEVAL ((FSYMEVAL SYMBOL) . (FUNCTION-CELL-LOCATION SYMBOL)) LOCF)||#

(DEFPROP FDEFINITION ((FDEFINITION FUNCTION-SPEC)
		      . (FDEFINE FUNCTION-SPEC VAL T)) SETF)
#||(DEFPROP FDEFINITION ((FDEFINITION FUNCTION-SPEC)
		      . (FDEFINITION-LOCATION FUNCTION-SPEC)) LOCF)||#

(DEFPROP SYMEVAL ((SYMEVAL SYMBOL) . (SET SYMBOL VAL)) SETF)
#||(DEFPROP SYMEVAL ((SYMEVAL SYMBOL) . (VALUE-CELL-LOCATION SYMBOL)) LOCF)||#

(DEFPROP SYMBOL-PACKAGE ((SYMBOL-PACKAGE SYMBOL)
			 . (RPLACD (PACKAGE-CELL-LOCATION SYMBOL) VAL)) SETF)
#||(DEFPROP SYMBOL-PACKAGE ((SYMBOL-PACKAGE SYMBOL)
			 . (PACKAGE-CELL-LOCATION SYMBOL)) LOCF)||#

(COMMENT
(defprop values values-setf setf)
(defun values-setf (values-form value)
  `(multiple-value ,(cdr values-form) ,value))
)

;;; This really should be called SEND or something like that
(DEFPROP FUNCALL FUNCALL-SETF SETF)

;;; Well, its called SEND now, but we have to keep this on funcall
;;; too for laffs...
(DEFPROP SEND FUNCALL-SETF SETF)

(DEFUN FUNCALL-SETF (REF VAL)
  (LET ((MESSAGE-NAME (CADDR REF))
	(REST (CDDR REF)))
    (COND ((AND (SYMBOLP MESSAGE-NAME)
		(EQ (SYMBOL-PACKAGE MESSAGE-NAME) PKG-KEYWORD-PACKAGE)))
	  ((AND (LISTP MESSAGE-NAME)
		(EQ (CAR MESSAGE-NAME) 'QUOTE)
		(SYMBOLP (CADR MESSAGE-NAME)))
	   (SETQ MESSAGE-NAME (CADR MESSAGE-NAME)))
	  (T (FERROR "Can only setf message sending funcalls")))
    (LET ((SPECIAL-EXPANDER (GET MESSAGE-NAME 'FUNCALL-SETF)))
      (IF SPECIAL-EXPANDER
	  (SETQ REST (LOCF-APPLY SPECIAL-EXPANDER REST T VAL))
	(UNLESS (= (LENGTH REST) 1)
	  (FERROR "Too many arguments for funcall-setf"))
	(SETQ REST
	      `(',(INTERN (STRING-APPEND "SET-" MESSAGE-NAME) PKG-KEYWORD-PACKAGE) ,VAL))))
    `(,(CAR REF) ,(CADR REF) ,@REST)))

(DEFPROP :GET	   ((:GET INDICATOR) . (:PUTPROP VAL INDICATOR)) FUNCALL-SETF)
(DEFPROP :GET-HASH ((:GET-HASH KEY) . (:PUT-HASH KEY VAL)) FUNCALL-SETF)

(defprop function function-setf setf)
(defun function-setf (ref val)
       (or (symbolp (cadr ref))
	   (ferror "Cannot setf ~S" ref))
       `(fset ',(cadr ref) ,val))

#||(defprop function function-locf locf)
(defun function-locf (ref)
  `(SI:FUNCTION-LOCATION ,(CADR REF)))||#

(defprop plist ((plist foo) . (setplist foo val)) setf)
#||(defprop plist ((plist foo) . (property-cell-location foo)) locf)||#

;The old thing.  Also evals ref twice, lose lose.
(DEFPROP LDB ((LDB PPSS REF) . (SETF REF (DPB VAL PPSS REF))) SETF)
(DEFPROP LDB-TEST ((LDB-TEST PPSS REF) . (SETF REF (DPB (IF VAL -1 0) PPSS REF))) SETF)
;The following tried to fix a hairy bug associated with (setf (ldb (cdr x)) 105).
; Unfortunately, it suffers from a worse problem, namely, the ref can be a
; array element of a numeric array, in which case it is illegal (and impossible)
; to make a locative pointer.
;(DEFPROP LDB ((LDB PPSS REF) . (DPB-VIA-LOCATIVE VAL PPSS (LOCF REF))) SETF)
;(IF-FOR-LISPM
;(DEFUN DPB-VIA-LOCATIVE (VAL PPSS LOCATIVE)  ;THIS MUST BE IN QRAND BECAUSE IT MUST BE
;    (RPLACD LOCATIVE (DPB VAL PPSS (CDR LOCATIVE)))))  ;IN THE COLD LOAD

(DEFPROP GET ((GET ATOM PROP) . (PUTPROP ATOM VAL PROP)) SETF)
#||(DEFPROP GET ((GET ATOM PROP) . (GET-LOCATION ATOM PROP)) LOCF)||#

(DEFPROP GETHASH
	 ((GETHASH KEY HASH-TABLE) . (PUTHASH KEY VAL HASH-TABLE)) SETF)

(DEFPROP GETHASH-EQUAL
	 ((GETHASH-EQUAL KEY HASH-TABLE) . (PUTHASH-EQUAL KEY VAL HASH-TABLE)) SETF)

(DEFPROP ARG ((ARG N) . (SETARG N VAL)) SETF)

(DEFPROP %P-CONTENTS-OFFSET ((%P-CONTENTS-OFFSET BASE OFFSET)
			     %P-STORE-CONTENTS-OFFSET VAL BASE OFFSET) SETF)
#||(DEFPROP %P-CONTENTS-OFFSET ((%P-CONTENTS-OFFSET POINTER OFFSET)
			     %MAKE-POINTER-OFFSET DTP-LOCATIVE POINTER OFFSET) LOCF)||#

(DEFPROP %P-LDB ((%P-LDB PPSS POINTER)
		 %P-DPB VAL PPSS POINTER) SETF)

(DEFPROP %P-LDB-OFFSET ((%P-LDB-OFFSET PPSS POINTER OFFSET)
			%P-DPB-OFFSET VAL PPSS POINTER OFFSET) SETF)

(DEFPROP %P-MASK-FIELD ((%P-MASK-FIELD PPSS POINTER)
			%P-DEPOSIT-FIELD VAL PPSS POINTER) SETF)

(DEFPROP %P-MASK-FIELD-OFFSET ((%P-MASK-FIELD-OFFSET PPSS POINTER OFFSET)
			       %P-DEPOSIT-FIELD-OFFSET VAL PPSS POINTER OFFSET) SETF)

(DEFPROP %P-POINTER ((%P-POINTER POINTER)
		     %P-STORE-POINTER POINTER VAL) SETF)

(DEFPROP %P-DATA-TYPE ((%P-DATA-TYPE POINTER)
		       %P-STORE-DATA-TYPE POINTER VAL) SETF)

(DEFPROP %P-CDR-CODE ((%P-CDR-CODE POINTER)
		      %P-STORE-CDR-CODE POINTER VAL) SETF)

(DEFPROP %P-FLAG-BIT ((%P-FLAG-BIT POINTER)
		      %P-STORE-FLAG-BIT POINTER VAL) SETF)

(DEFPROP %LOGLDB ((%LOGLDB PPSS REF) . (SETF REF (%LOGDPB VAL PPSS REF))) SETF)

;Handle SETF of backquote expressions, for decomposition.
;For example, (SETF `(A ,B (D ,XYZ)) FOO)
;sets B to the CADR and XYZ to the CADADDR of FOO.
;The constants in the pattern are ignored.

;Backquotes which use ,@ or ,. other than at the end of a list
;expand into APPENDs or NCONCs and cannot be SETF'd.

(COMMENT
;This was used for making (setf `(a ,b) foo) return t if
;foo matched the pattern (had A as its car).
;The other change for reinstalling this
;would be to replace the PROGNs with ANDs
;in the expansions produced by (LIST SETF), etc.
(DEFUN SETF-MATCH (PATTERN OBJECT)
  (COND ((NULL PATTERN) T)
	((SYMBOLP PATTERN)
	 `(PROGN (SETQ ,PATTERN ,OBJECT) T))
	((EQ (CAR PATTERN) 'QUOTE)
	 `(EQUAL ,PATTERN ,OBJECT))
	((MEMQ (CAR PATTERN)
	       '(CONS LIST LIST*))
	 `(SETF ,PATTERN ,OBJECT))
	(T `(PROGN (SETF ,PATTERN ,OBJECT) T)))))

;This is used for ignoring any constants in the
;decomposition pattern, so that (setf `(a ,b) foo)
;always sets b and ignores a.
(DEFUN SETF-MATCH (PATTERN OBJECT)
  (COND ((AND (NOT (ATOM PATTERN)) (EQ (CAR PATTERN) 'QUOTE))
	 NIL)
	(T `(SETF ,PATTERN ,OBJECT))))

(DEFUN (LIST SETF) (PATTERN VALUE-FORM &AUX VARIABLE)
  (COND ((SYMBOLP VALUE-FORM)
	 (SETQ VARIABLE VALUE-FORM
	       VALUE-FORM NIL))
	(T (SETQ VARIABLE (GENSYM))))
  (DO ((I 0 (1+ I))
       (ACCUM)
       (ARGS (CDR PATTERN) (CDR ARGS)))
      ((NULL ARGS)
       (COND (VALUE-FORM
	       `(LET ((,VARIABLE ,VALUE-FORM))
		  (PROGN . ,(NREVERSE ACCUM))))
	     (T (CONS 'PROGN (NREVERSE ACCUM)))))
    (PUSH (SETF-MATCH (CAR ARGS) `(NTH ,I ,VARIABLE)) ACCUM)))

(DEFUN (LIST* SETF) (PATTERN VALUE-FORM &AUX VARIABLE)
  (COND ((SYMBOLP VALUE-FORM)
	 (SETQ VARIABLE VALUE-FORM
	       VALUE-FORM NIL))
	(T (SETQ VARIABLE (GENSYM))))
  (DO ((I 0 (1+ I))
       (ACCUM)
       (ARGS (CDR PATTERN) (CDR ARGS)))
      ((NULL ARGS)
       (COND (VALUE-FORM
	       `(LET ((,VARIABLE ,VALUE-FORM))
		  (PROGN . ,(NREVERSE ACCUM))))
	     (T (CONS 'PROGN (NREVERSE ACCUM)))))
    (COND ((CDR ARGS)
	   (PUSH (SETF-MATCH (CAR ARGS) `(NTH ,I ,VARIABLE)) ACCUM))
	  (T (PUSH (SETF-MATCH (CAR ARGS) `(NTHCDR ,I ,VARIABLE)) ACCUM)))))

(DEFUN (CONS SETF) (PATTERN VALUE-FORM &AUX VARIABLE)
  (COND ((SYMBOLP VALUE-FORM)
	 (SETQ VARIABLE VALUE-FORM
	       VALUE-FORM NIL))
	(T (SETQ VARIABLE (GENSYM))))
  (LET ((TEM `(PROGN ,(SETF-MATCH (CADR PATTERN) `(CAR ,VARIABLE))
		     ,(SETF-MATCH (CADDR PATTERN) `(CDR ,VARIABLE)))))
    (COND (VALUE-FORM
	    `(LET ((,VARIABLE ,VALUE-FORM))
	       ,TEM))
	  (T TEM))))

;;; For no good reason, vestigial DEFSUBST goes here.

(DEFMACRO DEFSUBST (FUNCTION LAMBDA-LIST &BODY BODY)
  `(PROGN (CL:PROCLAIM '(CL:INLINE ,FUNCTION))
	  (DEFUN ,FUNCTION ,LAMBDA-LIST ,@BODY)))

(DEFMACRO DEFSUBST-WITH-PARENT (FUNCTION PARENT LAMBDA-LIST &BODY BODY)
  (IF (NLISTP PARENT) (SETQ PARENT (LIST PARENT)))
  `(PROGN (CL:PROCLAIM '(CL:INLINE ,FUNCTION))
	  (DEFUN ,FUNCTION ,LAMBDA-LIST
	    (DECLARE (SYS:FUNCTION-PARENT ,@PARENT))
	    ,@BODY)))

;;; And this, for equally random reasons.  Macros that define flavors
;;; should use this to be courteous to editing tools.
(DEFMACRO DEFFLAVOR-WITH-PARENT (NAME-AND-PARENT-TYPE NAME INSTANCE-VARIABLES COMPONENT-FLAVORS
						      &BODY OPTIONS)
  "Used when a macro defines a flavor that you want to be able to m-."
  `(PROGN
     (DEFPROP ,NAME ,NAME-AND-PARENT-TYPE SI:FLAVOR-PARENT)
     (DEFFLAVOR ,NAME ,INSTANCE-VARIABLES ,COMPONENT-FLAVORS ,@OPTIONS)
     ;; undo the damage defflavor just did, since we left our own trail
     ;; on the si:flavor-parent property
     (REMOVE-SOURCE-FILE-DEFINITION ',NAME 'DEFFLAVOR)
     ',NAME))
