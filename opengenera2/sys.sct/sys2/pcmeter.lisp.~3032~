;;; -*- Mode: LISP; Package: METER; Base: 8 -*-
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

#+3600
(PROGN
;;; These SETQs are SETQs instead of DEFVARs because the declarations happen in SYSDF1.
(SETQ SYS:%PC-TABLE-ADDRESS 0)			;Address of table
(SETQ SYS:%PC-TABLE-LENGTH 0)			;Length of table
(SETQ SYS:%PC-TABLE-OFFSET 0)			;PC address which maps into first slot
						;of the table
(SETQ SYS:%PC-TABLE-PC-ROTATION 0)		;Right rotation of PC to index into table
						;(if rotation is 0 means that 2 PCs/slot
						; 1=> 4 PCs/slot ...)
(SETQ SYS:%PC-TABLE-MISSES 0)			;Number of PC's seen that dont map into a slot

(SETQ SYS:TASK-3-ENABLES 0)			;Enables for interrupts from the FEP
)

#+IMACH
(PROGN
(DEFWIREDVAR SYS:%PC-TABLE-ADDRESS 0)		;Address of table
(DEFWIREDVAR SYS:%PC-TABLE-LENGTH 0)		;Length of table
(DEFWIREDVAR SYS:%PC-TABLE-OFFSET 0)		;PC address which maps into first slot
						;of the table
(DEFWIREDVAR SYS:%PC-TABLE-PC-ROTATION 0)	;Right rotation of PC to index into table
						;(if rotation is 0 means that 2 PCs/slot
						; 1=> 4 PCs/slot ...)
(DEFWIREDVAR SYS:%PC-TABLE-MISSES 0)		;Number of PC's seen that dont map into a slot

;; this system-case won't work in a defvar, so add an initialization
(DEFVAR *CURRENT-PC-METERING-PERIOD*)

(ADD-INITIALIZATION "Set PC metering default interval"
		    '(SETQ *CURRENT-PC-METERING-PERIOD*
			   (SYS:SYSTEM-CASE
			     ((Native) 250.)	;every quarter of a millisecond
			     ((Embedded) 16000.)))
		    '(:COLD))

)

(DEFVAR *PC-MONITOR-ARRAY* NIL)			;Lisp array pointing to table

(DEFVAR PC-ARRAY-AREA
	(MAKE-AREA ':NAME 'PC-ARRAY-AREA ':GC ':STATIC))

(DEFFLAVOR PC-ARRAY-TOO-BIG (HOW-BIG) (ERROR) :INITABLE-INSTANCE-VARIABLES)
(DEFMETHOD (DBG:REPORT PC-ARRAY-TOO-BIG) (STREAM)
  (FORMAT STREAM "Cannot wire ~D words for a PC array." HOW-BIG))
(DEFMETHOD (DBG:PROCEED PC-ARRAY-TOO-BIG :NEW-SIZE)
	   (&OPTIONAL (SIZE (ACCEPT `((CL:INTEGER 1 ,(1- HOW-BIG)))
				    :PROMPT "Number of wired words for PC array")))
  "Try again with a smaller size"
  (VALUES :NEW-SIZE SIZE))
(COMPILE-FLAVOR-METHODS PC-ARRAY-TOO-BIG)

(DEFUN MAKE-PC-ARRAY (SIZE)
  (LOOP NAMED RETRY-MAKE
	DO
    (UNMAKE-PC-ARRAY)
    (LET* ((ARRAY (MAKE-ARRAY SIZE ':AREA PC-ARRAY-AREA ':INITIAL-VALUE 0))
	   (PHYSICAL-ADDRESS (SI:WIRE-CONSECUTIVE-WORDS (ALOC ARRAY 0) SIZE)))
      (COND (PHYSICAL-ADDRESS
	     (SETQ SYS:%PC-TABLE-ADDRESS PHYSICAL-ADDRESS
		   SYS:%PC-TABLE-LENGTH SIZE)
	     (SETQ *PC-MONITOR-ARRAY* ARRAY)
	     (RETURN-FROM RETRY-MAKE *PC-MONITOR-ARRAY*))
	    (T
	     (SIGNAL-PROCEED-CASE ((NEW-SIZE) 'PC-ARRAY-TOO-BIG :HOW-BIG SIZE)
	       (:NEW-SIZE (SETQ SIZE NEW-SIZE))))))))

(DEFUN UNMAKE-PC-ARRAY ()
  (WHEN *PC-MONITOR-ARRAY*
    (SI:UNWIRE-WORDS (ALOC *PC-MONITOR-ARRAY* 0) (ARRAY-LENGTH *PC-MONITOR-ARRAY*))
    (SETQ SYS:%PC-TABLE-LENGTH 0
	  SYS:%PC-TABLE-ADDRESS 0
	  SYS:%PC-TABLE-OFFSET 0)
    (RETURN-ARRAY (PROG1 *PC-MONITOR-ARRAY* (SETQ *PC-MONITOR-ARRAY* NIL)))))

(DEFFLAVOR NO-PC-ARRAY-DEFINED () (ERROR))
(DEFMETHOD (DBG:REPORT NO-PC-ARRAY-DEFINED) (STREAM)
  (FORMAT STREAM "No PC ARRAY has been defined, so you can't start monitoring."))
(DEFMETHOD (DBG:PROCEED NO-PC-ARRAY-DEFINED :MAKE-PC-ARRAY)
	   (&OPTIONAL (SIZE (ACCEPT '((CL:INTEGER 1 *))
				    :PROMPT "Number of wired words for PC array")))
  "Create a PC array"
  (MAKE-PC-ARRAY SIZE)
  (VALUES :MAKE-PC-ARRAY T))
(COMPILE-FLAVOR-METHODS NO-PC-ARRAY-DEFINED)

(DEFUN CHECK-PC-ARRAY ()
  (LOOP UNTIL *PC-MONITOR-ARRAY*
	DO
    (SIGNAL-PROCEED-CASE (() 'NO-PC-ARRAY-DEFINED)
      (:MAKE-PC-ARRAY (RETURN-FROM CHECK-PC-ARRAY T)))))
(DEFUN PC-METERING-SUPPORTED-P () T)
;; The 3600 can too, since it can choose between :AUDIO and :TASK3, but we won't get into
;; that.
(DEFUN PC-METERING-SAMPLING-RATE-CONTROL-P ()
  #+3600 NIL
  #+IMach T)
(DEFUN PC-METERING-SAMPLING-RATE ()
  #+3600
  (COND	((AND (EQ *PREFERRED-PC-METERING-MODE* :AUDIO)
	      (SYS:CONSOLE-AUDIO-EXISTS-P SYS:*MAIN-CONSOLE*)
	      (NOT (SYS:CONSOLE-AUDIO-ACTIVE-P SYS:*MAIN-CONSOLE*)))
	 50000.)
	(T (SELECTQ SI:*IO-BOARD-TYPE*
	     ((:NBS) NIL)
	     ((:OBS) 114.))))
  #+IMach
  (// 1000000. *CURRENT-PC-METERING-PERIOD*))
(DEFUN SET-PC-METERING-SAMPLING-RATE (FREQUENCY)
  #+3600 (DECLARE (IGNORE FREQUENCY))
  (IF (PC-METERING-SAMPLING-RATE-CONTROL-P)
      #+3600
      NIL
      #+IMACH
      (SETQ *CURRENT-PC-METERING-PERIOD*
	    ;; Don't even think about trying it more frequently than
	    ;; every 100 microseconds.  This is bad enough...
	    (MAX (system-case
		   ((Native) 100.)
		   ((Embedded) 16000.))
		 (MIN CLI::*SEQUENCE-BREAK-INTERVAL*
		      (FLOOR 1000000. FREQUENCY))))
      (SCL:CERROR "Ignore the specification"
		  "This architecture does not support the control of the rate of PC metering")))
(DEFUN SETUP-MONITOR (&OPTIONAL (RANGE-START 0) (RANGE-END 1_28.))
  (CHECK-PC-ARRAY)
  (LET* ((WORD-RANGE (SYS:%POINTER-DIFFERENCE RANGE-END RANGE-START))
	 (LENGTH (ARRAY-LENGTH *PC-MONITOR-ARRAY*))
	 (INSTRUCTIONS-PER-BUCKET (CEILING (* 2 WORD-RANGE) LENGTH))
	 (ROTATE (1- (MAX 0 (HAULONG (1- INSTRUCTIONS-PER-BUCKET))))))
    (SETQ SYS:%PC-TABLE-OFFSET RANGE-START
	  SYS:%PC-TABLE-PC-ROTATION (MIN 31. ROTATE)
	  SYS:%PC-TABLE-LENGTH (MIN LENGTH (1+ (ASH (1- WORD-RANGE) (- ROTATE)))))
    (FORMAT T "~&~D instruction~P per bucket" (ASH 2 ROTATE) (ASH 2 ROTATE))
    NIL))
(DEFUN MONITOR-ALL-FUNCTIONS (&AUX (START #+3600 +1e #+IMACH -1)
			      (END #+3600 -1e #+IMACH 0))
  ;; Map over regions which contain compiled functions and escape functions
  (SI:MAP-OVER-REGIONS
    #'(LAMBDA (AREA)
	(OR (= AREA SYS:WIRED-CONTROL-TABLES)		;Anything wired
	    (= AREA SYS:SAFEGUARDED-OBJECTS-AREA)	;Anything safeguareded
	    (= AREA SYS:COMPILED-FUNCTION-AREA)))	;Anything else
    #'SI:REGION-PREDICATE-STRUCTURE
    #'(LAMBDA (AREA REGION)
	(IGNORE AREA)
	(LET* ((ORIGIN (REGION-ORIGIN REGION))
	       (FINAL (SYS:%POINTER-PLUS ORIGIN (REGION-FREE-POINTER REGION))))
	  (WHEN (SYS:%POINTER-LESSP ORIGIN START)
	    (SETQ START ORIGIN))
	  (WHEN (SI:%POINTER-> FINAL END)
	    (SETQ END FINAL)))))
  (SETUP-MONITOR START END))

;;; This function is not guarenteed to work.  The user assumes all the
;;; functions of interest lie between the two functions.  This may be
;;; false for at least the following reasons:
;;;  o A function was compiled from the buffer which puts the definition
;;;    of that function outside the range.
;;;  o A previous region is extended and new functions go there instead
;;;    of at monotonically increasing virtual addresses.
;;; Example: (defun start-of-library ()())
;;; 	     ...code...
;;; 	     (defun end-of-library ()())
;;;   (monitor-between-functions #'start-of-library #'end-of-library)
(DEFUN MONITOR-BETWEEN-FUNCTIONS (LOWER-FUNCTION UPPER-FUNCTION)
  (SETUP-MONITOR (%POINTER (%FIND-STRUCTURE-LEADER LOWER-FUNCTION))
		 (SYS:%POINTER-PLUS (%POINTER (%FIND-STRUCTURE-LEADER UPPER-FUNCTION))
				    (%STRUCTURE-TOTAL-SIZE UPPER-FUNCTION))))
;;; Returns the range of virtual addresses that map into a bucket
(DEFUN RANGE-OF-BUCKET (I)
  (DECLARE (VALUES BUCKET-VIRTUAL-ADDRESS-START BUCKET-VIRTUAL-ADDRESS-LIMIT))
  (MACROLET ((P+ (PTR OFFSET)
	       `(#+3600 + #+IMACH SYS:%POINTER-PLUS ,PTR ,OFFSET)))
    (LET ((LOC (P+ SYS:%PC-TABLE-OFFSET (ASH I SYS:%PC-TABLE-PC-ROTATION))))
      (VALUES LOC (P+ LOC (MAX 1 (ASH 1 SYS:%PC-TABLE-PC-ROTATION)))))))
;; Expand a range of buckets
(DEFUN EXPAND-RANGE (START-BUCKET &OPTIONAL (END-BUCKET START-BUCKET))
  (MULTIPLE-VALUE-BIND (OLD-START NIL)
      (RANGE-OF-BUCKET START-BUCKET)
    (MULTIPLE-VALUE-BIND (NIL OLD-END)
	(RANGE-OF-BUCKET END-BUCKET)
      (SETUP-MONITOR OLD-START OLD-END))))
#+3600
(DEFVAR *AUDIO-PCMETER-ARRAY*)			;wired, initialized by the cold load generator
(DEFVAR *PREFERRED-PC-METERING-MODE* #+3600 :AUDIO #+IMACH :INTERRUPT)
(DEFVAR *CURRENT-PC-METERING-MODE* NIL)
#+IMACH
(DEFWIREDFUN PC-METERING-INTERRUPT-HANDLER ()
  (LET* ((PC CLI::*LAST-INTERRUPT-PC*)
	 (OFFSET (SYS:%POINTER-DIFFERENCE PC %PC-TABLE-OFFSET)))
    (IF (MINUSP %PC-TABLE-PC-ROTATION)
	(IF (%UNSIGNED-LESSP OFFSET (LSH %PC-TABLE-LENGTH -1))
	    (LET ((INDEX (LSH OFFSET 1)))
	      (WHEN (TYPE-MEMBER PC DTP-ODD-PC)
		(INCF INDEX))
	      (SI:INCF* (LOCATION-CONTENTS (SYS:%POINTER-PLUS %PC-TABLE-ADDRESS INDEX))))
	    (SI:INCF* %PC-TABLE-MISSES))
	(LET ((INDEX (LSH OFFSET (- %PC-TABLE-PC-ROTATION))))
	  (IF (%UNSIGNED-LESSP INDEX %PC-TABLE-LENGTH)
	      (SI:INCF* (LOCATION-CONTENTS (SYS:%POINTER-PLUS %PC-TABLE-ADDRESS INDEX)))
	      (SI:INCF* %PC-TABLE-MISSES))))))
(DEFUN START-MONITOR (&OPTIONAL (CLEAR T))
  (WHEN CLEAR
    (SI:FILL-ARRAY *PC-MONITOR-ARRAY* NIL 0)
    (SETQ SYS:%PC-TABLE-MISSES 0))
  (COND (*CURRENT-PC-METERING-MODE*)		;already on; leave it on
	#+IMACH
	(T 
	 (SETQ *CURRENT-PC-METERING-MODE* :INTERRUPT)
	 (CLI::ENABLE-PERIODIC-TIMER *CURRENT-PC-METERING-PERIOD*
				     #'PC-METERING-INTERRUPT-HANDLER))
	#+3600
	((AND (EQ *PREFERRED-PC-METERING-MODE* :AUDIO)
	      (SYS:CONSOLE-AUDIO-EXISTS-P SYS:*MAIN-CONSOLE*)
	      (NOT (SYS:CONSOLE-AUDIO-ACTIVE-P SYS:*MAIN-CONSOLE*)))
	 (SETQ *CURRENT-PC-METERING-MODE* :AUDIO)
	 (AUDIO:AUDIO-START 0 *AUDIO-PCMETER-ARRAY*))
	#+3600
	(T
	 (SETQ *CURRENT-PC-METERING-MODE* :TASK-3)
	 (SETF (LDB SYS:%%TASK-3-METER-ENABLE SYS:TASK-3-ENABLES) 1)))
  NIL)
#+3600
(DEFUN STOP-MONITOR ()
  (CL:ECASE (PROG1 *CURRENT-PC-METERING-MODE* (SETQ *CURRENT-PC-METERING-MODE* NIL))
    (:AUDIO
      (AUDIO:AUDIO-STOP 0))
    (:TASK-3
      (SETF (LDB SYS:%%TASK-3-METER-ENABLE SYS:TASK-3-ENABLES) 0))))
#+IMACH
(DEFUN STOP-MONITOR ()
  (WITHOUT-INTERRUPTS
    (CLI::ENABLE-PERIODIC-TIMER NIL NIL)
    (SETQ *CURRENT-PC-METERING-MODE* NIL)))

;; Given "Function" which may be an array for escape functions, return the function name
;; of it
(DEFUN FUNCTION-NAME-WITH-ESCAPES (FUN)
  (COND ((TYPEP FUN :COMPILED-FUNCTION)
	 (SI:COMPILED-FUNCTION-NAME FUN))
	#+3600
	((OR (TYPEP FUN :ARRAY)
	     (= (%DATA-TYPE FUN) DTP-EVEN-PC))
	 (OR (SI:LOOKUP-MICROCODE-ESCAPE-ROUTINE FUN)
	     FUN))
	(T FUN)))


;; Map FUNCTION over the functions in a given bucket
(DEFUN MAP-OVER-FUNCTIONS-IN-BUCKET (BUCKET FUNCTION &REST ARGS)
  (MULTIPLE-VALUE-BIND (START-ADDRESS END-ADDRESS)
      (RANGE-OF-BUCKET BUCKET)
    (LOOP WITH ADDRESS = START-ADDRESS
	  UNTIL (SI:%POINTER- ADDRESS END-ADDRESS)
	  FOR REGION = (SYS:%REGION-NUMBER ADDRESS)
	  FOR FIRST-TIME FIRST T THEN NIL
	  WHEN REGION
	  DO (COND ((OR (LDB-TEST %%REGION-STACK (REGION-BITS REGION))
			( (LDB SYS:%%REGION-REPRESENTATION-TYPE (REGION-BITS REGION))
			   SYS:%REGION-REPRESENTATION-TYPE-STRUCTURE)
			(SI:%POINTER- ADDRESS
				       (SYS:%POINTER-PLUS (REGION-ORIGIN REGION)
							  (REGION-FREE-POINTER REGION))))
		    (SETQ ADDRESS (SI:%POINTER-PLUS (REGION-ORIGIN REGION)
						    (REGION-LENGTH REGION))))
		   ;; within trap-vector?
		   #+imach
		   ((and (si:%pointer- sys:%trap-vector-base address)
			 (si:%pointer-< address
					(sys:%pointer-plus sys:%trap-vector-base
							   sys:%trap-vector-length)))
		    (let ((generic-dispatch-addr
			    (sys:%pointer-plus sys:%trap-vector-base
					       SYS:%GENERIC-DISPATCH-TRAP-VECTOR))
			  (message-dispatch-addr
			    (sys:%pointer-plus sys:%trap-vector-base
					       SYS:%message-DISPATCH-TRAP-VECTOR)))
		      (cond ((eql generic-dispatch-addr ADDRESS)
			     (lexpr-funcall function 'SYS:%GENERIC-DISPATCH-TRAP-VECTOR args)
			     (INCF ADDRESS))
			    ((eql message-dispatch-addr ADDRESS)
			     (lexpr-funcall function 'SYS:%MESSAGE-DISPATCH-TRAP-VECTOR args)
			     (INCF ADDRESS))
			    (t
			     (lexpr-funcall function 'SYS:%TRAP-VECTOR-BASE args)
			     (cond ((si:%pointer-< address generic-dispatch-addr)
				    (setf address generic-dispatch-addr))
				   ((si:%pointer- address message-dispatch-addr)
				    (setf address
					  (sys:%pointer-plus sys:%trap-vector-base
							     sys:%trap-vector-length)))
				   (t (incf address)))))))
		   (T (WHEN FIRST-TIME
			(SETQ ADDRESS (%POINTER (%FIND-STRUCTURE-LEADER ADDRESS))))
		      (LET* ((OBJECT (%FIND-STRUCTURE-HEADER ADDRESS))
			     (SIZE (SI:%STRUCTURE-TOTAL-SIZE OBJECT))
			     (OBJECT-ADDRESS (%POINTER OBJECT)))
			(WHEN (AND (SI:%POINTER-< OBJECT-ADDRESS END-ADDRESS)
				   (SI:%POINTER- OBJECT-ADDRESS ADDRESS))
			  (WHEN (OR (TYPEP OBJECT ':COMPILED-FUNCTION)
				    (AND (ARRAYP OBJECT) (EQ (ARRAY-TYPE OBJECT) 'ART-16B)))
			    (LEXPR-FUNCALL FUNCTION OBJECT ARGS)))
			(IF (SI:%POINTER-< (%POINTER OBJECT) ADDRESS)
			    (INCF ADDRESS)
			    (SETQ ADDRESS (SI:%POINTER-PLUS ADDRESS SIZE))))))
	  ELSE DO
	     (SETQ ADDRESS (%logDPB (1+ (LDB SYS:%%VMA-QUANTUM-NUM ADDRESS))
				    SYS:%%VMA-QUANTUM-NUM 0)))))

(DEFUN PRINT-FUNCTIONS-IN-BUCKET (BUCKET)
  (MAP-OVER-FUNCTIONS-IN-BUCKET
    BUCKET
    #'(LAMBDA (FUN)
	(PRINT (FUNCTION-NAME-WITH-ESCAPES FUN)))))

;; Return the range of a function inclusive
(DEFUN FUNCTION-RANGE (FUN)
  (DECLARE (VALUES BEGIN-BUCKET END-BUCKET))
  (MULTIPLE-VALUE-BIND (IGNORE LEADER SIZE)
      (%FIND-STRUCTURE-EXTENT FUN)
    (VALUES (ASH (SYS:%POINTER-DIFFERENCE (%POINTER LEADER) SYS:%PC-TABLE-OFFSET)
		 (- SYS:%PC-TABLE-PC-ROTATION))
	    (MIN (ASH (SYS:%POINTER-DIFFERENCE (SYS:%POINTER-PLUS (%POINTER LEADER) SIZE)
					       SYS:%PC-TABLE-OFFSET)
		      (- SYS:%PC-TABLE-PC-ROTATION))
		 (1- SYS:%PC-TABLE-LENGTH)))))

(DEFUN SINGLE-FUNCTION-IN-BUCKET (I)
  (DECLARE (VALUES T-OR-NIL))
  (MULTIPLE-VALUE-BIND (START END)
      (RANGE-OF-BUCKET I)
    (LET ((REGION1 (SYS:%REGION-NUMBER START))
	  (REGION2 (SYS:%REGION-NUMBER (1- END))))
      (AND (EQL REGION1 REGION2)
	   (SI:%POINTER- START END)
	   (SI:%POINTER- END (SYS:%POINTER-PLUS (REGION-ORIGIN REGION1)
						 (REGION-FREE-POINTER REGION1)))
	   (NOT (LDB-TEST %%REGION-STACK (REGION-BITS REGION1)))
	   (= (LDB SYS:%%REGION-REPRESENTATION-TYPE (REGION-BITS REGION1))
		  SYS:%REGION-REPRESENTATION-TYPE-STRUCTURE)
	   (EQ (%FIND-STRUCTURE-LEADER START)
	       (%FIND-STRUCTURE-LEADER (1- END)))))))

;; Return a list in order of the functions in a given bucket
(DEFUN LIST-FUNCTIONS-IN-BUCKET (BUCKET &AUX FUNCTIONS)
  (MAP-OVER-FUNCTIONS-IN-BUCKET
    BUCKET
    #'(LAMBDA (FUN LIST-LOC)
	(LET ((NAME (FUNCTION-NAME-WITH-ESCAPES FUN)))
	  (WHEN NAME
	    (PUSH NAME (CDR LIST-LOC)))))
    (LOCF FUNCTIONS))
  (NREVERSE FUNCTIONS))


;; Returns a list of
;;  First (TOTAL-SAMPLES MISSES IGNORED-SAMPLES)
;;  then elements of (SAMPLES START-BUCKET END-BUCKET . FUNCTIONS) for the pc-array
(DEFUN FUNCTION-LIST (&OPTIONAL (THRESHOLD 0))
  (LOOP WITH BUCKET = 0 AND OUTPUT = NIL
	AND TOTAL = SYS:%PC-TABLE-MISSES AND IGNORED-SAMPLES = 0
	WHILE (< BUCKET SYS:%PC-TABLE-LENGTH)
	FOR SAMPLES = (AREF *PC-MONITOR-ARRAY* BUCKET)
	WHEN (PLUSP SAMPLES)
	DO (LET ((FUNCTIONS (LIST-FUNCTIONS-IN-BUCKET BUCKET)))
	     ;; Single function case, the threshold is on the per function basis....
	     (COND ((= (LENGTH FUNCTIONS) 1)
		    (MULTIPLE-VALUE-BIND (IGNORE END-BUCKET)
			(FUNCTION-RANGE (CATCH 'FUNCTION
					  ;; get the actual function, not the name
					  (MAP-OVER-FUNCTIONS-IN-BUCKET
					    BUCKET
					    #'(LAMBDA (FUN)
						(WHEN (FUNCTION-NAME-WITH-ESCAPES FUN)
						  (THROW 'FUNCTION FUN))))))
		      (UNLESS (= (LENGTH (LIST-FUNCTIONS-IN-BUCKET END-BUCKET)) 1)
			(SETQ END-BUCKET (MAX (1- END-BUCKET) BUCKET)))
		      (LOOP FOR I FROM (1+ BUCKET) TO END-BUCKET
			    DO (INCF SAMPLES (AREF *PC-MONITOR-ARRAY* I)))
		      (IF (> SAMPLES THRESHOLD)
			  (PUSH (LIST* SAMPLES BUCKET (1+ END-BUCKET) FUNCTIONS) OUTPUT)
			  (INCF IGNORED-SAMPLES SAMPLES))
		      (SETQ BUCKET (1+ END-BUCKET))))
		   ;; Not significant
		   (( SAMPLES THRESHOLD)
		    (INCF IGNORED-SAMPLES SAMPLES)
		    (INCF BUCKET))
		   (T
		    (PUSH (LIST* SAMPLES BUCKET (1+ BUCKET) FUNCTIONS) OUTPUT)
		    (INCF BUCKET))))
	ELSE DO (INCF BUCKET)
	DO (INCF TOTAL SAMPLES)
	FINALLY
	   (RETURN (LIST* (LIST TOTAL SYS:%PC-TABLE-MISSES IGNORED-SAMPLES)
			  (NREVERSE OUTPUT)))))

(DEFMACRO PERCENTAGE (X)
  `(FIXR (* 100.0 ,X)))

(DEFUN REPORT (&OPTIONAL FUNCTION-LIST)
  (UNLESS FUNCTION-LIST
    (SETQ FUNCTION-LIST (FUNCTION-LIST)))
  (LET ((TOTAL (CAAR FUNCTION-LIST))
	(IGNORED-SAMPLES (+ (CADAR FUNCTION-LIST)
			    (CADDAR FUNCTION-LIST))))
    (FORMAT T "~&Total samples: ~D, Ignored samples: ~D, Listed samples: ~D (~2D%)"
	    TOTAL IGNORED-SAMPLES (- TOTAL IGNORED-SAMPLES)
	    (PERCENTAGE (// (FLOAT (- TOTAL IGNORED-SAMPLES)) TOTAL)))
    (FORMAT T "~&Bucket   %~30TFunction(s)")
    (LOOP WITH TOT = (FLOAT TOTAL)
	  FOR (SAMPLES START END . FUNCTIONS) IN (CDR FUNCTION-LIST)
	  FOR PERC = (PERCENTAGE (// (FLOAT SAMPLES) TOT))
	  UNLESS (ZEROP PERC)
	  WHEN (= (LENGTH FUNCTIONS) 1)
	  DO (FORMAT T "~&~5D: (~2D%)~30T~S" START PERC (CAR FUNCTIONS))
	  ELSE
	   DO (FORMAT T "~&~5D: (~2D%) {~2D functions}~30T" START PERC (LENGTH FUNCTIONS))
	      (LOOP FOR F IN FUNCTIONS
		    FOR COUNT FROM 0
		    FOR COMMA = NIL THEN T
		    WHEN (= COUNT 3)
		    DO (FORMAT T " ...")
		       (RETURN)
		    DO (FORMAT T "~:[~;, ~]~S" COMMA F)))))

(DEFMACRO WITH-MONITORING (CLEAR &BODY BODY)
  `(UNWIND-PROTECT (PROGN (START-MONITOR ,CLEAR)
			  ,@ BODY)
		   (STOP-MONITOR)))

(ADD-INITIALIZATION "Forget PC array" '(UNMAKE-PC-ARRAY) '(BEFORE-COLD))

(DEFUN ESCAPE-MONITOR (ARG)
  (IF ARG
      (STOP-MONITOR)
      (START-MONITOR)))

;(TV:ADD-ESCAPE-KEY #\CONTROL-TRIANGLE #'ESCAPE-MONITOR
;		   "Turn on monitoring, arg = Turn off monitoring")
