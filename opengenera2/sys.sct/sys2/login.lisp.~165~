;;; -*- Mode:LISP; Package:SYSTEM-INTERNALS; Base:10 -*-
;;; LISP Machine Package for Logging In and Out.		DLW 11/13/77 
;;;>
;;;> *****************************************************************************************
;;;> ** (c) Copyright 1998-1982 Symbolics, Inc.  All rights reserved.
;;;> ** Portions of font library Copyright (c) 1984 Bitstream, Inc.  All Rights Reserved.
;;;>
;;;>    The software, data, and information contained herein are proprietary to,
;;;> and comprise valuable trade secrets of, Symbolics, Inc., which intends 
;;;> to keep such software, data, and information confidential and to preserve them
;;;> as trade secrets.  They are given in confidence by Symbolics pursuant 
;;;> to a written license agreement, and may be used, copied, transmitted, and stored
;;;> only in accordance with the terms of such license.
;;;> 
;;;> Symbolics, Symbolics 3600, Symbolics 3675, Symbolics 3630, Symbolics 3640,
;;;> Symbolics 3645, Symbolics 3650, Symbolics 3653, Symbolics 3620, Symbolics 3610,
;;;> Zetalisp, Open Genera, Virtual Lisp Machine, VLM, Wheels, Dynamic Windows,
;;;> SmartStore, Semanticue, Frame-Up, Firewall, Document Examiner,
;;;> Delivery Document Examiner, "Your Next Step in Computing", Ivory, MacIvory,
;;;> MacIvory model 1, MacIvory model 2, MacIvory model 3, XL400, XL1200, XL1201,
;;;> Symbolics UX400S, Symbolics UX1200S, NXP1000, Symbolics C, Symbolics Pascal,
;;;> Symbolics Prolog, Symbolics Fortran, CLOE, CLOE Application Generator,
;;;> CLOE Developer, CLOE Runtime, Common Lisp Developer, Symbolics Concordia,
;;;> Joshua, Statice, and Minima are trademarks of Symbolics, Inc.
;;;> 
;;;> Symbolics 3670, Symbolics Common Lisp, Symbolics-Lisp, and Genera are registered
;;;> trademarks of Symbolics, Inc.
;;;>
;;;> GOVERNMENT PURPOSE RIGHTS LEGEND
;;;> 
;;;>      Contract No.: various
;;;>      Contractor Name: Symbolics, Inc.
;;;>      Contractor Address: c/o Ropes & Gray
;;;> 			 One International Place
;;;> 			 Boston, Massachusetts 02110-2624
;;;>      Expiration Date: 2/27/2018
;;;>      
;;;> The Government's rights to use, modify, reproduce, release, perform, display or
;;;> disclose this software are restricted by paragraph (b)(2) of the "Rights in
;;;> Noncommercial Computer Software and Noncommercial Computer Software Documentation"
;;;> contained in the above identified contracts.  No restrictions apply after the
;;;> expiration date shown above.  Any reproduction of the software or portions thereof
;;;> marked with this legend must also reproduce the markings.  Questions regarding
;;;> the Government's rights may be referred to the AS&T Contracts Office of the
;;;> National Reconnaissance Office, Chantilly, Virginia 20151-1715.
;;;> 
;;;>      Symbolics, Inc.
;;;>      c/o Ropes & Gray
;;;>      One International Place
;;;>      Boston, Massachusetts 02110-2624
;;;>      781-937-7655
;;;>
;;;> *****************************************************************************************
;;;>

;;; User objects
(DEFFLAVOR USER
	(PERSONAL-NAME PERSONAL-NAME-FIRST-NAME-FIRST)
	(NET:OWN-FLAVOR-OBJECT)
  :GETTABLE-INSTANCE-VARIABLES)

(DEFMETHOD (:CHANGE-OF-ATTRIBUTES USER) ()
  (SETQ PERSONAL-NAME (OR (CL:GETF FLAVOR:PROPERTY-LIST ':PERSONAL-NAME) ""))
  (SETQ PERSONAL-NAME-FIRST-NAME-FIRST (PARSE-PERSONAL-NAME PERSONAL-NAME)))

;; Turn "Luser, John Q." into "John Q. Luser".
;; Returns the original string if it gets confused.
(DEFUN PARSE-PERSONAL-NAME (NAME &AUX I1 I2)
  (IF (AND (SETQ I1 (STRING-SEARCH-CHAR #/, NAME))
	   (SETQ I2 (STRING-SEARCH-NOT-CHAR #\SP NAME (1+ I1))))
      (LET ((I3 (STRING-SEARCH-CHAR #/, NAME I2)))	;Luser, John Q., Jr. (a chip off the
	(WITH-OUTPUT-TO-STRING (STREAM)			;old block).
	  (SEND STREAM ':STRING-OUT NAME I2 I3)
	  (SEND STREAM ':TYO #\SP)
	  (SEND STREAM ':STRING-OUT NAME 0 I1)
	  (WHEN I3
	    (SEND STREAM ':STRING-OUT NAME I3))))
      NAME))

(DEFMETHOD (:HOST-USER-ID USER) (FOR-HOST)
  (LOOP FOR (NAME HOST) IN (SEND SELF ':GET ':LOGIN-NAME)
	WHEN (EQ HOST FOR-HOST)
	  RETURN NAME))

(DEFMETHOD (:MAIL-ADDRESS USER) ()
  (OR (SEND SELF ':GET ':MAIL-ADDRESS)
      (LET ((HOME-HOST (OR (SEND SELF ':HOME-HOST) FS:USER-LOGIN-MACHINE)))
	(LIST (OR (SEND SELF ':HOST-USER-ID HOME-HOST)
		  USER-ID)
	      HOME-HOST))))

;;; This makes an uninterned user from a login-id, host pair.
;;; This should not be needed normally.
(DEFUN MAKE-UNINTERNED-USER (LOGIN-NAME HOST)
  (NET:MAKE-OBJECT-FROM-PROPERTY-LIST ':USER (FORMAT NIL "~A@~A" LOGIN-NAME HOST)
				      `(:LISPM-NAME ,LOGIN-NAME
					:HOME-HOST ,HOST
					:LOGIN-NAME ((,LOGIN-NAME ,HOST)))))

(DEFMETHOD (:PROPERTIES-FROM-FILE-SERVER USER) (HOST LOGIN-NAME PERSONAL GROUP-AFFILIATION)
  (WHEN (AND (SEND SELF ':UNINTERNED-P)
	     (EQ HOST (SEND SELF ':HOME-HOST)))
    (WHEN LOGIN-NAME
      (SEND SELF ':PUTPROP LOGIN-NAME ':LISPM-NAME)
      (LET ((ELEM (LOOP FOR ELEM IN (SEND SELF ':LOGIN-NAME)
			WHEN (EQ (SECOND ELEM) HOST)
			RETURN ELEM)))
	(WHEN ELEM
	  (SETF (FIRST ELEM) LOGIN-NAME))))
    (WHEN PERSONAL
      (SEND SELF ':PUTPROP PERSONAL ':PERSONAL-NAME))
    (WHEN GROUP-AFFILIATION
      (SEND SELF ':PUTPROP GROUP-AFFILIATION ':GROUP-AFFILIATION))
    (SEND SELF ':CHANGE-OF-ATTRIBUTES)
    (SET-USER-VARIABLES)))

(COMPILE-FLAVOR-METHODS USER)

(NETI:DEFINE-NAMESPACE-CLASS-OBJECT-FLAVOR :USER USER)

(DEFVAR *NOT-LOGGED-IN-USER*)
(DEFVAR *USER*)

(DEFUN SET-USER-VARIABLES ()
  (SETQ USER-ID (SEND *USER* ':LISPM-NAME))
  (SETQ FS:USER-PERSONAL-NAME (SEND *USER* ':PERSONAL-NAME))
  (SETQ FS:USER-PERSONAL-NAME-FIRST-NAME-FIRST (SEND *USER* ':PERSONAL-NAME-FIRST-NAME-FIRST))
  (SETQ FS:USER-GROUP-AFFILIATION (LET ((TEM (SEND *USER* ':AFFILIATION)))
				    (IF (AND TEM (PLUSP (STRING-LENGTH TEM)))
					(AREF TEM 0)
					#\SP)))
  (SETQ FS:USER-LOGIN-MACHINE (OR (SEND *USER* ':HOME-HOST)
				  (LET ((SYS-HOST (FS:GET-PATHNAME-HOST "SYS" T T)))
				    (AND SYS-HOST (SEND SYS-HOST :DEFAULT-HOST)))))
  (NETI:COMPUTE-FINGER-STRING T))

;; List of forms to be evaluated on logout
;; to undo the things done at login.
;; The various LOGIN-MUMBLE functions push undo forms on this list.
(DEFVAR LOGOUT-LIST NIL)

;; History so we can tell who has had their little paws into a saved band.
;; List of elements (user machine time init-file-name)
(DEFVAR LOGIN-HISTORY NIL)

;; Print the login history, most recent last.
(DEFUN SHOW-LOGIN-HISTORY (&OPTIONAL (WHOLE-HISTORY LOGIN-HISTORY))
  (NET:KEEPING-NAMESPACE-SERVER
    (FORMAT T "~&")
    (FORMATTING-TABLE ()
      (WITH-CHARACTER-FACE (:ITALIC)
	(FORMATTING-COLUMN-HEADINGS (T :UNDERLINE-P T)
	  (FORMATTING-CELL () "User Name")
	  (FORMATTING-CELL () "Host Name")
	  (FORMATTING-CELL () "Login Time")
	  (FORMATTING-CELL () "Init File")))
      (LOOP FOR HISTORY IN (REVERSE WHOLE-HISTORY)
	    AS (USER HOST TIME INIT-FILE) = HISTORY
	    DO
	(FORMATTING-ROW ()
	  (FORMATTING-CELL ()
	    (WHEN USER
	      (CONDITION-CASE ()
		   (LET ((USER (NET:FIND-OBJECT-NAMED :USER USER)))
		     (DW:WITH-OUTPUT-AS-PRESENTATION (:OBJECT USER :TYPE 'NET:USER)
		       (CL:WRITE-STRING (SEND USER :LISPM-NAME))))
		 (NET:OBJECT-NOT-FOUND (CL:WRITE-STRING USER)))))
	  (FORMATTING-CELL ()
	    (WHEN HOST
	      (CONDITION-CASE ()
		   (LET ((HOST (NET:FIND-OBJECT-NAMED :HOST HOST)))
		     (DW:WITH-OUTPUT-AS-PRESENTATION (:OBJECT HOST :TYPE 'NET:HOST)
		       (CL:WRITE-STRING (SEND HOST :PRETTY-NAME))))
		 (NET:OBJECT-NOT-FOUND
		   (CL:WRITE-STRING HOST)))))
	  (FORMATTING-CELL ()
	    (WHEN TIME
	      (PRESENT (THIRD HISTORY) 'TIME:UNIVERSAL-TIME)))
	  (FORMATTING-CELL ()
	    (WHEN INIT-FILE
	      (CONDITION-CASE ()
		   (PRESENT (FS:PARSE-PATHNAME (FOURTH HISTORY)))
		 (ERROR (CL:WRITE-STRING (FOURTH HISTORY)))))))))))

(DEFF PRINT-LOGIN-HISTORY 'SHOW-LOGIN-HISTORY)

;;; This is a special variable so that the error handler functions can see it.
(DEFVAR *LOGIN-LOAD-INIT-FILE-P* T)

(DEFUNP LOGIN (USER-NAME &KEY HOST ((:LOAD-INIT-FILE *LOGIN-LOAD-INIT-FILE-P*) T)
			 NO-QUERY-WHEN-UNKNOWN
			 init-file-to-load
			 &AUX OFFER-TO-ADD)
  (LOGOUT)
  (unless (typep user-name 'net:user)
    (SETQ USER-NAME (STRING-TRIM '(#\SP) USER-NAME)))
  RETRY-LOGIN
  (CONDITION-CASE (ERROR)
      (IF (NULL HOST)
	  (SETQ *USER* (if (stringp user-name)
			   (NET:FIND-OBJECT-NAMED ':USER USER-NAME)
			   user-name))
	  (when (stringp host) (setq host (parse-login-host host)))
	  (setq *user*
		(if (stringp user-name)
		    ;; if it's a string, just use it
		    (make-uninterned-user user-name host)
		    (let* ((lispm-name (send user-name :lispm-name))
			   (name (send user-name :name))
			   (name-string (if (stringp name)
					    name
					    (send name :string))))
		      (if (and lispm-name (string-equal lispm-name name-string))
			  ;; if we've got a real user object, but we're not
			  ;; logging into the home host, then make an uninterned
			  ;; user with the lispm-name (for casification purposes)
			  ;; if it's string-equal to the primary-name
			  (make-uninterned-user lispm-name host)
			  ;; otherwise use the primary-name.
			  (make-uninterned-user user-name host))))))
    (UNKNOWN-HOST-NAME
      (FORMAT T "~&~A:  ~A~&Please log in again, to another host."
	      (SEND ERROR ':TYPE) ERROR)
      (RETURN NIL))
    (NET:OBJECT-NOT-FOUND
      (WHEN NO-QUERY-WHEN-UNKNOWN
	(SETQ HOST NET:*LOCAL-HOST*)
	(GO RETRY-LOGIN))
      (SELECTQ (FQUERY '(:CLEAR-INPUT T
			 :CHOICES (((T "Yes.") #/Y #\SP)
				   ((NIL "No.") #/N #\RUBOUT)
				   ((:RETRY "Retry user object lookup.") #/R)))
		       "~A:~&Do you want to log in as ~A on some specific host? "
		       ERROR USER-NAME)
	((T)
	 (LOOP AS HST = (PROMPT-AND-READ ':STRING-TRIM "Host to log in to: ")
	       UNTIL (CONDITION-CASE (ERROR)
			 (SETQ HOST (PARSE-LOGIN-HOST HST))
		       (UNKNOWN-HOST-NAME
			 (FORMAT T "~&~A" ERROR)
			 NIL)))
	 (WHEN (SEND ERROR ':VALID-P)
	   (SETQ OFFER-TO-ADD T))
	 (GO RETRY-LOGIN))
	((:RETRY)
	 (NETI:DECACHE-OBJECT-NAMED ':USER
				    (if (stringp USER-NAME) user-name (send user-name :name)))
	 (NETI:RESET-ALL-HOST-AVAILABILITIES)
	 (GO RETRY-LOGIN))
	((NIL)
	 (RETURN NIL)))))
  (SET-USER-VARIABLES)
  (INITIALIZATIONS 'LOGIN-INITIALIZATION-LIST T)
  (PUSH (LIST (STRING (SEND *USER* :PRIMARY-NAME))
	      (AND (VARIABLE-BOUNDP NET:*LOCAL-HOST*)
		   (STRING (SEND NET:*LOCAL-HOST* :PRIMARY-NAME)))
	      (AND (VARIABLE-BOUNDP #'TIME:GET-UNIVERSAL-TIME) (TIME:GET-UNIVERSAL-TIME))
	      NIL)				;Init file not loaded
	LOGIN-HISTORY)
  RETRY-HOMEDIR
  (flet ((login-pathname (host)
	   (if init-file-to-load
	       (fs:merge-pathnames (fs:make-pathname :host host)
				   init-file-to-load
				   (fs:init-file-pathname "LISPM" nil host))
	       (fs:init-file-pathname "LISPM" nil host))))
  (WHEN (or FS:USER-LOGIN-MACHINE		;this is NIL during QLD.
 	    init-file-to-load)
    (UNLESS
      (CATCH-ERROR-RESTART ((FS:FILE-ERROR NETWORK-ERROR)
			    (IF HOST "Retry logging into some other host, instead of ~A"
				"Specify a host other than ~A to use for the home directory")
			    (OR HOST FS:USER-LOGIN-MACHINE))
	(ERROR-RESTART ((FS:FILE-ERROR NETWORK-ERROR)
			"Try again to find home directory for ~A on host ~A."
			USER-ID FS:USER-LOGIN-MACHINE)
	  (LET ((HOMEDIR (IF *LOGIN-LOAD-INIT-FILE-P*
			     (FS:USER-HOMEDIR FS:USER-LOGIN-MACHINE)
			     (FS:QUIET-USER-HOMEDIR FS:USER-LOGIN-MACHINE))))
	    (FS:SET-DEFAULT-PATHNAME HOMEDIR FS:*DEFAULT-PATHNAME-DEFAULTS*)
	    (FS:SET-DEFAULT-PATHNAME HOMEDIR FS:LOAD-PATHNAME-DEFAULTS)))
	(WHEN *LOGIN-LOAD-INIT-FILE-P*
	  (LOOP FOR INIT-FILE-HOST FIRST (if init-file-to-load
					     (send init-file-to-load :host)
					     FS:USER-LOGIN-MACHINE)
		    THEN (PROMPT-FOR-FILE-HOST "Name of host from which to load init file: ") DO
	    (CATCH-ERROR-RESTART
	      ((FS:FILE-ERROR NETWORK-ERROR)
	       "Try to load your init file from some other host, instead of ~A"
	       INIT-FILE-HOST)
	      (LET ((PATHNAME (login-pathname init-file-host)))
		(ERROR-RESTART (ERROR "Retry loading ~A" PATHNAME)
		  (CATCH-ERROR-RESTART (ERROR "Skip loading ~A" PATHNAME)
		    (WITH-OPEN-STREAM (STREAM (CONDITION-CASE (ERROR)
						  (FS:LOAD-OPEN PATHNAME NIL T)
						(FS:FILE-LOOKUP-ERROR
						  (FORMAT T "~&No init file: ~A~%" ERROR)
						  (RETURN))))
		      (SETF (FOURTH (FIRST LOGIN-HISTORY)) (STRING (SEND STREAM ':TRUENAME)))
		      (FS:LOAD-STREAM STREAM)))))
	      (RETURN))))
	T)
      (LET ((NEW-HOST (PROMPT-FOR-FILE-HOST "Name of host to log into: ")))
	(COND (HOST
	       (SETQ HOST NEW-HOST)
	       (GO RETRY-LOGIN))
	      (T
	       (SETQ FS:USER-LOGIN-MACHINE NEW-HOST)
	       (GO RETRY-HOMEDIR)))))))
  (WHEN (AND OFFER-TO-ADD
	     (FQUERY NIL "Do you wish to add ~A to the user database? " USER-ID))
    (OBJECTIFY-USER))
  (MAKE-LOGIN-SLOWER)
  ;; Do it again, now that we have loaded the user's init file
  (NETI:COMPUTE-FINGER-STRING)
  T)

(DEFUN PROMPT-FOR-FILE-HOST (PROMPT)
  (ERROR-RESTART (UNKNOWN-HOST-NAME "Try again with a different host name.")
    (PARSE-LOGIN-HOST
      (PROMPT-AND-READ ':STRING-TRIM "~&~A" PROMPT))))

;;; This allows "local" too.
(DEFUN PARSE-LOGIN-HOST (HOST)
  (SETQ HOST (STRING HOST))
  (OR (FS:GET-PATHNAME-HOST HOST T)
      (NET:PARSE-HOST HOST)))

(DEFUN LOGOUT ()
  (MAPC #'EVAL (PROG1 LOGOUT-LIST (SETQ LOGOUT-LIST NIL)))
  (UNLESS (EQ *USER* *NOT-LOGGED-IN-USER*)
    (INITIALIZATIONS 'LOGOUT-INITIALIZATION-LIST T)
    ;; Have to do this after the initialization list.  It usually turns
    ;; out to be the first thing on the list, but if anything else on the
    ;; initialization list references a file system, then all the old
    ;; caches are restored and the fs:file-login is effectively lost.
    (FS:FILE-LOGIN NIL)
    ;; Do this last so that the initializations won't ask you to login.
    (SETQ *USER* *NOT-LOGGED-IN-USER*)
    (SET-USER-VARIABLES))
  T)

(DEFMACRO LOGIN-FORMS (&BODY FORMS)
  `(LOGIN-FORMS-1 ',FORMS))

;;--- Note that LOGIN-FORMS can't pass ENV in, because its ENV is around
;;--- at compile time, and we are using this at load time!
(DEFUN LOGIN-FORMS-1 (FORMS &OPTIONAL ENV)
  (LABELS ((GET-UNDO-FUNCTION (FORM)
	     ;;--- This will fail in the face of MACROLET wrapped
	     ;;--- around something which has an :UNDO property...
	     (LET ((UNDO-FUNCTION (GET (CAR FORM) ':UNDO-FUNCTION)))
	       (WHEN UNDO-FUNCTION
		 (RETURN-FROM GET-UNDO-FUNCTION UNDO-FUNCTION))
	       (LET ((EXPANDED-FORM (MACROEXPAND-1 FORM ENV)))
		 (WHEN (EQ FORM EXPANDED-FORM)
		   (RETURN-FROM GET-UNDO-FUNCTION NIL))
		 (GET-UNDO-FUNCTION EXPANDED-FORM)))))
    (LOOP FOR FORM IN FORMS
	  FOR UNDO-FCTN = (GET-UNDO-FUNCTION FORM)
	  FOR UNDO-FORM = (IF UNDO-FCTN (FUNCALL UNDO-FCTN FORM) NIL)
	  DO (EVAL FORM)
	  IF (NULL UNDO-FCTN)
	    DO (FORMAT T "~&Warning: Do not know how to undo form ~S;~@
		            it will stay in effect after you log out"
		 FORM)
	  ELSE DO (PUSH UNDO-FORM LOGOUT-LIST))))

#||
(DEFMACRO LOGIN-FORMS (&BODY FORMS &ENVIRONMENT ENV)
  `(LOGIN-FORMS-1 ',FORMS ',ENV))

(DEFUN LOGIN-FORMS-1 (FORMS &OPTIONAL ENV)
  (LABELS ((GET-UNDO-FUNCTION (FORM)
	     ;; This will fail in the face of MACROLET wrapped around
	     ;; something which has an :UNDO property.  This would seem
	     ;; to be unavoidable, since we don't want to macroexpand
	     ;; the very first time, since a specific :UNDO handler
	     ;; should always get first dibs.
	     (LET ((UNDO-FUNCTION (GET (CAR FORM) ':UNDO-FUNCTION)))
	       (WHEN UNDO-FUNCTION
		 (RETURN-FROM GET-UNDO-FUNCTION UNDO-FUNCTION))
	       (LET ((EXPANDED-FORM (MACROEXPAND-1 FORM ENV)))
		 (WHEN (EQ FORM EXPANDED-FORM)
		   (RETURN-FROM GET-UNDO-FUNCTION NIL))
		 (GET-UNDO-FUNCTION EXPANDED-FORM)))))
    (LOOP FOR FORM IN FORMS
	  FOR UNDO-FCTN = (GET-UNDO-FUNCTION FORM)
	  FOR UNDO-FORM = (IF UNDO-FCTN (FUNCALL UNDO-FCTN FORM) NIL)
	  DO (EVAL FORM)
	  IF (NULL UNDO-FCTN)
	    DO (FORMAT T "~&Warning: Do not know how to undo form ~S;~@
		            it will stay in effect after you log out"
		 FORM)
	  ELSE DO (PUSH UNDO-FORM LOGOUT-LIST))))
||#

;Obsolete but documented
(DEFUN LOGIN-EVAL (X)	;Value returned by such a form is how to undo it
  (PUSH X LOGOUT-LIST))

;;Obsolete but documented
(DEFMACRO LOGIN-SETQ (&REST PAIRS &ENVIRONMENT ENV)
  (LOOP WITH LOGIN-FORMS = NIL
	FOR (VAR FORM) ON PAIRS BY 'CDDR
	DO (COND ;; Standard value
		 ((ASSQ VAR *STANDARD-BINDINGS*)
		  (PUSH `(SETQ-STANDARD-VALUE ,VAR ,FORM) LOGIN-FORMS))
		 ;; Symbol macro (for Zwei things)
		 ((LT:SYMBOL-MACRO-P VAR ENV)		  
		  (PUSH `(SETF ,VAR ,FORM) LOGIN-FORMS))
		 ((LT:NAMED-CONSTANT-P VAR ENV)
		  (FERROR "You can't SETQ the named constant ~S." VAR))
		 ;; Declared variable
		 ((LT:GLOBAL-SPECIAL-VARIABLE-P VAR ENV)
		  (PUSH `(SETQ-GLOBALLY ,VAR ,FORM) LOGIN-FORMS))
		 ;; If it weren't for editor "hooks", I'd ferror here  --SWM
		 (T
		  (PUSH `(SETQ ,VAR ,FORM) LOGIN-FORMS)))
	FINALLY (RETURN `(LOGIN-FORMS ,@LOGIN-FORMS))))

(COMMENT
  (DEFMACRO LOGIN-SETQ (&REST L)
    `(LOGIN-FORMS (SETQ ,@L))))

(COMMENT
  (DEFUN LOGIN-SETQ (&QUOTE &REST L)		;Undoing SETQ
    (DO L L (CDDR L) (NULL L)
	(LET ((VAR (CAR L)))
	  (CHECK-SYMBOL-SETABILITY VAR "set")
	  (COND ((BOUNDP VAR)
		 (PUSH `(SETQ ,VAR ',(SYMEVAL VAR)) LOGOUT-LIST))
		(T (PUSH `(MAKUNBOUND ',VAR) LOGOUT-LIST)))
	  (SET VAR (EVAL (CADR L)))))))

;Obsolete, apparently undocumented, and the comments are wrong too!
;Undoable FDEFINE.
;It would be nice if there were FUNDEFINE.
(DEFUN LOGIN-FDEFINE (FUNCTION-NAME DEFINITION)  ;Undoing FDEFINE
  (AND (FDEFINEDP FUNCTION-NAME)
       (PUSH `(FDEFINE ',FUNCTION-NAME ',(FDEFINITION FUNCTION-NAME)) LOGOUT-LIST))
  (FDEFINE FUNCTION-NAME DEFINITION))

;;; Used for system things that must load a file before the user is able to log in.
;;; The LISP-MACHINE user must be defined in each namespace to be the right local account.
(DEFUN LOGIN-TO-SYS-HOST ()
  (LOGIN "LISP-MACHINE" ':LOAD-INIT-FILE NIL ':NO-QUERY-WHEN-UNKNOWN T))

(DEFUN LOGGED-IN-TO-SYS-HOST ()
  (LET ((USER-NAME (SEND *USER* :PRIMARY-NAME)))
    (AND (NOT (STRINGP USER-NAME))
	 (STRING-EQUAL (SEND USER-NAME :STRING) "LISP-MACHINE"))))

;;; Register the current user
(DEFUN OBJECTIFY-USER ()
  (LET ((PLIST (LET* ((HOME-HOST FS:USER-LOGIN-MACHINE)
		      (HOME-USER (SEND HOME-HOST ':HOST-USER-ID)))
		 `(:LISPM-NAME ,USER-ID
		   :HOME-HOST ,HOME-HOST
		   :LOGIN-NAME ((,HOME-USER ,HOME-HOST))
		   :MAIL-ADDRESS (,(IF (STRING-EQUAL HOME-USER USER-ID)
				       USER-ID HOME-USER)	;Try to keep case
				  ,HOME-HOST))))
	(NAME (NETI:PARSE-AND-INTERN-NAME :USER (STRING-UPCASE USER-ID) NET:*NAMESPACE* NIL)))
    (UNLESS (EQUAL FS:USER-PERSONAL-NAME "")
      (SETF (CL:GETF PLIST :PERSONAL-NAME) FS:USER-PERSONAL-NAME))
    (CL-NETI::COM-CREATE-NAMESPACE-OBJECT :USER NAME :PROPERTY-LIST PLIST)
    (NETI:FIND-OBJECT-NAMED :USER NAME)))

(DEFUN MAKE-LOGIN-SLOWER ()
  (LET ((BIRTHDAY (SEND *USER* ':BIRTHDAY)))
    (UNLESS (OR (NULL BIRTHDAY)
		(NOT (VARIABLE-BOUNDP #'TIME:PARSE)))
      (IGNORE-ERRORS				;Maximally conservative
	(MULTIPLE-VALUE-BIND (NIL NIL NIL BDAY BMONTH)
	    (TIME:PARSE BIRTHDAY)
	  (MULTIPLE-VALUE-BIND (NIL NIL NIL DAY MONTH)
	      (TIME:GET-TIME)
	    (WHEN (AND (EQ BDAY DAY) (EQ BMONTH MONTH))
	      (FORMAT T "~&Happy Birthday.~%"))))))))
